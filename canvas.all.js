(function(t) {
    "use strict";
    function h(t, e) {
        var a = (t & 65535) + (e & 65535);
        var i = (t >> 16) + (e >> 16) + (a >> 16);
        return i << 16 | a & 65535
    }
    function r(t, e) {
        return t << e | t >>> 32 - e
    }
    function o(t, e, a, i, s, n) {
        return h(r(h(h(e, t), h(i, n)), s), a)
    }
    function d(t, e, a, i, s, n, r) {
        return o(e & a | ~e & i, t, e, s, n, r)
    }
    function v(t, e, a, i, s, n, r) {
        return o(e & i | a & ~i, t, e, s, n, r)
    }
    function u(t, e, a, i, s, n, r) {
        return o(e ^ a ^ i, t, e, s, n, r)
    }
    function m(t, e, a, i, s, n, r) {
        return o(a ^ (e | ~i), t, e, s, n, r)
    }
    function l(t, e) {
        t[e >> 5] |= 128 << e % 32;
        t[(e + 64 >>> 9 << 4) + 14] = e;
        var a;
        var i;
        var s;
        var n;
        var r;
        var o = 1732584193;
        var l = -271733879;
        var c = -1732584194;
        var p = 271733878;
        for (a = 0; a < t.length; a += 16) {
            i = o;
            s = l;
            n = c;
            r = p;
            o = d(o, l, c, p, t[a], 7, -680876936);
            p = d(p, o, l, c, t[a + 1], 12, -389564586);
            c = d(c, p, o, l, t[a + 2], 17, 606105819);
            l = d(l, c, p, o, t[a + 3], 22, -1044525330);
            o = d(o, l, c, p, t[a + 4], 7, -176418897);
            p = d(p, o, l, c, t[a + 5], 12, 1200080426);
            c = d(c, p, o, l, t[a + 6], 17, -1473231341);
            l = d(l, c, p, o, t[a + 7], 22, -45705983);
            o = d(o, l, c, p, t[a + 8], 7, 1770035416);
            p = d(p, o, l, c, t[a + 9], 12, -1958414417);
            c = d(c, p, o, l, t[a + 10], 17, -42063);
            l = d(l, c, p, o, t[a + 11], 22, -1990404162);
            o = d(o, l, c, p, t[a + 12], 7, 1804603682);
            p = d(p, o, l, c, t[a + 13], 12, -40341101);
            c = d(c, p, o, l, t[a + 14], 17, -1502002290);
            l = d(l, c, p, o, t[a + 15], 22, 1236535329);
            o = v(o, l, c, p, t[a + 1], 5, -165796510);
            p = v(p, o, l, c, t[a + 6], 9, -1069501632);
            c = v(c, p, o, l, t[a + 11], 14, 643717713);
            l = v(l, c, p, o, t[a], 20, -373897302);
            o = v(o, l, c, p, t[a + 5], 5, -701558691);
            p = v(p, o, l, c, t[a + 10], 9, 38016083);
            c = v(c, p, o, l, t[a + 15], 14, -660478335);
            l = v(l, c, p, o, t[a + 4], 20, -405537848);
            o = v(o, l, c, p, t[a + 9], 5, 568446438);
            p = v(p, o, l, c, t[a + 14], 9, -1019803690);
            c = v(c, p, o, l, t[a + 3], 14, -187363961);
            l = v(l, c, p, o, t[a + 8], 20, 1163531501);
            o = v(o, l, c, p, t[a + 13], 5, -1444681467);
            p = v(p, o, l, c, t[a + 2], 9, -51403784);
            c = v(c, p, o, l, t[a + 7], 14, 1735328473);
            l = v(l, c, p, o, t[a + 12], 20, -1926607734);
            o = u(o, l, c, p, t[a + 5], 4, -378558);
            p = u(p, o, l, c, t[a + 8], 11, -2022574463);
            c = u(c, p, o, l, t[a + 11], 16, 1839030562);
            l = u(l, c, p, o, t[a + 14], 23, -35309556);
            o = u(o, l, c, p, t[a + 1], 4, -1530992060);
            p = u(p, o, l, c, t[a + 4], 11, 1272893353);
            c = u(c, p, o, l, t[a + 7], 16, -155497632);
            l = u(l, c, p, o, t[a + 10], 23, -1094730640);
            o = u(o, l, c, p, t[a + 13], 4, 681279174);
            p = u(p, o, l, c, t[a], 11, -358537222);
            c = u(c, p, o, l, t[a + 3], 16, -722521979);
            l = u(l, c, p, o, t[a + 6], 23, 76029189);
            o = u(o, l, c, p, t[a + 9], 4, -640364487);
            p = u(p, o, l, c, t[a + 12], 11, -421815835);
            c = u(c, p, o, l, t[a + 15], 16, 530742520);
            l = u(l, c, p, o, t[a + 2], 23, -995338651);
            o = m(o, l, c, p, t[a], 6, -198630844);
            p = m(p, o, l, c, t[a + 7], 10, 1126891415);
            c = m(c, p, o, l, t[a + 14], 15, -1416354905);
            l = m(l, c, p, o, t[a + 5], 21, -57434055);
            o = m(o, l, c, p, t[a + 12], 6, 1700485571);
            p = m(p, o, l, c, t[a + 3], 10, -1894986606);
            c = m(c, p, o, l, t[a + 10], 15, -1051523);
            l = m(l, c, p, o, t[a + 1], 21, -2054922799);
            o = m(o, l, c, p, t[a + 8], 6, 1873313359);
            p = m(p, o, l, c, t[a + 15], 10, -30611744);
            c = m(c, p, o, l, t[a + 6], 15, -1560198380);
            l = m(l, c, p, o, t[a + 13], 21, 1309151649);
            o = m(o, l, c, p, t[a + 4], 6, -145523070);
            p = m(p, o, l, c, t[a + 11], 10, -1120210379);
            c = m(c, p, o, l, t[a + 2], 15, 718787259);
            l = m(l, c, p, o, t[a + 9], 21, -343485551);
            o = h(o, i);
            l = h(l, s);
            c = h(c, n);
            p = h(p, r)
        }
        return [o, l, c, p]
    }
    function c(t) {
        var e;
        var a = "";
        var i = t.length * 32;
        for (e = 0; e < i; e += 8) {
            a += String.fromCharCode(t[e >> 5] >>> e % 32 & 255)
        }
        return a
    }
    function p(t) {
        var e;
        var a = [];
        a[(t.length >> 2) - 1] = undefined;
        for (e = 0; e < a.length; e += 1) {
            a[e] = 0
        }
        var i = t.length * 8;
        for (e = 0; e < i; e += 8) {
            a[e >> 5] |= (t.charCodeAt(e / 8) & 255) << e % 32
        }
        return a
    }
    function e(t) {
        return c(l(p(t), t.length * 8))
    }
    function a(t, e) {
        var a;
        var i = p(t);
        var s = [];
        var n = [];
        var r;
        s[15] = n[15] = undefined;
        if (i.length > 16) {
            i = l(i, t.length * 8)
        }
        for (a = 0; a < 16; a += 1) {
            s[a] = i[a] ^ 909522486;
            n[a] = i[a] ^ 1549556828
        }
        r = l(s.concat(p(e)), 512 + e.length * 8);
        return c(l(n.concat(r), 512 + 128))
    }
    function i(t) {
        var e = "0123456789abcdef";
        var a = "";
        var i;
        var s;
        for (s = 0; s < t.length; s += 1) {
            i = t.charCodeAt(s);
            a += e.charAt(i >>> 4 & 15) + e.charAt(i & 15)
        }
        return a
    }
    function s(t) {
        return unescape(encodeURIComponent(t))
    }
    function n(t) {
        return e(s(t))
    }
    function f(t) {
        return i(n(t))
    }
    function _(t, e) {
        return a(s(t), s(e))
    }
    function g(t, e) {
        return i(_(t, e))
    }
    function w(t, e, a) {
        if (!e) {
            if (!a) {
                return f(t)
            }
            return n(t)
        }
        if (!a) {
            return g(e, t)
        }
        return _(e, t)
    }
    if (typeof define === "function" && define.amd) {
        define(function() {
            return w
        })
    } else if (typeof module === "object" && module.exports) {
        module.exports = w
    } else {
        t.md5 = w
    }
}
)(this);
(function() {
    "use strict";
    var t = function() {
        this.init()
    };
    t.prototype = {
        init: function() {
            var t = this || f;
            t._counter = 1e3;
            t._codecs = {};
            t._howls = [];
            t._muted = false;
            t._volume = 1;
            t._canPlayEvent = "canplaythrough";
            t._navigator = typeof window !== "undefined" && window.navigator ? window.navigator : null;
            t.masterGain = null;
            t.noAudio = false;
            t.usingWebAudio = true;
            t.autoSuspend = true;
            t.ctx = null;
            t.mobileAutoEnable = true;
            t._setup();
            return t
        },
        volume: function(t) {
            var e = this || f;
            t = parseFloat(t);
            if (!e.ctx) {
                h()
            }
            if (typeof t !== "undefined" && t >= 0 && t <= 1) {
                e._volume = t;
                if (e._muted) {
                    return e
                }
                if (e.usingWebAudio) {
                    e.masterGain.gain.setValueAtTime(t, f.ctx.currentTime)
                }
                for (var a = 0; a < e._howls.length; a++) {
                    if (!e._howls[a]._webAudio) {
                        var i = e._howls[a]._getSoundIds();
                        for (var s = 0; s < i.length; s++) {
                            var n = e._howls[a]._soundById(i[s]);
                            if (n && n._node) {
                                n._node.volume = n._volume * t
                            }
                        }
                    }
                }
                return e
            }
            return e._volume
        },
        mute: function(t) {
            var e = this || f;
            if (!e.ctx) {
                h()
            }
            e._muted = t;
            if (e.usingWebAudio) {
                e.masterGain.gain.setValueAtTime(t ? 0 : e._volume, f.ctx.currentTime)
            }
            for (var a = 0; a < e._howls.length; a++) {
                if (!e._howls[a]._webAudio) {
                    var i = e._howls[a]._getSoundIds();
                    for (var s = 0; s < i.length; s++) {
                        var n = e._howls[a]._soundById(i[s]);
                        if (n && n._node) {
                            n._node.muted = t ? true : n._muted
                        }
                    }
                }
            }
            return e
        },
        unload: function() {
            var t = this || f;
            for (var e = t._howls.length - 1; e >= 0; e--) {
                t._howls[e].unload()
            }
            if (t.usingWebAudio && t.ctx && typeof t.ctx.close !== "undefined") {
                t.ctx.close();
                t.ctx = null;
                h()
            }
            return t
        },
        codecs: function(t) {
            return (this || f)._codecs[t.replace(/^x-/, "")]
        },
        _setup: function() {
            var e = this || f;
            e.state = e.ctx ? e.ctx.state || "running" : "running";
            e._autoSuspend();
            if (!e.usingWebAudio) {
                if (typeof Audio !== "undefined") {
                    try {
                        var t = new Audio;
                        if (typeof t.oncanplaythrough === "undefined") {
                            e._canPlayEvent = "canplay"
                        }
                    } catch (t) {
                        e.noAudio = true
                    }
                } else {
                    e.noAudio = true
                }
            }
            try {
                var t = new Audio;
                if (t.muted) {
                    e.noAudio = true
                }
            } catch (t) {}
            if (!e.noAudio) {
                e._setupCodecs()
            }
            return e
        },
        _setupCodecs: function() {
            var e = this || f;
            var t = null;
            try {
                t = typeof Audio !== "undefined" ? new Audio : null
            } catch (t) {
                return e
            }
            if (!t || typeof t.canPlayType !== "function") {
                return e
            }
            var a = t.canPlayType("audio/mpeg;").replace(/^no$/, "");
            var i = e._navigator && e._navigator.userAgent.match(/OPR\/([0-6].)/g);
            var s = i && parseInt(i[0].split("/")[1], 10) < 33;
            e._codecs = {
                mp3: !!(!s && (a || t.canPlayType("audio/mp3;").replace(/^no$/, ""))),
                mpeg: !!a,
                opus: !!t.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
                ogg: !!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                oga: !!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                wav: !!t.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ""),
                aac: !!t.canPlayType("audio/aac;").replace(/^no$/, ""),
                caf: !!t.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                m4a: !!(t.canPlayType("audio/x-m4a;") || t.canPlayType("audio/m4a;") || t.canPlayType("audio/aac;")).replace(/^no$/, ""),
                mp4: !!(t.canPlayType("audio/x-mp4;") || t.canPlayType("audio/mp4;") || t.canPlayType("audio/aac;")).replace(/^no$/, ""),
                weba: !!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                webm: !!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                dolby: !!t.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
                flac: !!(t.canPlayType("audio/x-flac;") || t.canPlayType("audio/flac;")).replace(/^no$/, "")
            };
            return e
        },
        _enableMobileAudio: function() {
            var e = this || f;
            var t = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(e._navigator && e._navigator.userAgent);
            var a = !!("ontouchend"in window || e._navigator && e._navigator.maxTouchPoints > 0 || e._navigator && e._navigator.msMaxTouchPoints > 0);
            if (e._mobileEnabled || !e.ctx || !t && !a) {
                return
            }
            e._mobileEnabled = false;
            if (!e._mobileUnloaded && e.ctx.sampleRate !== 44100) {
                e._mobileUnloaded = true;
                e.unload()
            }
            e._scratchBuffer = e.ctx.createBuffer(1, 1, 22050);
            var i = function() {
                f._autoResume();
                var t = e.ctx.createBufferSource();
                t.buffer = e._scratchBuffer;
                t.connect(e.ctx.destination);
                if (typeof t.start === "undefined") {
                    t.noteOn(0)
                } else {
                    t.start(0)
                }
                if (typeof e.ctx.resume === "function") {
                    e.ctx.resume()
                }
                t.onended = function() {
                    t.disconnect(0);
                    e._mobileEnabled = true;
                    e.mobileAutoEnable = false;
                    document.removeEventListener("touchstart", i, true);
                    document.removeEventListener("touchend", i, true)
                }
            };
            document.addEventListener("touchstart", i, true);
            document.addEventListener("touchend", i, true);
            return e
        },
        _autoSuspend: function() {
            var t = this;
            if (!t.autoSuspend || !t.ctx || typeof t.ctx.suspend === "undefined" || !f.usingWebAudio) {
                return
            }
            for (var e = 0; e < t._howls.length; e++) {
                if (t._howls[e]._webAudio) {
                    for (var a = 0; a < t._howls[e]._sounds.length; a++) {
                        if (!t._howls[e]._sounds[a]._paused) {
                            return t
                        }
                    }
                }
            }
            if (t._suspendTimer) {
                clearTimeout(t._suspendTimer)
            }
            t._suspendTimer = setTimeout(function() {
                if (!t.autoSuspend) {
                    return
                }
                t._suspendTimer = null;
                t.state = "suspending";
                t.ctx.suspend().then(function() {
                    t.state = "suspended";
                    if (t._resumeAfterSuspend) {
                        delete t._resumeAfterSuspend;
                        t._autoResume()
                    }
                })
            }, 3e4);
            return t
        },
        _autoResume: function() {
            var e = this;
            if (!e.ctx || typeof e.ctx.resume === "undefined" || !f.usingWebAudio) {
                return
            }
            if (e.state === "running" && e._suspendTimer) {
                clearTimeout(e._suspendTimer);
                e._suspendTimer = null
            } else if (e.state === "suspended") {
                e.ctx.resume().then(function() {
                    e.state = "running";
                    for (var t = 0; t < e._howls.length; t++) {
                        e._howls[t]._emit("resume")
                    }
                });
                if (e._suspendTimer) {
                    clearTimeout(e._suspendTimer);
                    e._suspendTimer = null
                }
            } else if (e.state === "suspending") {
                e._resumeAfterSuspend = true
            }
            return e
        }
    };
    var f = new t;
    var e = function(t) {
        var e = this;
        if (!t.src || t.src.length === 0) {
            console.error("An array of source files must be passed with any new Howl.");
            return
        }
        e.init(t)
    };
    e.prototype = {
        init: function(t) {
            var e = this;
            if (!f.ctx) {
                h()
            }
            e._autoplay = t.autoplay || false;
            e._format = typeof t.format !== "string" ? t.format : [t.format];
            e._html5 = t.html5 || false;
            e._muted = t.mute || false;
            e._loop = t.loop || false;
            e._pool = t.pool || 5;
            e._preload = typeof t.preload === "boolean" ? t.preload : true;
            e._rate = t.rate || 1;
            e._sprite = t.sprite || {};
            e._src = typeof t.src !== "string" ? t.src : [t.src];
            e._volume = t.volume !== undefined ? t.volume : 1;
            e._xhrWithCredentials = t.xhrWithCredentials || false;
            e._duration = 0;
            e._state = "unloaded";
            e._sounds = [];
            e._endTimers = {};
            e._queue = [];
            e._playLock = false;
            e._onend = t.onend ? [{
                fn: t.onend
            }] : [];
            e._onfade = t.onfade ? [{
                fn: t.onfade
            }] : [];
            e._onload = t.onload ? [{
                fn: t.onload
            }] : [];
            e._onloaderror = t.onloaderror ? [{
                fn: t.onloaderror
            }] : [];
            e._onplayerror = t.onplayerror ? [{
                fn: t.onplayerror
            }] : [];
            e._onpause = t.onpause ? [{
                fn: t.onpause
            }] : [];
            e._onplay = t.onplay ? [{
                fn: t.onplay
            }] : [];
            e._onstop = t.onstop ? [{
                fn: t.onstop
            }] : [];
            e._onmute = t.onmute ? [{
                fn: t.onmute
            }] : [];
            e._onvolume = t.onvolume ? [{
                fn: t.onvolume
            }] : [];
            e._onrate = t.onrate ? [{
                fn: t.onrate
            }] : [];
            e._onseek = t.onseek ? [{
                fn: t.onseek
            }] : [];
            e._onresume = [];
            e._webAudio = f.usingWebAudio && !e._html5;
            if (typeof f.ctx !== "undefined" && f.ctx && f.mobileAutoEnable) {
                f._enableMobileAudio()
            }
            f._howls.push(e);
            if (e._autoplay) {
                e._queue.push({
                    event: "play",
                    action: function() {
                        e.play()
                    }
                })
            }
            if (e._preload) {
                e.load()
            }
            return e
        },
        load: function() {
            var t = this;
            var e = null;
            if (f.noAudio) {
                t._emit("loaderror", null, "No audio support.");
                return
            }
            if (typeof t._src === "string") {
                t._src = [t._src]
            }
            for (var a = 0; a < t._src.length; a++) {
                var i, s;
                if (t._format && t._format[a]) {
                    i = t._format[a]
                } else {
                    s = t._src[a];
                    if (typeof s !== "string") {
                        t._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                        continue
                    }
                    i = /^data:audio\/([^;,]+);/i.exec(s);
                    if (!i) {
                        i = /\.([^.]+)$/.exec(s.split("?", 1)[0])
                    }
                    if (i) {
                        i = i[1].toLowerCase()
                    }
                }
                if (!i) {
                    console.warn('No file extension was found. Consider using the "format" property or specify an extension.')
                }
                if (i && f.codecs(i)) {
                    e = t._src[a];
                    break
                }
            }
            if (!e) {
                t._emit("loaderror", null, "No codec support for selected audio sources.");
                return
            }
            t._src = e;
            t._state = "loading";
            if (window.location.protocol === "https:" && e.slice(0, 5) === "http:") {
                t._html5 = true;
                t._webAudio = false
            }
            new n(t);
            if (t._webAudio) {
                o(t)
            }
            return t
        },
        play: function(t, e) {
            var a = this;
            var i = null;
            if (typeof t === "number") {
                i = t;
                t = null
            } else if (typeof t === "string" && a._state === "loaded" && !a._sprite[t]) {
                return null
            } else if (typeof t === "undefined") {
                t = "__default";
                var s = 0;
                for (var n = 0; n < a._sounds.length; n++) {
                    if (a._sounds[n]._paused && !a._sounds[n]._ended) {
                        s++;
                        i = a._sounds[n]._id
                    }
                }
                if (s === 1) {
                    t = null
                } else {
                    i = null
                }
            }
            var r = i ? a._soundById(i) : a._inactiveSound();
            if (!r) {
                return null
            }
            if (i && !t) {
                t = r._sprite || "__default"
            }
            if (a._state !== "loaded") {
                r._sprite = t;
                r._ended = false;
                var o = r._id;
                a._queue.push({
                    event: "play",
                    action: function() {
                        a.play(o)
                    }
                });
                return o
            }
            if (i && !r._paused) {
                if (!e) {
                    setTimeout(function() {
                        a._emit("play", r._id)
                    }, 0)
                }
                return r._id
            }
            if (a._webAudio) {
                f._autoResume()
            }
            var l = Math.max(0, r._seek > 0 ? r._seek : a._sprite[t][0] / 1e3);
            var c = Math.max(0, (a._sprite[t][0] + a._sprite[t][1]) / 1e3 - l);
            var p = c * 1e3 / Math.abs(r._rate);
            r._paused = false;
            r._ended = false;
            r._sprite = t;
            r._seek = l;
            r._start = a._sprite[t][0] / 1e3;
            r._stop = (a._sprite[t][0] + a._sprite[t][1]) / 1e3;
            r._loop = !!(r._loop || a._sprite[t][2]);
            var h = r._node;
            if (a._webAudio) {
                var d = function() {
                    a._refreshBuffer(r);
                    var t = r._muted || a._muted ? 0 : r._volume;
                    h.gain.setValueAtTime(t, f.ctx.currentTime);
                    r._playStart = f.ctx.currentTime;
                    if (typeof h.bufferSource.start === "undefined") {
                        r._loop ? h.bufferSource.noteGrainOn(0, l, 86400) : h.bufferSource.noteGrainOn(0, l, c)
                    } else {
                        r._loop ? h.bufferSource.start(0, l, 86400) : h.bufferSource.start(0, l, c)
                    }
                    if (p !== Infinity) {
                        a._endTimers[r._id] = setTimeout(a._ended.bind(a, r), p)
                    }
                    if (!e) {
                        setTimeout(function() {
                            a._emit("play", r._id)
                        }, 0)
                    }
                };
                if (f.state === "running") {
                    d()
                } else {
                    a.once("resume", d);
                    a._clearTimer(r._id)
                }
            } else {
                var v = function() {
                    h.currentTime = l;
                    h.muted = r._muted || a._muted || f._muted || h.muted;
                    h.volume = r._volume * f.volume();
                    h.playbackRate = r._rate;
                    try {
                        var t = h.play();
                        if (typeof Promise !== "undefined" && t instanceof Promise) {
                            a._playLock = true;
                            t.then(function() {
                                a._playLock = false;
                                a._loadQueue()
                            })
                        }
                        if (h.paused) {
                            a._emit("playerror", r._id, "Playback was unable to start. This is most commonly an issue " + "on mobile devices where playback was not within a user interaction.");
                            return
                        }
                        if (p !== Infinity) {
                            a._endTimers[r._id] = setTimeout(a._ended.bind(a, r), p)
                        }
                        if (!e) {
                            a._emit("play", r._id)
                        }
                    } catch (t) {
                        a._emit("playerror", r._id, t)
                    }
                };
                var u = window && window.ejecta || !h.readyState && f._navigator.isCocoonJS;
                if (h.readyState === 4 || u) {
                    v()
                } else {
                    var m = function() {
                        v();
                        h.removeEventListener(f._canPlayEvent, m, false)
                    };
                    h.addEventListener(f._canPlayEvent, m, false);
                    a._clearTimer(r._id)
                }
            }
            return r._id
        },
        pause: function(t) {
            var e = this;
            if (e._state !== "loaded" || e._playLock) {
                e._queue.push({
                    event: "pause",
                    action: function() {
                        e.pause(t)
                    }
                });
                return e
            }
            var a = e._getSoundIds(t);
            for (var i = 0; i < a.length; i++) {
                e._clearTimer(a[i]);
                var s = e._soundById(a[i]);
                if (s && !s._paused) {
                    s._seek = e.seek(a[i]);
                    s._rateSeek = 0;
                    s._paused = true;
                    e._stopFade(a[i]);
                    if (s._node) {
                        if (e._webAudio) {
                            if (!s._node.bufferSource) {
                                continue
                            }
                            if (typeof s._node.bufferSource.stop === "undefined") {
                                s._node.bufferSource.noteOff(0)
                            } else {
                                s._node.bufferSource.stop(0)
                            }
                            e._cleanBuffer(s._node)
                        } else if (!isNaN(s._node.duration) || s._node.duration === Infinity) {
                            s._node.pause()
                        }
                    }
                }
                if (!arguments[1]) {
                    e._emit("pause", s ? s._id : null)
                }
            }
            return e
        },
        stop: function(t, e) {
            var a = this;
            if (a._state !== "loaded") {
                a._queue.push({
                    event: "stop",
                    action: function() {
                        a.stop(t)
                    }
                });
                return a
            }
            var i = a._getSoundIds(t);
            for (var s = 0; s < i.length; s++) {
                a._clearTimer(i[s]);
                var n = a._soundById(i[s]);
                if (n) {
                    n._seek = n._start || 0;
                    n._rateSeek = 0;
                    n._paused = true;
                    n._ended = true;
                    a._stopFade(i[s]);
                    if (n._node) {
                        if (a._webAudio) {
                            if (n._node.bufferSource) {
                                if (typeof n._node.bufferSource.stop === "undefined") {
                                    n._node.bufferSource.noteOff(0)
                                } else {
                                    n._node.bufferSource.stop(0)
                                }
                                a._cleanBuffer(n._node)
                            }
                        } else if (!isNaN(n._node.duration) || n._node.duration === Infinity) {
                            n._node.currentTime = n._start || 0;
                            n._node.pause()
                        }
                    }
                    if (!e) {
                        a._emit("stop", n._id)
                    }
                }
            }
            return a
        },
        mute: function(t, e) {
            var a = this;
            if (a._state !== "loaded") {
                a._queue.push({
                    event: "mute",
                    action: function() {
                        a.mute(t, e)
                    }
                });
                return a
            }
            if (typeof e === "undefined") {
                if (typeof t === "boolean") {
                    a._muted = t
                } else {
                    return a._muted
                }
            }
            var i = a._getSoundIds(e);
            for (var s = 0; s < i.length; s++) {
                var n = a._soundById(i[s]);
                if (n) {
                    n._muted = t;
                    if (n._interval) {
                        a._stopFade(n._id)
                    }
                    if (a._webAudio && n._node) {
                        n._node.gain.setValueAtTime(t ? 0 : n._volume, f.ctx.currentTime)
                    } else if (n._node) {
                        n._node.muted = f._muted ? true : t
                    }
                    a._emit("mute", n._id)
                }
            }
            return a
        },
        volume: function() {
            var t = this;
            var e = arguments;
            var a, i;
            if (e.length === 0) {
                return t._volume
            } else if (e.length === 1 || e.length === 2 && typeof e[1] === "undefined") {
                var s = t._getSoundIds();
                var n = s.indexOf(e[0]);
                if (n >= 0) {
                    i = parseInt(e[0], 10)
                } else {
                    a = parseFloat(e[0])
                }
            } else if (e.length >= 2) {
                a = parseFloat(e[0]);
                i = parseInt(e[1], 10)
            }
            var r;
            if (typeof a !== "undefined" && a >= 0 && a <= 1) {
                if (t._state !== "loaded") {
                    t._queue.push({
                        event: "volume",
                        action: function() {
                            t.volume.apply(t, e)
                        }
                    });
                    return t
                }
                if (typeof i === "undefined") {
                    t._volume = a
                }
                i = t._getSoundIds(i);
                for (var o = 0; o < i.length; o++) {
                    r = t._soundById(i[o]);
                    if (r) {
                        r._volume = a;
                        if (!e[2]) {
                            t._stopFade(i[o])
                        }
                        if (t._webAudio && r._node && !r._muted) {
                            r._node.gain.setValueAtTime(a, f.ctx.currentTime)
                        } else if (r._node && !r._muted) {
                            r._node.volume = a * f.volume()
                        }
                        t._emit("volume", r._id)
                    }
                }
            } else {
                r = i ? t._soundById(i) : t._sounds[0];
                return r ? r._volume : 0
            }
            return t
        },
        fade: function(t, e, a, i) {
            var s = this;
            if (s._state !== "loaded") {
                s._queue.push({
                    event: "fade",
                    action: function() {
                        s.fade(t, e, a, i)
                    }
                });
                return s
            }
            s.volume(t, i);
            var n = s._getSoundIds(i);
            for (var r = 0; r < n.length; r++) {
                var o = s._soundById(n[r]);
                if (o) {
                    if (!i) {
                        s._stopFade(n[r])
                    }
                    if (s._webAudio && !o._muted) {
                        var l = f.ctx.currentTime;
                        var c = l + a / 1e3;
                        o._volume = t;
                        o._node.gain.setValueAtTime(t, l);
                        o._node.gain.linearRampToValueAtTime(e, c)
                    }
                    s._startFadeInterval(o, t, e, a, n[r], typeof i === "undefined")
                }
            }
            return s
        },
        _startFadeInterval: function(e, a, i, s, t, n) {
            var r = this;
            var o = a;
            var l = i - a;
            var c = Math.abs(l / .01);
            var p = Math.max(4, c > 0 ? s / c : s);
            var h = Date.now();
            e._fadeTo = i;
            e._interval = setInterval(function() {
                var t = (Date.now() - h) / s;
                h = Date.now();
                o += l * t;
                o = Math.max(0, o);
                o = Math.min(1, o);
                o = Math.round(o * 100) / 100;
                if (r._webAudio) {
                    e._volume = o
                } else {
                    r.volume(o, e._id, true)
                }
                if (n) {
                    r._volume = o
                }
                if (i < a && o <= i || i > a && o >= i) {
                    clearInterval(e._interval);
                    e._interval = null;
                    e._fadeTo = null;
                    r.volume(i, e._id);
                    r._emit("fade", e._id)
                }
            }, p)
        },
        _stopFade: function(t) {
            var e = this;
            var a = e._soundById(t);
            if (a && a._interval) {
                if (e._webAudio) {
                    a._node.gain.cancelScheduledValues(f.ctx.currentTime)
                }
                clearInterval(a._interval);
                a._interval = null;
                e.volume(a._fadeTo, t);
                a._fadeTo = null;
                e._emit("fade", t)
            }
            return e
        },
        loop: function() {
            var t = this;
            var e = arguments;
            var a, i, s;
            if (e.length === 0) {
                return t._loop
            } else if (e.length === 1) {
                if (typeof e[0] === "boolean") {
                    a = e[0];
                    t._loop = a
                } else {
                    s = t._soundById(parseInt(e[0], 10));
                    return s ? s._loop : false
                }
            } else if (e.length === 2) {
                a = e[0];
                i = parseInt(e[1], 10)
            }
            var n = t._getSoundIds(i);
            for (var r = 0; r < n.length; r++) {
                s = t._soundById(n[r]);
                if (s) {
                    s._loop = a;
                    if (t._webAudio && s._node && s._node.bufferSource) {
                        s._node.bufferSource.loop = a;
                        if (a) {
                            s._node.bufferSource.loopStart = s._start || 0;
                            s._node.bufferSource.loopEnd = s._stop
                        }
                    }
                }
            }
            return t
        },
        rate: function() {
            var t = this;
            var e = arguments;
            var a, i;
            if (e.length === 0) {
                i = t._sounds[0]._id
            } else if (e.length === 1) {
                var s = t._getSoundIds();
                var n = s.indexOf(e[0]);
                if (n >= 0) {
                    i = parseInt(e[0], 10)
                } else {
                    a = parseFloat(e[0])
                }
            } else if (e.length === 2) {
                a = parseFloat(e[0]);
                i = parseInt(e[1], 10)
            }
            var r;
            if (typeof a === "number") {
                if (t._state !== "loaded") {
                    t._queue.push({
                        event: "rate",
                        action: function() {
                            t.rate.apply(t, e)
                        }
                    });
                    return t
                }
                if (typeof i === "undefined") {
                    t._rate = a
                }
                i = t._getSoundIds(i);
                for (var o = 0; o < i.length; o++) {
                    r = t._soundById(i[o]);
                    if (r) {
                        r._rateSeek = t.seek(i[o]);
                        r._playStart = t._webAudio ? f.ctx.currentTime : r._playStart;
                        r._rate = a;
                        if (t._webAudio && r._node && r._node.bufferSource) {
                            r._node.bufferSource.playbackRate.setValueAtTime(a, f.ctx.currentTime)
                        } else if (r._node) {
                            r._node.playbackRate = a
                        }
                        var l = t.seek(i[o]);
                        var c = (t._sprite[r._sprite][0] + t._sprite[r._sprite][1]) / 1e3 - l;
                        var p = c * 1e3 / Math.abs(r._rate);
                        if (t._endTimers[i[o]] || !r._paused) {
                            t._clearTimer(i[o]);
                            t._endTimers[i[o]] = setTimeout(t._ended.bind(t, r), p)
                        }
                        t._emit("rate", r._id)
                    }
                }
            } else {
                r = t._soundById(i);
                return r ? r._rate : t._rate
            }
            return t
        },
        seek: function() {
            var t = this;
            var e = arguments;
            var a, i;
            if (e.length === 0) {
                i = t._sounds[0]._id
            } else if (e.length === 1) {
                var s = t._getSoundIds();
                var n = s.indexOf(e[0]);
                if (n >= 0) {
                    i = parseInt(e[0], 10)
                } else if (t._sounds.length) {
                    i = t._sounds[0]._id;
                    a = parseFloat(e[0])
                }
            } else if (e.length === 2) {
                a = parseFloat(e[0]);
                i = parseInt(e[1], 10)
            }
            if (typeof i === "undefined") {
                return t
            }
            if (t._state !== "loaded") {
                t._queue.push({
                    event: "seek",
                    action: function() {
                        t.seek.apply(t, e)
                    }
                });
                return t
            }
            var r = t._soundById(i);
            if (r) {
                if (typeof a === "number" && a >= 0) {
                    var o = t.playing(i);
                    if (o) {
                        t.pause(i, true)
                    }
                    r._seek = a;
                    r._ended = false;
                    t._clearTimer(i);
                    if (o) {
                        t.play(i, true)
                    }
                    if (!t._webAudio && r._node) {
                        r._node.currentTime = a
                    }
                    t._emit("seek", i)
                } else {
                    if (t._webAudio) {
                        var l = t.playing(i) ? f.ctx.currentTime - r._playStart : 0;
                        var c = r._rateSeek ? r._rateSeek - r._seek : 0;
                        return r._seek + (c + l * Math.abs(r._rate))
                    } else {
                        return r._node.currentTime
                    }
                }
            }
            return t
        },
        playing: function(t) {
            var e = this;
            if (typeof t === "number") {
                var a = e._soundById(t);
                return a ? !a._paused : false
            }
            for (var i = 0; i < e._sounds.length; i++) {
                if (!e._sounds[i]._paused) {
                    return true
                }
            }
            return false
        },
        duration: function(t) {
            var e = this;
            var a = e._duration;
            var i = e._soundById(t);
            if (i) {
                a = e._sprite[i._sprite][1] / 1e3
            }
            return a
        },
        state: function() {
            return this._state
        },
        unload: function() {
            var t = this;
            var e = t._sounds;
            for (var a = 0; a < e.length; a++) {
                if (!e[a]._paused) {
                    t.stop(e[a]._id)
                }
                if (!t._webAudio) {
                    var i = /MSIE |Trident\//.test(f._navigator && f._navigator.userAgent);
                    if (!i) {
                        e[a]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"
                    }
                    e[a]._node.removeEventListener("error", e[a]._errorFn, false);
                    e[a]._node.removeEventListener(f._canPlayEvent, e[a]._loadFn, false)
                }
                delete e[a]._node;
                t._clearTimer(e[a]._id);
                var s = f._howls.indexOf(t);
                if (s >= 0) {
                    f._howls.splice(s, 1)
                }
            }
            var n = true;
            for (a = 0; a < f._howls.length; a++) {
                if (f._howls[a]._src === t._src) {
                    n = false;
                    break
                }
            }
            if (r && n) {
                delete r[t._src]
            }
            f.noAudio = false;
            t._state = "unloaded";
            t._sounds = [];
            t = null;
            return null
        },
        on: function(t, e, a, i) {
            var s = this;
            var n = s["_on" + t];
            if (typeof e === "function") {
                n.push(i ? {
                    id: a,
                    fn: e,
                    once: i
                } : {
                    id: a,
                    fn: e
                })
            }
            return s
        },
        off: function(t, e, a) {
            var i = this;
            var s = i["_on" + t];
            var n = 0;
            if (typeof e === "number") {
                a = e;
                e = null
            }
            if (e || a) {
                for (n = 0; n < s.length; n++) {
                    var r = a === s[n].id;
                    if (e === s[n].fn && r || !e && r) {
                        s.splice(n, 1);
                        break
                    }
                }
            } else if (t) {
                i["_on" + t] = []
            } else {
                var o = Object.keys(i);
                for (n = 0; n < o.length; n++) {
                    if (o[n].indexOf("_on") === 0 && Array.isArray(i[o[n]])) {
                        i[o[n]] = []
                    }
                }
            }
            return i
        },
        once: function(t, e, a) {
            var i = this;
            i.on(t, e, a, 1);
            return i
        },
        _emit: function(t, e, a) {
            var i = this;
            var s = i["_on" + t];
            for (var n = s.length - 1; n >= 0; n--) {
                if (!s[n].id || s[n].id === e || t === "load") {
                    setTimeout(function(t) {
                        t.call(this, e, a)
                    }
                    .bind(i, s[n].fn), 0);
                    if (s[n].once) {
                        i.off(t, s[n].fn, s[n].id)
                    }
                }
            }
            return i
        },
        _loadQueue: function() {
            var t = this;
            if (t._queue.length > 0) {
                var e = t._queue[0];
                t.once(e.event, function() {
                    t._queue.shift();
                    t._loadQueue()
                });
                e.action()
            }
            return t
        },
        _ended: function(t) {
            var e = this;
            var a = t._sprite;
            if (!e._webAudio && t._node && !t._node.paused && !t._node.ended && t._node.currentTime < t._stop) {
                setTimeout(e._ended.bind(e, t), 100);
                return e
            }
            var i = !!(t._loop || e._sprite[a][2]);
            e._emit("end", t._id);
            if (!e._webAudio && i) {
                e.stop(t._id, true).play(t._id)
            }
            if (e._webAudio && i) {
                e._emit("play", t._id);
                t._seek = t._start || 0;
                t._rateSeek = 0;
                t._playStart = f.ctx.currentTime;
                var s = (t._stop - t._start) * 1e3 / Math.abs(t._rate);
                e._endTimers[t._id] = setTimeout(e._ended.bind(e, t), s)
            }
            if (e._webAudio && !i) {
                t._paused = true;
                t._ended = true;
                t._seek = t._start || 0;
                t._rateSeek = 0;
                e._clearTimer(t._id);
                e._cleanBuffer(t._node);
                f._autoSuspend()
            }
            if (!e._webAudio && !i) {
                e.stop(t._id)
            }
            return e
        },
        _clearTimer: function(t) {
            var e = this;
            if (e._endTimers[t]) {
                clearTimeout(e._endTimers[t]);
                delete e._endTimers[t]
            }
            return e
        },
        _soundById: function(t) {
            var e = this;
            for (var a = 0; a < e._sounds.length; a++) {
                if (t === e._sounds[a]._id) {
                    return e._sounds[a]
                }
            }
            return null
        },
        _inactiveSound: function() {
            var t = this;
            t._drain();
            for (var e = 0; e < t._sounds.length; e++) {
                if (t._sounds[e]._ended) {
                    return t._sounds[e].reset()
                }
            }
            return new n(t)
        },
        _drain: function() {
            var t = this;
            var e = t._pool;
            var a = 0;
            var i = 0;
            if (t._sounds.length < e) {
                return
            }
            for (i = 0; i < t._sounds.length; i++) {
                if (t._sounds[i]._ended) {
                    a++
                }
            }
            for (i = t._sounds.length - 1; i >= 0; i--) {
                if (a <= e) {
                    return
                }
                if (t._sounds[i]._ended) {
                    if (t._webAudio && t._sounds[i]._node) {
                        t._sounds[i]._node.disconnect(0)
                    }
                    t._sounds.splice(i, 1);
                    a--
                }
            }
        },
        _getSoundIds: function(t) {
            var e = this;
            if (typeof t === "undefined") {
                var a = [];
                for (var i = 0; i < e._sounds.length; i++) {
                    a.push(e._sounds[i]._id)
                }
                return a
            } else {
                return [t]
            }
        },
        _refreshBuffer: function(t) {
            var e = this;
            t._node.bufferSource = f.ctx.createBufferSource();
            t._node.bufferSource.buffer = r[e._src];
            if (t._panner) {
                t._node.bufferSource.connect(t._panner)
            } else {
                t._node.bufferSource.connect(t._node)
            }
            t._node.bufferSource.loop = t._loop;
            if (t._loop) {
                t._node.bufferSource.loopStart = t._start || 0;
                t._node.bufferSource.loopEnd = t._stop
            }
            t._node.bufferSource.playbackRate.setValueAtTime(t._rate, f.ctx.currentTime);
            return e
        },
        _cleanBuffer: function(t) {
            var e = this;
            if (f._scratchBuffer) {
                t.bufferSource.onended = null;
                t.bufferSource.disconnect(0);
                try {
                    t.bufferSource.buffer = f._scratchBuffer
                } catch (t) {}
            }
            t.bufferSource = null;
            return e
        }
    };
    var n = function(t) {
        this._parent = t;
        this.init()
    };
    n.prototype = {
        init: function() {
            var t = this;
            var e = t._parent;
            t._muted = e._muted;
            t._loop = e._loop;
            t._volume = e._volume;
            t._rate = e._rate;
            t._seek = 0;
            t._paused = true;
            t._ended = true;
            t._sprite = "__default";
            t._id = ++f._counter;
            e._sounds.push(t);
            t.create();
            return t
        },
        create: function() {
            var t = this;
            var e = t._parent;
            var a = f._muted || t._muted || t._parent._muted ? 0 : t._volume;
            if (e._webAudio) {
                t._node = typeof f.ctx.createGain === "undefined" ? f.ctx.createGainNode() : f.ctx.createGain();
                t._node.gain.setValueAtTime(a, f.ctx.currentTime);
                t._node.paused = true;
                t._node.connect(f.masterGain)
            } else {
                t._node = new Audio;
                t._errorFn = t._errorListener.bind(t);
                t._node.addEventListener("error", t._errorFn, false);
                t._loadFn = t._loadListener.bind(t);
                t._node.addEventListener(f._canPlayEvent, t._loadFn, false);
                t._node.src = e._src;
                t._node.preload = "auto";
                t._node.volume = a * f.volume();
                t._node.load()
            }
            return t
        },
        reset: function() {
            var t = this;
            var e = t._parent;
            t._muted = e._muted;
            t._loop = e._loop;
            t._volume = e._volume;
            t._rate = e._rate;
            t._seek = 0;
            t._rateSeek = 0;
            t._paused = true;
            t._ended = true;
            t._sprite = "__default";
            t._id = ++f._counter;
            return t
        },
        _errorListener: function() {
            var t = this;
            t._parent._emit("loaderror", t._id, t._node.error ? t._node.error.code : 0);
            t._node.removeEventListener("error", t._errorFn, false)
        },
        _loadListener: function() {
            var t = this;
            var e = t._parent;
            e._duration = Math.ceil(t._node.duration * 10) / 10;
            if (Object.keys(e._sprite).length === 0) {
                e._sprite = {
                    __default: [0, e._duration * 1e3]
                }
            }
            if (e._state !== "loaded") {
                e._state = "loaded";
                e._emit("load");
                e._loadQueue()
            }
            t._node.removeEventListener(f._canPlayEvent, t._loadFn, false)
        }
    };
    var r = {};
    var o = function(e) {
        var t = e._src;
        if (r[t]) {
            e._duration = r[t].duration;
            p(e);
            return
        }
        if (/^data:[^;]+;base64,/.test(t)) {
            var a = atob(t.split(",")[1]);
            var i = new Uint8Array(a.length);
            for (var s = 0; s < a.length; ++s) {
                i[s] = a.charCodeAt(s)
            }
            c(i.buffer, e)
        } else {
            var n = new XMLHttpRequest;
            n.open("GET", t, true);
            n.withCredentials = e._xhrWithCredentials;
            n.responseType = "arraybuffer";
            n.onload = function() {
                var t = (n.status + "")[0];
                if (t !== "0" && t !== "2" && t !== "3") {
                    e._emit("loaderror", null, "Failed loading audio file with status: " + n.status + ".");
                    return
                }
                c(n.response, e)
            }
            ;
            n.onerror = function() {
                if (e._webAudio) {
                    e._html5 = true;
                    e._webAudio = false;
                    e._sounds = [];
                    delete r[t];
                    e.load()
                }
            }
            ;
            l(n)
        }
    };
    var l = function(e) {
        try {
            e.send()
        } catch (t) {
            e.onerror()
        }
    };
    var c = function(t, e) {
        f.ctx.decodeAudioData(t, function(t) {
            if (t && e._sounds.length > 0) {
                r[e._src] = t;
                p(e, t)
            }
        }, function() {
            e._emit("loaderror", null, "Decoding audio data failed.")
        })
    };
    var p = function(t, e) {
        if (e && !t._duration) {
            t._duration = e.duration
        }
        if (Object.keys(t._sprite).length === 0) {
            t._sprite = {
                __default: [0, t._duration * 1e3]
            }
        }
        if (t._state !== "loaded") {
            t._state = "loaded";
            t._emit("load");
            t._loadQueue()
        }
    };
    var h = function() {
        try {
            if (typeof AudioContext !== "undefined") {
                f.ctx = new AudioContext
            } else if (typeof webkitAudioContext !== "undefined") {
                f.ctx = new webkitAudioContext
            } else {
                f.usingWebAudio = false
            }
        } catch (t) {
            f.usingWebAudio = false
        }
        var t = /iP(hone|od|ad)/.test(f._navigator && f._navigator.platform);
        var e = f._navigator && f._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        var a = e ? parseInt(e[1], 10) : null;
        if (t && a && a < 9) {
            var i = /safari/.test(f._navigator && f._navigator.userAgent.toLowerCase());
            if (f._navigator && f._navigator.standalone && !i || f._navigator && !f._navigator.standalone && !i) {
                f.usingWebAudio = false
            }
        }
        if (f.usingWebAudio) {
            f.masterGain = typeof f.ctx.createGain === "undefined" ? f.ctx.createGainNode() : f.ctx.createGain();
            f.masterGain.gain.setValueAtTime(f._muted ? 0 : 1, f.ctx.currentTime);
            f.masterGain.connect(f.ctx.destination)
        }
        f._setup()
    };
    if (typeof define === "function" && define.amd) {
        define([], function() {
            return {
                Howler: f,
                Howl: e
            }
        })
    }
    if (typeof exports !== "undefined") {
        exports.Howler = f;
        exports.Howl = e
    }
    if (typeof window !== "undefined") {
        window.HowlerGlobal = t;
        window.Howler = f;
        window.Howl = e;
        window.Sound = n
    } else if (typeof global !== "undefined") {
        global.HowlerGlobal = t;
        global.Howler = f;
        global.Howl = e;
        global.Sound = n
    }
}
)();
(function() {
    "use strict";
    HowlerGlobal.prototype._pos = [0, 0, 0];
    HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
    HowlerGlobal.prototype.stereo = function(t) {
        var e = this;
        if (!e.ctx || !e.ctx.listener) {
            return e
        }
        for (var a = e._howls.length - 1; a >= 0; a--) {
            e._howls[a].stereo(t)
        }
        return e
    }
    ;
    HowlerGlobal.prototype.pos = function(t, e, a) {
        var i = this;
        if (!i.ctx || !i.ctx.listener) {
            return i
        }
        e = typeof e !== "number" ? i._pos[1] : e;
        a = typeof a !== "number" ? i._pos[2] : a;
        if (typeof t === "number") {
            i._pos = [t, e, a];
            i.ctx.listener.setPosition(i._pos[0], i._pos[1], i._pos[2])
        } else {
            return i._pos
        }
        return i
    }
    ;
    HowlerGlobal.prototype.orientation = function(t, e, a, i, s, n) {
        var r = this;
        if (!r.ctx || !r.ctx.listener) {
            return r
        }
        var o = r._orientation;
        e = typeof e !== "number" ? o[1] : e;
        a = typeof a !== "number" ? o[2] : a;
        i = typeof i !== "number" ? o[3] : i;
        s = typeof s !== "number" ? o[4] : s;
        n = typeof n !== "number" ? o[5] : n;
        if (typeof t === "number") {
            r._orientation = [t, e, a, i, s, n];
            r.ctx.listener.setOrientation(t, e, a, i, s, n)
        } else {
            return o
        }
        return r
    }
    ;
    Howl.prototype.init = function(a) {
        return function(t) {
            var e = this;
            e._orientation = t.orientation || [1, 0, 0];
            e._stereo = t.stereo || null;
            e._pos = t.pos || null;
            e._pannerAttr = {
                coneInnerAngle: typeof t.coneInnerAngle !== "undefined" ? t.coneInnerAngle : 360,
                coneOuterAngle: typeof t.coneOuterAngle !== "undefined" ? t.coneOuterAngle : 360,
                coneOuterGain: typeof t.coneOuterGain !== "undefined" ? t.coneOuterGain : 0,
                distanceModel: typeof t.distanceModel !== "undefined" ? t.distanceModel : "inverse",
                maxDistance: typeof t.maxDistance !== "undefined" ? t.maxDistance : 1e4,
                panningModel: typeof t.panningModel !== "undefined" ? t.panningModel : "HRTF",
                refDistance: typeof t.refDistance !== "undefined" ? t.refDistance : 1,
                rolloffFactor: typeof t.rolloffFactor !== "undefined" ? t.rolloffFactor : 1
            };
            e._onstereo = t.onstereo ? [{
                fn: t.onstereo
            }] : [];
            e._onpos = t.onpos ? [{
                fn: t.onpos
            }] : [];
            e._onorientation = t.onorientation ? [{
                fn: t.onorientation
            }] : [];
            return a.call(this, t)
        }
    }(Howl.prototype.init);
    Howl.prototype.stereo = function(t, e) {
        var a = this;
        if (!a._webAudio) {
            return a
        }
        if (a._state !== "loaded") {
            a._queue.push({
                event: "stereo",
                action: function() {
                    a.stereo(t, e)
                }
            });
            return a
        }
        var i = typeof Howler.ctx.createStereoPanner === "undefined" ? "spatial" : "stereo";
        if (typeof e === "undefined") {
            if (typeof t === "number") {
                a._stereo = t;
                a._pos = [t, 0, 0]
            } else {
                return a._stereo
            }
        }
        var s = a._getSoundIds(e);
        for (var n = 0; n < s.length; n++) {
            var r = a._soundById(s[n]);
            if (r) {
                if (typeof t === "number") {
                    r._stereo = t;
                    r._pos = [t, 0, 0];
                    if (r._node) {
                        r._pannerAttr.panningModel = "equalpower";
                        if (!r._panner || !r._panner.pan) {
                            c(r, i)
                        }
                        if (i === "spatial") {
                            r._panner.setPosition(t, 0, 0)
                        } else {
                            r._panner.pan.setValueAtTime(t, Howler.ctx.currentTime)
                        }
                    }
                    a._emit("stereo", r._id)
                } else {
                    return r._stereo
                }
            }
        }
        return a
    }
    ;
    Howl.prototype.pos = function(t, e, a, i) {
        var s = this;
        if (!s._webAudio) {
            return s
        }
        if (s._state !== "loaded") {
            s._queue.push({
                event: "pos",
                action: function() {
                    s.pos(t, e, a, i)
                }
            });
            return s
        }
        e = typeof e !== "number" ? 0 : e;
        a = typeof a !== "number" ? -.5 : a;
        if (typeof i === "undefined") {
            if (typeof t === "number") {
                s._pos = [t, e, a]
            } else {
                return s._pos
            }
        }
        var n = s._getSoundIds(i);
        for (var r = 0; r < n.length; r++) {
            var o = s._soundById(n[r]);
            if (o) {
                if (typeof t === "number") {
                    o._pos = [t, e, a];
                    if (o._node) {
                        if (!o._panner || o._panner.pan) {
                            c(o, "spatial")
                        }
                        o._panner.setPosition(t, e, a)
                    }
                    s._emit("pos", o._id)
                } else {
                    return o._pos
                }
            }
        }
        return s
    }
    ;
    Howl.prototype.orientation = function(t, e, a, i) {
        var s = this;
        if (!s._webAudio) {
            return s
        }
        if (s._state !== "loaded") {
            s._queue.push({
                event: "orientation",
                action: function() {
                    s.orientation(t, e, a, i)
                }
            });
            return s
        }
        e = typeof e !== "number" ? s._orientation[1] : e;
        a = typeof a !== "number" ? s._orientation[2] : a;
        if (typeof i === "undefined") {
            if (typeof t === "number") {
                s._orientation = [t, e, a]
            } else {
                return s._orientation
            }
        }
        var n = s._getSoundIds(i);
        for (var r = 0; r < n.length; r++) {
            var o = s._soundById(n[r]);
            if (o) {
                if (typeof t === "number") {
                    o._orientation = [t, e, a];
                    if (o._node) {
                        if (!o._panner) {
                            if (!o._pos) {
                                o._pos = s._pos || [0, 0, -.5]
                            }
                            c(o, "spatial")
                        }
                        o._panner.setOrientation(t, e, a)
                    }
                    s._emit("orientation", o._id)
                } else {
                    return o._orientation
                }
            }
        }
        return s
    }
    ;
    Howl.prototype.pannerAttr = function() {
        var t = this;
        var e = arguments;
        var a, i, s;
        if (!t._webAudio) {
            return t
        }
        if (e.length === 0) {
            return t._pannerAttr
        } else if (e.length === 1) {
            if (typeof e[0] === "object") {
                a = e[0];
                if (typeof i === "undefined") {
                    if (!a.pannerAttr) {
                        a.pannerAttr = {
                            coneInnerAngle: a.coneInnerAngle,
                            coneOuterAngle: a.coneOuterAngle,
                            coneOuterGain: a.coneOuterGain,
                            distanceModel: a.distanceModel,
                            maxDistance: a.maxDistance,
                            refDistance: a.refDistance,
                            rolloffFactor: a.rolloffFactor,
                            panningModel: a.panningModel
                        }
                    }
                    t._pannerAttr = {
                        coneInnerAngle: typeof a.pannerAttr.coneInnerAngle !== "undefined" ? a.pannerAttr.coneInnerAngle : t._coneInnerAngle,
                        coneOuterAngle: typeof a.pannerAttr.coneOuterAngle !== "undefined" ? a.pannerAttr.coneOuterAngle : t._coneOuterAngle,
                        coneOuterGain: typeof a.pannerAttr.coneOuterGain !== "undefined" ? a.pannerAttr.coneOuterGain : t._coneOuterGain,
                        distanceModel: typeof a.pannerAttr.distanceModel !== "undefined" ? a.pannerAttr.distanceModel : t._distanceModel,
                        maxDistance: typeof a.pannerAttr.maxDistance !== "undefined" ? a.pannerAttr.maxDistance : t._maxDistance,
                        refDistance: typeof a.pannerAttr.refDistance !== "undefined" ? a.pannerAttr.refDistance : t._refDistance,
                        rolloffFactor: typeof a.pannerAttr.rolloffFactor !== "undefined" ? a.pannerAttr.rolloffFactor : t._rolloffFactor,
                        panningModel: typeof a.pannerAttr.panningModel !== "undefined" ? a.pannerAttr.panningModel : t._panningModel
                    }
                }
            } else {
                s = t._soundById(parseInt(e[0], 10));
                return s ? s._pannerAttr : t._pannerAttr
            }
        } else if (e.length === 2) {
            a = e[0];
            i = parseInt(e[1], 10)
        }
        var n = t._getSoundIds(i);
        for (var r = 0; r < n.length; r++) {
            s = t._soundById(n[r]);
            if (s) {
                var o = s._pannerAttr;
                o = {
                    coneInnerAngle: typeof a.coneInnerAngle !== "undefined" ? a.coneInnerAngle : o.coneInnerAngle,
                    coneOuterAngle: typeof a.coneOuterAngle !== "undefined" ? a.coneOuterAngle : o.coneOuterAngle,
                    coneOuterGain: typeof a.coneOuterGain !== "undefined" ? a.coneOuterGain : o.coneOuterGain,
                    distanceModel: typeof a.distanceModel !== "undefined" ? a.distanceModel : o.distanceModel,
                    maxDistance: typeof a.maxDistance !== "undefined" ? a.maxDistance : o.maxDistance,
                    refDistance: typeof a.refDistance !== "undefined" ? a.refDistance : o.refDistance,
                    rolloffFactor: typeof a.rolloffFactor !== "undefined" ? a.rolloffFactor : o.rolloffFactor,
                    panningModel: typeof a.panningModel !== "undefined" ? a.panningModel : o.panningModel
                };
                var l = s._panner;
                if (l) {
                    l.coneInnerAngle = o.coneInnerAngle;
                    l.coneOuterAngle = o.coneOuterAngle;
                    l.coneOuterGain = o.coneOuterGain;
                    l.distanceModel = o.distanceModel;
                    l.maxDistance = o.maxDistance;
                    l.refDistance = o.refDistance;
                    l.rolloffFactor = o.rolloffFactor;
                    l.panningModel = o.panningModel
                } else {
                    if (!s._pos) {
                        s._pos = t._pos || [0, 0, -.5]
                    }
                    c(s, "spatial")
                }
            }
        }
        return t
    }
    ;
    Sound.prototype.init = function(a) {
        return function() {
            var t = this;
            var e = t._parent;
            t._orientation = e._orientation;
            t._stereo = e._stereo;
            t._pos = e._pos;
            t._pannerAttr = e._pannerAttr;
            a.call(this);
            if (t._stereo) {
                e.stereo(t._stereo)
            } else if (t._pos) {
                e.pos(t._pos[0], t._pos[1], t._pos[2], t._id)
            }
        }
    }(Sound.prototype.init);
    Sound.prototype.reset = function(a) {
        return function() {
            var t = this;
            var e = t._parent;
            t._orientation = e._orientation;
            t._pos = e._pos;
            t._pannerAttr = e._pannerAttr;
            return a.call(this)
        }
    }(Sound.prototype.reset);
    var c = function(t, e) {
        e = e || "spatial";
        if (e === "spatial") {
            t._panner = Howler.ctx.createPanner();
            t._panner.coneInnerAngle = t._pannerAttr.coneInnerAngle;
            t._panner.coneOuterAngle = t._pannerAttr.coneOuterAngle;
            t._panner.coneOuterGain = t._pannerAttr.coneOuterGain;
            t._panner.distanceModel = t._pannerAttr.distanceModel;
            t._panner.maxDistance = t._pannerAttr.maxDistance;
            t._panner.refDistance = t._pannerAttr.refDistance;
            t._panner.rolloffFactor = t._pannerAttr.rolloffFactor;
            t._panner.panningModel = t._pannerAttr.panningModel;
            t._panner.setPosition(t._pos[0], t._pos[1], t._pos[2]);
            t._panner.setOrientation(t._orientation[0], t._orientation[1], t._orientation[2])
        } else {
            t._panner = Howler.ctx.createStereoPanner();
            t._panner.pan.setValueAtTime(t._stereo, Howler.ctx.currentTime)
        }
        t._panner.connect(t._node);
        if (!t._paused) {
            t._parent.pause(t._id, true).play(t._id, true)
        }
    }
}
)();
var _Group = function() {
    this._tweens = {};
    this._tweensAddedDuringUpdate = {}
};
_Group.prototype = {
    getAll: function() {
        return Object.keys(this._tweens).map(function(t) {
            return this._tweens[t]
        }
        .bind(this))
    },
    removeAll: function() {
        this._tweens = {}
    },
    add: function(t) {
        this._tweens[t.getId()] = t;
        this._tweensAddedDuringUpdate[t.getId()] = t
    },
    remove: function(t) {
        delete this._tweens[t.getId()];
        delete this._tweensAddedDuringUpdate[t.getId()]
    },
    update: function(t, e) {
        var a = Object.keys(this._tweens);
        if (a.length === 0) {
            return false
        }
        t = t !== undefined ? t : TWEEN.now();
        while (a.length > 0) {
            this._tweensAddedDuringUpdate = {};
            for (var i = 0; i < a.length; i++) {
                var s = this._tweens[a[i]];
                if (s && s.update(t) === false) {
                    s._isPlaying = false;
                    if (!e) {
                        delete this._tweens[a[i]]
                    }
                }
            }
            a = Object.keys(this._tweensAddedDuringUpdate)
        }
        return true
    }
};
var TWEEN = new _Group;
TWEEN.Group = _Group;
TWEEN._nextId = 0;
TWEEN.nextId = function() {
    return TWEEN._nextId++
}
;
if (typeof window === "undefined" && typeof process !== "undefined") {
    TWEEN.now = function() {
        var t = process.hrtime();
        return t[0] * 1e3 + t[1] / 1e6
    }
} else if (typeof window !== "undefined" && window.performance !== undefined && window.performance.now !== undefined) {
    TWEEN.now = window.performance.now.bind(window.performance)
} else if (Date.now !== undefined) {
    TWEEN.now = Date.now
} else {
    TWEEN.now = function() {
        return (new Date).getTime()
    }
}
TWEEN.Tween = function(t, e) {
    this._object = t;
    this._valuesStart = {};
    this._valuesEnd = {};
    this._valuesStartRepeat = {};
    this._duration = 1e3;
    this._repeat = 0;
    this._repeatDelayTime = undefined;
    this._yoyo = false;
    this._isPlaying = false;
    this._reversed = false;
    this._delayTime = 0;
    this._startTime = null;
    this._easingFunction = TWEEN.Easing.Linear.None;
    this._interpolationFunction = TWEEN.Interpolation.Linear;
    this._chainedTweens = [];
    this._onStartCallback = null;
    this._onStartCallbackFired = false;
    this._onUpdateCallback = null;
    this._onCompleteCallback = null;
    this._onStopCallback = null;
    this._group = e || TWEEN;
    this._id = TWEEN.nextId()
}
;
TWEEN.Tween.prototype = {
    getId: function t() {
        return this._id
    },
    isPlaying: function t() {
        return this._isPlaying
    },
    to: function t(e, a) {
        this._valuesEnd = e;
        if (a !== undefined) {
            this._duration = a
        }
        return this
    },
    start: function t(e) {
        this._group.add(this);
        this._isPlaying = true;
        this._onStartCallbackFired = false;
        this._startTime = e !== undefined ? typeof e === "string" ? TWEEN.now() + parseFloat(e) : e : TWEEN.now();
        this._startTime += this._delayTime;
        for (var a in this._valuesEnd) {
            if (this._valuesEnd[a]instanceof Array) {
                if (this._valuesEnd[a].length === 0) {
                    continue
                }
                this._valuesEnd[a] = [this._object[a]].concat(this._valuesEnd[a])
            }
            if (this._object[a] === undefined) {
                continue
            }
            this._valuesStart[a] = this._object[a];
            if (this._valuesStart[a]instanceof Array === false) {
                this._valuesStart[a] *= 1
            }
            this._valuesStartRepeat[a] = this._valuesStart[a] || 0
        }
        return this
    },
    stop: function t() {
        if (!this._isPlaying) {
            return this
        }
        this._group.remove(this);
        this._isPlaying = false;
        if (this._onStopCallback !== null) {
            this._onStopCallback(this._object)
        }
        this.stopChainedTweens();
        return this
    },
    end: function t() {
        this.update(this._startTime + this._duration);
        return this
    },
    stopChainedTweens: function t() {
        for (var e = 0, a = this._chainedTweens.length; e < a; e++) {
            this._chainedTweens[e].stop()
        }
    },
    delay: function t(e) {
        this._delayTime = e;
        return this
    },
    repeat: function t(e) {
        this._repeat = e;
        return this
    },
    repeatDelay: function t(e) {
        this._repeatDelayTime = e;
        return this
    },
    yoyo: function t(t) {
        this._yoyo = t;
        return this
    },
    easing: function t(t) {
        this._easingFunction = t;
        return this
    },
    interpolation: function t(t) {
        this._interpolationFunction = t;
        return this
    },
    chain: function t() {
        this._chainedTweens = arguments;
        return this
    },
    onStart: function t(e) {
        this._onStartCallback = e;
        return this
    },
    onUpdate: function t(e) {
        this._onUpdateCallback = e;
        return this
    },
    onComplete: function t(e) {
        this._onCompleteCallback = e;
        return this
    },
    onStop: function t(e) {
        this._onStopCallback = e;
        return this
    },
    update: function t(e) {
        var a;
        var i;
        var s;
        if (e < this._startTime) {
            return true
        }
        if (this._onStartCallbackFired === false) {
            if (this._onStartCallback !== null) {
                this._onStartCallback(this._object)
            }
            this._onStartCallbackFired = true
        }
        i = (e - this._startTime) / this._duration;
        i = i > 1 ? 1 : i;
        s = this._easingFunction(i);
        for (a in this._valuesEnd) {
            if (this._valuesStart[a] === undefined) {
                continue
            }
            var n = this._valuesStart[a] || 0;
            var r = this._valuesEnd[a];
            if (r instanceof Array) {
                this._object[a] = this._interpolationFunction(r, s)
            } else {
                if (typeof r === "string") {
                    if (r.charAt(0) === "+" || r.charAt(0) === "-") {
                        r = n + parseFloat(r)
                    } else {
                        r = parseFloat(r)
                    }
                }
                if (typeof r === "number") {
                    this._object[a] = n + (r - n) * s
                }
            }
        }
        if (this._onUpdateCallback !== null) {
            this._onUpdateCallback(this._object)
        }
        if (i === 1) {
            if (this._repeat > 0) {
                if (isFinite(this._repeat)) {
                    this._repeat--
                }
                for (a in this._valuesStartRepeat) {
                    if (typeof this._valuesEnd[a] === "string") {
                        this._valuesStartRepeat[a] = this._valuesStartRepeat[a] + parseFloat(this._valuesEnd[a])
                    }
                    if (this._yoyo) {
                        var o = this._valuesStartRepeat[a];
                        this._valuesStartRepeat[a] = this._valuesEnd[a];
                        this._valuesEnd[a] = o
                    }
                    this._valuesStart[a] = this._valuesStartRepeat[a]
                }
                if (this._yoyo) {
                    this._reversed = !this._reversed
                }
                if (this._repeatDelayTime !== undefined) {
                    this._startTime = e + this._repeatDelayTime
                } else {
                    this._startTime = e + this._delayTime
                }
                return true
            } else {
                if (this._onCompleteCallback !== null) {
                    this._onCompleteCallback(this._object)
                }
                for (var l = 0, c = this._chainedTweens.length; l < c; l++) {
                    this._chainedTweens[l].start(this._startTime + this._duration)
                }
                return false
            }
        }
        return true
    }
};
TWEEN.Easing = {
    Linear: {
        None: function(t) {
            return t
        }
    },
    Quadratic: {
        In: function(t) {
            return t * t
        },
        Out: function(t) {
            return t * (2 - t)
        },
        InOut: function(t) {
            if ((t *= 2) < 1) {
                return .5 * t * t
            }
            return -.5 * (--t * (t - 2) - 1)
        }
    },
    Cubic: {
        In: function(t) {
            return t * t * t
        },
        Out: function(t) {
            return --t * t * t + 1
        },
        InOut: function(t) {
            if ((t *= 2) < 1) {
                return .5 * t * t * t
            }
            return .5 * ((t -= 2) * t * t + 2)
        }
    },
    Quartic: {
        In: function(t) {
            return t * t * t * t
        },
        Out: function(t) {
            return 1 - --t * t * t * t
        },
        InOut: function(t) {
            if ((t *= 2) < 1) {
                return .5 * t * t * t * t
            }
            return -.5 * ((t -= 2) * t * t * t - 2)
        }
    },
    Quintic: {
        In: function(t) {
            return t * t * t * t * t
        },
        Out: function(t) {
            return --t * t * t * t * t + 1
        },
        InOut: function(t) {
            if ((t *= 2) < 1) {
                return .5 * t * t * t * t * t
            }
            return .5 * ((t -= 2) * t * t * t * t + 2)
        }
    },
    Sinusoidal: {
        In: function(t) {
            return 1 - Math.cos(t * Math.PI / 2)
        },
        Out: function(t) {
            return Math.sin(t * Math.PI / 2)
        },
        InOut: function(t) {
            return .5 * (1 - Math.cos(Math.PI * t))
        }
    },
    Exponential: {
        In: function(t) {
            return t === 0 ? 0 : Math.pow(1024, t - 1)
        },
        Out: function(t) {
            return t === 1 ? 1 : 1 - Math.pow(2, -10 * t)
        },
        InOut: function(t) {
            if (t === 0) {
                return 0
            }
            if (t === 1) {
                return 1
            }
            if ((t *= 2) < 1) {
                return .5 * Math.pow(1024, t - 1)
            }
            return .5 * (-Math.pow(2, -10 * (t - 1)) + 2)
        }
    },
    Circular: {
        In: function(t) {
            return 1 - Math.sqrt(1 - t * t)
        },
        Out: function(t) {
            return Math.sqrt(1 - --t * t)
        },
        InOut: function(t) {
            if ((t *= 2) < 1) {
                return -.5 * (Math.sqrt(1 - t * t) - 1)
            }
            return .5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
        }
    },
    Elastic: {
        In: function(t) {
            if (t === 0) {
                return 0
            }
            if (t === 1) {
                return 1
            }
            return -Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1.1) * 5 * Math.PI)
        },
        Out: function(t) {
            if (t === 0) {
                return 0
            }
            if (t === 1) {
                return 1
            }
            return Math.pow(2, -10 * t) * Math.sin((t - .1) * 5 * Math.PI) + 1
        },
        InOut: function(t) {
            if (t === 0) {
                return 0
            }
            if (t === 1) {
                return 1
            }
            t *= 2;
            if (t < 1) {
                return -.5 * Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1.1) * 5 * Math.PI)
            }
            return .5 * Math.pow(2, -10 * (t - 1)) * Math.sin((t - 1.1) * 5 * Math.PI) + 1
        }
    },
    Back: {
        In: function(t) {
            var e = 1.70158;
            return t * t * ((e + 1) * t - e)
        },
        Out: function(t) {
            var e = 1.70158;
            return --t * t * ((e + 1) * t + e) + 1
        },
        InOut: function(t) {
            var e = 1.70158 * 1.525;
            if ((t *= 2) < 1) {
                return .5 * (t * t * ((e + 1) * t - e))
            }
            return .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2)
        }
    },
    Bounce: {
        In: function(t) {
            return 1 - TWEEN.Easing.Bounce.Out(1 - t)
        },
        Out: function(t) {
            if (t < 1 / 2.75) {
                return 7.5625 * t * t
            } else if (t < 2 / 2.75) {
                return 7.5625 * (t -= 1.5 / 2.75) * t + .75
            } else if (t < 2.5 / 2.75) {
                return 7.5625 * (t -= 2.25 / 2.75) * t + .9375
            } else {
                return 7.5625 * (t -= 2.625 / 2.75) * t + .984375
            }
        },
        InOut: function(t) {
            if (t < .5) {
                return TWEEN.Easing.Bounce.In(t * 2) * .5
            }
            return TWEEN.Easing.Bounce.Out(t * 2 - 1) * .5 + .5
        }
    }
};
TWEEN.Interpolation = {
    Linear: function(t, e) {
        var a = t.length - 1;
        var i = a * e;
        var s = Math.floor(i);
        var n = TWEEN.Interpolation.Utils.Linear;
        if (e < 0) {
            return n(t[0], t[1], i)
        }
        if (e > 1) {
            return n(t[a], t[a - 1], a - i)
        }
        return n(t[s], t[s + 1 > a ? a : s + 1], i - s)
    },
    Bezier: function(t, e) {
        var a = 0;
        var i = t.length - 1;
        var s = Math.pow;
        var n = TWEEN.Interpolation.Utils.Bernstein;
        for (var r = 0; r <= i; r++) {
            a += s(1 - e, i - r) * s(e, r) * t[r] * n(i, r)
        }
        return a
    },
    CatmullRom: function(t, e) {
        var a = t.length - 1;
        var i = a * e;
        var s = Math.floor(i);
        var n = TWEEN.Interpolation.Utils.CatmullRom;
        if (t[0] === t[a]) {
            if (e < 0) {
                s = Math.floor(i = a * (1 + e))
            }
            return n(t[(s - 1 + a) % a], t[s], t[(s + 1) % a], t[(s + 2) % a], i - s)
        } else {
            if (e < 0) {
                return t[0] - (n(t[0], t[0], t[1], t[1], -i) - t[0])
            }
            if (e > 1) {
                return t[a] - (n(t[a], t[a], t[a - 1], t[a - 1], i - a) - t[a])
            }
            return n(t[s ? s - 1 : 0], t[s], t[a < s + 1 ? a : s + 1], t[a < s + 2 ? a : s + 2], i - s)
        }
    },
    Utils: {
        Linear: function(t, e, a) {
            return (e - t) * a + t
        },
        Bernstein: function(t, e) {
            var a = TWEEN.Interpolation.Utils.Factorial;
            return a(t) / a(e) / a(t - e)
        },
        Factorial: function() {
            var i = [1];
            return function(t) {
                var e = 1;
                if (i[t]) {
                    return i[t]
                }
                for (var a = t; a > 1; a--) {
                    e *= a
                }
                i[t] = e;
                return e
            }
        }(),
        CatmullRom: function(t, e, a, i, s) {
            var n = (a - t) * .5;
            var r = (i - e) * .5;
            var o = s * s;
            var l = s * o;
            return (2 * e - 2 * a + n + r) * l + (-3 * e + 3 * a - 2 * n - r) * o + n * s + e
        }
    }
};
(function(t) {
    if (typeof define === "function" && define.amd) {
        define([], function() {
            return TWEEN
        })
    } else if (typeof module !== "undefined" && typeof exports === "object") {
        module.exports = TWEEN
    } else if (t !== undefined) {
        t.TWEEN = TWEEN
    }
}
)(this);
!function(t) {
    if ("object" == typeof exports && "undefined" != typeof module)
        module.exports = t();
    else if ("function" == typeof define && define.amd)
        define([], t);
    else {
        ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).pako = t()
    }
}(function() {
    return function n(r, o, l) {
        function c(a, t) {
            if (!o[a]) {
                if (!r[a]) {
                    var e = "function" == typeof require && require;
                    if (!t && e)
                        return e(a, !0);
                    if (p)
                        return p(a, !0);
                    var i = new Error("Cannot find module '" + a + "'");
                    throw i.code = "MODULE_NOT_FOUND",
                    i
                }
                var s = o[a] = {
                    exports: {}
                };
                r[a][0].call(s.exports, function(t) {
                    var e = r[a][1][t];
                    return c(e || t)
                }, s, s.exports, n, r, o, l)
            }
            return o[a].exports
        }
        for (var p = "function" == typeof require && require, t = 0; t < l.length; t++)
            c(l[t]);
        return c
    }({
        1: [function(t, e, a) {
            "use strict";
            function s(t, e) {
                return Object.prototype.hasOwnProperty.call(t, e)
            }
            var i = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
            a.assign = function(t) {
                for (var e = Array.prototype.slice.call(arguments, 1); e.length; ) {
                    var a = e.shift();
                    if (a) {
                        if ("object" != typeof a)
                            throw new TypeError(a + "must be non-object");
                        for (var i in a)
                            s(a, i) && (t[i] = a[i])
                    }
                }
                return t
            }
            ,
            a.shrinkBuf = function(t, e) {
                return t.length === e ? t : t.subarray ? t.subarray(0, e) : (t.length = e,
                t)
            }
            ;
            var n = {
                arraySet: function(t, e, a, i, s) {
                    if (e.subarray && t.subarray)
                        t.set(e.subarray(a, a + i), s);
                    else
                        for (var n = 0; n < i; n++)
                            t[s + n] = e[a + n]
                },
                flattenChunks: function(t) {
                    var e, a, i, s, n, r;
                    for (i = 0,
                    e = 0,
                    a = t.length; e < a; e++)
                        i += t[e].length;
                    for (r = new Uint8Array(i),
                    s = 0,
                    e = 0,
                    a = t.length; e < a; e++)
                        n = t[e],
                        r.set(n, s),
                        s += n.length;
                    return r
                }
            }
              , r = {
                arraySet: function(t, e, a, i, s) {
                    for (var n = 0; n < i; n++)
                        t[s + n] = e[a + n]
                },
                flattenChunks: function(t) {
                    return [].concat.apply([], t)
                }
            };
            a.setTyped = function(t) {
                t ? (a.Buf8 = Uint8Array,
                a.Buf16 = Uint16Array,
                a.Buf32 = Int32Array,
                a.assign(a, n)) : (a.Buf8 = Array,
                a.Buf16 = Array,
                a.Buf32 = Array,
                a.assign(a, r))
            }
            ,
            a.setTyped(i)
        }
        , {}],
        2: [function(t, e, a) {
            "use strict";
            function l(t, e) {
                if (e < 65537 && (t.subarray && n || !t.subarray && s))
                    return String.fromCharCode.apply(null, c.shrinkBuf(t, e));
                for (var a = "", i = 0; i < e; i++)
                    a += String.fromCharCode(t[i]);
                return a
            }
            var c = t("./common")
              , s = !0
              , n = !0;
            try {
                String.fromCharCode.apply(null, [0])
            } catch (t) {
                s = !1
            }
            try {
                String.fromCharCode.apply(null, new Uint8Array(1))
            } catch (t) {
                n = !1
            }
            for (var p = new c.Buf8(256), i = 0; i < 256; i++)
                p[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
            p[254] = p[254] = 1,
            a.string2buf = function(t) {
                var e, a, i, s, n, r = t.length, o = 0;
                for (s = 0; s < r; s++)
                    55296 == (64512 & (a = t.charCodeAt(s))) && s + 1 < r && 56320 == (64512 & (i = t.charCodeAt(s + 1))) && (a = 65536 + (a - 55296 << 10) + (i - 56320),
                    s++),
                    o += a < 128 ? 1 : a < 2048 ? 2 : a < 65536 ? 3 : 4;
                for (e = new c.Buf8(o),
                n = 0,
                s = 0; n < o; s++)
                    55296 == (64512 & (a = t.charCodeAt(s))) && s + 1 < r && 56320 == (64512 & (i = t.charCodeAt(s + 1))) && (a = 65536 + (a - 55296 << 10) + (i - 56320),
                    s++),
                    a < 128 ? e[n++] = a : a < 2048 ? (e[n++] = 192 | a >>> 6,
                    e[n++] = 128 | 63 & a) : a < 65536 ? (e[n++] = 224 | a >>> 12,
                    e[n++] = 128 | a >>> 6 & 63,
                    e[n++] = 128 | 63 & a) : (e[n++] = 240 | a >>> 18,
                    e[n++] = 128 | a >>> 12 & 63,
                    e[n++] = 128 | a >>> 6 & 63,
                    e[n++] = 128 | 63 & a);
                return e
            }
            ,
            a.buf2binstring = function(t) {
                return l(t, t.length)
            }
            ,
            a.binstring2buf = function(t) {
                for (var e = new c.Buf8(t.length), a = 0, i = e.length; a < i; a++)
                    e[a] = t.charCodeAt(a);
                return e
            }
            ,
            a.buf2string = function(t, e) {
                var a, i, s, n, r = e || t.length, o = new Array(2 * r);
                for (i = 0,
                a = 0; a < r; )
                    if ((s = t[a++]) < 128)
                        o[i++] = s;
                    else if ((n = p[s]) > 4)
                        o[i++] = 65533,
                        a += n - 1;
                    else {
                        for (s &= 2 === n ? 31 : 3 === n ? 15 : 7; n > 1 && a < r; )
                            s = s << 6 | 63 & t[a++],
                            n--;
                        n > 1 ? o[i++] = 65533 : s < 65536 ? o[i++] = s : (s -= 65536,
                        o[i++] = 55296 | s >> 10 & 1023,
                        o[i++] = 56320 | 1023 & s)
                    }
                return l(o, i)
            }
            ,
            a.utf8border = function(t, e) {
                var a;
                for ((e = e || t.length) > t.length && (e = t.length),
                a = e - 1; a >= 0 && 128 == (192 & t[a]); )
                    a--;
                return a < 0 ? e : 0 === a ? e : a + p[t[a]] > e ? a : e
            }
        }
        , {
            "./common": 1
        }],
        3: [function(t, e, a) {
            "use strict";
            e.exports = function(t, e, a, i) {
                for (var s = 65535 & t | 0, n = t >>> 16 & 65535 | 0, r = 0; 0 !== a; ) {
                    a -= r = a > 2e3 ? 2e3 : a;
                    do {
                        n = n + (s = s + e[i++] | 0) | 0
                    } while (--r);
                    s %= 65521,
                    n %= 65521
                }
                return s | n << 16 | 0
            }
        }
        , {}],
        4: [function(t, e, a) {
            "use strict";
            e.exports = {
                Z_NO_FLUSH: 0,
                Z_PARTIAL_FLUSH: 1,
                Z_SYNC_FLUSH: 2,
                Z_FULL_FLUSH: 3,
                Z_FINISH: 4,
                Z_BLOCK: 5,
                Z_TREES: 6,
                Z_OK: 0,
                Z_STREAM_END: 1,
                Z_NEED_DICT: 2,
                Z_ERRNO: -1,
                Z_STREAM_ERROR: -2,
                Z_DATA_ERROR: -3,
                Z_BUF_ERROR: -5,
                Z_NO_COMPRESSION: 0,
                Z_BEST_SPEED: 1,
                Z_BEST_COMPRESSION: 9,
                Z_DEFAULT_COMPRESSION: -1,
                Z_FILTERED: 1,
                Z_HUFFMAN_ONLY: 2,
                Z_RLE: 3,
                Z_FIXED: 4,
                Z_DEFAULT_STRATEGY: 0,
                Z_BINARY: 0,
                Z_TEXT: 1,
                Z_UNKNOWN: 2,
                Z_DEFLATED: 8
            }
        }
        , {}],
        5: [function(t, e, a) {
            "use strict";
            var o = function() {
                for (var t, e = [], a = 0; a < 256; a++) {
                    t = a;
                    for (var i = 0; i < 8; i++)
                        t = 1 & t ? 3988292384 ^ t >>> 1 : t >>> 1;
                    e[a] = t
                }
                return e
            }();
            e.exports = function(t, e, a, i) {
                var s = o
                  , n = i + a;
                t ^= -1;
                for (var r = i; r < n; r++)
                    t = t >>> 8 ^ s[255 & (t ^ e[r])];
                return -1 ^ t
            }
        }
        , {}],
        6: [function(t, e, a) {
            "use strict";
            e.exports = function() {
                this.text = 0,
                this.time = 0,
                this.xflags = 0,
                this.os = 0,
                this.extra = null,
                this.extra_len = 0,
                this.name = "",
                this.comment = "",
                this.hcrc = 0,
                this.done = !1
            }
        }
        , {}],
        7: [function(t, e, a) {
            "use strict";
            e.exports = function(t, e) {
                var a, i, s, n, r, o, l, c, p, h, d, v, u, m, f, _, g, w, E, b, C, y, T, M, S;
                a = t.state,
                i = t.next_in,
                M = t.input,
                s = i + (t.avail_in - 5),
                n = t.next_out,
                S = t.output,
                r = n - (e - t.avail_out),
                o = n + (t.avail_out - 257),
                l = a.dmax,
                c = a.wsize,
                p = a.whave,
                h = a.wnext,
                d = a.window,
                v = a.hold,
                u = a.bits,
                m = a.lencode,
                f = a.distcode,
                _ = (1 << a.lenbits) - 1,
                g = (1 << a.distbits) - 1;
                t: do {
                    u < 15 && (v += M[i++] << u,
                    u += 8,
                    v += M[i++] << u,
                    u += 8),
                    w = m[v & _];
                    e: for (; ; ) {
                        if (E = w >>> 24,
                        v >>>= E,
                        u -= E,
                        0 === (E = w >>> 16 & 255))
                            S[n++] = 65535 & w;
                        else {
                            if (!(16 & E)) {
                                if (0 == (64 & E)) {
                                    w = m[(65535 & w) + (v & (1 << E) - 1)];
                                    continue e
                                }
                                if (32 & E) {
                                    a.mode = 12;
                                    break t
                                }
                                t.msg = "invalid literal/length code",
                                a.mode = 30;
                                break t
                            }
                            b = 65535 & w,
                            (E &= 15) && (u < E && (v += M[i++] << u,
                            u += 8),
                            b += v & (1 << E) - 1,
                            v >>>= E,
                            u -= E),
                            u < 15 && (v += M[i++] << u,
                            u += 8,
                            v += M[i++] << u,
                            u += 8),
                            w = f[v & g];
                            a: for (; ; ) {
                                if (E = w >>> 24,
                                v >>>= E,
                                u -= E,
                                !(16 & (E = w >>> 16 & 255))) {
                                    if (0 == (64 & E)) {
                                        w = f[(65535 & w) + (v & (1 << E) - 1)];
                                        continue a
                                    }
                                    t.msg = "invalid distance code",
                                    a.mode = 30;
                                    break t
                                }
                                if (C = 65535 & w,
                                E &= 15,
                                u < E && (v += M[i++] << u,
                                (u += 8) < E && (v += M[i++] << u,
                                u += 8)),
                                (C += v & (1 << E) - 1) > l) {
                                    t.msg = "invalid distance too far back",
                                    a.mode = 30;
                                    break t
                                }
                                if (v >>>= E,
                                u -= E,
                                E = n - r,
                                C > E) {
                                    if ((E = C - E) > p && a.sane) {
                                        t.msg = "invalid distance too far back",
                                        a.mode = 30;
                                        break t
                                    }
                                    if (y = 0,
                                    T = d,
                                    0 === h) {
                                        if (y += c - E,
                                        E < b) {
                                            b -= E;
                                            do {
                                                S[n++] = d[y++]
                                            } while (--E);
                                            y = n - C,
                                            T = S
                                        }
                                    } else if (h < E) {
                                        if (y += c + h - E,
                                        (E -= h) < b) {
                                            b -= E;
                                            do {
                                                S[n++] = d[y++]
                                            } while (--E);
                                            if (y = 0,
                                            h < b) {
                                                b -= E = h;
                                                do {
                                                    S[n++] = d[y++]
                                                } while (--E);
                                                y = n - C,
                                                T = S
                                            }
                                        }
                                    } else if (y += h - E,
                                    E < b) {
                                        b -= E;
                                        do {
                                            S[n++] = d[y++]
                                        } while (--E);
                                        y = n - C,
                                        T = S
                                    }
                                    for (; b > 2; )
                                        S[n++] = T[y++],
                                        S[n++] = T[y++],
                                        S[n++] = T[y++],
                                        b -= 3;
                                    b && (S[n++] = T[y++],
                                    b > 1 && (S[n++] = T[y++]))
                                } else {
                                    y = n - C;
                                    do {
                                        S[n++] = S[y++],
                                        S[n++] = S[y++],
                                        S[n++] = S[y++],
                                        b -= 3
                                    } while (b > 2);
                                    b && (S[n++] = S[y++],
                                    b > 1 && (S[n++] = S[y++]))
                                }
                                break
                            }
                        }
                        break
                    }
                } while (i < s && n < o);
                i -= b = u >> 3,
                v &= (1 << (u -= b << 3)) - 1,
                t.next_in = i,
                t.next_out = n,
                t.avail_in = i < s ? s - i + 5 : 5 - (i - s),
                t.avail_out = n < o ? o - n + 257 : 257 - (n - o),
                a.hold = v,
                a.bits = u
            }
        }
        , {}],
        8: [function(t, l, e) {
            "use strict";
            function A(t) {
                return (t >>> 24 & 255) + (t >>> 8 & 65280) + ((65280 & t) << 8) + ((255 & t) << 24)
            }
            function c() {
                this.mode = 0,
                this.last = !1,
                this.wrap = 0,
                this.havedict = !1,
                this.flags = 0,
                this.dmax = 0,
                this.check = 0,
                this.total = 0,
                this.head = null,
                this.wbits = 0,
                this.wsize = 0,
                this.whave = 0,
                this.wnext = 0,
                this.window = null,
                this.hold = 0,
                this.bits = 0,
                this.length = 0,
                this.offset = 0,
                this.extra = 0,
                this.lencode = null,
                this.distcode = null,
                this.lenbits = 0,
                this.distbits = 0,
                this.ncode = 0,
                this.nlen = 0,
                this.ndist = 0,
                this.have = 0,
                this.next = null,
                this.lens = new O.Buf16(320),
                this.work = new O.Buf16(288),
                this.lendyn = null,
                this.distdyn = null,
                this.sane = 0,
                this.back = 0,
                this.was = 0
            }
            function a(t) {
                var e;
                return t && t.state ? (e = t.state,
                t.total_in = t.total_out = e.total = 0,
                t.msg = "",
                e.wrap && (t.adler = 1 & e.wrap),
                e.mode = j,
                e.last = 0,
                e.havedict = 0,
                e.dmax = 32768,
                e.head = null,
                e.hold = 0,
                e.bits = 0,
                e.lencode = e.lendyn = new O.Buf32(p),
                e.distcode = e.distdyn = new O.Buf32(h),
                e.sane = 1,
                e.back = -1,
                D) : V
            }
            function s(t) {
                var e;
                return t && t.state ? (e = t.state,
                e.wsize = 0,
                e.whave = 0,
                e.wnext = 0,
                a(t)) : V
            }
            function n(t, e) {
                var a, i;
                return t && t.state ? (i = t.state,
                e < 0 ? (a = 0,
                e = -e) : (a = 1 + (e >> 4),
                e < 48 && (e &= 15)),
                e && (e < 8 || e > 15) ? V : (null !== i.window && i.wbits !== e && (i.window = null),
                i.wrap = a,
                i.wbits = e,
                s(t))) : V
            }
            function i(t, e) {
                var a, i;
                return t ? (i = new c,
                t.state = i,
                i.window = null,
                (a = n(t, e)) !== D && (t.state = null),
                a) : V
            }
            function it(t) {
                if (v) {
                    var e;
                    for (r = new O.Buf32(512),
                    o = new O.Buf32(32),
                    e = 0; e < 144; )
                        t.lens[e++] = 8;
                    for (; e < 256; )
                        t.lens[e++] = 9;
                    for (; e < 280; )
                        t.lens[e++] = 7;
                    for (; e < 288; )
                        t.lens[e++] = 8;
                    for (P(B, t.lens, 0, 288, r, 0, t.work, {
                        bits: 9
                    }),
                    e = 0; e < 32; )
                        t.lens[e++] = 5;
                    P(H, t.lens, 0, 32, o, 0, t.work, {
                        bits: 5
                    }),
                    v = !1
                }
                t.lencode = r,
                t.lenbits = 9,
                t.distcode = o,
                t.distbits = 5
            }
            function L(t, e, a, i) {
                var s, n = t.state;
                return null === n.window && (n.wsize = 1 << n.wbits,
                n.wnext = 0,
                n.whave = 0,
                n.window = new O.Buf8(n.wsize)),
                i >= n.wsize ? (O.arraySet(n.window, e, a - n.wsize, n.wsize, 0),
                n.wnext = 0,
                n.whave = n.wsize) : ((s = n.wsize - n.wnext) > i && (s = i),
                O.arraySet(n.window, e, a - i, s, n.wnext),
                (i -= s) ? (O.arraySet(n.window, e, a - i, i, 0),
                n.wnext = i,
                n.whave = n.wsize) : (n.wnext += s,
                n.wnext === n.wsize && (n.wnext = 0),
                n.whave < n.wsize && (n.whave += s))),
                0
            }
            var r, o, O = t("../utils/common"), k = t("./adler32"), R = t("./crc32"), st = t("./inffast"), P = t("./inftrees"), nt = 0, B = 1, H = 2, N = 4, rt = 5, F = 6, D = 0, ot = 1, lt = 2, V = -2, U = -3, W = -4, ct = -5, G = 8, j = 1, K = 2, z = 3, q = 4, pt = 5, ht = 6, dt = 7, vt = 8, ut = 9, mt = 10, Y = 11, X = 12, Q = 13, ft = 14, Z = 15, _t = 16, gt = 17, wt = 18, Et = 19, J = 20, $ = 21, bt = 22, Ct = 23, yt = 24, Tt = 25, Mt = 26, tt = 27, St = 28, xt = 29, et = 30, at = 31, It = 32, p = 852, h = 592, d = 15, v = !0;
            e.inflateReset = s,
            e.inflateReset2 = n,
            e.inflateResetKeep = a,
            e.inflateInit = function(t) {
                return i(t, d)
            }
            ,
            e.inflateInit2 = i,
            e.inflate = function(t, e) {
                var a, i, s, n, r, o, l, c, p, h, d, v, u, m, f, _, g, w, E, b, C, y, T, M, S = 0, x = new O.Buf8(4), I = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                if (!t || !t.state || !t.output || !t.input && 0 !== t.avail_in)
                    return V;
                (a = t.state).mode === X && (a.mode = Q),
                r = t.next_out,
                s = t.output,
                l = t.avail_out,
                n = t.next_in,
                i = t.input,
                o = t.avail_in,
                c = a.hold,
                p = a.bits,
                h = o,
                d = l,
                y = D;
                t: for (; ; )
                    switch (a.mode) {
                    case j:
                        if (0 === a.wrap) {
                            a.mode = Q;
                            break
                        }
                        for (; p < 16; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        if (2 & a.wrap && 35615 === c) {
                            a.check = 0,
                            x[0] = 255 & c,
                            x[1] = c >>> 8 & 255,
                            a.check = R(a.check, x, 2, 0),
                            c = 0,
                            p = 0,
                            a.mode = K;
                            break
                        }
                        if (a.flags = 0,
                        a.head && (a.head.done = !1),
                        !(1 & a.wrap) || (((255 & c) << 8) + (c >> 8)) % 31) {
                            t.msg = "incorrect header check",
                            a.mode = et;
                            break
                        }
                        if ((15 & c) !== G) {
                            t.msg = "unknown compression method",
                            a.mode = et;
                            break
                        }
                        if (c >>>= 4,
                        p -= 4,
                        C = 8 + (15 & c),
                        0 === a.wbits)
                            a.wbits = C;
                        else if (C > a.wbits) {
                            t.msg = "invalid window size",
                            a.mode = et;
                            break
                        }
                        a.dmax = 1 << C,
                        t.adler = a.check = 1,
                        a.mode = 512 & c ? mt : X,
                        c = 0,
                        p = 0;
                        break;
                    case K:
                        for (; p < 16; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        if (a.flags = c,
                        (255 & a.flags) !== G) {
                            t.msg = "unknown compression method",
                            a.mode = et;
                            break
                        }
                        if (57344 & a.flags) {
                            t.msg = "unknown header flags set",
                            a.mode = et;
                            break
                        }
                        a.head && (a.head.text = c >> 8 & 1),
                        512 & a.flags && (x[0] = 255 & c,
                        x[1] = c >>> 8 & 255,
                        a.check = R(a.check, x, 2, 0)),
                        c = 0,
                        p = 0,
                        a.mode = z;
                    case z:
                        for (; p < 32; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        a.head && (a.head.time = c),
                        512 & a.flags && (x[0] = 255 & c,
                        x[1] = c >>> 8 & 255,
                        x[2] = c >>> 16 & 255,
                        x[3] = c >>> 24 & 255,
                        a.check = R(a.check, x, 4, 0)),
                        c = 0,
                        p = 0,
                        a.mode = q;
                    case q:
                        for (; p < 16; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        a.head && (a.head.xflags = 255 & c,
                        a.head.os = c >> 8),
                        512 & a.flags && (x[0] = 255 & c,
                        x[1] = c >>> 8 & 255,
                        a.check = R(a.check, x, 2, 0)),
                        c = 0,
                        p = 0,
                        a.mode = pt;
                    case pt:
                        if (1024 & a.flags) {
                            for (; p < 16; ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            a.length = c,
                            a.head && (a.head.extra_len = c),
                            512 & a.flags && (x[0] = 255 & c,
                            x[1] = c >>> 8 & 255,
                            a.check = R(a.check, x, 2, 0)),
                            c = 0,
                            p = 0
                        } else
                            a.head && (a.head.extra = null);
                        a.mode = ht;
                    case ht:
                        if (1024 & a.flags && ((v = a.length) > o && (v = o),
                        v && (a.head && (C = a.head.extra_len - a.length,
                        a.head.extra || (a.head.extra = new Array(a.head.extra_len)),
                        O.arraySet(a.head.extra, i, n, v, C)),
                        512 & a.flags && (a.check = R(a.check, i, v, n)),
                        o -= v,
                        n += v,
                        a.length -= v),
                        a.length))
                            break t;
                        a.length = 0,
                        a.mode = dt;
                    case dt:
                        if (2048 & a.flags) {
                            if (0 === o)
                                break t;
                            v = 0;
                            do {
                                C = i[n + v++],
                                a.head && C && a.length < 65536 && (a.head.name += String.fromCharCode(C))
                            } while (C && v < o);
                            if (512 & a.flags && (a.check = R(a.check, i, v, n)),
                            o -= v,
                            n += v,
                            C)
                                break t
                        } else
                            a.head && (a.head.name = null);
                        a.length = 0,
                        a.mode = vt;
                    case vt:
                        if (4096 & a.flags) {
                            if (0 === o)
                                break t;
                            v = 0;
                            do {
                                C = i[n + v++],
                                a.head && C && a.length < 65536 && (a.head.comment += String.fromCharCode(C))
                            } while (C && v < o);
                            if (512 & a.flags && (a.check = R(a.check, i, v, n)),
                            o -= v,
                            n += v,
                            C)
                                break t
                        } else
                            a.head && (a.head.comment = null);
                        a.mode = ut;
                    case ut:
                        if (512 & a.flags) {
                            for (; p < 16; ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            if (c !== (65535 & a.check)) {
                                t.msg = "header crc mismatch",
                                a.mode = et;
                                break
                            }
                            c = 0,
                            p = 0
                        }
                        a.head && (a.head.hcrc = a.flags >> 9 & 1,
                        a.head.done = !0),
                        t.adler = a.check = 0,
                        a.mode = X;
                        break;
                    case mt:
                        for (; p < 32; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        t.adler = a.check = A(c),
                        c = 0,
                        p = 0,
                        a.mode = Y;
                    case Y:
                        if (0 === a.havedict)
                            return t.next_out = r,
                            t.avail_out = l,
                            t.next_in = n,
                            t.avail_in = o,
                            a.hold = c,
                            a.bits = p,
                            lt;
                        t.adler = a.check = 1,
                        a.mode = X;
                    case X:
                        if (e === rt || e === F)
                            break t;
                    case Q:
                        if (a.last) {
                            c >>>= 7 & p,
                            p -= 7 & p,
                            a.mode = tt;
                            break
                        }
                        for (; p < 3; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        switch (a.last = 1 & c,
                        c >>>= 1,
                        p -= 1,
                        3 & c) {
                        case 0:
                            a.mode = ft;
                            break;
                        case 1:
                            if (it(a),
                            a.mode = J,
                            e === F) {
                                c >>>= 2,
                                p -= 2;
                                break t
                            }
                            break;
                        case 2:
                            a.mode = gt;
                            break;
                        case 3:
                            t.msg = "invalid block type",
                            a.mode = et
                        }
                        c >>>= 2,
                        p -= 2;
                        break;
                    case ft:
                        for (c >>>= 7 & p,
                        p -= 7 & p; p < 32; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        if ((65535 & c) != (c >>> 16 ^ 65535)) {
                            t.msg = "invalid stored block lengths",
                            a.mode = et;
                            break
                        }
                        if (a.length = 65535 & c,
                        c = 0,
                        p = 0,
                        a.mode = Z,
                        e === F)
                            break t;
                    case Z:
                        a.mode = _t;
                    case _t:
                        if (v = a.length) {
                            if (v > o && (v = o),
                            v > l && (v = l),
                            0 === v)
                                break t;
                            O.arraySet(s, i, n, v, r),
                            o -= v,
                            n += v,
                            l -= v,
                            r += v,
                            a.length -= v;
                            break
                        }
                        a.mode = X;
                        break;
                    case gt:
                        for (; p < 14; ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        if (a.nlen = 257 + (31 & c),
                        c >>>= 5,
                        p -= 5,
                        a.ndist = 1 + (31 & c),
                        c >>>= 5,
                        p -= 5,
                        a.ncode = 4 + (15 & c),
                        c >>>= 4,
                        p -= 4,
                        a.nlen > 286 || a.ndist > 30) {
                            t.msg = "too many length or distance symbols",
                            a.mode = et;
                            break
                        }
                        a.have = 0,
                        a.mode = wt;
                    case wt:
                        for (; a.have < a.ncode; ) {
                            for (; p < 3; ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            a.lens[I[a.have++]] = 7 & c,
                            c >>>= 3,
                            p -= 3
                        }
                        for (; a.have < 19; )
                            a.lens[I[a.have++]] = 0;
                        if (a.lencode = a.lendyn,
                        a.lenbits = 7,
                        T = {
                            bits: a.lenbits
                        },
                        y = P(nt, a.lens, 0, 19, a.lencode, 0, a.work, T),
                        a.lenbits = T.bits,
                        y) {
                            t.msg = "invalid code lengths set",
                            a.mode = et;
                            break
                        }
                        a.have = 0,
                        a.mode = Et;
                    case Et:
                        for (; a.have < a.nlen + a.ndist; ) {
                            for (; S = a.lencode[c & (1 << a.lenbits) - 1],
                            f = S >>> 24,
                            _ = S >>> 16 & 255,
                            g = 65535 & S,
                            !(f <= p); ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            if (g < 16)
                                c >>>= f,
                                p -= f,
                                a.lens[a.have++] = g;
                            else {
                                if (16 === g) {
                                    for (M = f + 2; p < M; ) {
                                        if (0 === o)
                                            break t;
                                        o--,
                                        c += i[n++] << p,
                                        p += 8
                                    }
                                    if (c >>>= f,
                                    p -= f,
                                    0 === a.have) {
                                        t.msg = "invalid bit length repeat",
                                        a.mode = et;
                                        break
                                    }
                                    C = a.lens[a.have - 1],
                                    v = 3 + (3 & c),
                                    c >>>= 2,
                                    p -= 2
                                } else if (17 === g) {
                                    for (M = f + 3; p < M; ) {
                                        if (0 === o)
                                            break t;
                                        o--,
                                        c += i[n++] << p,
                                        p += 8
                                    }
                                    p -= f,
                                    C = 0,
                                    v = 3 + (7 & (c >>>= f)),
                                    c >>>= 3,
                                    p -= 3
                                } else {
                                    for (M = f + 7; p < M; ) {
                                        if (0 === o)
                                            break t;
                                        o--,
                                        c += i[n++] << p,
                                        p += 8
                                    }
                                    p -= f,
                                    C = 0,
                                    v = 11 + (127 & (c >>>= f)),
                                    c >>>= 7,
                                    p -= 7
                                }
                                if (a.have + v > a.nlen + a.ndist) {
                                    t.msg = "invalid bit length repeat",
                                    a.mode = et;
                                    break
                                }
                                for (; v--; )
                                    a.lens[a.have++] = C
                            }
                        }
                        if (a.mode === et)
                            break;
                        if (0 === a.lens[256]) {
                            t.msg = "invalid code -- missing end-of-block",
                            a.mode = et;
                            break
                        }
                        if (a.lenbits = 9,
                        T = {
                            bits: a.lenbits
                        },
                        y = P(B, a.lens, 0, a.nlen, a.lencode, 0, a.work, T),
                        a.lenbits = T.bits,
                        y) {
                            t.msg = "invalid literal/lengths set",
                            a.mode = et;
                            break
                        }
                        if (a.distbits = 6,
                        a.distcode = a.distdyn,
                        T = {
                            bits: a.distbits
                        },
                        y = P(H, a.lens, a.nlen, a.ndist, a.distcode, 0, a.work, T),
                        a.distbits = T.bits,
                        y) {
                            t.msg = "invalid distances set",
                            a.mode = et;
                            break
                        }
                        if (a.mode = J,
                        e === F)
                            break t;
                    case J:
                        a.mode = $;
                    case $:
                        if (o >= 6 && l >= 258) {
                            t.next_out = r,
                            t.avail_out = l,
                            t.next_in = n,
                            t.avail_in = o,
                            a.hold = c,
                            a.bits = p,
                            st(t, d),
                            r = t.next_out,
                            s = t.output,
                            l = t.avail_out,
                            n = t.next_in,
                            i = t.input,
                            o = t.avail_in,
                            c = a.hold,
                            p = a.bits,
                            a.mode === X && (a.back = -1);
                            break
                        }
                        for (a.back = 0; S = a.lencode[c & (1 << a.lenbits) - 1],
                        f = S >>> 24,
                        _ = S >>> 16 & 255,
                        g = 65535 & S,
                        !(f <= p); ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        if (_ && 0 == (240 & _)) {
                            for (w = f,
                            E = _,
                            b = g; S = a.lencode[b + ((c & (1 << w + E) - 1) >> w)],
                            f = S >>> 24,
                            _ = S >>> 16 & 255,
                            g = 65535 & S,
                            !(w + f <= p); ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            c >>>= w,
                            p -= w,
                            a.back += w
                        }
                        if (c >>>= f,
                        p -= f,
                        a.back += f,
                        a.length = g,
                        0 === _) {
                            a.mode = Mt;
                            break
                        }
                        if (32 & _) {
                            a.back = -1,
                            a.mode = X;
                            break
                        }
                        if (64 & _) {
                            t.msg = "invalid literal/length code",
                            a.mode = et;
                            break
                        }
                        a.extra = 15 & _,
                        a.mode = bt;
                    case bt:
                        if (a.extra) {
                            for (M = a.extra; p < M; ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            a.length += c & (1 << a.extra) - 1,
                            c >>>= a.extra,
                            p -= a.extra,
                            a.back += a.extra
                        }
                        a.was = a.length,
                        a.mode = Ct;
                    case Ct:
                        for (; S = a.distcode[c & (1 << a.distbits) - 1],
                        f = S >>> 24,
                        _ = S >>> 16 & 255,
                        g = 65535 & S,
                        !(f <= p); ) {
                            if (0 === o)
                                break t;
                            o--,
                            c += i[n++] << p,
                            p += 8
                        }
                        if (0 == (240 & _)) {
                            for (w = f,
                            E = _,
                            b = g; S = a.distcode[b + ((c & (1 << w + E) - 1) >> w)],
                            f = S >>> 24,
                            _ = S >>> 16 & 255,
                            g = 65535 & S,
                            !(w + f <= p); ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            c >>>= w,
                            p -= w,
                            a.back += w
                        }
                        if (c >>>= f,
                        p -= f,
                        a.back += f,
                        64 & _) {
                            t.msg = "invalid distance code",
                            a.mode = et;
                            break
                        }
                        a.offset = g,
                        a.extra = 15 & _,
                        a.mode = yt;
                    case yt:
                        if (a.extra) {
                            for (M = a.extra; p < M; ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            a.offset += c & (1 << a.extra) - 1,
                            c >>>= a.extra,
                            p -= a.extra,
                            a.back += a.extra
                        }
                        if (a.offset > a.dmax) {
                            t.msg = "invalid distance too far back",
                            a.mode = et;
                            break
                        }
                        a.mode = Tt;
                    case Tt:
                        if (0 === l)
                            break t;
                        if (v = d - l,
                        a.offset > v) {
                            if ((v = a.offset - v) > a.whave && a.sane) {
                                t.msg = "invalid distance too far back",
                                a.mode = et;
                                break
                            }
                            v > a.wnext ? (v -= a.wnext,
                            u = a.wsize - v) : u = a.wnext - v,
                            v > a.length && (v = a.length),
                            m = a.window
                        } else
                            m = s,
                            u = r - a.offset,
                            v = a.length;
                        v > l && (v = l),
                        l -= v,
                        a.length -= v;
                        do {
                            s[r++] = m[u++]
                        } while (--v);
                        0 === a.length && (a.mode = $);
                        break;
                    case Mt:
                        if (0 === l)
                            break t;
                        s[r++] = a.length,
                        l--,
                        a.mode = $;
                        break;
                    case tt:
                        if (a.wrap) {
                            for (; p < 32; ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c |= i[n++] << p,
                                p += 8
                            }
                            if (d -= l,
                            t.total_out += d,
                            a.total += d,
                            d && (t.adler = a.check = a.flags ? R(a.check, s, d, r - d) : k(a.check, s, d, r - d)),
                            d = l,
                            (a.flags ? c : A(c)) !== a.check) {
                                t.msg = "incorrect data check",
                                a.mode = et;
                                break
                            }
                            c = 0,
                            p = 0
                        }
                        a.mode = St;
                    case St:
                        if (a.wrap && a.flags) {
                            for (; p < 32; ) {
                                if (0 === o)
                                    break t;
                                o--,
                                c += i[n++] << p,
                                p += 8
                            }
                            if (c !== (4294967295 & a.total)) {
                                t.msg = "incorrect length check",
                                a.mode = et;
                                break
                            }
                            c = 0,
                            p = 0
                        }
                        a.mode = xt;
                    case xt:
                        y = ot;
                        break t;
                    case et:
                        y = U;
                        break t;
                    case at:
                        return W;
                    case It:
                    default:
                        return V
                    }
                return t.next_out = r,
                t.avail_out = l,
                t.next_in = n,
                t.avail_in = o,
                a.hold = c,
                a.bits = p,
                (a.wsize || d !== t.avail_out && a.mode < et && (a.mode < tt || e !== N)) && L(t, t.output, t.next_out, d - t.avail_out) ? (a.mode = at,
                W) : (h -= t.avail_in,
                d -= t.avail_out,
                t.total_in += h,
                t.total_out += d,
                a.total += d,
                a.wrap && d && (t.adler = a.check = a.flags ? R(a.check, s, d, t.next_out - d) : k(a.check, s, d, t.next_out - d)),
                t.data_type = a.bits + (a.last ? 64 : 0) + (a.mode === X ? 128 : 0) + (a.mode === J || a.mode === Z ? 256 : 0),
                (0 === h && 0 === d || e === N) && y === D && (y = ct),
                y)
            }
            ,
            e.inflateEnd = function(t) {
                if (!t || !t.state)
                    return V;
                var e = t.state;
                return e.window && (e.window = null),
                t.state = null,
                D
            }
            ,
            e.inflateGetHeader = function(t, e) {
                var a;
                return t && t.state ? 0 == (2 & (a = t.state).wrap) ? V : (a.head = e,
                e.done = !1,
                D) : V
            }
            ,
            e.inflateSetDictionary = function(t, e) {
                var a, i, s = e.length;
                return t && t.state ? 0 !== (a = t.state).wrap && a.mode !== Y ? V : a.mode === Y && (i = 1,
                (i = k(i, e, s, 0)) !== a.check) ? U : L(t, e, s, s) ? (a.mode = at,
                W) : (a.havedict = 1,
                D) : V
            }
            ,
            e.inflateInfo = "pako inflate (from Nodeca project)"
        }
        , {
            "../utils/common": 1,
            "./adler32": 3,
            "./crc32": 5,
            "./inffast": 7,
            "./inftrees": 9
        }],
        9: [function(t, e, a) {
            "use strict";
            var P = t("../utils/common")
              , B = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]
              , H = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]
              , N = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]
              , F = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
            e.exports = function(t, e, a, i, s, n, r, o) {
                var l, c, p, h, d, v, u, m, f, _ = o.bits, g = 0, w = 0, E = 0, b = 0, C = 0, y = 0, T = 0, M = 0, S = 0, x = 0, I = null, A = 0, L = new P.Buf16(16), O = new P.Buf16(16), k = null, R = 0;
                for (g = 0; g <= 15; g++)
                    L[g] = 0;
                for (w = 0; w < i; w++)
                    L[e[a + w]]++;
                for (C = _,
                b = 15; b >= 1 && 0 === L[b]; b--)
                    ;
                if (C > b && (C = b),
                0 === b)
                    return s[n++] = 20971520,
                    s[n++] = 20971520,
                    o.bits = 1,
                    0;
                for (E = 1; E < b && 0 === L[E]; E++)
                    ;
                for (C < E && (C = E),
                M = 1,
                g = 1; g <= 15; g++)
                    if (M <<= 1,
                    (M -= L[g]) < 0)
                        return -1;
                if (M > 0 && (0 === t || 1 !== b))
                    return -1;
                for (O[1] = 0,
                g = 1; g < 15; g++)
                    O[g + 1] = O[g] + L[g];
                for (w = 0; w < i; w++)
                    0 !== e[a + w] && (r[O[e[a + w]]++] = w);
                if (0 === t ? (I = k = r,
                v = 19) : 1 === t ? (I = B,
                A -= 257,
                k = H,
                R -= 257,
                v = 256) : (I = N,
                k = F,
                v = -1),
                x = 0,
                w = 0,
                g = E,
                d = n,
                y = C,
                T = 0,
                p = -1,
                S = 1 << C,
                h = S - 1,
                1 === t && S > 852 || 2 === t && S > 592)
                    return 1;
                for (; ; ) {
                    u = g - T,
                    r[w] < v ? (m = 0,
                    f = r[w]) : r[w] > v ? (m = k[R + r[w]],
                    f = I[A + r[w]]) : (m = 96,
                    f = 0),
                    l = 1 << g - T,
                    E = c = 1 << y;
                    do {
                        s[d + (x >> T) + (c -= l)] = u << 24 | m << 16 | f | 0
                    } while (0 !== c);
                    for (l = 1 << g - 1; x & l; )
                        l >>= 1;
                    if (0 !== l ? (x &= l - 1,
                    x += l) : x = 0,
                    w++,
                    0 == --L[g]) {
                        if (g === b)
                            break;
                        g = e[a + r[w]]
                    }
                    if (g > C && (x & h) !== p) {
                        for (0 === T && (T = C),
                        d += E,
                        M = 1 << (y = g - T); y + T < b && !((M -= L[y + T]) <= 0); )
                            y++,
                            M <<= 1;
                        if (S += 1 << y,
                        1 === t && S > 852 || 2 === t && S > 592)
                            return 1;
                        s[p = x & h] = C << 24 | y << 16 | d - n | 0
                    }
                }
                return 0 !== x && (s[d + x] = g - T << 24 | 64 << 16 | 0),
                o.bits = C,
                0
            }
        }
        , {
            "../utils/common": 1
        }],
        10: [function(t, e, a) {
            "use strict";
            e.exports = {
                2: "need dictionary",
                1: "stream end",
                0: "",
                "-1": "file error",
                "-2": "stream error",
                "-3": "data error",
                "-4": "insufficient memory",
                "-5": "buffer error",
                "-6": "incompatible version"
            }
        }
        , {}],
        11: [function(t, e, a) {
            "use strict";
            e.exports = function() {
                this.input = null,
                this.next_in = 0,
                this.avail_in = 0,
                this.total_in = 0,
                this.output = null,
                this.next_out = 0,
                this.avail_out = 0,
                this.total_out = 0,
                this.msg = "",
                this.state = null,
                this.data_type = 2,
                this.adler = 0
            }
        }
        , {}],
        "/lib/inflate.js": [function(t, e, a) {
            "use strict";
            function i(t) {
                if (!(this instanceof i))
                    return new i(t);
                this.options = v.assign({
                    chunkSize: 16384,
                    windowBits: 0,
                    to: ""
                }, t || {});
                var e = this.options;
                e.raw && e.windowBits >= 0 && e.windowBits < 16 && (e.windowBits = -e.windowBits,
                0 === e.windowBits && (e.windowBits = -15)),
                !(e.windowBits >= 0 && e.windowBits < 16) || t && t.windowBits || (e.windowBits += 32),
                e.windowBits > 15 && e.windowBits < 48 && 0 == (15 & e.windowBits) && (e.windowBits |= 15),
                this.err = 0,
                this.msg = "",
                this.ended = !1,
                this.chunks = [],
                this.strm = new r,
                this.strm.avail_out = 0;
                var a = d.inflateInit2(this.strm, e.windowBits);
                if (a !== m.Z_OK)
                    throw new Error(n[a]);
                this.header = new o,
                d.inflateGetHeader(this.strm, this.header)
            }
            function s(t, e) {
                var a = new i(e);
                if (a.push(t, !0),
                a.err)
                    throw a.msg || n[a.err];
                return a.result
            }
            var d = t("./zlib/inflate")
              , v = t("./utils/common")
              , u = t("./utils/strings")
              , m = t("./zlib/constants")
              , n = t("./zlib/messages")
              , r = t("./zlib/zstream")
              , o = t("./zlib/gzheader")
              , f = Object.prototype.toString;
            i.prototype.push = function(t, e) {
                var a, i, s, n, r, o, l = this.strm, c = this.options.chunkSize, p = this.options.dictionary, h = !1;
                if (this.ended)
                    return !1;
                i = e === ~~e ? e : !0 === e ? m.Z_FINISH : m.Z_NO_FLUSH,
                "string" == typeof t ? l.input = u.binstring2buf(t) : "[object ArrayBuffer]" === f.call(t) ? l.input = new Uint8Array(t) : l.input = t,
                l.next_in = 0,
                l.avail_in = l.input.length;
                do {
                    if (0 === l.avail_out && (l.output = new v.Buf8(c),
                    l.next_out = 0,
                    l.avail_out = c),
                    (a = d.inflate(l, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && p && (o = "string" == typeof p ? u.string2buf(p) : "[object ArrayBuffer]" === f.call(p) ? new Uint8Array(p) : p,
                    a = d.inflateSetDictionary(this.strm, o)),
                    a === m.Z_BUF_ERROR && !0 === h && (a = m.Z_OK,
                    h = !1),
                    a !== m.Z_STREAM_END && a !== m.Z_OK)
                        return this.onEnd(a),
                        this.ended = !0,
                        !1;
                    l.next_out && (0 !== l.avail_out && a !== m.Z_STREAM_END && (0 !== l.avail_in || i !== m.Z_FINISH && i !== m.Z_SYNC_FLUSH) || ("string" === this.options.to ? (s = u.utf8border(l.output, l.next_out),
                    n = l.next_out - s,
                    r = u.buf2string(l.output, s),
                    l.next_out = n,
                    l.avail_out = c - n,
                    n && v.arraySet(l.output, l.output, s, n, 0),
                    this.onData(r)) : this.onData(v.shrinkBuf(l.output, l.next_out)))),
                    0 === l.avail_in && 0 === l.avail_out && (h = !0)
                } while ((l.avail_in > 0 || 0 === l.avail_out) && a !== m.Z_STREAM_END);
                return a === m.Z_STREAM_END && (i = m.Z_FINISH),
                i === m.Z_FINISH ? (a = d.inflateEnd(this.strm),
                this.onEnd(a),
                this.ended = !0,
                a === m.Z_OK) : i !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK),
                l.avail_out = 0,
                !0)
            }
            ,
            i.prototype.onData = function(t) {
                this.chunks.push(t)
            }
            ,
            i.prototype.onEnd = function(t) {
                t === m.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = v.flattenChunks(this.chunks)),
                this.chunks = [],
                this.err = t,
                this.msg = this.strm.msg
            }
            ,
            a.Inflate = i,
            a.inflate = s,
            a.inflateRaw = function(t, e) {
                return e = e || {},
                e.raw = !0,
                s(t, e)
            }
            ,
            a.ungzip = s
        }
        , {
            "./utils/common": 1,
            "./utils/strings": 2,
            "./zlib/constants": 4,
            "./zlib/gzheader": 6,
            "./zlib/inflate": 8,
            "./zlib/messages": 10,
            "./zlib/zstream": 11
        }]
    }, {}, [])("/lib/inflate.js")
});
!function s(n, r, o) {
    function l(a, t) {
        if (!r[a]) {
            if (!n[a]) {
                var e = "function" == typeof require && require;
                if (!t && e)
                    return e(a, !0);
                if (c)
                    return c(a, !0);
                throw new Error("Cannot find module '" + a + "'")
            }
            var i = r[a] = {
                exports: {}
            };
            n[a][0].call(i.exports, function(t) {
                var e = n[a][1][t];
                return l(e ? e : t)
            }, i, i.exports, s, n, r, o)
        }
        return r[a].exports
    }
    for (var c = "function" == typeof require && require, t = 0; t < o.length; t++)
        l(o[t]);
    return l
}({
    1: [function(i) {
        (function() {
            var t = i("./lib/amf/amf.js")
              , e = i("./lib/amf/spec.js")
              , a = i("./lib/type/bytearray.js");
            window.AMF = t,
            window.Spec = e,
            window.ByteArray = a
        }
        ).call(this, i("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, i("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_aabf2119.js", "/")
    }
    , {
        "./lib/amf/amf.js": 2,
        "./lib/amf/spec.js": 6,
        "./lib/type/bytearray.js": 14,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    2: [function(u, m) {
        (function() {
            function a(t, e, a, i) {
                i = "undefined" == typeof i ? o : i;
                var s = new c
                  , n = new h(s,i);
                return n.serialize(t, e, a)
            }
            function e(t, e) {
                var a = new p(t)
                  , i = new d(a);
                return i.deserialize(e)
            }
            function t(t) {
                return e(t)
            }
            function i(t, e) {
                return a(t, !0, void 0, e)
            }
            function s(t, e) {
                v[t] = e
            }
            function n(t) {
                return t in v ? v[t] : null
            }
            var r = 1
              , o = 0
              , l = "_classMapping";
            m.exports = {
                serialize: a,
                deserialize: e,
                parse: t,
                stringify: i,
                registerClassAlias: s,
                getClassByAlias: n,
                CLASS_MAPPING: r,
                DEFAULT_OPTIONS: o,
                CLASS_MAPPING_FIELD: l
            };
            var c = u("../io/output.js")
              , p = u("../io/input.js")
              , h = u("../amf/serializer.js")
              , d = u("../amf/deserializer.js")
              , v = {}
        }
        ).call(this, u("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, u("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/amf.js", "/lib/amf")
    }
    , {
        "../amf/deserializer.js": 4,
        "../amf/serializer.js": 5,
        "../io/input.js": 11,
        "../io/output.js": 12,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    3: [function(n, r) {
        (function() {
            var e = n("./spec.js")
              , a = n("../type/bytearray.js")
              , i = n("../util/reference-store.js")
              , s = n("../exception/not-supported.js")
              , t = function(t) {
                this.stream = t,
                this.referenceStore = new i
            };
            t.prototype = {
                getDataType: function(t) {
                    switch (!0) {
                    case "undefined" == typeof t:
                        return e.AMF3_UNDEFINED;
                    case null === t:
                        return e.AMF3_NULL;
                    case t === !0 || t === !1:
                        return t ? e.AMF3_TRUE : e.AMF3_FALSE;
                    case "number" == typeof t && t % 1 === 0:
                        return t < e.MIN_INT || t > e.MAX_INT ? e.AMF3_DOUBLE : e.AMF3_INT;
                    case "number" == typeof t && t % 1 !== 0:
                        return e.AMF3_DOUBLE;
                    case "string" == typeof t:
                        return e.AMF3_STRING;
                    case t instanceof Date:
                        return e.AMF3_DATE;
                    case t instanceof a:
                        return e.AMF3_BYTE_ARRAY;
                    case t instanceof Array:
                        return e.AMF3_ARRAY;
                    case "object" == typeof t:
                        return e.AMF3_OBJECT;
                    case "function" == typeof t:
                        throw new s("Cannot serialize a function");
                    default:
                        return null
                    }
                }
            },
            r.exports = t
        }
        ).call(this, n("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/base.js", "/lib/amf")
    }
    , {
        "../exception/not-supported.js": 9,
        "../type/bytearray.js": 14,
        "../util/reference-store.js": 18,
        "./spec.js": 6,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    4: [function(a, n) {
        (function() {
            var r = a("./amf.js")
              , e = a("./base.js")
              , o = a("./spec.js")
              , l = a("../util/reference-store.js")
              , i = a("../type/bytearray.js")
              , s = a("utf8")
              , c = a("../exception/deserialization.js")
              , t = function(t) {
                e.call(this, t)
            };
            t.prototype = new e,
            t.prototype.constructor = t,
            t.prototype.deserialize = function(t) {
                var e = this.stream.readByte(t);
                switch (parseInt(e)) {
                case o.AMF3_UNDEFINED:
                    return void 0;
                case o.AMF3_NULL:
                    return null;
                case o.AMF3_FALSE:
                    return !1;
                case o.AMF3_TRUE:
                    return !0;
                case o.AMF3_INT:
                    return this.deserializeInt();
                case o.AMF3_DOUBLE:
                    return this.deserializeDouble();
                case o.AMF3_STRING:
                    return this.deserializeString();
                case o.AMF3_DATE:
                    return this.deserializeDate();
                case o.AMF3_ARRAY:
                    return this.deserializeArray();
                case o.AMF3_OBJECT:
                    return this.deserializeObject();
                case o.AMF3_BYTE_ARRAY:
                    return this.deserializeByteArray();
                default:
                    throw new c("Cannot deserialize type: " + e)
                }
            }
            ,
            t.prototype.deserializeInt = function() {
                for (var t = 0, e = 0, a = this.stream.readByte(); 0 !== (128 & a) && 3 > e; )
                    t <<= 7,
                    t |= 127 & a,
                    a = this.stream.readByte(),
                    e++;
                return 3 > e ? (t <<= 7,
                t |= a) : (t <<= 8,
                t |= a,
                0 !== (268435456 & t) && (t |= 3758096384)),
                t
            }
            ,
            t.prototype.deserializeDouble = function() {
                return this.stream.readDouble()
            }
            ,
            t.prototype.deserializeString = function() {
                var t = this.deserializeInt();
                if (0 === (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, l.TYPE_STRING);
                var e = t >> o.REFERENCE_BIT
                  , a = s.decode(this.stream.readRawBytes(e));
                return this.referenceStore.addReference(a, l.TYPE_STRING),
                a
            }
            ,
            t.prototype.deserializeDate = function() {
                var t = this.deserializeInt();
                if (0 === (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, l.TYPE_OBJECT);
                var e = this.stream.readDouble()
                  , a = new Date(e);
                return this.referenceStore.addReference(a, l.TYPE_OBJECT),
                a
            }
            ,
            t.prototype.deserializeArray = function() {
                var t = this.deserializeInt();
                if (0 === (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, l.TYPE_OBJECT);
                var e = t >> o.REFERENCE_BIT
                  , a = [];
                this.referenceStore.addReference(a, l.TYPE_OBJECT);
                for (var i = this.deserializeString(); i.length > 0; )
                    a[i] = this.deserialize(),
                    i = this.deserializeString();
                for (var s = 0; e > s; s++)
                    a.push(this.deserialize());
                return a
            }
            ,
            t.prototype.deserializeObject = function() {
                var t = this.deserializeInt();
                if (0 === (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, l.TYPE_OBJECT);
                var e = this.deserializeString()
                  , a = {};
                this.referenceStore.addReference(a, l.TYPE_OBJECT);
                for (var i = {}, s = this.deserializeString(); s.length; )
                    i[s] = this.deserialize(),
                    s = this.deserializeString();
                if (e && e.length > 0) {
                    var n = r.getClassByAlias(e);
                    if (!n)
                        throw new c("Class " + e + " cannot be found. Consider registering a class alias.");
                    a = new n,
                    "importData"in a && "function" == typeof a.importData ? a.importData(i) : p(a, i)
                } else
                    p(a, i);
                return a
            }
            ;
            var p = function(e, t) {
                try {
                    for (var a in t) {
                        var i = t[a];
                        e[a] = i
                    }
                } catch (t) {
                    throw new c("Property '" + a + "' cannot be set on instance '" + typeof e + "'")
                }
            };
            t.prototype.deserializeByteArray = function() {
                var t = this.deserializeInt();
                if (0 === (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, l.TYPE_OBJECT);
                var e = t >> o.REFERENCE_BIT
                  , a = this.stream.readRawBytes(e);
                return new i(a)
            }
            ,
            n.exports = t
        }
        ).call(this, a("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/deserializer.js", "/lib/amf")
    }
    , {
        "../exception/deserialization.js": 8,
        "../type/bytearray.js": 14,
        "../util/reference-store.js": 18,
        "./amf.js": 2,
        "./base.js": 3,
        "./spec.js": 6,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19,
        utf8: 23
    }],
    5: [function(e, i) {
        (function() {
            var a = e("./base.js")
              , r = e("./spec.js")
              , o = e("../util/reference-store.js")
              , l = e("../util/object.js")
              , s = (e("../type/bytearray.js"),
            e("utf8"))
              , n = e("../exception/serialization.js")
              , t = function(t, e) {
                this.options = e,
                a.call(this, t)
            };
            t.prototype = new a,
            t.prototype.constructor = t,
            t.prototype.serialize = function(t, e, a) {
                "undefined" == typeof e && (e = !0);
                var i = a ? a : this.getDataType(t);
                switch (e && this.stream.writeByte(i),
                i) {
                case r.AMF3_UNDEFINED:
                case r.AMF3_NULL:
                case r.AMF3_FALSE:
                case r.AMF3_TRUE:
                    break;
                case r.AMF3_INT:
                    this.serializeInt(t);
                    break;
                case r.AMF3_DOUBLE:
                    this.serializeDouble(t);
                    break;
                case r.AMF3_STRING:
                    this.serializeString(t);
                    break;
                case r.AMF3_DATE:
                    this.serializeDate(t);
                    break;
                case r.AMF3_ARRAY:
                    this.serializeArray(t);
                    break;
                case r.AMF3_OBJECT:
                    this.serializeObject(t);
                    break;
                case r.AMF3_BYTE_ARRAY:
                    this.serializeByteArray(t);
                    break;
                default:
                    throw new n("Unrecognized AMF type [" + i + "]")
                }
                return this.stream.getRaw()
            }
            ,
            t.prototype.serializeInt = function(t) {
                if (t < r.MIN_INT || t > r.MAX_INT)
                    throw new n("Integer out of range: " + t);
                t &= 536870911,
                t < r.MIN_2_BYTE_INT ? this.stream.writeByte(t) : t < r.MIN_3_BYTE_INT ? (this.stream.writeByte(t >> 7 & 127 | 128),
                this.stream.writeByte(127 & t)) : t < r.MIN_4_BYTE_INT ? (this.stream.writeByte(t >> 14 & 127 | 128),
                this.stream.writeByte(t >> 7 & 127 | 128),
                this.stream.writeByte(127 & t)) : (this.stream.writeByte(t >> 22 & 127 | 128),
                this.stream.writeByte(t >> 15 & 127 | 128),
                this.stream.writeByte(t >> 8 & 127 | 128),
                this.stream.writeByte(255 & t))
            }
            ,
            t.prototype.serializeDouble = function(t) {
                this.stream.writeDouble(t)
            }
            ,
            t.prototype.serializeString = function(t, e) {
                if (e = "undefined" == typeof e ? !0 : e) {
                    var a = this.referenceStore.getReference(t, o.TYPE_STRING);
                    if (a !== !1)
                        return void this.serializeInt(a << 1)
                }
                var i = s.encode(t);
                this.serializeInt(i.length << 1 | 1),
                this.stream.writeRaw(i)
            }
            ,
            t.prototype.serializeDate = function(t) {
                var e = this.referenceStore.getReference(t, o.TYPE_OBJECT);
                return e !== !1 ? void this.serializeInt(e << 1) : void this.serialize(t.getTime(), !0, r.AMF3_DOUBLE)
            }
            ,
            t.prototype.serializeArray = function(t) {
                var e = this.referenceStore.getReference(t, o.TYPE_OBJECT);
                if (e !== !1)
                    return void this.serializeInt(e << 1);
                var a = null
                  , i = r.isDenseArray(t);
                if (i) {
                    this.serializeInt(t.length << 1 | r.REFERENCE_BIT),
                    this.serializeString("");
                    for (var s in t)
                        a = t[s],
                        this.serialize(a)
                } else {
                    this.serializeInt(1);
                    for (var n in t)
                        a = t[n],
                        this.serializeString(n, !1),
                        this.serialize(a);
                    this.serializeString("")
                }
            }
            ,
            t.prototype.serializeObject = function(t) {
                var e = this.referenceStore.getReference(t, o.TYPE_OBJECT);
                if (e !== !1)
                    return void this.serializeInt(e << 1);
                var a = t;
                l.isSerializable(t) && (t = t.exportData());
                var i = l.getObjectKeys(t);
                if (this.serializeInt(11),
                this.serializeString(l.getClassName(a, this.options), !1),
                i.length > 0)
                    for (var s in i) {
                        var n = i[s]
                          , r = t[n];
                        this.serializeString(n, !1),
                        this.serialize(r)
                    }
                this.serializeString("")
            }
            ,
            t.prototype.serializeByteArray = function(t) {
                if (!("getData"in t))
                    throw new n("Invalid ByteArray data provided");
                var e = this.referenceStore.getReference(t, o.TYPE_OBJECT);
                return e !== !1 ? void this.serializeInt(e << 1) : (this.serializeInt(t.getData().length << 1 | r.REFERENCE_BIT),
                void this.stream.writeRaw(t.getData()))
            }
            ,
            i.exports = t
        }
        ).call(this, e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/serializer.js", "/lib/amf")
    }
    , {
        "../exception/serialization.js": 10,
        "../type/bytearray.js": 14,
        "../util/object.js": 17,
        "../util/reference-store.js": 18,
        "./base.js": 3,
        "./spec.js": 6,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19,
        utf8: 23
    }],
    6: [function(t, e) {
        (function() {
            e.exports = {
                AMF3_UNDEFINED: 0,
                AMF3_NULL: 1,
                AMF3_FALSE: 2,
                AMF3_TRUE: 3,
                AMF3_INT: 4,
                AMF3_DOUBLE: 5,
                AMF3_STRING: 6,
                AMF3_XML_DOC: 7,
                AMF3_DATE: 8,
                AMF3_ARRAY: 9,
                AMF3_OBJECT: 10,
                AMF3_XML: 11,
                AMF3_BYTE_ARRAY: 12,
                AMF3_VECTOR_INT: 13,
                AMF3_VECTOR_UINT: 14,
                AMF3_VECTOR_DOUBLE: 15,
                AMF3_VECTOR_OBJECT: 16,
                AMF3_DICTIONARY: 17,
                OBJECT_DYNAMIC: 0,
                REFERENCE_BIT: 1,
                MIN_2_BYTE_INT: 128,
                MIN_3_BYTE_INT: 16384,
                MIN_4_BYTE_INT: 2097152,
                MAX_INT: 268435455,
                MIN_INT: -268435456,
                isLittleEndian: function() {
                    return !0
                },
                isDenseArray: function(t) {
                    if (!t)
                        return !0;
                    var e = 0;
                    for (var a in t) {
                        if (a != e)
                            return !1;
                        e++
                    }
                    return !0
                }
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/spec.js", "/lib/amf")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    7: [function(t, e) {
        (function() {
            var t = function(t, e) {
                this.message = t,
                this.name = e
            };
            t.prototype = new Error,
            t.prototype.constructor = t,
            e.exports = t
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/base.js", "/lib/exception")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    8: [function(a, i) {
        (function() {
            var e = a("./base.js")
              , t = function(t) {
                e.call(this, t, "DeserializationException")
            };
            t.prototype = new e,
            t.prototype.constructor = t,
            i.exports = t
        }
        ).call(this, a("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/deserialization.js", "/lib/exception")
    }
    , {
        "./base.js": 7,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    9: [function(a, i) {
        (function() {
            var e = a("./base.js")
              , t = function(t) {
                e.call(this, t, "NotSupportedException")
            };
            t.prototype = new e,
            t.prototype.constructor = t,
            i.exports = t
        }
        ).call(this, a("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/not-supported.js", "/lib/exception")
    }
    , {
        "./base.js": 7,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    10: [function(a, i) {
        (function() {
            var e = a("./base.js")
              , t = function(t) {
                e.call(this, t, "SerializationException")
            };
            t.prototype = new e,
            t.prototype.constructor = t,
            i.exports = t
        }
        ).call(this, a("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/serialization.js", "/lib/exception")
    }
    , {
        "./base.js": 7,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    11: [function(s, n) {
        (function() {
            var e = s("./stream.js")
              , a = (s("../amf/spec.js"),
            s("../util/ieee754.js"))
              , t = function(t) {
                this.pointer = 0,
                e.call(this, t)
            };
            t.prototype = new e,
            t.prototype.constructor = t,
            t.prototype.readByte = function() {
                return this.readBytes(1)
            }
            ,
            t.prototype.readRawByte = function() {
                return this.readBytes(1, !0)
            }
            ,
            t.prototype.readRawBytes = function(t) {
                return "undefined" == typeof t && (t = 1),
                this.readBytes(t, !0)
            }
            ,
            t.prototype.readBytes = function(t, e) {
                if ("undefined" == typeof t && (t = 1),
                "undefined" == typeof e && (e = !1),
                value = this.getRaw().substr(this.pointer, t),
                this.pointer += value.length,
                e)
                    return value;
                for (var a = "", i = 0; i < value.length; i++)
                    a += value.charCodeAt(i);
                return a
            }
            ,
            t.prototype.readDouble = function() {
                var t = this.readRawBytes(8);
                return a.unpack(i(t))
            }
            ;
            var i = function(t) {
                var e = []
                  , a = t.split("");
                for (var i in a)
                    e.push(a[i].toString().charCodeAt(0));
                return e
            };
            n.exports = t
        }
        ).call(this, s("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, s("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/io/input.js", "/lib/io")
    }
    , {
        "../amf/spec.js": 6,
        "../util/ieee754.js": 15,
        "./stream.js": 13,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    12: [function(s, n) {
        (function() {
            var e = s("./stream.js")
              , a = (s("../amf/spec.js"),
            s("../util/ieee754.js"))
              , t = function(t) {
                e.call(this, t)
            };
            t.prototype = new e,
            t.prototype.constructor = t,
            t.prototype.writeByte = function(t) {
                this.raw += String.fromCharCode(t)
            }
            ,
            t.prototype.writeDouble = function(t) {
                this.raw += i(a.pack(t, 11, 52))
            }
            ,
            t.prototype.writeRaw = function(t) {
                this.raw += t
            }
            ;
            var i = function(t) {
                var e = "";
                for (var a in t) {
                    var i = t[a];
                    e += String.fromCharCode(parseInt(i))
                }
                return e
            };
            n.exports = t
        }
        ).call(this, s("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, s("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/io/output.js", "/lib/io")
    }
    , {
        "../amf/spec.js": 6,
        "../util/ieee754.js": 15,
        "./stream.js": 13,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    13: [function(t, e) {
        (function() {
            var t = function(t) {
                t && "undefined" != typeof t || (t = ""),
                this.raw = t.toString()
            };
            t.prototype = {
                getRaw: function() {
                    return this.raw
                },
                toString: function() {
                    return this.getRaw()
                }
            },
            e.exports = t
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/io/stream.js", "/lib/io")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    14: [function(t, e) {
        (function() {
            var t = function(t) {
                this.data = t
            };
            t.prototype = {
                getData: function() {
                    return this.data
                },
                setData: function(t) {
                    this.data = t
                },
                toString: function() {
                    return this.getData()
                }
            },
            e.exports = t
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/type/bytearray.js", "/lib/type")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    15: [function(t, a) {
        (function() {
            function t(t) {
                var e, a, i, s, n, r, o, l, c = 11, p = 52, h = (1 << c - 1) - 1;
                for (isNaN(t) ? (a = (1 << h) - 1,
                i = Math.pow(2, p - 1),
                e = 0) : 1 / 0 === t || t === -1 / 0 ? (a = (1 << h) - 1,
                i = 0,
                e = 0 > t ? 1 : 0) : 0 === t ? (a = 0,
                i = 0,
                e = 1 / t === -1 / 0 ? 1 : 0) : (e = 0 > t,
                t = Math.abs(t),
                t >= Math.pow(2, 1 - h) ? (s = Math.min(Math.floor(Math.log(t) / Math.LN2), h),
                a = s + h,
                i = Math.round(t * Math.pow(2, p - s) - Math.pow(2, p))) : (a = 0,
                i = Math.round(t / Math.pow(2, 1 - h - p)))),
                r = [],
                n = p; n; n -= 1)
                    r.push(i % 2 ? 1 : 0),
                    i = Math.floor(i / 2);
                for (n = c; n; n -= 1)
                    r.push(a % 2 ? 1 : 0),
                    a = Math.floor(a / 2);
                for (r.push(e ? 1 : 0),
                r.reverse(),
                o = r.join(""),
                l = []; o.length; )
                    l.push(parseInt(o.substring(0, 8), 2)),
                    o = o.substring(8);
                return l
            }
            function e(t) {
                var e, a, i, s, n, r, o, l, c = 11, p = 52, h = [];
                for (e = t.length; e; e -= 1)
                    for (i = t[e - 1],
                    a = 8; a; a -= 1)
                        h.push(i % 2 ? 1 : 0),
                        i >>= 1;
                return h.reverse(),
                s = h.join(""),
                n = (1 << c - 1) - 1,
                r = parseInt(s.substring(0, 1), 2) ? -1 : 1,
                o = parseInt(s.substring(1, 1 + c), 2),
                l = parseInt(s.substring(1 + c), 2),
                o === (1 << c) - 1 ? 0 !== l ? 0 / 0 : 1 / 0 * r : o > 0 ? r * Math.pow(2, o - n) * (1 + l / Math.pow(2, p)) : 0 !== l ? r * Math.pow(2, -(n - 1)) * (l / Math.pow(2, p)) : 0 > r ? -0 : 0
            }
            a.exports = {
                pack: t,
                unpack: e
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/ieee754.js", "/lib/util")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    16: [function(t, e) {
        (function() {
            e.exports = function(t, e, a) {
                if (void 0 === t || null === t)
                    throw new TypeError('"array" is null or not defined');
                var i = t.length >>> 0;
                for (a = +a || 0,
                1 / 0 === Math.abs(a) && (a = 0),
                0 > a && (a += i,
                0 > a && (a = 0)); i > a; a++)
                    if (t[a] === e)
                        return a;
                return -1
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/indexof.js", "/lib/util")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    17: [function(s, n) {
        (function() {
            var i = s("./../amf/amf.js")
              , t = function(t) {
                return t ? "exportData"in t && "importData"in t : !1
            }
              , e = function(t, e) {
                return "object" == typeof t && i.CLASS_MAPPING_FIELD in t ? e & i.CLASS_MAPPING ? t._classMapping : "" : ""
            }
              , a = function(t) {
                if (!t)
                    return [];
                var e = [];
                for (var a in t)
                    a != i.CLASS_MAPPING_FIELD && "function" != typeof t[a] && e.push(a);
                return e
            };
            n.exports = {
                isSerializable: t,
                getClassName: e,
                getObjectKeys: a
            }
        }
        ).call(this, s("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, s("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/object.js", "/lib/util")
    }
    , {
        "./../amf/amf.js": 2,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    18: [function(r, o) {
        (function() {
            var i = r("./indexof.js")
              , t = function() {
                this.store = {},
                this.store[t.TYPE_STRING] = [],
                this.store[t.TYPE_OBJECT] = []
            }
              , e = function(t, e) {
                var a = i(this.store[e], t);
                return a >= 0 ? a : this.validate(t) ? (this.addReference(t, e),
                !1) : !1
            }
              , a = function(t, e) {
                if (!this.store.hasOwnProperty(e))
                    return !1;
                var a = this.store[e].length;
                return t >= a ? !1 : a ? this.store[e][t] : !1
            }
              , s = function(t) {
                return null === t || "string" == typeof t && !t.length ? !1 : !0
            }
              , n = function(t, e) {
                return this.validate(t) ? (this.store[e].push(t),
                t) : !1
            };
            t.prototype = {
                getReference: e,
                addReference: n,
                getByReference: a,
                validate: s
            },
            t.TYPE_STRING = "string",
            t.TYPE_OBJECT = "object",
            o.exports = t
        }
        ).call(this, r("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, r("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/reference-store.js", "/lib/util")
    }
    , {
        "./indexof.js": 16,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    19: [function(q, t, Y) {
        (function(t, N, l) {
            function l(t, e, a) {
                if (!(this instanceof l))
                    return new l(t,e,a);
                var i = typeof t;
                if ("base64" === e && "string" === i)
                    for (t = G(t); t.length % 4 !== 0; )
                        t += "=";
                var s;
                if ("number" === i)
                    s = T(t);
                else if ("string" === i)
                    s = l.byteLength(t, e);
                else {
                    if ("object" !== i)
                        throw new Error("First argument needs to be a number, array or string.");
                    s = T(t.length)
                }
                var n;
                l._useTypedArrays ? n = C(new Uint8Array(s)) : (n = this,
                n.length = s,
                n._isBuffer = !0);
                var r;
                if (l._useTypedArrays && "function" == typeof Uint8Array && t instanceof Uint8Array)
                    n._set(t);
                else if (j(t))
                    for (r = 0; s > r; r++)
                        n[r] = l.isBuffer(t) ? t.readUInt8(r) : t[r];
                else if ("string" === i)
                    n.write(t, 0, e);
                else if ("number" === i && !l._useTypedArrays && !a)
                    for (r = 0; s > r; r++)
                        n[r] = 0;
                return n
            }
            function o(t, e, a, i) {
                a = Number(a) || 0;
                var s = t.length - a;
                i ? (i = Number(i),
                i > s && (i = s)) : i = s;
                var n = e.length;
                P(n % 2 === 0, "Invalid hex string"),
                i > n / 2 && (i = n / 2);
                for (var r = 0; i > r; r++) {
                    var o = parseInt(e.substr(2 * r, 2), 16);
                    P(!isNaN(o), "Invalid hex string"),
                    t[a + r] = o
                }
                return l._charsWritten = 2 * r,
                r
            }
            function c(t, e, a, i) {
                var s = l._charsWritten = A(x(e), t, a, i);
                return s
            }
            function p(t, e, a, i) {
                var s = l._charsWritten = A(K(e), t, a, i);
                return s
            }
            function h(t, e, a, i) {
                return p(t, e, a, i)
            }
            function d(t, e, a, i) {
                var s = l._charsWritten = A(I(e), t, a, i);
                return s
            }
            function v(t, e, a, i) {
                var s = l._charsWritten = A(z(e), t, a, i);
                return s
            }
            function F(t, e, a) {
                return B.fromByteArray(0 === e && a === t.length ? t : t.slice(e, a))
            }
            function D(t, e, a) {
                var i = ""
                  , s = "";
                a = Math.min(t.length, a);
                for (var n = e; a > n; n++)
                    t[n] <= 127 ? (i += L(s) + String.fromCharCode(t[n]),
                    s = "") : s += "%" + t[n].toString(16);
                return i + L(s)
            }
            function n(t, e, a) {
                var i = "";
                a = Math.min(t.length, a);
                for (var s = e; a > s; s++)
                    i += String.fromCharCode(t[s]);
                return i
            }
            function V(t, e, a) {
                return n(t, e, a)
            }
            function U(t, e, a) {
                var i = t.length;
                (!e || 0 > e) && (e = 0),
                (!a || 0 > a || a > i) && (a = i);
                for (var s = "", n = e; a > n; n++)
                    s += S(t[n]);
                return s
            }
            function W(t, e, a) {
                for (var i = t.slice(e, a), s = "", n = 0; n < i.length; n += 2)
                    s += String.fromCharCode(i[n] + 256 * i[n + 1]);
                return s
            }
            function u(t, e, a, i) {
                i || (P("boolean" == typeof a, "missing or invalid endian"),
                P(void 0 !== e && null !== e, "missing offset"),
                P(e + 1 < t.length, "Trying to read beyond buffer length"));
                var s = t.length;
                if (!(e >= s)) {
                    var n;
                    return a ? (n = t[e],
                    s > e + 1 && (n |= t[e + 1] << 8)) : (n = t[e] << 8,
                    s > e + 1 && (n |= t[e + 1])),
                    n
                }
            }
            function m(t, e, a, i) {
                i || (P("boolean" == typeof a, "missing or invalid endian"),
                P(void 0 !== e && null !== e, "missing offset"),
                P(e + 3 < t.length, "Trying to read beyond buffer length"));
                var s = t.length;
                if (!(e >= s)) {
                    var n;
                    return a ? (s > e + 2 && (n = t[e + 2] << 16),
                    s > e + 1 && (n |= t[e + 1] << 8),
                    n |= t[e],
                    s > e + 3 && (n += t[e + 3] << 24 >>> 0)) : (s > e + 1 && (n = t[e + 1] << 16),
                    s > e + 2 && (n |= t[e + 2] << 8),
                    s > e + 3 && (n |= t[e + 3]),
                    n += t[e] << 24 >>> 0),
                    n
                }
            }
            function a(t, e, a, i) {
                i || (P("boolean" == typeof a, "missing or invalid endian"),
                P(void 0 !== e && null !== e, "missing offset"),
                P(e + 1 < t.length, "Trying to read beyond buffer length"));
                var s = t.length;
                if (!(e >= s)) {
                    var n = u(t, e, a, !0)
                      , r = 32768 & n;
                    return r ? -1 * (65535 - n + 1) : n
                }
            }
            function i(t, e, a, i) {
                i || (P("boolean" == typeof a, "missing or invalid endian"),
                P(void 0 !== e && null !== e, "missing offset"),
                P(e + 3 < t.length, "Trying to read beyond buffer length"));
                var s = t.length;
                if (!(e >= s)) {
                    var n = m(t, e, a, !0)
                      , r = 2147483648 & n;
                    return r ? -1 * (4294967295 - n + 1) : n
                }
            }
            function s(t, e, a, i) {
                return i || (P("boolean" == typeof a, "missing or invalid endian"),
                P(e + 3 < t.length, "Trying to read beyond buffer length")),
                H.read(t, e, a, 23, 4)
            }
            function r(t, e, a, i) {
                return i || (P("boolean" == typeof a, "missing or invalid endian"),
                P(e + 7 < t.length, "Trying to read beyond buffer length")),
                H.read(t, e, a, 52, 8)
            }
            function f(t, e, a, i, s) {
                s || (P(void 0 !== e && null !== e, "missing value"),
                P("boolean" == typeof i, "missing or invalid endian"),
                P(void 0 !== a && null !== a, "missing offset"),
                P(a + 1 < t.length, "trying to write beyond buffer length"),
                O(e, 65535));
                var n = t.length;
                if (!(a >= n))
                    for (var r = 0, o = Math.min(n - a, 2); o > r; r++)
                        t[a + r] = (e & 255 << 8 * (i ? r : 1 - r)) >>> 8 * (i ? r : 1 - r)
            }
            function _(t, e, a, i, s) {
                s || (P(void 0 !== e && null !== e, "missing value"),
                P("boolean" == typeof i, "missing or invalid endian"),
                P(void 0 !== a && null !== a, "missing offset"),
                P(a + 3 < t.length, "trying to write beyond buffer length"),
                O(e, 4294967295));
                var n = t.length;
                if (!(a >= n))
                    for (var r = 0, o = Math.min(n - a, 4); o > r; r++)
                        t[a + r] = e >>> 8 * (i ? r : 3 - r) & 255
            }
            function g(t, e, a, i, s) {
                s || (P(void 0 !== e && null !== e, "missing value"),
                P("boolean" == typeof i, "missing or invalid endian"),
                P(void 0 !== a && null !== a, "missing offset"),
                P(a + 1 < t.length, "Trying to write beyond buffer length"),
                k(e, 32767, -32768));
                var n = t.length;
                a >= n || (e >= 0 ? f(t, e, a, i, s) : f(t, 65535 + e + 1, a, i, s))
            }
            function w(t, e, a, i, s) {
                s || (P(void 0 !== e && null !== e, "missing value"),
                P("boolean" == typeof i, "missing or invalid endian"),
                P(void 0 !== a && null !== a, "missing offset"),
                P(a + 3 < t.length, "Trying to write beyond buffer length"),
                k(e, 2147483647, -2147483648));
                var n = t.length;
                a >= n || (e >= 0 ? _(t, e, a, i, s) : _(t, 4294967295 + e + 1, a, i, s))
            }
            function E(t, e, a, i, s) {
                s || (P(void 0 !== e && null !== e, "missing value"),
                P("boolean" == typeof i, "missing or invalid endian"),
                P(void 0 !== a && null !== a, "missing offset"),
                P(a + 3 < t.length, "Trying to write beyond buffer length"),
                R(e, 34028234663852886e22, -34028234663852886e22));
                var n = t.length;
                a >= n || H.write(t, e, a, i, 23, 4)
            }
            function b(t, e, a, i, s) {
                s || (P(void 0 !== e && null !== e, "missing value"),
                P("boolean" == typeof i, "missing or invalid endian"),
                P(void 0 !== a && null !== a, "missing offset"),
                P(a + 7 < t.length, "Trying to write beyond buffer length"),
                R(e, 17976931348623157e292, -17976931348623157e292));
                var n = t.length;
                a >= n || H.write(t, e, a, i, 52, 8)
            }
            function G(t) {
                return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "")
            }
            function C(t) {
                return t._isBuffer = !0,
                t._get = t.get,
                t._set = t.set,
                t.get = e.get,
                t.set = e.set,
                t.write = e.write,
                t.toString = e.toString,
                t.toLocaleString = e.toString,
                t.toJSON = e.toJSON,
                t.copy = e.copy,
                t.slice = e.slice,
                t.readUInt8 = e.readUInt8,
                t.readUInt16LE = e.readUInt16LE,
                t.readUInt16BE = e.readUInt16BE,
                t.readUInt32LE = e.readUInt32LE,
                t.readUInt32BE = e.readUInt32BE,
                t.readInt8 = e.readInt8,
                t.readInt16LE = e.readInt16LE,
                t.readInt16BE = e.readInt16BE,
                t.readInt32LE = e.readInt32LE,
                t.readInt32BE = e.readInt32BE,
                t.readFloatLE = e.readFloatLE,
                t.readFloatBE = e.readFloatBE,
                t.readDoubleLE = e.readDoubleLE,
                t.readDoubleBE = e.readDoubleBE,
                t.writeUInt8 = e.writeUInt8,
                t.writeUInt16LE = e.writeUInt16LE,
                t.writeUInt16BE = e.writeUInt16BE,
                t.writeUInt32LE = e.writeUInt32LE,
                t.writeUInt32BE = e.writeUInt32BE,
                t.writeInt8 = e.writeInt8,
                t.writeInt16LE = e.writeInt16LE,
                t.writeInt16BE = e.writeInt16BE,
                t.writeInt32LE = e.writeInt32LE,
                t.writeInt32BE = e.writeInt32BE,
                t.writeFloatLE = e.writeFloatLE,
                t.writeFloatBE = e.writeFloatBE,
                t.writeDoubleLE = e.writeDoubleLE,
                t.writeDoubleBE = e.writeDoubleBE,
                t.fill = e.fill,
                t.inspect = e.inspect,
                t.toArrayBuffer = e.toArrayBuffer,
                t
            }
            function y(t, e, a) {
                return "number" != typeof t ? a : (t = ~~t,
                t >= e ? e : t >= 0 ? t : (t += e,
                t >= 0 ? t : 0))
            }
            function T(t) {
                return t = ~~Math.ceil(+t),
                0 > t ? 0 : t
            }
            function M(t) {
                return (Array.isArray || function(t) {
                    return "[object Array]" === Object.prototype.toString.call(t)
                }
                )(t)
            }
            function j(t) {
                return M(t) || l.isBuffer(t) || t && "object" == typeof t && "number" == typeof t.length
            }
            function S(t) {
                return 16 > t ? "0" + t.toString(16) : t.toString(16)
            }
            function x(t) {
                for (var e = [], a = 0; a < t.length; a++) {
                    var i = t.charCodeAt(a);
                    if (127 >= i)
                        e.push(t.charCodeAt(a));
                    else {
                        var s = a;
                        i >= 55296 && 57343 >= i && a++;
                        for (var n = encodeURIComponent(t.slice(s, a + 1)).substr(1).split("%"), r = 0; r < n.length; r++)
                            e.push(parseInt(n[r], 16))
                    }
                }
                return e
            }
            function K(t) {
                for (var e = [], a = 0; a < t.length; a++)
                    e.push(255 & t.charCodeAt(a));
                return e
            }
            function z(t) {
                for (var e, a, i, s = [], n = 0; n < t.length; n++)
                    e = t.charCodeAt(n),
                    a = e >> 8,
                    i = e % 256,
                    s.push(i),
                    s.push(a);
                return s
            }
            function I(t) {
                return B.toByteArray(t)
            }
            function A(t, e, a, i) {
                for (var s = 0; i > s && !(s + a >= e.length || s >= t.length); s++)
                    e[s + a] = t[s];
                return s
            }
            function L(t) {
                try {
                    return decodeURIComponent(t)
                } catch (t) {
                    return String.fromCharCode(65533)
                }
            }
            function O(t, e) {
                P("number" == typeof t, "cannot write a non-number as a number"),
                P(t >= 0, "specified a negative value for writing an unsigned value"),
                P(e >= t, "value is larger than maximum value for type"),
                P(Math.floor(t) === t, "value has a fractional component")
            }
            function k(t, e, a) {
                P("number" == typeof t, "cannot write a non-number as a number"),
                P(e >= t, "value larger than maximum allowed value"),
                P(t >= a, "value smaller than minimum allowed value"),
                P(Math.floor(t) === t, "value has a fractional component")
            }
            function R(t, e, a) {
                P("number" == typeof t, "cannot write a non-number as a number"),
                P(e >= t, "value larger than maximum allowed value"),
                P(t >= a, "value smaller than minimum allowed value")
            }
            function P(t, e) {
                if (!t)
                    throw new Error(e || "Failed assertion")
            }
            var B = q("base64-js")
              , H = q("ieee754");
            Y.Buffer = l,
            Y.SlowBuffer = l,
            Y.INSPECT_MAX_BYTES = 50,
            l.poolSize = 8192,
            l._useTypedArrays = function() {
                if ("undefined" == typeof Uint8Array || "undefined" == typeof ArrayBuffer)
                    return !1;
                try {
                    var t = new Uint8Array(0);
                    return t.foo = function() {
                        return 42
                    }
                    ,
                    42 === t.foo() && "function" == typeof t.subarray
                } catch (t) {
                    return !1
                }
            }(),
            l.isEncoding = function(t) {
                switch (String(t).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "binary":
                case "base64":
                case "raw":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return !0;
                default:
                    return !1
                }
            }
            ,
            l.isBuffer = function(t) {
                return !(null === t || void 0 === t || !t._isBuffer)
            }
            ,
            l.byteLength = function(t, e) {
                var a;
                switch (t += "",
                e || "utf8") {
                case "hex":
                    a = t.length / 2;
                    break;
                case "utf8":
                case "utf-8":
                    a = x(t).length;
                    break;
                case "ascii":
                case "binary":
                case "raw":
                    a = t.length;
                    break;
                case "base64":
                    a = I(t).length;
                    break;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    a = 2 * t.length;
                    break;
                default:
                    throw new Error("Unknown encoding")
                }
                return a
            }
            ,
            l.concat = function(t, e) {
                if (P(M(t), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),
                0 === t.length)
                    return new l(0);
                if (1 === t.length)
                    return t[0];
                var a;
                if ("number" != typeof e)
                    for (e = 0,
                    a = 0; a < t.length; a++)
                        e += t[a].length;
                var i = new l(e)
                  , s = 0;
                for (a = 0; a < t.length; a++) {
                    var n = t[a];
                    n.copy(i, s),
                    s += n.length
                }
                return i
            }
            ,
            l.prototype.write = function(t, e, a, i) {
                if (isFinite(e))
                    isFinite(a) || (i = a,
                    a = void 0);
                else {
                    var s = i;
                    i = e,
                    e = a,
                    a = s
                }
                e = Number(e) || 0;
                var n = this.length - e;
                a ? (a = Number(a),
                a > n && (a = n)) : a = n,
                i = String(i || "utf8").toLowerCase();
                var r;
                switch (i) {
                case "hex":
                    r = o(this, t, e, a);
                    break;
                case "utf8":
                case "utf-8":
                    r = c(this, t, e, a);
                    break;
                case "ascii":
                    r = p(this, t, e, a);
                    break;
                case "binary":
                    r = h(this, t, e, a);
                    break;
                case "base64":
                    r = d(this, t, e, a);
                    break;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    r = v(this, t, e, a);
                    break;
                default:
                    throw new Error("Unknown encoding")
                }
                return r
            }
            ,
            l.prototype.toString = function(t, e, a) {
                var i = this;
                if (t = String(t || "utf8").toLowerCase(),
                e = Number(e) || 0,
                a = void 0 !== a ? Number(a) : a = i.length,
                a === e)
                    return "";
                var s;
                switch (t) {
                case "hex":
                    s = U(i, e, a);
                    break;
                case "utf8":
                case "utf-8":
                    s = D(i, e, a);
                    break;
                case "ascii":
                    s = n(i, e, a);
                    break;
                case "binary":
                    s = V(i, e, a);
                    break;
                case "base64":
                    s = F(i, e, a);
                    break;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    s = W(i, e, a);
                    break;
                default:
                    throw new Error("Unknown encoding")
                }
                return s
            }
            ,
            l.prototype.toJSON = function() {
                return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            }
            ,
            l.prototype.copy = function(t, e, a, i) {
                var s = this;
                if (a || (a = 0),
                i || 0 === i || (i = this.length),
                e || (e = 0),
                i !== a && 0 !== t.length && 0 !== s.length) {
                    P(i >= a, "sourceEnd < sourceStart"),
                    P(e >= 0 && e < t.length, "targetStart out of bounds"),
                    P(a >= 0 && a < s.length, "sourceStart out of bounds"),
                    P(i >= 0 && i <= s.length, "sourceEnd out of bounds"),
                    i > this.length && (i = this.length),
                    t.length - e < i - a && (i = t.length - e + a);
                    for (var n = 0; i - a > n; n++)
                        t[n + e] = this[n + a]
                }
            }
            ,
            l.prototype.slice = function(t, e) {
                var a = this.length;
                if (t = y(t, a, 0),
                e = y(e, a, a),
                l._useTypedArrays)
                    return C(this.subarray(t, e));
                for (var i = e - t, s = new l(i,void 0,!0), n = 0; i > n; n++)
                    s[n] = this[n + t];
                return s
            }
            ,
            l.prototype.get = function(t) {
                return console.log(".get() is deprecated. Access using array indexes instead."),
                this.readUInt8(t)
            }
            ,
            l.prototype.set = function(t, e) {
                return console.log(".set() is deprecated. Access using array indexes instead."),
                this.writeUInt8(t, e)
            }
            ,
            l.prototype.readUInt8 = function(t, e) {
                return e || (P(void 0 !== t && null !== t, "missing offset"),
                P(t < this.length, "Trying to read beyond buffer length")),
                t >= this.length ? void 0 : this[t]
            }
            ,
            l.prototype.readUInt16LE = function(t, e) {
                return u(this, t, !0, e)
            }
            ,
            l.prototype.readUInt16BE = function(t, e) {
                return u(this, t, !1, e)
            }
            ,
            l.prototype.readUInt32LE = function(t, e) {
                return m(this, t, !0, e)
            }
            ,
            l.prototype.readUInt32BE = function(t, e) {
                return m(this, t, !1, e)
            }
            ,
            l.prototype.readInt8 = function(t, e) {
                if (e || (P(void 0 !== t && null !== t, "missing offset"),
                P(t < this.length, "Trying to read beyond buffer length")),
                !(t >= this.length)) {
                    var a = 128 & this[t];
                    return a ? -1 * (255 - this[t] + 1) : this[t]
                }
            }
            ,
            l.prototype.readInt16LE = function(t, e) {
                return a(this, t, !0, e)
            }
            ,
            l.prototype.readInt16BE = function(t, e) {
                return a(this, t, !1, e)
            }
            ,
            l.prototype.readInt32LE = function(t, e) {
                return i(this, t, !0, e)
            }
            ,
            l.prototype.readInt32BE = function(t, e) {
                return i(this, t, !1, e)
            }
            ,
            l.prototype.readFloatLE = function(t, e) {
                return s(this, t, !0, e)
            }
            ,
            l.prototype.readFloatBE = function(t, e) {
                return s(this, t, !1, e)
            }
            ,
            l.prototype.readDoubleLE = function(t, e) {
                return r(this, t, !0, e)
            }
            ,
            l.prototype.readDoubleBE = function(t, e) {
                return r(this, t, !1, e)
            }
            ,
            l.prototype.writeUInt8 = function(t, e, a) {
                a || (P(void 0 !== t && null !== t, "missing value"),
                P(void 0 !== e && null !== e, "missing offset"),
                P(e < this.length, "trying to write beyond buffer length"),
                O(t, 255)),
                e >= this.length || (this[e] = t)
            }
            ,
            l.prototype.writeUInt16LE = function(t, e, a) {
                f(this, t, e, !0, a)
            }
            ,
            l.prototype.writeUInt16BE = function(t, e, a) {
                f(this, t, e, !1, a)
            }
            ,
            l.prototype.writeUInt32LE = function(t, e, a) {
                _(this, t, e, !0, a)
            }
            ,
            l.prototype.writeUInt32BE = function(t, e, a) {
                _(this, t, e, !1, a)
            }
            ,
            l.prototype.writeInt8 = function(t, e, a) {
                a || (P(void 0 !== t && null !== t, "missing value"),
                P(void 0 !== e && null !== e, "missing offset"),
                P(e < this.length, "Trying to write beyond buffer length"),
                k(t, 127, -128)),
                e >= this.length || (t >= 0 ? this.writeUInt8(t, e, a) : this.writeUInt8(255 + t + 1, e, a))
            }
            ,
            l.prototype.writeInt16LE = function(t, e, a) {
                g(this, t, e, !0, a)
            }
            ,
            l.prototype.writeInt16BE = function(t, e, a) {
                g(this, t, e, !1, a)
            }
            ,
            l.prototype.writeInt32LE = function(t, e, a) {
                w(this, t, e, !0, a)
            }
            ,
            l.prototype.writeInt32BE = function(t, e, a) {
                w(this, t, e, !1, a)
            }
            ,
            l.prototype.writeFloatLE = function(t, e, a) {
                E(this, t, e, !0, a)
            }
            ,
            l.prototype.writeFloatBE = function(t, e, a) {
                E(this, t, e, !1, a)
            }
            ,
            l.prototype.writeDoubleLE = function(t, e, a) {
                b(this, t, e, !0, a)
            }
            ,
            l.prototype.writeDoubleBE = function(t, e, a) {
                b(this, t, e, !1, a)
            }
            ,
            l.prototype.fill = function(t, e, a) {
                if (t || (t = 0),
                e || (e = 0),
                a || (a = this.length),
                "string" == typeof t && (t = t.charCodeAt(0)),
                P("number" == typeof t && !isNaN(t), "value is not a number"),
                P(a >= e, "end < start"),
                a !== e && 0 !== this.length) {
                    P(e >= 0 && e < this.length, "start out of bounds"),
                    P(a >= 0 && a <= this.length, "end out of bounds");
                    for (var i = e; a > i; i++)
                        this[i] = t
                }
            }
            ,
            l.prototype.inspect = function() {
                for (var t = [], e = this.length, a = 0; e > a; a++)
                    if (t[a] = S(this[a]),
                    a === Y.INSPECT_MAX_BYTES) {
                        t[a + 1] = "...";
                        break
                    }
                return "<Buffer " + t.join(" ") + ">"
            }
            ,
            l.prototype.toArrayBuffer = function() {
                if ("function" == typeof Uint8Array) {
                    if (l._useTypedArrays)
                        return new l(this).buffer;
                    for (var t = new Uint8Array(this.length), e = 0, a = t.length; a > e; e += 1)
                        t[e] = this[e];
                    return t.buffer
                }
                throw new Error("Buffer.toArrayBuffer not supported in this browser")
            }
            ;
            var e = l.prototype
        }
        ).call(this, q("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, q("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/buffer/index.js", "/node_modules/browserify/node_modules/buffer")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        "base64-js": 20,
        buffer: 19,
        ieee754: 21
    }],
    20: [function(t, o) {
        (function() {
            var l = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            !function() {
                "use strict";
                function p(t) {
                    var e = t.charCodeAt(0);
                    return e === a ? 62 : e === i ? 63 : s > e ? -1 : s + 10 > e ? e - s + 26 + 26 : r + 26 > e ? e - r : n + 26 > e ? e - n + 26 : void 0
                }
                function t(t) {
                    function e(t) {
                        o[c++] = t
                    }
                    var a, i, s, n, r, o;
                    if (t.length % 4 > 0)
                        throw new Error("Invalid string. Length must be a multiple of 4");
                    var l = t.length;
                    r = "=" === t.charAt(l - 2) ? 2 : "=" === t.charAt(l - 1) ? 1 : 0,
                    o = new h(3 * t.length / 4 - r),
                    s = r > 0 ? t.length - 4 : t.length;
                    var c = 0;
                    for (a = 0,
                    i = 0; s > a; a += 4,
                    i += 3)
                        n = p(t.charAt(a)) << 18 | p(t.charAt(a + 1)) << 12 | p(t.charAt(a + 2)) << 6 | p(t.charAt(a + 3)),
                        e((16711680 & n) >> 16),
                        e((65280 & n) >> 8),
                        e(255 & n);
                    return 2 === r ? (n = p(t.charAt(a)) << 2 | p(t.charAt(a + 1)) >> 4,
                    e(255 & n)) : 1 === r && (n = p(t.charAt(a)) << 10 | p(t.charAt(a + 1)) << 4 | p(t.charAt(a + 2)) >> 2,
                    e(n >> 8 & 255),
                    e(255 & n)),
                    o
                }
                function e(t) {
                    function e(t) {
                        return l.charAt(t)
                    }
                    function a(t) {
                        return e(t >> 18 & 63) + e(t >> 12 & 63) + e(t >> 6 & 63) + e(63 & t)
                    }
                    var i, s, n, r = t.length % 3, o = "";
                    for (i = 0,
                    n = t.length - r; n > i; i += 3)
                        s = (t[i] << 16) + (t[i + 1] << 8) + t[i + 2],
                        o += a(s);
                    switch (r) {
                    case 1:
                        s = t[t.length - 1],
                        o += e(s >> 2),
                        o += e(s << 4 & 63),
                        o += "==";
                        break;
                    case 2:
                        s = (t[t.length - 2] << 8) + t[t.length - 1],
                        o += e(s >> 10),
                        o += e(s >> 4 & 63),
                        o += e(s << 2 & 63),
                        o += "="
                    }
                    return o
                }
                var h = "undefined" != typeof Uint8Array ? Uint8Array : Array
                  , a = ("0".charCodeAt(0),
                "+".charCodeAt(0))
                  , i = "/".charCodeAt(0)
                  , s = "0".charCodeAt(0)
                  , n = "a".charCodeAt(0)
                  , r = "A".charCodeAt(0);
                o.exports.toByteArray = t,
                o.exports.fromByteArray = e
            }()
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js", "/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    21: [function(t, e, a) {
        (function() {
            a.read = function(t, e, a, i, s) {
                var n, r, o = 8 * s - i - 1, l = (1 << o) - 1, c = l >> 1, p = -7, h = a ? s - 1 : 0, d = a ? -1 : 1, v = t[e + h];
                for (h += d,
                n = v & (1 << -p) - 1,
                v >>= -p,
                p += o; p > 0; n = 256 * n + t[e + h],
                h += d,
                p -= 8)
                    ;
                for (r = n & (1 << -p) - 1,
                n >>= -p,
                p += i; p > 0; r = 256 * r + t[e + h],
                h += d,
                p -= 8)
                    ;
                if (0 === n)
                    n = 1 - c;
                else {
                    if (n === l)
                        return r ? 0 / 0 : 1 / 0 * (v ? -1 : 1);
                    r += Math.pow(2, i),
                    n -= c
                }
                return (v ? -1 : 1) * r * Math.pow(2, n - i)
            }
            ,
            a.write = function(t, e, a, i, s, n) {
                var r, o, l, c = 8 * n - s - 1, p = (1 << c) - 1, h = p >> 1, d = 23 === s ? Math.pow(2, -24) - Math.pow(2, -77) : 0, v = i ? 0 : n - 1, u = i ? 1 : -1, m = 0 > e || 0 === e && 0 > 1 / e ? 1 : 0;
                for (e = Math.abs(e),
                isNaN(e) || 1 / 0 === e ? (o = isNaN(e) ? 1 : 0,
                r = p) : (r = Math.floor(Math.log(e) / Math.LN2),
                e * (l = Math.pow(2, -r)) < 1 && (r--,
                l *= 2),
                e += r + h >= 1 ? d / l : d * Math.pow(2, 1 - h),
                e * l >= 2 && (r++,
                l /= 2),
                r + h >= p ? (o = 0,
                r = p) : r + h >= 1 ? (o = (e * l - 1) * Math.pow(2, s),
                r += h) : (o = e * Math.pow(2, h - 1) * Math.pow(2, s),
                r = 0)); s >= 8; t[a + v] = 255 & o,
                v += u,
                o /= 256,
                s -= 8)
                    ;
                for (r = r << s | o,
                c += s; c > 0; t[a + v] = 255 & r,
                v += u,
                r /= 256,
                c -= 8)
                    ;
                t[a + v - u] |= 128 * m
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js", "/node_modules/browserify/node_modules/buffer/node_modules/ieee754")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    22: [function(t, e) {
        (function(t) {
            var t = e.exports = {};
            t.nextTick = function() {
                var t = "undefined" != typeof window && window.setImmediate
                  , e = "undefined" != typeof window && window.postMessage && window.addEventListener;
                if (t)
                    return function(t) {
                        return window.setImmediate(t)
                    }
                    ;
                if (e) {
                    var i = [];
                    return window.addEventListener("message", function(t) {
                        var e = t.source;
                        if ((e === window || null === e) && "process-tick" === t.data && (t.stopPropagation(),
                        i.length > 0)) {
                            var a = i.shift();
                            a()
                        }
                    }, !0),
                    function(t) {
                        i.push(t),
                        window.postMessage("process-tick", "*")
                    }
                }
                return function(t) {
                    setTimeout(t, 0)
                }
            }(),
            t.title = "browser",
            t.browser = !0,
            t.env = {},
            t.argv = [],
            t.binding = function() {
                throw new Error("process.binding is not supported")
            }
            ,
            t.cwd = function() {
                return "/"
            }
            ,
            t.chdir = function() {
                throw new Error("process.chdir is not supported")
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js", "/node_modules/browserify/node_modules/insert-module-globals/node_modules/process")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    23: [function(t, b, C) {
        (function(t, E) {
            !function(t) {
                function r(t) {
                    for (var e, a, i = [], s = 0, n = t.length; n > s; )
                        e = t.charCodeAt(s++),
                        e >= 55296 && 56319 >= e && n > s ? (a = t.charCodeAt(s++),
                        56320 == (64512 & a) ? i.push(((1023 & e) << 10) + (1023 & a) + 65536) : (i.push(e),
                        s--)) : i.push(e);
                    return i
                }
                function i(t) {
                    for (var e, a = t.length, i = -1, s = ""; ++i < a; )
                        e = t[i],
                        e > 65535 && (e -= 65536,
                        s += m(e >>> 10 & 1023 | 55296),
                        e = 56320 | 1023 & e),
                        s += m(e);
                    return s
                }
                function a(t, e) {
                    return m(t >> e & 63 | 128)
                }
                function o(t) {
                    if (0 == (4294967168 & t))
                        return m(t);
                    var e = "";
                    return 0 == (4294965248 & t) ? e = m(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (e = m(t >> 12 & 15 | 224),
                    e += a(t, 6)) : 0 == (4292870144 & t) && (e = m(t >> 18 & 7 | 240),
                    e += a(t, 12),
                    e += a(t, 6)),
                    e += m(63 & t | 128)
                }
                function e(t) {
                    for (var e, a = r(t), i = a.length, s = -1, n = ""; ++s < i; )
                        e = a[s],
                        n += o(e);
                    return n
                }
                function n() {
                    if (u >= v)
                        throw Error("Invalid byte index");
                    var t = 255 & d[u];
                    if (u++,
                    128 == (192 & t))
                        return 63 & t;
                    throw Error("Invalid continuation byte")
                }
                function s() {
                    var t, e, a, i, s;
                    if (u > v)
                        throw Error("Invalid byte index");
                    if (u == v)
                        return !1;
                    if (t = 255 & d[u],
                    u++,
                    0 == (128 & t))
                        return t;
                    if (192 == (224 & t)) {
                        var e = n();
                        if (s = (31 & t) << 6 | e,
                        s >= 128)
                            return s;
                        throw Error("Invalid continuation byte")
                    }
                    if (224 == (240 & t)) {
                        if (e = n(),
                        a = n(),
                        s = (15 & t) << 12 | e << 6 | a,
                        s >= 2048)
                            return s;
                        throw Error("Invalid continuation byte")
                    }
                    if (240 == (248 & t) && (e = n(),
                    a = n(),
                    i = n(),
                    s = (15 & t) << 18 | e << 12 | a << 6 | i,
                    s >= 65536 && 1114111 >= s))
                        return s;
                    throw Error("Invalid UTF-8 detected")
                }
                function l(t) {
                    d = r(t),
                    v = d.length,
                    u = 0;
                    for (var e, a = []; (e = s()) !== !1; )
                        a.push(e);
                    return i(a)
                }
                var c = "object" == typeof C && C
                  , p = "object" == typeof b && b && b.exports == c && b
                  , h = "object" == typeof E && E;
                (h.global === h || h.window === h) && (t = h);
                var d, v, u, m = String.fromCharCode, f = {
                    version: "2.0.0",
                    encode: e,
                    decode: l
                };
                if ("function" == typeof define && "object" == typeof define.amd && define.amd)
                    define(function() {
                        return f
                    });
                else if (c && !c.nodeType)
                    if (p)
                        p.exports = f;
                    else {
                        var _ = {}
                          , g = _.hasOwnProperty;
                        for (var w in f)
                            g.call(f, w) && (c[w] = f[w])
                    }
                else
                    t.utf8 = f
            }(this)
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/utf8/utf8.js", "/node_modules/utf8")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }]
}, {}, [1]);
var canvas = {
    animation: {},
    utils: {},
    ui: {},
    px: {
        Loader: PIXI.loader,
        Container: PIXI.Container,
        Sprite: PIXI.Sprite,
        Ticker: PIXI.ticker.Ticker,
        Application: PIXI.Application,
        ColorMatrixFilter: PIXI.filters.ColorMatrixFilter,
        TextureEmpty: PIXI.Texture.EMPTY,
        SlicedSprite: PIXI.mesh.NineSlicePlane,
        Graphics: PIXI.Graphics,
        Text: PIXI.Text,
        BitmapText: PIXI.extras.BitmapText,
        Point: PIXI.Point,
        Rectangle: PIXI.Rectangle,
        Circle: PIXI.Circle,
        Ellipse: PIXI.Ellipse,
        BlendMode: PIXI.BLEND_MODES,
        ScaleMode: PIXI.SCALE_MODES,
        GlowFilter: PIXI.filters.GlowFilter,
        TiltShiftFilter: PIXI.filters.TiltShiftFilter,
        DropShadowFilter: PIXI.filters.DropShadowFilter,
        AlphaFilter: PIXI.filters.AlphaFilter,
        TilingSprite: PIXI.extras.TilingSprite,
        utils: PIXI.utils,
        Texture: PIXI.Texture,
        ResponseType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE,
        LoadType: PIXI.loaders.Resource.LOAD_TYPE,
        Tween: TWEEN,
        inflate: pako.inflate,
        Howl: Howl,
        AMF: AMF
    },
    data: {
        battle: {},
        location: {},
        manor: {
            throne: {}
        },
        leftMenu: {},
        cube: {},
        clanWar: {}
    },
    app: {
        view: {
            window: {}
        },
        battle: {
            view: {
                elements: {}
            },
            engine: {}
        },
        mem: {
            view: {}
        },
        location: {
            view: {
                elements: {},
                popups: {},
                fronts: {}
            }
        },
        world: {
            view: {},
            engine: {},
            manor: {
                popup: {}
            }
        },
        manor: {
            view: {
                controls: {
                    elements: {},
                    camp: {},
                    throne: {}
                }
            }
        },
        hunt: {
            view: {
                elements: {}
            },
            engine: {}
        },
        inst: {
            view: {
                combo: {}
            }
        },
        user: {
            view: {}
        },
        leftMenu: {
            view: {}
        },
        avatar: {
            view: {}
        },
        topMenu: {
            view: {}
        },
        rightMenu: {
            view: {
                menu: {}
            }
        },
        compass: {
            view: {}
        },
        magic: {
            view: {
                slots: {}
            }
        },
        birthday: {
            view: {}
        },
        cube: {
            view: {}
        },
        casino: {
            view: {}
        },
        diceGame: {
            view: {}
        },
        treasure: {
            view: {}
        },
        wheel: {
            view: {}
        },
        mirror: {
            view: {}
        },
        clanWar: {
            view: {}
        },
        clanCitadel: {
            view: {
                sanctuary: {}
            }
        },
        barber: {},
        firstBattle: {
            view: {}
        },
        puzzle: {
            view: {}
        }
    },
    modules: {},
    isSupported: function() {
        var t = /Chrome\/(\d+)/.exec(navigator.userAgent);
        if (t && t[1] && parseInt(t[1]) < 30) {
            return false
        }
        return true
    },
    isMobile: function() {
        return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator && navigator.userAgent)
    },
    getClientVersion: function() {
        var t = /Client\/(\d+)/.exec(navigator.userAgent);
        if (t && t[1]) {
            return parseInt(t[1])
        }
        return 0
    }
};
canvas.px.Container.prototype.startDrag = function(t, e, a, i) {
    this._dragScale = i || 1;
    this._dragLockPoint = t || new canvas.px.Point;
    this._dragBounds = e;
    this._dragStartPosition = this.parent.toGlobal(new canvas.px.Point(this.x,this.y));
    this._dragStartViewPosition = new canvas.px.Point(this.x,this.y);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this._dragMouseMoveHandler, this);
    if (a) {
        this._dragMouseMoveHandler({
            params: {
                x: a.x,
                y: a.y,
                mouseData: {
                    offsetX: a.x,
                    offsetY: a.y
                }
            }
        })
    }
}
;
canvas.px.Container.prototype.stopDrag = function() {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this._dragMouseMoveHandler, this)
}
;
canvas.px.Container.prototype._dragMouseMoveHandler = function(t) {
    var e = new canvas.px.Point(this._dragStartViewPosition.x + (t.params.mouseData.offsetX - this._dragStartPosition.x - this._dragLockPoint.x),this._dragStartViewPosition.y + (t.params.mouseData.offsetY - this._dragStartPosition.y - this._dragLockPoint.y));
    if (this._dragBounds) {
        e.x = e.x < this._dragBounds.x ? this._dragBounds.x : e.x > this._dragBounds.x + this._dragBounds.width ? this._dragBounds.x + this._dragBounds.width : e.x;
        e.y = e.y < this._dragBounds.y ? this._dragBounds.y : e.y > this._dragBounds.y + this._dragBounds.height ? this._dragBounds.y + this._dragBounds.height : e.y
    }
    this.position.set(e.x * this._dragScale, e.y * this._dragScale)
}
;
if (canvas.px.Container.prototype.numChildren == undefined) {
    Object.defineProperty(canvas.px.Container.prototype, "numChildren", {
        get: function() {
            return this.children ? this.children.length : 0
        }
    })
}
canvas.px.Container.prototype.contains = function(t) {
    return t && t.parent == this
}
;
canvas.px.Container.prototype.removeIfExist = function(t) {
    if (this.contains(t))
        return this.removeChild(t);
    return null
}
;
canvas.px.Rectangle.prototype.intersects = function(t) {
    if (t.x < this.x + this.width && this.x < t.x + t.width && t.y < this.y + this.height)
        return this.y < t.y + t.height;
    else
        return false
}
;
canvas.px.Rectangle.prototype.intersectsPoint = function(t) {
    return t.x <= this.x + this.width && t.x >= this.x && t.y <= this.y + this.height && t.y >= this.y
}
;
canvas.px.SlicedSprite.prototype.setSize = function(t, e) {
    if (t > 0)
        this.width = t;
    if (e > 0)
        this.height = e
}
;
canvas.px.Container.prototype.getObjectsUnderPoint = function(t) {
    var e = [], a = this.children.length, i, s;
    for (i = 0; i < a; i++) {
        s = this.children[i];
        if (s.getBounds().intersectsPoint(t)) {
            e.push(s);
            e = e.concat(s.getObjectsUnderPoint(new canvas.px.Point(t.x,t.y)))
        }
    }
    return e
}
;
if (canvas.isMobile()) {
    canvas.px.Container.prototype.pointertap = function(t) {
        if (this.click) {
            this.click.call(this, t)
        }
    }
    ;
    canvas.px.Container.prototype.pointerdown = function(t) {
        if (this.mousedown) {
            this.mousedown.call(this, t)
        }
    }
    ;
    canvas.px.Container.prototype.pointerup = function(t) {
        if (this.mouseup) {
            this.mouseup.call(this, t)
        }
    }
    ;
    canvas.px.Container.prototype.pointermove = function(t) {
        if (this.mousemove) {
            this.mousemove.call(this, t)
        }
    }
    ;
    canvas.px.Container.prototype.pointerout = function(t) {
        if (this.mouseout) {
            this.mouseout.call(this, t)
        }
    }
    ;
    canvas.px.Container.prototype.pointerover = function(t) {
        if (this.mouseover) {
            this.mouseover.call(this, t)
        }
    }
}
canvas.Config = {
    init: function() {
        if (!this.domain && document.domain) {
            this.domain = "http" + (document.URL.substr(0, 5) == "https" ? "s" : "") + "://" + document.domain + (document.location.port ? ":" + document.location.port : "");
            if (this.domain.indexOf("localhost") >= 0 || this.domain.indexOf("127.0.0.1") >= 0) {
                this.isLocal = true
            }
            this.wwwPath = this.domain + "/";
            this.dataPath = this.domain + (this.isLocal ? "/canvas/content/" : "/images/data/");
            this.imgPath = this.dataPath + (this.isLocal ? "" : "canvas/");
            this.soundsPath = this.imgPath + "sounds/";
            this.botsPath = this.imgPath + "bots/";
            this.petsPath = this.imgPath + "pets/";
            this.petsUiPath = this.imgPath + "pets_ui/";
            this.huntMapsPath = this.imgPath + "hunt_maps/";
            this.huntBotsPath = this.imgPath + "hunt_bots/";
            this.huntResPath = this.imgPath + "hunt_res/";
            this.spellsPath = this.imgPath + "spells/mci/";
            this.spellsAtlasPath = this.imgPath + "spells/";
            this.effectsAtlasPath = this.imgPath + "effects/";
            this.effectsPath = this.imgPath + "effects/mci/";
            this.flagsPath = this.imgPath + "flags/";
            this.skPath = this.imgPath + "sk/";
            this.packsPath = this.imgPath + "packs/";
            this.packsAnimsPath = this.imgPath + "packs_anims/";
            this.fontsPath = this.imgPath + "fonts/";
            this.areasPath = this.imgPath + "areas/";
            this.worldPath = this.imgPath + "world/";
            this.instPath = this.imgPath + "inst/";
            this.skyPath = this.imgPath + "sky/";
            this.userBackgroundsPath = this.imgPath + "user_backs/";
            this.userViewsPath = this.imgPath + "user_views/";
            this.mountsPath = this.imgPath + "mounts/";
            this.clanBuildingsPath = this.imgPath + "clan_buildings/";
            this.manorBuildingsPath = this.imgPath + "estate_buildings/";
            this.throneRoomPath = this.imgPath + "throne_room/";
            this.localePath = this.imgPath + "locale/";
            this.ui = this.imgPath + "ui/";
            this.effects = this.imgPath + "effects/effects.json";
            this.amfPath = this.dataPath + "locale/ru/amf/";
            this.artifactsPath = this.dataPath + "artifacts/";
            this.clansPath = this.dataPath + "clans/";
            this.uxPath = "images/data/canvas/ux.cfg?ux=1517916589";
            this.entryPoint = "entry_point.php";
            this.isMobile = canvas.isMobile();
            this.initLang("ru")
        }
    },
    initLang: function(t) {
        this.lng = t;
        this.amfPath = this.dataPath + "locale/" + this.lng + "/amf/";
        this.langPath = this.localePath + this.lng + "/";
        this.locale = this.langPath + "locale.json"
    }
};
canvas.Const = {
    FONT_ARIAL_9_BOLD_STROKE: "arial_9_bold_stroke",
    FONT_ARIAL_10_BOLD_STROKE: "arial_10_bold_stroke",
    FONT_ARIAL_11: "arial_11",
    FONT_ARIAL_11_BOLD: "arial_11_bold",
    FONT_ARIAL_11_BOLD_STROKE: "arial_11_bold_stroke",
    FONT_IFLASH: "iFlash502",
    FONT_CUPRUM_12_BOLD: "cuprum_12_bold",
    FONT_CUPRUM_16_BOLD: "cuprum_16_bold",
    FONT_CUPRUM_22_BOLD: "cuprum_22_bold",
    FONT_CUPRUM_22_BOLD_STROKE: "cuprum_22_bold_stroke",
    FONT_CUPRUM_34_BOLD_STROKE: "cuprum_34_bold_stroke",
    FONT_CUPRUM_24_BOLD_STROKE_BROWN: "cuprum_24_bold_stroke_brown",
    FONT_CUPRUM_40_BOLD: "cuprum_40_bold",
    FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT: "american_text_40_shadow_gradient",
    FONT_TAHOMA_9: "tahoma_9",
    FONT_TAHOMA_9_STROKE: "tahoma_9_stroke",
    FONT_TAHOMA_9_BOLD: "tahoma_9_bold",
    FONT_TAHOMA_9_BOLD_STROKE: "tahoma_9_bold_stroke",
    FONT_TAHOMA_10: "tahoma_10",
    FONT_TAHOMA_10_STROKE: "tahoma_10_stroke",
    FONT_TAHOMA_10_BOLD: "tahoma_10_bold",
    FONT_TAHOMA_10_BOLD_STROKE: "tahoma_10_bold_stroke",
    FONT_TAHOMA_10_BOLD_SHARP: "tahoma_10_bold_sharp",
    FONT_TAHOMA_11: "tahoma_11",
    FONT_TAHOMA_11_BOLD: "tahoma_11_bold",
    FONT_TAHOMA_11_BOLD_STROKE: "tahoma_11_bold_stroke",
    FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP: "tahoma_11_bold_stroke_bevel_sharp",
    FONT_TAHOMA_12: "tahoma_12",
    FONT_TAHOMA_12_BOLD: "tahoma_12_bold",
    FONT_TAHOMA_12_BOLD_STROKE: "tahoma_12_bold_stroke",
    FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE: "tahoma_12_bold_stroke_red_white",
    FONT_TAHOMA_13: "tahoma_13",
    FONT_TAHOMA_13_BOLD: "tahoma_13_bold",
    FONT_TAHOMA_13_BOLD_STROKE: "tahoma_13_bold_stroke",
    FONT_TAHOMA_14: "tahoma_14",
    FONT_TAHOMA_14_STROKE: "tahoma_14_stroke",
    FONT_TAHOMA_14_BOLD: "tahoma_14_bold",
    FONT_TAHOMA_14_BOLD_STROKE: "tahoma_14_bold_stroke",
    FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL: "tahoma_14_numbers_bold_stroke_bevel",
    FONT_TAHOMA_15: "tahoma_15",
    FONT_TAHOMA_15_STROKE: "tahoma_15_stroke",
    FONT_TAHOMA_15_BOLD: "tahoma_15_bold",
    FONT_TAHOMA_15_BOLD_STROKE: "tahoma_15_bold_stroke",
    FONT_TAHOMA_16: "tahoma_16",
    FONT_TAHOMA_16_STROKE: "tahoma_16_stroke",
    FONT_TAHOMA_16_BOLD: "tahoma_16_bold",
    FONT_TAHOMA_16_BOLD_STROKE: "tahoma_16_bold_stroke",
    FONT_TAHOMA_16_BOLD_GLOW_NUMBERS: "tahoma_16_bold_glow_numbers",
    FONT_TAHOMA_18: "tahoma_18",
    FONT_TAHOMA_18_BOLD_STROKE: "tahoma_18_bold_stroke",
    FONT_TAHOMA_20_BOLD_STROKE: "tahoma_20_bold_stroke",
    FONT_TAHOMA_S_15_BOLD: "tahoma_s_15_bold",
    FONT_RADA_18: "rada_18",
    FONT_MYRIAD_PRO_15_BOLD_STROKE: "myriad_pro_15_bold_stroke",
    LANG_RU: "ru",
    LANG_EN: "en",
    SK_SLOT_NAMES: ["HEAD", "HELM", "BODY", "TRUS", "HAND11", "HAND12", "HAND13", "HAND21", "HAND22", "HAND23", "FOOT11", "FOOT12", "FOOT13", "FOOT21", "FOOT22", "FOOT23", "SWORD", "SHIELD", "SWORD2", "BANNER", "BOW"],
    SK_WPN_SLOT_NAMES: ["SWORD", "SHIELD", "SWORD2", "BANNER", "BOW"],
    UI_SLOT_NAMES: ["HEAD", "HELM", "BODY", "TRUS", "HAND11", "HAND12", "HAND13", "HAND21", "HAND22", "HAND23", "FOOT11", "FOOT12", "FOOT13", "FOOT21", "FOOT22", "FOOT23", "SWORD", "SHIELD", "SWORD2"],
    AVATAR_SLOT_NAMES: ["HEAD", "HELM", "BODY", "HAND11", "HAND21"],
    UI_EXCLUDE_ANIM_SLOTS: ["TRUS", "FOOT21", "FOOT22", "FOOT23", "HAND21", "HAND22", "HAND23", "HAND13"],
    UI_TROPHY_SLOT_NAMES: ["HEAD"],
    UI_SLOT_POS: {
        HAND13: [8, 7],
        SWORD: [1],
        SWORD2: [1],
        HAND12: [8],
        HAND11: [8],
        FOOT11: [1, 8],
        FOOT12: [1, 8],
        FOOT13: [1, 8],
        BODY: [8],
        TRUS: [8],
        HEAD: [8],
        HELM: [8],
        FOOT21: [2, 4],
        FOOT22: [2, 3],
        FOOT23: [2, 3],
        HAND22: [2, 3],
        HAND23: [2, 3],
        HAND21: [2, 3],
        SHIELD: [1]
    },
    SK_COLOR_TRANSFORMS: {
        c1: {
            rr: -30,
            gg: -30,
            bb: -30
        },
        c2: {
            rr: -80,
            gg: -80,
            bb: -80
        },
        c3: {
            rr: 0,
            gg: -30,
            bb: -30
        },
        c4: {
            rr: 20,
            gg: 20,
            bb: 0
        },
        c5: {
            rr: 40,
            gg: 40,
            bb: 0
        },
        c6: {
            rr: -60,
            gg: -40,
            bb: -215
        },
        c7: {
            rr: -60,
            gg: 10,
            bb: 45
        },
        c8: {
            rr: -75,
            gg: 20,
            bb: 10
        },
        c9: {
            rr: 0,
            gg: 10,
            bb: 0,
            gm: 1.2,
            bm: .8
        },
        c10: {
            rr: 0,
            gg: -30,
            bb: 0,
            rm: .8
        },
        c11: {
            rr: -20,
            gg: -20,
            bb: -20
        },
        c12: {
            rr: -90,
            gg: -90,
            bb: -90
        },
        c13: {
            rr: -50,
            gg: -75,
            bb: -100
        },
        c14: {
            rr: 75,
            gg: -25,
            bb: -150
        },
        c15: {
            rr: 128,
            gg: 110,
            bb: 0
        },
        c16: {
            rr: 100,
            gg: -50,
            bb: -50
        },
        c17: {
            rr: -30,
            gg: -30,
            bb: -30
        },
        c18: {
            rr: -100,
            gg: -100,
            bb: -100
        },
        c19: {
            rr: 50,
            gg: 0,
            bb: -150
        },
        c20: {
            rr: 0,
            gg: -180,
            bb: -180
        }
    },
    SK_DIE_COLORS_HUMAN: [[.875, .875, .875, 0, 26, 32], [.75, .75, .75, 0, 51, 64], [.625, .625, .625, 0, 77, 96], [.5, .5, .5, 0, 102, 128], [.375, .375, .375, 0, 128, 159], [.25, .25, .25, 0, 153, 191], [.125, .125, .125, 0, 179, 223]],
    SK_DIE_COLORS_MAGMAR: [[.875, .875, .875, 0, 26, 32], [.75, .75, .75, 0, 51, 64], [.625, .625, .625, 0, 77, 96], [.5, .5, .5, 0, 102, 128], [.375, .375, .375, 0, 128, 159], [.25, .25, .25, 0, 153, 191], [.125, .125, .125, 0, 179, 223]],
    KEYS: {
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        KEY_0: 48,
        KEY_1: 49,
        KEY_2: 50,
        KEY_3: 51,
        KEY_4: 52,
        KEY_5: 53,
        KEY_6: 54,
        KEY_7: 55,
        KEY_8: 56,
        KEY_9: 57,
        NUM_0: 96,
        NUM_1: 97,
        NUM_2: 98,
        NUM_3: 99,
        NUM_4: 100,
        NUM_5: 101,
        NUM_6: 102,
        NUM_7: 103,
        NUM_8: 104,
        NUM_9: 105,
        MINUS: 189,
        EQUAL: 187,
        RIGHT_SQUARE_BRACKET: 221,
        LEFT_SQUARE_BRACKET: 219,
        SPACEBAR: 32,
        ESC: 27,
        TAB: 9,
        POINT: 190
    },
    CODE_TO_KEYS: {
        KeyA: "A",
        KeyB: "B",
        KeyC: "C",
        KeyD: "D",
        KeyE: "E",
        KeyF: "F",
        KeyG: "G",
        KeyH: "H",
        KeyI: "I",
        KeyJ: "J",
        KeyK: "K",
        KeyL: "L",
        KeyM: "M",
        KeyN: "N",
        KeyO: "O",
        KeyP: "P",
        KeyQ: "Q",
        KeyR: "R",
        KeyS: "S",
        KeyT: "T",
        KeyU: "U",
        KeyV: "V",
        KeyW: "W",
        KeyX: "X",
        KeyY: "Y",
        KeyZ: "Z",
        ArrowLeft: "LEFT_ARROW",
        ArrowUp: "UP_ARROW",
        ArrowRight: "RIGHT_ARROW",
        ArrowDown: "DOWN_ARROW",
        Digit0: "KEY_0",
        Digit1: "KEY_1",
        Digit2: "KEY_2",
        Digit3: "KEY_3",
        Digit4: "KEY_4",
        Digit5: "KEY_5",
        Digit6: "KEY_6",
        Digit7: "KEY_7",
        Digit8: "KEY_8",
        Digit9: "KEY_9",
        Numpad0: "NUM_0",
        Numpad1: "NUM_1",
        Numpad2: "NUM_2",
        Numpad3: "NUM_3",
        Numpad4: "NUM_4",
        Numpad5: "NUM_5",
        Numpad6: "NUM_6",
        Numpad7: "NUM_7",
        Numpad8: "NUM_8",
        Numpad9: "NUM_9",
        Minus: "MINUS",
        Equal: "EQUAL",
        BracketRight: "RIGHT_SQUARE_BRACKET",
        BracketLeft: "LEFT_SQUARE_BRACKET",
        Space: "SPACEBAR",
        Escape: "ESC",
        Tab: "TAB",
        Period: "POINT"
    },
    KEYBOARD_BUTTONS: {
        113: "й",
        119: "ц",
        101: "у",
        114: "к",
        116: "е",
        121: "н",
        117: "г",
        105: "ш",
        111: "щ",
        112: "з",
        91: "х",
        93: "ъ",
        97: "ф",
        115: "ы",
        100: "в",
        102: "а",
        103: "п",
        104: "р",
        106: "о",
        107: "л",
        108: "д",
        59: "ж",
        39: "э",
        122: "я",
        120: "ч",
        99: "с",
        118: "м",
        98: "и",
        110: "т",
        109: "ь",
        44: "б",
        46: "ю",
        96: "ё"
    },
    GENDER: {
        MALE: "M",
        FEMALE: "F"
    },
    KIND: {
        HUM: 1,
        MAG: 2
    },
    ENTRY_POINT: {
        OBJECT: {
            USER: "user"
        },
        ACTION: {
            BOW_ORDER_GET: "bow_order_get"
        }
    }
};
canvas.EventManager = {
    events: {},
    addEventListener: function(t, e, a, i) {
        if (this.hasEventListener(t, e, a, i))
            return;
        if (!this.events[t])
            this.events[t] = new Array;
        this.events[t].push({
            target: e,
            handler: a,
            context: i
        })
    },
    removeEventListener: function(t, e, a, i) {
        if (this.events[t] && this.events[t].length > 0) {
            var s = this.events[t];
            for (var n = s.length - 1; n >= 0; n--) {
                if (s[n].target == e && s[n].handler == a && (typeof i == "undefined" || s[n].context == i)) {
                    s.splice(n, 1)
                }
            }
        }
    },
    hasEventListener: function(t, e, a, i) {
        if (this.events[t] && this.events[t].length > 0) {
            var s = this.events[t];
            for (var n = s.length - 1; n >= 0; n--) {
                if ((!e || s[n].target == e) && (!a || s[n].handler == a) && (!i || s[n].context == i)) {
                    return true
                }
            }
        }
        return false
    },
    removeAllListeners: function(t, e, a, i) {
        var s = this.events[t];
        if (s && s.length > 0) {
            for (var n = s.length - 1; n >= 0; n--) {
                if ((!e || s[n].target == e) && (!a || s[n].handler == a) && (!i || s[n].context == i)) {
                    s.splice(n, 1)
                }
            }
        }
    },
    dispatchEvent: function(t, e, a) {
        for (var i in this.events) {
            if (i == t && this.events[t] && this.events[t].length > 0) {
                var s = this.events[t].slice(0);
                for (var n = 0; n < s.length; n++) {
                    var r = s[n];
                    if (r.handler && (r.target == null || r.target == e)) {
                        r.handler.apply(r.context, [{
                            target: e,
                            params: a,
                            name: t
                        }])
                    }
                }
                break
            }
        }
    },
    destroy: function() {
        for (var t in this.events) {
            delete this.events[t]
        }
    }
};
canvas.Functions = {
    colorMatrixCache: {},
    setNumberLen: function(t, e) {
        if (e == undefined)
            e = 2;
        t = t.toString();
        while (t.length < e)
            t = "0" + t;
        return t
    },
    getColorMatrixFilter: function() {
        var t = canvas.Functions.getColorMatrixHash.apply(this, arguments);
        if (canvas.Functions.colorMatrixCache[t])
            return canvas.Functions.colorMatrixCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        e.matrix = [arguments[0], 0, 0, 0, arguments[4] / 255, 0, arguments[1], 0, 0, arguments[5] / 255, 0, 0, arguments[2], 0, arguments[6] / 255, 0, 0, 0, arguments[3], 0];
        canvas.Functions.colorMatrixCache[t] = e;
        return e
    },
    getColorMatrixHash: function() {
        return arguments[0].toString().concat("_", arguments[1], "_", arguments[2], "_", arguments[3], "_", arguments[4], "_", arguments[5], "_", arguments[6])
    },
    formatDate: function(t, e, a, i, s, n) {
        if (e == undefined)
            e = "00";
        if (s == undefined)
            s = true;
        if (n == undefined)
            n = true;
        if (t == 0)
            return "";
        var r = Math.round(t * .001);
        var o = s ? Math.floor(r / 60) : Math.ceil(r / 60);
        var l;
        var c;
        var p = e;
        if (r > 0) {
            p = "";
            l = Math.floor(o / 1440);
            if (l > 0) {
                p += n ? this.setNumberLen(l, 2) : l;
                switch (a) {
                case 1:
                    p += canvas.Translator.getText(2e3) + " ";
                    break;
                case 2:
                    p += canvas.Translator.getText(2e3) + " ";
                    break;
                case 3:
                    p += " " + canvas.Translator.getText(2e3) + ". ";
                    break;
                default:
                    p += ":"
                }
                c = Math.floor((o - l * 1440) / 60);
                p += n ? this.setNumberLen(c, 2) : c;
                switch (a) {
                case 1:
                    p += canvas.Translator.getText(2001);
                    break;
                case 2:
                    p += canvas.Translator.getText(2001);
                    break;
                case 3:
                    p += " " + canvas.Translator.getText(2001) + ".";
                    break;
                default:
                    p += ""
                }
            } else {
                c = Math.floor(o / 60);
                if (c > 0) {
                    p += n ? this.setNumberLen(c, 2) : c;
                    switch (a) {
                    case 1:
                        p += canvas.Translator.getText(2001) + " ";
                        break;
                    case 2:
                        p += canvas.Translator.getText(2001) + " ";
                        break;
                    case 3:
                        p += " " + canvas.Translator.getText(2001) + ". ";
                        break;
                    default:
                        p += ":"
                    }
                    o = o - c * 60;
                    p += n ? this.setNumberLen(o, 2) : o;
                    switch (a) {
                    case 1:
                        p += canvas.Translator.getText(2002);
                        break;
                    case 2:
                        p += canvas.Translator.getText(2016);
                        break;
                    case 3:
                        p += " " + canvas.Translator.getText(2016) + ".";
                        break;
                    default:
                        p += ""
                    }
                } else {
                    if (o > 0) {
                        p += n ? this.setNumberLen(o, 2) : o;
                        switch (a) {
                        case 1:
                            p += canvas.Translator.getText(2002) + " ";
                            break;
                        case 2:
                            p += canvas.Translator.getText(2016) + " ";
                            break;
                        case 3:
                            p += " " + canvas.Translator.getText(2016) + ". ";
                            break;
                        default:
                            p += ":"
                        }
                    } else {
                        if (i)
                            p += "00:"
                    }
                    if (s) {
                        r = r - o * 60;
                        p += n ? this.setNumberLen(r, 2) : r;
                        switch (a) {
                        case 1:
                            p += canvas.Translator.getText(2003);
                            break;
                        case 2:
                            p += canvas.Translator.getText(2017);
                            break;
                        case 3:
                            p += " " + canvas.Translator.getText(2017) + ".";
                            break;
                        default:
                            p += ""
                        }
                    } else {
                        p = p.substr(0, p.length - 1)
                    }
                }
            }
        }
        return p
    },
    degToRad: function(t) {
        return t * (Math.PI / 180)
    },
    radToDeg: function(t) {
        return t * (180 / Math.PI)
    },
    navigateToURL: function(t, e) {
        window.open(t, e)
    },
    clearChildren: function(t) {
        while (t.children.length > 0) {
            var e = t.removeChildAt(0)
        }
    },
    destroyChildren: function(t) {
        while (t.children.length > 0) {
            var e = t.removeChildAt(0);
            e.destroy({
                children: true
            })
        }
    },
    decodeUrlParams: function(t) {
        var e = t.split("&");
        var a = e.length;
        var i = {};
        var s;
        for (var n = 0; n < a; n++) {
            s = e[n].split("=");
            i[s[0]] = decodeURIComponent(s[1])
        }
        return i
    },
    testFlag: function(t, e) {
        return (t & e) == e
    },
    testStatus: function(t) {
        if (t && t.hasOwnProperty("status") && t.status != 100 && t.error != undefined)
            return false;
        return true
    },
    greyScaleCache: {},
    getGreyScale: function(t) {
        if (t == undefined)
            t = .5;
        if (canvas.Functions.greyScaleCache[t])
            return canvas.Functions.greyScaleCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        e.greyscale(t);
        canvas.Functions.greyScaleCache[t] = e;
        return e
    },
    brightnessCache: {},
    getBrightness: function(t) {
        if (t == undefined)
            t = 1.2;
        if (canvas.Functions.brightnessCache[t])
            return canvas.Functions.brightnessCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        e.brightness(t);
        canvas.Functions.brightnessCache[t] = e;
        return e
    },
    saturationCache: {},
    getSaturation: function(t) {
        if (t == undefined)
            t = .2;
        if (canvas.Functions.saturationCache[t])
            return canvas.Functions.saturationCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        e.saturate(t);
        canvas.Functions.saturationCache[t] = e;
        return e
    },
    blurCache: {},
    getBlur: function(t) {
        if (t == undefined)
            t = 1;
        if (canvas.Functions.blurCache[t])
            return canvas.Functions.blurCache[t];
        var e = new canvas.px.TiltShiftFilter(t,0);
        canvas.Functions.blurCache[t] = e;
        return e
    },
    dropShadowCache: {},
    getDropShadow: function(t, e, a, i, s) {
        if (t == undefined)
            t = 45;
        if (e == undefined)
            e = 5;
        if (a == undefined)
            a = 2;
        if (i == undefined)
            i = 0;
        if (s == undefined)
            s = .5;
        var n = t.toString().concat("_" + e + "_" + a + "_" + i + "_" + s);
        if (canvas.Functions.dropShadowCache[n])
            return canvas.Functions.dropShadowCache[n];
        var r = new canvas.px.DropShadowFilter({
            rotation: t,
            distance: e,
            blur: a,
            color: i,
            alpha: s
        });
        canvas.Functions.dropShadowCache[n] = r;
        return r
    },
    blackAndWhiteCache: null,
    getBlackAndWhite: function() {
        if (canvas.Functions.blackAndWhiteCache)
            return canvas.Functions.blackAndWhiteCache;
        var t = new canvas.px.ColorMatrixFilter;
        t.blackAndWhite();
        canvas.Functions.blackAndWhiteCache = t;
        return t
    },
    glowCache: {},
    getGlow: function(t, e, a, i, s) {
        if (t == undefined)
            t = 10;
        if (e == undefined)
            e = 4;
        if (a == undefined)
            a = 0;
        if (i == undefined)
            i = 16777215;
        if (s == undefined)
            s = .1;
        var n = t.toString().concat("_" + e + "_" + a + "_" + i + "_" + s);
        if (canvas.Functions.glowCache[n])
            return canvas.Functions.glowCache[n];
        var r = new canvas.px.GlowFilter(t,e,a,i,s);
        canvas.Functions.glowCache[n] = r;
        return r
    },
    alphaCache: {},
    getAlpha: function(t) {
        if (t == undefined)
            t = 1;
        if (canvas.Functions.alphaCache[t])
            return canvas.Functions.alphaCache[t];
        var e = new canvas.px.AlphaFilter;
        e.alpha = t;
        canvas.Functions.alphaCache[t] = e;
        return e
    },
    findParent: function(t, e) {
        while (e) {
            if (e == t)
                return true;
            e = e.parent
        }
        return false
    },
    findParentByName: function(t, e) {
        var a = t.length;
        while (e) {
            if (e.name && e.name.substr(0, a) == t)
                return e;
            e = e.parent
        }
        return null
    },
    cloneSimpleObject: function(t) {
        var e = {};
        for (var a in t) {
            e[a] = t[a]
        }
        return e
    },
    parseUx: function() {
        if (canvas.ResourceLoader.ux)
            return;
        canvas.ResourceLoader.ux = {};
        var t = 0;
        var e;
        var a;
        var i;
        var s;
        var n;
        var r;
        var o;
        var l;
        while (a = canvas.ResourceLoader.get("ux" + t++)) {
            r = [];
            i = a.data.split("\n");
            s = i[0].split(",");
            o = s.length;
            for (e = 0; e < o; e++) {
                l = s[e].match(/{(\d+)}:(.+)/i);
                r[parseInt(l[1])] = canvas.Config.wwwPath + l[2]
            }
            o = i.length;
            for (e = 1; e < o; e++) {
                if (i[e]) {
                    l = i[e].match(/{(\d+)}(.+)\?ux=(.+)/i);
                    canvas.ResourceLoader.ux[r[parseInt(l[1])] + l[2]] = l[3]
                }
            }
        }
        canvas.ResourceLoader.uxReady = true;
        canvas.EventManager.dispatchEvent(canvas.Event.UX_READY)
    },
    extractSwfName: function(t) {
        if (!t)
            return "";
        var e = t.split(".")[0].split("/");
        return e[e.length - 1]
    },
    random: function(t) {
        if (!t)
            return 0;
        var e = Math.floor(Math.random() * t);
        return e >= t ? t - 1 : e
    },
    randomArray: function(t) {
        var e = t.length, a, i, s;
        for (a = e - 1; a > 0; a--) {
            i = Math.floor(Math.random() * (a + 1));
            s = t[a];
            t[a] = t[i];
            t[i] = s
        }
    },
    pointInRect: function(t, e) {
        return t.x > e.x && t.x < e.x + e.width && t.y > e.y && t.y < e.y + e.height
    },
    now: function() {
        return Math.round(Date.now() * .001)
    },
    getCyrillicInput: function(t) {
        var e = t || "";
        return e.replace(/[a-z\[\]\;\'\,\.\`]/gi, function(t, e) {
            var a = canvas.Const.KEYBOARD_BUTTONS[t.toLowerCase().charCodeAt(0)];
            return a || t
        })
    },
    getMoney: function(t) {
        return Math.floor(t * 100)
    },
    getMoneyGold: function(t) {
        return Math.floor(t * .01)
    },
    getGems: function(t) {
        return Math.round(t * 100) / 100
    },
    getSessTarget: function() {
        var t = {
            target: "",
            autoPenalty: -1
        };
        try {
            var e = getCookie("sess_target")
        } catch (t) {}
        if (e && e != "null") {
            var a = e.split("_");
            t.target = a[0];
            t.autoPenalty = a.length > 1 ? parseInt(a[1]) : -1;
            t.manor = a.length > 2 ? parseInt(a[2]) == 1 : false
        }
        return t
    },
    deleteSessTarget: function() {
        deleteCookie("sess_target");
        deleteCookie("sess_navigate_memory");
        deleteCookie("sess_navigate_array")
    },
    getAttribute: function(t, e) {
        return t.attributes[e] ? t.attributes[e].value : undefined
    },
    getChildNodeByName: function(t, e) {
        var a = t.children.length;
        var i = null;
        for (var s = 0; s < a; s++) {
            if (t.children[s].nodeName == e) {
                if (!i)
                    i = new Array;
                i.push(t.children[s])
            }
        }
        return i
    },
    getChildValueByName: function(t, e) {
        var a = t.children.length;
        for (var i = 0; i < a; i++) {
            if (t.children[i].nodeName == e) {
                return t.children[i].innerHTML
            }
        }
        return ""
    },
    getMoneyForText: function(t) {
        var e = {};
        e.icon = "money_silver";
        e.value = t;
        if (t >= 100) {
            e.value = t * .01;
            e.icon = "money_gold"
        } else if (t < 1) {
            e.value = t * 100;
            e.icon = "money_bronze"
        }
        return e
    },
    getNumberName: function(t, e, a, i) {
        var s = t % 100;
        var n;
        if (s >= 5 && s <= 20) {
            n = t + " " + i
        } else {
            s = s % 10;
            if (s == 1) {
                n = t + " " + e
            } else if (s >= 2 && s <= 4) {
                n = t + " " + a
            } else {
                n = t + " " + i
            }
        }
        return n
    },
    hasChildNode: function(t, e) {
        return t && t.getElementsByTagName(e).length > 0
    },
    destroy: function() {
        var t = [this.colorMatrixCache, this.greyScaleCache, this.brightnessCache, this.saturationCache, this.blurCache, this.dropShadowCache, this.glowCache, this.alphaCache];
        var e, a, i, s = t.length;
        for (e = 0; e < s; e++) {
            a = t[e];
            for (i in a) {
                delete a[i]
            }
        }
    },
    entryPointGetUrl: function(t, e) {
        return canvas.Config.entryPoint + "?object=" + t + "&action=" + e + "&json_mode_on=1"
    },
    entryPointConcatObjectAction: function(t, e) {
        return t + "|" + e
    }
};
canvas.ResourceLoader = {
    EVENT_COMPLETE: "ResourceLoader.COMPLETE",
    EVENT_PROGRESS: "ResourceLoader.PROGRESS",
    stack: [],
    aliases: {},
    inProgress: false,
    inited: false,
    ux: null,
    uxReady: false,
    init: function() {
        if (!this.inited) {
            canvas.px.Loader.on("progress", this.progress);
            canvas.px.Loader.on("error", function() {});
            canvas.px.Loader.on("add", {});
            canvas.px.Loader.on("complete", this.complete);
            this.inited = true
        }
    },
    add: function(t) {
        var e, a;
        if (this.inProgress) {
            this.stack = this.stack.concat(t)
        } else {
            var i = {};
            for (e = t.length - 1; e >= 0; e--) {
                if (typeof t[e] == "object") {
                    t[e][1] = this.applyUx(t[e][1]);
                    if (t[e][0]) {
                        this.aliases[t[e][0]] = t[e][1]
                    }
                    if (t[e][2] != undefined) {
                        t[e][2].url = t[e][1];
                        t[e] = t[e][2]
                    } else {
                        t[e] = t[e][1]
                    }
                } else {
                    t[e] = this.applyUx(t[e])
                }
                if (this.getResource(t[e]) || i[t[e]]) {
                    t.splice(e, 1)
                } else {
                    i[t[e]] = true
                }
            }
            if (t.length > 0) {
                this.inProgress = true;
                try {
                    canvas.px.Loader.add(t).load()
                } catch (t) {
                    console.log("ResourceLoader.load: " + t)
                }
            } else {
                this.complete()
            }
        }
    },
    remove: function(t) {
        t = this.applyUx(t);
        this.deleteResource(this.aliases[t] || t)
    },
    complete: function() {
        var t = canvas.ResourceLoader;
        t.inProgress = false;
        if (t.stack.length > 0) {
            var e = t.stack;
            t.stack = [];
            t.add(e)
        } else {
            canvas.EventManager.dispatchEvent(t.EVENT_COMPLETE, t)
        }
    },
    progress: function() {
        var t = canvas.ResourceLoader;
        canvas.EventManager.dispatchEvent(t.EVENT_PROGRESS, t, {
            progress: canvas.px.Loader.progress > 100 ? canvas.px.Loader.progress - 100 : canvas.px.Loader.progress
        })
    },
    get: function(t) {
        t = this.applyUx(t);
        var e = this.getResource(this.aliases[t] || t);
        var a = null;
        if (e) {
            switch (e.extension) {
            case "mci":
                if (!a && e.data) {
                    if (!e.unpacked && typeof e.data == "string" && e.data.charAt(0) != "{") {
                        try {
                            e.data = this.unpackBinary(e.data)
                        } catch (t) {
                            return null
                        }
                    }
                    e.unpacked = true;
                    if (typeof e.data == "string")
                        e.data = JSON.parse(e.data);
                    a = e
                }
                break;
            case "xml":
            case "fnt":
                a = e.data ? e : null;
                break;
            case "json":
                a = e.textures ? e : null;
                break;
            case "amf":
                if (e.unpacked) {
                    a = e.data
                } else {
                    a = e.data = this.unpackAmf(e.data);
                    e.unpacked = true
                }
                break;
            default:
                a = e.data ? e : null
            }
        }
        return a
    },
    getTexture: function(t) {
        return this.get(t) ? this.get(t).texture ? this.get(t).texture : canvas.px.TextureEmpty : canvas.px.TextureEmpty
    },
    getImage: function(t, e) {
        var a = this.get(t);
        if (a && !a.textures[e + ".png"]) {
            console.log("Warning! Texture '" + e + "' not found in atlas '" + t + "'.")
        }
        return a ? a.textures[e + ".png"] ? a.textures[e + ".png"] : canvas.px.TextureEmpty : canvas.px.TextureEmpty
    },
    unpackBinary: function(t) {
        var e = atob(t);
        var a, i = [], s = e.length;
        for (a = 0; a < s; a++) {
            i.push(e.charCodeAt(a))
        }
        var t = canvas.px.inflate(i);
        return this.arrayBufferToString(t)
    },
    arrayBufferToString: function(t) {
        var e = new Uint16Array(t);
        var a = e.length;
        var i = "";
        var s = Math.pow(2, 16) - 1;
        for (var n = 0; n < a; n += s) {
            if (n + s > a) {
                s = a - n
            }
            i += String.fromCharCode.apply(null, e.subarray(n, n + s))
        }
        return i
    },
    unpackAmf: function(t) {
        var e = new Uint8Array(t);
        var a = "";
        var i = e.length;
        for (var s = 0; s < i; s++) {
            a += String.fromCharCode(e[s])
        }
        return canvas.px.AMF.parse(a)
    },
    applyUx: function(t) {
        if (this.ux && this.ux[t])
            return t + "?ux=" + this.ux[t];
        else
            return t
    },
    testUx: function(t) {
        return !this.ux || this.ux[t] ? true : false
    },
    addSubAlias: function(t, e) {
        if (this.aliases[t]) {
            this.aliases[e] = this.aliases[t]
        }
    },
    getResource: function(t) {
        return canvas.px.Loader.resources[t]
    },
    deleteResource: function(t) {
        delete canvas.px.Loader.resources[t]
    },
    destroy: function() {
        delete this.ux
    }
};
canvas.Log = {
    debug: false,
    ALL: "ALL",
    BATTLE: "BATTLE",
    MEM: "MEM",
    LOCATION: "LOCATION",
    WORLD: "WORLD",
    MANOR: "MANOR",
    HUNT: "HUNT",
    INST: "INST",
    USER: "USER",
    LEFT_MENU: "LEFT_MENU",
    AVATAR: "AVATAR",
    TOP_MENU: "TOP_MENU",
    RIGHT_MENU: "RIGHT_MENU",
    COMPASS: "COMPASS",
    MAGIC: "MAGIC",
    PETS: "PETS",
    BIRTHDAY: "BIRTHDAY",
    CUBE: "CUBE",
    CASINO: "CASINO",
    DICE_GAME: "DICE_GAME",
    TREASURE: "TREASURE",
    WHEEL: "WHEEL",
    MIRROR: "MIRROR",
    CLAN_CITADEL: "CLAN_CITADEL",
    CLAN_WAR: "CLAN_WAR",
    BARBER: "BARBER",
    FIRST_BATTLE: "FIRST_BATTLE",
    PUZZLE: "PUZZLE",
    ALL_NAMES: [this.BATTLE, this.MEM, this.LOCATION, this.WORLD, this.MANOR, this.HUNT, this.INST, this.USER, this.LEFT_MENU, this.AVATAR, this.TOP_MENU, this.RIGHT_MENU, this.COMPASS, this.MAGIC, this.PETS, this.BIRTHDAY, this.CUBE, this.CASINO, this.DICE_GAME, this.TREASURE, this.WHEEL, this.MIRROR, this.CLAN_WAR, this.CLAN_CITADEL, this.BARBER, this.FIRST_BATTLE, this.PUZZLE],
    maxLen: 2e3,
    log: {},
    internal: "",
    title: "",
    add: function(t, e, a) {
        if (t == this.ALL) {
            for (var i = 0; i < this.ALL_NAMES.length; i++) {
                this.add(this.ALL_NAMES[i], "GLOBAL LOG >> " + e, a)
            }
            return
        }
        if (!this.log[t])
            this.log[t] = [];
        var s = "";
        if (a) {
            s += '<font color="' + a + '">'
        }
        s += Date.now() + ": " + e;
        if (a) {
            s += "</font>"
        }
        this.log[t].push(s);
        if (this.log[t].length > this.maxLen) {
            this.log[t].shift()
        }
        if (this.debug) {
            console.log(Date.now() + " " + t + ": " + e)
        }
    },
    addInternal: function(t, e) {
        if (e) {
            this.internal += '<font color="' + e + '">'
        }
        this.internal += Date.now() + ": " + t;
        if (e) {
            this.internal += "</font>"
        }
        this.internal += "<br/>"
    },
    show: function(t) {
        var e = "<h1>DWAR LOG</h1>" + (this.title ? "<span style='color: blue;'>" + this.title + "</span><br/><br/>" : "");
        for (var t in this.log) {
            var a = this.log[t].length;
            for (var i = 0; i < a; i++) {
                e += this.log[t][i] + "<br/>"
            }
        }
        this.log[t] = [];
        try {
            var s = window.open();
            s.document.open();
            s.document.write(e);
            s.document.close()
        } catch (t) {}
    },
    showInternal: function(t, e, a) {
        this.field = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,0,e,a,"left","top",16777215,1);
        t.addChild(this.field);
        this.field.text = this.internal;
        canvas.EventManager.addEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)
    },
    mouseWheelHandler: function(t) {
        if (t.params.wheelDelta > 0) {
            this.field.container.y += 40
        } else {
            this.field.container.y -= 40
        }
    }
};
canvas.InputManager = {
    inited: false,
    lastExternalKey: "",
    lastExternalKeyTime: 0,
    init: function() {
        if (!this.inited) {
            document.addEventListener("keydown", this.onKeyDown.bind(this));
            document.addEventListener("keyup", this.onKeyUp.bind(this));
            this.inited = true
        }
    },
    onKeyDown: function(t) {
        canvas.EventManager.dispatchEvent(canvas.Event.STAGE_KEY_DOWN, null, this.processKey(t))
    },
    onKeyUp: function(t) {
        canvas.EventManager.dispatchEvent(canvas.Event.STAGE_KEY_UP, null, this.processKey(t))
    },
    processKey: function(t) {
        if (t.code) {
            t.globalKeyCode = canvas.Const.KEYS[canvas.Const.CODE_TO_KEYS[t.code]]
        } else {
            t.globalKeyCode = t.keyCode
        }
        return t
    },
    externalKey: function(t) {
        var e = t.altKey + "," + t.code + "," + t.ctrlKey + "," + t.globalKeyCode + "," + t.keyCode + "," + t.shiftKey;
        if (e != this.lastExternalKey || Date.now() > this.lastExternalKeyTime + 100) {
            this.onKeyDown(t);
            this.lastExternalKey = e;
            this.lastExternalKeyTime = Date.now()
        }
    }
};
canvas.Translator = {
    lang: "ru",
    dictionary: {
        text0: "ЖДИТЕ",
        text1: "БОЙ ОКОНЧЕН",
        text2: "выход",
        text3: "Невозможно авторизироваться",
        text4: "ОШИБКА",
        text5: "соединение с сервером" + "\n" + "прервано",
        text6: "Бой уже закончен",
        text7: "восстановить",
        text8: "Запрос",
        text9: "согласен",
        text10: "отклоняю",
        text11: "отменить",
        text12: "Отправлен запрос на применение",
        text13: "Ожидание ответа ...",
        text14: "Игрок",
        text15: "запрашивает использование на Вас",
        text16: "УВОРОТ",
        text17: "ПОГЛОЩЕНО",
        text18: "ОТРАЖЕНО",
        text19: "Невозможно применить эту магию",
        text20: "Невозможно использовать на себя",
        text21: "Невозможно использовать на дружественную цель",
        text22: "Невозможно использовать на текущего оппонента",
        text23: "Невозможно использовать на оппонентов",
        text24: "Не хватает маны",
        text25: "На цель уже наложено подобное заклинание",
        text26: 'На вас наложено "Молчание"',
        text27: "Недостаточно стрел",
        text28: "Недостаточно ярости",
        text29: "Воскрешение",
        text30: "нанесённый урон",
        text31: "БЛОК",
        text32: "Закрыть",
        text33: "атака в голову",
        text34: "атака в корпус",
        text35: "атака в ноги",
        text36: "оборонительный режим",
        text37: "обновить",
        text38: "позвать на помощь",
        text39: "покинуть бой?",
        text40: "Внимание! Покинув этот бой, вы не сможете в него вернуться.",
        text41: "данный игрок вышел из боя",
        text42: "Следующее использование через ",
        text43: "осталось",
        text44: "осталcя",
        text46: "ИММУНИТЕТ",
        text47: "ПРОМАХ",
        text48: "далее",
        text49: "мана",
        text50: "ходa",
        text51: "ход",
        text52: "ходов",
        text53: ", но не более",
        text54: "не более",
        text55: "д.",
        text56: "ч.",
        text57: "м.",
        text58: "с.",
        text59: "бой был прерван",
        text60: "Q/UP",
        text61: "W/RIGHT",
        text62: "E/DOWN",
        text63: "R/LEFT",
        text64: "Tab",
        text65: "пропустить ход",
        text66: "Призвать в бой тень?",
        text67: "ПОДТВЕРЖДЕНИЕ",
        text68: "призвать",
        text69: "отмена",
        text70: "На цель не наложено необходимое заклинание",
        text71: "Всего (Игроков) / Убитых",
        text72: "Неподходящая цель",
        text100: "Охрана",
        text101: "Ячейки в мире Фэо",
        text102: "Рюкзак",
        text103: "Хранилище",
        text104: "Войти",
        text105: "Найм рабочих",
        text106: "Здание",
        text107: "Энергия",
        text108: "по цене",
        text109: "Купить риолит",
        text110: "Разместить",
        text111: "Изменить",
        text112: "Ожидаемое время выкупа заявки",
        text113: "Здание построено до максимального уровня",
        text114: "Улучшение",
        text115: "Использовать",
        text116: "Продукты",
        text117: "нет данных",
        text118: "более 1 дня",
        text121: "Цена",
        text122: "Активные предложения",
        text123: "Продавец",
        text124: "Продать",
        text126: "Продать участок",
        text127: "Область",
        text128: "Локация",
        text129: "Накопленный опыт",
        text130: "Прибавлять",
        text131: "Вычитать",
        text132: "Вы накапливаете опыт когда находитесь в поместье. Количество накапливаемого опыта зависит от уровня здания.",
        text133: "Накапливать",
        text134: "Вы уверены, что хотите перейти в режим накапливания опыта?",
        text135: "Вы уверены, что хотите перейти в режим использования накопленного опыта? Стоимость составит",
        text136: "Накопленная доблесть",
        text137: "Вы накапливаете доблесть, когда находитесь в поместье. Количество накапливаемой доблести зависит от уровня здания.",
        text138: "Вы уверены, что хотите перейти в режим накапливания доблести?",
        text139: "Вы уверены, что хотите перейти в режим использования накопленной доблести? Стоимость составит",
        text140: "часов",
        text141: "Корм",
        text142: "Опыт",
        text143: "Тренировать",
        text144: "Требуется",
        text145: "Изготовление займет",
        text146: "Изготовить",
        text147: "Выберите рецепт",
        text148: "Поместье",
        text149: "энергия",
        text150: "Выход",
        text151: "Работать",
        text152: "В локацию",
        text153: "Выбрать",
        text154: "Заказчик",
        text155: "Цена за ед.",
        text156: "Обновить",
        text157: "Биржа энергии",
        text158: "Все заявки",
        text159: "Мои заявки",
        text160: "У вас есть",
        text161: "единиц энергии",
        text162: "Выполн./Объем",
        text163: "Создать заявку",
        text164: "Удалить заявку?",
        text165: "Прогноз: работы будут выполнены через",
        text166: "рекоммендуется повысить цену работ",
        text167: "Купить",
        text168: "Купить участок за",
        text169: "Риолит",
        text170: "У вас денег",
        text171: "Вы потратите",
        text172: "уровень",
        text173: "Поместья",
        text174: "Покупка",
        text175: "Продажа",
        text176: "требует энергии",
        text177: "Нанять рабочих",
        text178: "Построить",
        text179: "Построен на",
        text180: "Благо антитравматизма",
        text181: "Получить",
        text182: "Потратить",
        text183: "Вы получите",
        text184: "Работать на",
        text186: "Количество",
        text187: "Все",
        text188: "Скрыть меню",
        text189: "Показать меню",
        text190: "Ваши вещи со сроком жизни",
        text191: "Список задач",
        text192: "Забрать",
        text193: "Отменить",
        text194: "хватает",
        text195: "не хватает",
        text196: "из",
        text199: "Цена изменилась. Купить участок за",
        text200: "купить",
        text201: "нет предложений",
        text202: "снять с продажи",
        text203: "продать",
        text204: "Снять участок с продажи?",
        text205: "У вас энергии",
        text206: "или",
        text207: "Текущее местоположение",
        text208: "Переход между",
        text209: "Переход в область",
        text210: "Загрузка",
        text211: "Флаг",
        text212: "Ваше текущее местоположение",
        text213: "Выделенная область",
        text214: "Выделенная локация",
        text215: "Список локаций",
        text216: "Ваше местоназначение",
        text217: "Цель",
        text218: "Ваше поместье",
        text219: "Купить у государства",
        text220: "Купить у игроков",
        text221: "Режим карты",
        text222: "Режим недвижимости",
        text224: "Ваш участок",
        text225: "Переезд на новый участок обойдётся вам в",
        text226: "Поговорить",
        text227: "Искать рецепт",
        text228: "Разрушить",
        text229: "Разрушить здание",
        text230: "Выбор здания для постройки",
        text231: "Для постройки требуется",
        text232: "Вернуться",
        text233: "Если вы еще не использовали ресурсы для строительства данного здания, можно изменить  выбор, вернувшись к списку доступных для возведения зданий.",
        text234: "Добыча",
        text235: "Добыть за",
        text236: "Произвести за",
        text237: "Произвести",
        text238: "Не хватает ресурсов для производства",
        text239: "До окончания поиска клада осталось",
        text240: "Котлован",
        text242: "добавить",
        text243: "информация",
        text244: "Все рецепты",
        text245: "Избранные рецепты",
        text246: "Ваши вещи для хранения на складе",
        text247: "Ваши вещи для «заморозки» на складе",
        text248: "Доступно при постройке Хранилища",
        text249: "уровня",
        text250: "В Поместье все здания построены до максимального уровня.",
        text251: "Доступные фронты",
        text252: "В тронный зал",
        text253: "Склад",
        text254: "Тронный зал",
        text255: "Необходимо активировать портал",
        text256: "Доступно при постройке портала",
        text258: "После открытия портала вы сможете выбрать локацию, на которую он будет вести.",
        text259: "Искать локацию",
        text260: "Перенастройка станет доступна через",
        text261: "Активировать",
        text262: "Перенастроить",
        text263: "Сбросить",
        text264: "Запрашивать подтверждение при перемещении в локации",
        text265: "Переход за",
        text266: "Купить камень",
        text267: "Не ждать",
        text268: "Выберите локацию",
        text269: "Переместиться в локацию",
        text270: "Переход",
        text271: "Стоимость составит",
        text272: "Сортировка по названию",
        text273: "Сортировка по цвету",
        text274: "Сортировка по типу",
        text275: "Сортировка по времени жизни",
        text276: "Введите название предмета",
        text277: "Поиск по названию",
        text278: "Сортировка предметов",
        text279: "Сбросить фильтр",
        text280: "Сортировка по умолчанию",
        text281: "Введите имя питомца",
        text282: "Сортировка по готовности",
        text283: "Сортировка по имени",
        text284: "Сортировка по уровню",
        text285: "Сортировка",
        text286: "Гарантированные трофеи",
        text287: "Осталось нажатий",
        text288: "Убить сразу 10 монстров",
        text289: "Выберите монстра для охоты",
        text290: "Охота за",
        text291: "Большая охота за",
        text292: "Егерский лагерь",
        text293: "Добыча ресурсов",
        text294: "Поиск артефактов",
        text295: "Экипировка",
        text296: "Тип ресурса",
        text297: "Вид ресурса",
        text298: "Награда",
        text299: "Фрагменты в наличии",
        text300: "Выйти",
        text301: "Гильдийский пул",
        text302: "Серый остров",
        text303: "Зеленый остров",
        text304: "Золотой остров",
        text305: "Красный остров",
        text306: "Синий остров",
        text307: "Бойцы",
        text308: "Выпустить резерв",
        text309: "Готов",
        text310: "закрыть",
        text311: "лог боя",
        text312: "команда",
        text313: "Ok",
        text314: "До начала",
        text315: "Резерв",
        text316: "Воеводы",
        text317: "Левая башня",
        text318: "Правая башня",
        text319: "Ворота",
        text320: "Вы уверены, что хотите покинуть клановую битву до ее завершения?",
        text321: "Расставить",
        text322: "Воевода",
        text323: "Внимание! Не все участники распределены по островам.<br>Вы уверены, что хотите вступить в бой?",
        text324: "Создать случайный талисман",
        text325: "Создать талисман выбранного уровня",
        text326: "Разрушить предметы",
        text327: "Выбор питомца",
        text328: "Трава",
        text329: "Камни",
        text330: "Рыба",
        text331: "Поиск талисманов",
        text332: "Поиск ценностей",
        text333: "Поиск снаряжения",
        text334: "Вы уверены, что хотите разрушить вещь?",
        text335: "Добыча травы",
        text336: "Добыча камней",
        text337: "Добыча рыбы",
        text338: "Выберите питомца",
        text339: "Добыча ресурсов в Егерском лагере доступна со 2 уровня здания.",
        text340: "План",
        text400: "Не определено",
        text402: "Добыча прошла успешно",
        text403: "Добыча не удалась",
        text405: "мирный",
        text406: "пассивный",
        text407: "спокойный",
        text408: "раздраженный",
        text409: "агрессивный",
        text410: "частый",
        text411: "обычный",
        text412: "редкий",
        text413: "единичный",
        text414: "раритетный",
        text417: "Выберите объект действия",
        text418: "Информация об объекте",
        text419: "добыть",
        text420: "собрать",
        text421: "ловить",
        text422: "атаковать",
        text424: "Недостаточно даных",
        text425: "Неверные даные",
        text426: "Неизвестная ошибка",
        text429: "Вами",
        text430: "Всего",
        text431: "Проверка мастерства",
        text432: "Соберите изображение за отведенное время и нажмите кнопку “готово”",
        text433: "Оставшееся время",
        text434: "сек.",
        text435: "Готово",
        text436: "Вы начали добывать ресурс первым.",
        text437: "Вы начали добывать ресурс не первым.",
        text438: "Перетащите, чтобы найти клад",
        text440: "использовать",
        text441: "Выполняется действие",
        text442: "Действие выполнено успешно",
        text443: "Действие завершилось неудачей",
        text444: "далеко",
        text445: "близко",
        text446: "рядом!",
        text447: "Отображать ресурс этого цвета",
        text448: "Настроить фильтр",
        text449: 'Настройки фильтра "Режим охоты"',
        text500: "Премиум-аккаунт",
        text505: "статуя",
        text506: "обелиск",
        text507: "Осталось убийств монстров на сегодня",
        text600: "Дар небес",
        text601: "Испытайте судьбу и заберите награду",
        text602: "Каждый бросок приближает к четырем кубикам!",
        text603: "Кости",
        text604: "Призы",
        text605: 'Каждый день вы можете испытать удачу до 5 раз подряд. Первые две попытки бросается 1 кубик, следующие две попытки - 2 кубика, пятая попытка - 3 кубика. Сумма очков, выпавших на кубиках, укажет на ваш приз! Кроме того, каждый бросок кубиков приближает вас к супер-игре, которая позволит вам бросить сразу 4 кубика и даст шанс выиграть самые ценные призы! <a href="event:infoLink" target="_blank">Подробнее...</a>',
        text606: "Бросить бесплатно",
        text607: "Бросить за",
        text608: "Завершить игру на сегодня",
        text609: "/info/library/index.php?obj=cat&id=157",
        text700: "Нажмите, чтобы получить Дар Небес!",
        text702: "Локация под контролем магмар",
        text703: "Локация под контролем людей",
        text704: "Локация свободна",
        text706: "Бой доступен через",
        text707: "Начать бой",
        text708: "Бой доступен",
        text709: "Подготовка к бою еще",
        text710: "Идет бой",
        text711: "Время для боя еще не пришло",
        text712: "Вступить",
        text713: "Бой уже идет. Вы не можете вмешаться.",
        text714: "Вмешаться в бой",
        text715: "Вы уверены, что хотите вмешаться в бой за локацию",
        text716: "Действие доступно до",
        text718: "Ошибка",
        text720: "Вы уверены, что хотите начать бой за локацию",
        text721: "/info/library/index.php?obj=cat&id=161",
        text723: "Время",
        text724: "Владения людей",
        text725: "Владения магмар",
        text726: "Нейтральные владения",
        text727: "Ожидание начала боя",
        text728: "Подготовка к бою",
        text731: "Воскреснуть за",
        text732: "Волшебное зеркало",
        text733: "Активности",
        text734: "Однорукий бандит",
        text735: "Бриллиантовый бандит",
        text736: "Колесо удачи",
        text800: "Название",
        text802: "Снять",
        text803: "Снять эффект",
        text805: "Да",
        text806: "Нет",
        text809: "Количество слотов зависит от браслета",
        text810: "Скрыть",
        text811: "Осталось скрытий",
        text812: "Скрыть все",
        text813: "Отменить скрытие",
        text814: "Открыть все",
        text900: "Взломать",
        text901: "Открыть",
        text902: "Оставшиеся ходы",
        text903: "Замок заклинило!",
        text905: "Вы уверены?",
        text1000: "убрать",
        text1100: "/info/forum/",
        text1200: "Бриллиант",
        text1201: "назад",
        text1202: "Цитадель",
        text1203: "Чертеж",
        text1250: "Обратиться",
        text1252: "Нужен уровень",
        text1253: "Алтарь доступен",
        text1254: "Персонаж доступен",
        text1255: "Персонажи",
        text1299: "строить",
        text1300: "ПОКАЗАТЬ УБИТЫХ",
        text1301: "СКРЫТЬ УБИТЫХ",
        text1302: "Показать жизнь/ману",
        text1303: "Скрыть жизнь/ману",
        text1304: "1я Команда",
        text1305: "2я Команда",
        text1306: "Введите ник цели",
        text1400: "Магия Зеркал",
        text1401: "Вы можете выиграть один из этих призов",
        text1402: "ваш результат",
        text1403: "Играть за",
        text1404: "Выберите любые три зеркала,<br/>сумма очков укажет ваш приз!",
        text1405: "Шкала удачи",
        text1406: "Гарантированные призы",
        text1407: "/info/library/index.php?obj=cat&id=189",
        text1408: "Каждая игра накапливает энергию удачи. При достижении максимума Вы сможете сыграть на более ценные призы!",
        text1409: "Каждая игра приближает вас к очередному гарантированному призу. Счетчик игр сбрасывается по окончании события!",
        text1500: "Режим просмотра",
        text1501: "Выберите объект в зале, который хотите купить. Вы увидите список доступных вариантов.",
        text1502: "Магазин",
        text1506: "поставить",
        text1507: "Купить предмет",
        text1508: "примерить",
        text1509: "Сегодня день рождения у <b>#0#</b> ваших друзей!<br/>Вы можете подарить им подарки.",
        text1510: "Поздравить",
        text1511: "Подарки в рюкзаке",
        text1512: "Купить подарок",
        text1513: "У вас нет ни одного подарка.",
        text1514: "",
        text1515: "Сегодня день рождения у <b>1</b> вашего друга!<br/>Вы можете подарить ему подарок.",
        text1516: "Ваш текущий бонус",
        text1517: "Получить бонус",
        text1518: "Играть еще раз",
        text1519: "Начав следующую игру, вы получите возможность накопить новый бонус вместо текущего.<br/>Хотите сыграть еще раз?",
        text1520: "Бесплатная попытка через",
        text1521: "Игра окончена",
        text1522: "Жми!",
        text1523: "Начать",
        text1524: "Завершить",
        text1525: "Недостаточно средств!",
        text1526: "Чтобы получить бонус, обменяйте бриллианты на золото.",
        text1527: "Максимальный выигрыш на сервере",
        text1528: "Ваш наибольший выигрыш за сегодня",
        text1600: "ДЖЕКПОТ",
        text1601: "Беспл.игр",
        text1700: "Описание",
        text1701: "Выберите пол персонажа и вступите в бой со своим первым противником. Чтобы победить врага, используйте не только обычные удары, но и заклинания.",
        text1702: "Выбор пола",
        text1703: "МУЖСКОЙ",
        text1704: "ЖЕНСКИЙ",
        text1705: "выбрать",
        text1706: "магия огня",
        text1707: "магия воздуха",
        text1708: "магия света",
        text1709: "магия земли",
        text1710: "магия тьмы",
        text1711: "переход в режим магии",
        text1712: "переход в режим атаки",
        text1713: "Инферно, длительность #0# сек",
        text1714: "используйте книгу заклинаний",
        text1715: 'Сражения - лишь часть великих свершений и приключений, ожидающих вас в игре "Легенда: Наследие драконов".',
        text1716: "Вы только начали путь славного воина, но уже одолели искусного мага мертвой магии и невероятно могущественного монстра! Мы восхищаемся вашей силой и бесстрашием, и прочим вам судьбу великого воителя. А теперь зарегистируйтесь в игре и продолжайте свой легендарный путь в мире Фэо!",
        text1717: "Для того чтобы проверить свои силы в бою, выберите один из типов ударов, наведя курсор мыши на любой из мечей, расположенных по кругу.",
        text1718: "Освоить режим магии очень просто: наведите курсор мыши на меч на синем поле и используйте силы огня, воздуха или тьмы.",
        text1800: "Выход в",
        text1801: "Вход в",
        text1802: "Игроки",
        text2000: "д",
        text2001: "ч",
        text2002: "мин",
        text2003: "сек",
        text2004: "Января",
        text2005: "Февраля",
        text2006: "Марта",
        text2007: "Апреля",
        text2008: "Мая",
        text2009: "Июня",
        text2010: "Июля",
        text2011: "Августа",
        text2012: "Сентября",
        text2013: "Октября",
        text2014: "Ноября",
        text2015: "Декабря",
        text2016: "м",
        text2017: "с",
        text2018: "Ок",
        text2019: "Отмена",
        text2020: "Подтверждение",
        text2021: "За",
        text2022: "шт",
        text2023: "час",
        text2024: "часа",
        text2025: "ур.",
        text2026: "Больше не спрашивать",
        text2027: "Сбрасывается при выходе из локации",
        text2028: "C",
        text2029: "до",
        text2030: "Время до окончания",
        text2031: "Время до начала",
        text2032: "В процессе",
        text2033: "Отправить",
        text2034: "Создать",
        text3000: "великие битвы",
        text3001: "невидимость",
        text3002: "доблесть",
        text3003: "жизнь",
        text3004: "почта",
        text3005: "квесты",
        text3006: "животное",
        text3007: "компас",
        text3008: "профессии",
        text3009: "друзья",
        text3010: "Проложите кратчайший путь к любой точке ФЭО",
        text3011: "Локации",
        text3012: "Ресурсы",
        text3013: "Монстры",
        text3014: "Инстансы",
        text3015: "Путь займет",
        text3016: "переходов",
        text3017: "Искомый объект можно найти в нескольких локациях:",
        text3018: "Ничего не найдено",
        text3019: "Маршрут не найден",
        text3020: "переход",
        text3021: "перехода",
        text3022: "Проложить маршрут",
        text3023: "Объект находится в текущей локации",
        text3024: "Проложить",
        text3025: "Недостаточно средств.",
        text3026: "Случайный вид",
        text3027: "Смена образа",
        text3028: "Персонализация",
        text3029: "Выбор народа",
        text3030: "Создания мира Фэо,  обладающие разумом, волей и человеческой речью, обитают на материке Огрий, приручили тигров, владеют магией света, воздуха, воды.",
        text3031: "Создания мира Фэо, в их жилах течет раскаленная лава, обладают огромной физической силой, укротили зорбов, поклоняются богине Верциде, владеют магией теней, огня, земли.",
        text3032: "Дойти",
        text3033: "Соединение",
        text3034: "Регистрация открыта",
        text3035: "Регистрация закрыта",
        text3036: "Хорошее",
        text3037: "Население",
        text3038: "Выбрать сервер",
        text3039: "Выбор сервера",
        text3040: "Введите название объекта",
        text3041: "или выберите из списка"
    },
    isInited: false,
    init: function(t) {
        this.isInited = true;
        for (key in this.dictionary) {
            this.dictionary[key] = this.dictionary[key].replace("И", String.fromCharCode(1048))
        }
        var e;
        var a = {};
        for (key in this.dictionary) {
            if (a[this.dictionary[e]])
                canvas.Log.add(canvas.Log.ALL, "Same word in Dictionary! ID: " + e + " VALUE: " + this.dictionary[e] + " REPLACE_ID: " + a[this.dictionary[e]], 16711680);
            else
                a[this.dictionary[e]] = e
        }
        if (t && t.firstChild && t.firstChild.childNodes) {
            var i = t.firstChild.childNodes.length;
            for (var s = 0; s < i; s++) {
                var n = t.firstChild.childNodes[s];
                if (!n.firstChild)
                    continue;
                this.dictionary[n.nodeName] = n.textContent
            }
        }
    },
    getText: function(t, e) {
        var a = this.dictionary ? this.dictionary["text" + t.toString()] : "Translator not initialized!";
        var i;
        var s;
        var n;
        var r;
        var o;
        var l;
        if (e) {
            i = /#\d+[^#]*#/gi;
            s = a.match(i);
            for (l in s) {
                r = s[l];
                if (typeof r != "string")
                    continue;
                n = r.substr(1, r.length - 2).split(",");
                o = e[parseInt(n[0])];
                if (o) {
                    a = a.replace(r, o)
                }
            }
        }
        return a
    },
    getLang: function() {
        return this.lang
    },
    toUpperCaseFirstChar: function(t) {
        if (!t || t == "")
            return "";
        return t.charAt(0).toUpperCase() + t.substr(1).toLowerCase()
    }
};
canvas.SoundManager = {
    volume: 1,
    cache: {},
    play: function(t) {
        var e = t.split(".");
        var a = e[e.length - 1];
        if (a.length > 4) {
            t = t + ".ogg"
        } else {
            t = t.substr(0, t.length - a.length) + "ogg"
        }
        this.lastPath = t;
        if (!canvas.ResourceLoader.testUx(t)) {
            console.log("Warning! Sound not found: " + t);
            return
        }
        t = canvas.ResourceLoader.applyUx(t);
        var i = this.cache[t];
        if (i) {
            i.volume(this.volume);
            i.play()
        } else {
            i = new canvas.px.Howl({
                src: [t],
                autoplay: true,
                loop: false,
                volume: this.volume,
                onloaderror: this.onError.bind(this)
            });
            this.cache[t] = i
        }
    },
    onError: function() {
        canvas.app.battle.log("Error load sound: " + this.lastPath, 16777215)
    }
};
canvas.Event = {
    STAGE_MOUSE_UP: "STAGE_MOUSE_UP",
    STAGE_MOUSE_MOVE: "STAGE_MOUSE_MOVE",
    STAGE_MOUSE_OUT: "STAGE_MOUSE_OUT",
    STAGE_WHEEL: "STAGE_WHEEL",
    STAGE_KEY_DOWN: "STAGE_KEY_DONW",
    STAGE_KEY_UP: "STAGE_KEY_UP",
    UX_READY: "UX_READY",
    ARTIKULS_LOADED: "ARTIKULS_LOADED"
};
canvas.px.MovieClipEvent = {
    EVENT_UPDATE: "MovieClip.UPDATE",
    EVENT_COMPLETE: "MovieClip.COMPLETE",
    EVENT_READY: "MovieClip.READY"
};
canvas.px.MovieClipProps = {
    colorTransform: "ct",
    alpha: "al",
    masking: "mg",
    mask: "mk",
    matrix: "mx",
    actions: "as",
    children: "ch",
    label: "lb"
};
canvas.px.MovieClip = function(t, e, a) {
    this._frameEvent = "";
    Object.defineProperty(this, "frameEvent", {
        get: function() {
            return this._frameEvent
        },
        set: function(t) {
            if (this._frameEvent) {
                canvas.EventManager.removeEventListener(this._frameEvent, null, this._render, this)
            }
            this._frameEvent = t;
            if (this._frameEvent) {
                canvas.EventManager.addEventListener(this._frameEvent, null, this._render, this)
            }
            this.updateFrameEvent()
        }
    });
    this._currentFrame = 1;
    Object.defineProperty(this, "currentFrame", {
        get: function() {
            return this._currentFrame
        },
        set: function(t) {
            if (t > this.totalFrames) {
                if (!this.loop) {
                    this.stop();
                    canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_COMPLETE, this);
                    if (this.autoDestroy) {
                        this.destroy({
                            children: true
                        })
                    }
                    return
                }
            }
            this._currentFrame = t > this.totalFrames ? 1 : t < 1 ? this.totalFrames : t
        }
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            if (this._locked == t)
                return;
            this._locked = t
        }
    });
    this.url = t;
    this.container = new canvas.px.Container;
    this.spriteHash = {};
    this.stopped = false;
    this.labels = {};
    this.currentLabel = "";
    this.basePath = e;
    this.autoDestroy = false;
    this.loop = false;
    this.ready = false;
    this.skipMasks = false;
    this.mcChildsCache = {};
    this.smoothing = a == undefined ? true : a;
    canvas.px.Container.call(this);
    this.addChild(this.container);
    if (!this.data && !canvas.ResourceLoader.get(this.url + ".mci")) {
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._init, this);
        canvas.ResourceLoader.add([this.url + ".mci"])
    } else {
        this._init()
    }
    return this
}
;
canvas.px.MovieClip.prototype = Object.create(canvas.px.Container.prototype);
canvas.px.MovieClip.prototype._init = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._init, this);
    if (!this.data) {
        if (!canvas.ResourceLoader.get(this.url + ".mci")) {
            return
        }
        this.data = canvas.ResourceLoader.get(this.url + ".mci").data
    }
    this.maxTotalFrames = this.totalFrames = this.data.frames.length;
    if (!this.mcChilds)
        this.mcChilds = this.data.mc;
    if (this.mcChilds) {
        for (var t in this.mcChilds) {
            var e = this.mcChilds[t].frames.length;
            if (e > this.maxTotalFrames)
                this.maxTotalFrames = e
        }
    }
    for (var t in this.data.frames) {
        if (this.data.frames[t][canvas.px.MovieClipProps.label]) {
            this.labels[this.data.frames[t][canvas.px.MovieClipProps.label].name] = this.data.frames[t][canvas.px.MovieClipProps.label].frame
        }
    }
    if (!this.framePath)
        this.framePath = this.data.name ? this.data.name + "/" : "";
    if (!this.atlas) {
        var a = "";
        if (this.data.noAtlas) {
            a = ""
        } else if (this.data.atlas) {
            a = (this.basePath ? this.basePath : canvas.Config.imgPath) + this.data.atlas
        } else {
            a = this.url
        }
        this.atlasUrl = a;
        if (a && !canvas.ResourceLoader.get(a + ".json")) {
            canvas.ResourceLoader.add([a + ".json"]);
            canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._ready, this)
        } else {
            this._ready()
        }
    } else {
        this._ready()
    }
}
;
canvas.px.MovieClip.prototype._ready = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._ready, this);
    if (!this.atlas && this.atlasUrl) {
        this.atlas = canvas.ResourceLoader.get(this.atlasUrl + ".json").textures
    }
    this.ready = true;
    this.render();
    this.currentFrame = 1;
    canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_READY, this)
}
;
canvas.px.MovieClip.prototype._render = function() {
    if (!this.stopped)
        this.render()
}
;
canvas.px.MovieClip.prototype.render = function() {
    if (this.locked)
        return;
    if (canvas.px.MovieClip.debugEnable) {
        if (Date.now() - canvas.px.MovieClip.debugTime >= 1e3) {
            console.log("Renders per second: " + canvas.px.MovieClip.debugRenderCount);
            canvas.px.MovieClip.debugRenderCount = 0;
            canvas.px.MovieClip.debugTime = Date.now()
        }
        canvas.px.MovieClip.debugRenderCount++
    }
    if (!this.ready)
        return;
    if (this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.label]) {
        this.currentLabel = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.label].name
    }
    var t = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.actions];
    if (t) {
        for (var e in t) {
            var a = t[e];
            if (this[a.name]) {
                switch (a.name) {
                case "gotoAndPlay":
                    this.gotoAndPlay(parseInt(a.params[0]) + 1);
                    break;
                default:
                    this[a.name].apply(this, a.params ? a.params : null)
                }
            }
        }
    }
    this.container.removeChildren();
    var e;
    for (e in this.mcChildsCache) {
        this.mcChildsCache[e].wasActive = false
    }
    var i = {};
    var s;
    var n;
    for (e in this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.children]) {
        var r = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.children][e];
        if (r[canvas.px.MovieClipProps.masking]) {
            continue
        }
        if (!r.name && !r.mc)
            continue;
        var o;
        if (r.mc) {
            if (this.mcChildsCache[r.mc]) {
                o = this.mcChildsCache[r.mc];
                o.gotoAndStop(o.currentFrame)
            } else {
                o = new canvas.px.MovieClipChild(this.mcChilds[r.mc],this.atlas,this.framePath,this.mcChilds,this.smoothing);
                this.mcChildsCache[r.mc] = o
            }
            o.name = r.mc;
            o.wasActive = true
        } else {
            o = this.getImage(r.name, i);
            o.name = r.name
        }
        this.clearImage(o);
        n = r[canvas.px.MovieClipProps.matrix];
        if (!n.set) {
            r[canvas.px.MovieClipProps.matrix] = n = new canvas.px.Matrix(n.a,n.b,n.c,n.d,n.tx,n.ty)
        }
        o.transform.localTransform = n;
        o.alpha = r[canvas.px.MovieClipProps.alpha] == undefined ? 1 : r[canvas.px.MovieClipProps.alpha];
        s = r[canvas.px.MovieClipProps.colorTransform];
        if (s) {
            if (typeof s == "string") {
                o.filters = [canvas.Functions.colorMatrixCache[s]]
            } else {
                r[canvas.px.MovieClipProps.colorTransform] = canvas.Functions.getColorMatrixHash.apply(this, s);
                o.filters = [canvas.Functions.getColorMatrixFilter.apply(this, s)]
            }
        }
        this.container.addChild(o);
        if (!this.skipMasks && r[canvas.px.MovieClipProps.mask]) {
            var l = r[canvas.px.MovieClipProps.mask];
            var c = this.getImage(l.name, i);
            this.clearImage(c);
            n = l[canvas.px.MovieClipProps.matrix];
            if (!n.set) {
                l[canvas.px.MovieClipProps.matrix] = n = new canvas.px.Matrix(n.a,n.b,n.c,n.d,n.tx,n.ty)
            }
            c.transform.localTransform = n;
            this.container.addChild(c);
            o.mask = c
        }
    }
    for (e in this.mcChildsCache) {
        var p = this.mcChildsCache[e];
        if (!p.wasActive)
            p.currentFrame = p.totalFrames
    }
    canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_UPDATE, this);
    this.currentFrame++
}
;
canvas.px.MovieClip.prototype.getImage = function(t, e) {
    if (e[t] == undefined)
        e[t] = 0;
    else
        e[t]++;
    var a;
    var i = t + "__" + e[t];
    var s;
    if (this.spriteHash[i]) {
        a = this.spriteHash[i]
    } else {
        s = this.atlas ? this.atlas[this.framePath + t + ".png"] : canvas.px.TextureEmpty;
        if (!this.smoothing && s)
            s.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST;
        a = new canvas.px.Sprite(s);
        this.spriteHash[i] = a
    }
    return a
}
;
canvas.px.MovieClip.prototype.clearImage = function(t) {
    t.mask = null;
    t.filters = null
}
;
canvas.px.MovieClip.prototype.gotoAndPlay = function(t) {
    this.currentFrame = typeof t == "string" ? this.labels[t] || 1 : t;
    this.stopped = false
}
;
canvas.px.MovieClip.prototype.gotoAndStop = function(t) {
    this.currentFrame = typeof t == "string" ? this.labels[t] || 1 : t;
    this.stopped = true;
    this.render()
}
;
canvas.px.MovieClip.prototype.stop = function() {
    this.stopped = true
}
;
canvas.px.MovieClip.prototype.play = function() {
    this.stopped = false
}
;
canvas.px.MovieClip.prototype.stopChildren = function() {
    if (this.mcChildsCache) {
        for (var t in this.mcChildsCache) {
            this.mcChildsCache[t].frameEvent = this.frameEvent;
            this.mcChildsCache[t].stop()
        }
    }
}
;
canvas.px.MovieClip.prototype.playChildren = function() {
    if (this.mcChildsCache) {
        for (var t in this.mcChildsCache) {
            this.mcChildsCache[t].frameEvent = this.frameEvent;
            this.mcChildsCache[t].play()
        }
    }
}
;
canvas.px.MovieClip.prototype.updateFrameEvent = function() {}
;
canvas.px.MovieClip.prototype.destroy = function() {
    this.stop();
    this.frameEvent = null;
    if (this.parent)
        this.parent.removeChild(this);
    canvas.px.Container.prototype.destroy.call(this, {
        children: true
    });
    var t;
    for (t in this.spriteHash) {
        this.spriteHash[t].destroy()
    }
    for (t in this.mcChildsCache) {
        this.mcChildsCache[t].destroy()
    }
}
;
canvas.px.MovieClip.debugEnable = false;
canvas.px.MovieClip.debugTime = Date.now();
canvas.px.MovieClip.debugRenderCount = 0;
canvas.px.MovieClipChild = function(t, e, a, i, s) {
    this.data = t;
    this.atlas = e;
    this.framePath = a;
    this.mcChilds = i;
    canvas.px.MovieClip.call(this, null, null, s);
    this.loop = true;
    this.gotoAndStop(1)
}
;
canvas.px.MovieClipChild.prototype = Object.create(canvas.px.MovieClip.prototype);
canvas.px.WindowEvent = {
    EVENT_OPEN: "WindowEvent.EVENT_OPEN",
    EVENT_CLOSE: "WindowEvent.EVENT_CLOSE",
    EVENT_DRAG: "WindowEvent.EVENT_DRAG",
    EVENT_DRAG_FINISH: "WindowEvent.EVENT_DRAG_FINISH"
};
canvas.px.Window = function() {
    canvas.px.Container.call(this);
    this.closeButton = null;
    this.header = null;
    this.added = this.addedHandler.bind(this);
    this.removed = this.removedHandler.bind(this);
    this.click = this.clickHandler.bind(this);
    this.mousedown = this.downHandler.bind(this);
    this.interactive = true;
    this.dragAvailable = true
}
;
canvas.px.Window.prototype = Object.create(canvas.px.Container.prototype);
canvas.px.Window.prototype.clickHandler = function(t) {
    if (canvas.Functions.findParent(this.closeButton, t.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
    }
}
;
canvas.px.Window.prototype.downHandler = function(t) {
    if (canvas.Functions.findParent(this.header, t.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_DRAG, this, t)
    }
}
;
canvas.px.Window.prototype.addedHandler = function(t) {}
;
canvas.px.Window.prototype.removedHandler = function(t) {}
;
canvas.px.Window.prototype.resize = function(t) {}
;
canvas.px.Window.prototype.startDrag = function(t, e) {
    if (!this.dragAvailable)
        return;
    this.dragRect = t;
    this.startDragMousePoint = new canvas.px.Point(e.x - this.x,e.y - this.y);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.dragHandler, this)
}
;
canvas.px.Window.prototype.dragHandler = function(t) {
    var e = t.params.mouseData.offsetX - this.startDragMousePoint.x;
    var a = t.params.mouseData.offsetY - this.startDragMousePoint.y;
    e = e < this.dragRect.x ? this.dragRect.x : e > this.dragRect.x + this.dragRect.width ? this.dragRect.x + this.dragRect.width : e;
    a = a < this.dragRect.y ? this.dragRect.y : a > this.dragRect.y + this.dragRect.height ? this.dragRect.y + this.dragRect.height : a;
    this.position.set(Math.max(0, Math.round(e)), Math.max(0, Math.round(a)))
}
;
canvas.px.Window.prototype.stopDrag = function() {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.dragHandler, this);
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_DRAG_FINISH, this)
}
;
canvas.px.Window.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.px.Mask = function(t, e, a, i) {
    this._active = true;
    Object.defineProperty(this, "active", {
        get: function() {
            return this._active
        },
        set: function(t) {
            this._active = t;
            this.update()
        }
    });
    canvas.px.Graphics.call(this);
    if (t == undefined)
        t = 100;
    if (e == undefined)
        e = 100;
    this.color = a == undefined ? 0 : a;
    this.alpha = i == undefined ? 0 : i;
    this.setSize(t, e)
}
;
canvas.px.Mask.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.px.Mask.prototype.setSize = function(t, e) {
    if (t == undefined)
        t = -1;
    if (e == undefined)
        e = -1;
    if (t >= 0)
        this._width = t;
    if (e >= 0)
        this._height = e;
    this.update()
}
;
canvas.px.Mask.prototype.update = function() {
    this.clear();
    if (this.active) {
        this.beginFill(this.color, this.alpha);
        this.drawRect(0, 0, this._width, this._height);
        this.endFill()
    }
}
;
canvas.px.RoundRect = function(t, e, a, i, s, n, r, o, l, c) {
    this._myColor = 0;
    Object.defineProperty(this, "myColor", {
        get: function() {
            return this._myColor
        },
        set: function(t) {
            this._myColor = t;
            this.update()
        }
    });
    this._myAlpha = 1;
    Object.defineProperty(this, "myAlpha", {
        get: function() {
            return this._myAlpha
        },
        set: function(t) {
            this._myAlpha = t;
            this.update()
        }
    });
    this._borderColor = 0;
    Object.defineProperty(this, "borderColor", {
        get: function() {
            return this._borderColor
        },
        set: function(t) {
            this._borderColor = t;
            this.update()
        }
    });
    this._borderAlpha = 1;
    Object.defineProperty(this, "borderAlpha", {
        get: function() {
            return this._borderAlpha
        },
        set: function(t) {
            this._borderAlpha = t;
            this.update()
        }
    });
    this._w = 0;
    Object.defineProperty(this, "w", {
        get: function() {
            return this._w
        },
        set: function(t) {
            if (t == this._w)
                return;
            this._w = t;
            this.update()
        }
    });
    this._h = 0;
    Object.defineProperty(this, "h", {
        get: function() {
            return this._h
        },
        set: function(t) {
            if (t == this._h)
                return;
            this._h = t;
            this.update()
        }
    });
    this._ellipseWidth = 0;
    Object.defineProperty(this, "ellipseWidth", {
        get: function() {
            return this._ellipseWidth
        },
        set: function(t) {
            if (t == this._ellipseWidth)
                return;
            this._ellipseWidth = t;
            this.update()
        }
    });
    canvas.px.Graphics.call(this);
    if (t == undefined)
        t = 0;
    if (e == undefined)
        e = 1;
    if (a == undefined)
        a = 100;
    if (i == undefined)
        i = 100;
    if (s == undefined)
        s = 30;
    if (r == undefined)
        r = false;
    if (o == undefined)
        o = true;
    if (l == undefined)
        l = 0;
    if (c == undefined)
        c = 0;
    this._myColor = t;
    this._myAlpha = e;
    this._fill = o;
    this._borderAlpha = c;
    this._borderColor = l;
    this._w = a;
    this._h = i;
    this._ellipseWidth = s;
    this._centered = r;
    this.update()
}
;
canvas.px.RoundRect.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.px.RoundRect.prototype.update = function() {
    this.clear();
    this.lineStyle(1, this._borderColor, this._borderAlpha);
    if (this._fill) {
        this.beginFill(this._myColor, this._myAlpha)
    }
    this.drawRoundedRect(this._centered ? -this._w / 2 : 0, this._centered ? -this._h / 2 : 0, this._w, this._h, this._ellipseWidth);
    this.endFill()
}
;
canvas.px.RoundRect.prototype.setSize = function(t, e) {
    this._w = t;
    this._h = e;
    this.update()
}
;
canvas.px.Polygon = function(t, e, a) {
    canvas.px.Graphics.call(this);
    if (e == undefined)
        e = 0;
    if (a == undefined)
        a = 0;
    if (!t)
        return;
    this.beginFill(e, a);
    var i = t.length;
    for (var s = 0; s < i; s += 4) {
        this.drawRect(t[s], t[s + 1], 1, t[s + 3] - t[s + 1])
    }
    this.endFill()
}
;
canvas.px.Polygon.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.px.PolygonData = function(t) {
    var e = [];
    var a = t.length;
    for (var i = 0; i < a; i += 2) {
        e.push(t[i], t[i + 1])
    }
    PIXI.Polygon.call(this, e)
}
;
canvas.px.PolygonData.prototype = Object.create(PIXI.Polygon.prototype);
canvas.px.Matrix = function(t, e, a, i, s, n) {
    return new PIXI.Matrix(t == undefined ? 1 : t,e == undefined ? 0 : e,a == undefined ? 0 : a,i == undefined ? 1 : i,s,n)
}
;
canvas.px.RoundProgress = function(t, e, a) {
    this._progress = 0;
    Object.defineProperty(this, "progress", {
        get: function() {
            return this._progress
        },
        set: function(t) {
            this._progress = t < 0 ? 0 : t > 1 ? 1 : t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    this.color = e;
    this.alpha = a;
    this.radius = t;
    this.r1 = new canvas.px.Graphics;
    this.r2 = new canvas.px.Graphics;
    this.addChild(this.r1);
    this.addChild(this.r2);
    var i = new canvas.px.Mask(this.radius,this.radius * 2);
    this.addChild(i);
    i.position.set(0, -this.radius);
    this.r1.mask = i;
    i = new canvas.px.Mask(this.radius,this.radius * 2);
    this.addChild(i);
    i.position.set(-this.radius, -this.radius);
    this.r2.mask = i;
    this.r1.clear();
    this.r1.beginFill(this.color, this.alpha);
    this.r1.arc(0, 0, this.radius, canvas.Functions.degToRad(0), canvas.Functions.degToRad(180));
    this.r1.endFill();
    this.r2.clear();
    this.r2.beginFill(this.color, this.alpha);
    this.r2.arc(0, 0, this.radius, canvas.Functions.degToRad(0), canvas.Functions.degToRad(180));
    this.r2.endFill()
}
;
canvas.px.RoundProgress.prototype = Object.create(canvas.px.Container.prototype);
canvas.px.RoundProgress.prototype.update = function() {
    this.r1.rotation = canvas.Functions.degToRad(90 + (this.progress >= .5 ? 180 : Math.round(360 * this.progress)));
    this.r2.rotation = canvas.Functions.degToRad(-90 + (this.progress <= .5 ? 0 : Math.round(360 * (this.progress - .5))))
}
;
canvas.utils.LocalStorage = function(t) {
    this.name = t;
    if (typeof Storage !== "undefined") {
        this.isSupported = true
    }
}
;
canvas.utils.LocalStorage.prototype.get = function(t) {
    if (this.isSupported) {
        return localStorage.getItem(this.name + "_" + t)
    } else {
        return undefined
    }
}
;
canvas.utils.LocalStorage.prototype.set = function(t, e) {
    if (this.isSupported) {
        localStorage.setItem(this.name + "_" + t, e)
    }
}
;
canvas.utils.URLRequestEvent = {
    EVENT_COMPLETE: "URLRequestEvent.EVENT_COMPLETE",
    EVENT_ERROR: "URLRequestEvent.EVENT_ERROR"
};
canvas.utils.URLRequest = function(t, e, a, i) {
    this.stack = [];
    this.request = new XMLHttpRequest;
    this.request.onreadystatechange = this.onLoad.bind(this);
    this.url = t || "";
    this.method = e || "GET";
    this.params = a || {};
    this.responseType = i || "text";
    this.request.responseType = this.responseType;
    return this
}
;
canvas.utils.URLRequest.prototype.load = function(t, e, a) {
    if (this.busy) {
        this.stack.push(arguments);
        return
    }
    this.busy = true;
    this.info = a;
    if (typeof t != "undefined" && t)
        this.url = t;
    if (typeof e != "undefined" && e)
        this.params = e;
    this.request.open(this.method, this.url, true);
    if (this.method == "POST") {
        this.request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        var i = this.params;
        if (typeof i == "object") {
            i = "";
            for (var s in this.params) {
                if (i)
                    i += "&";
                i += s + "=" + this.params[s]
            }
        }
        this.request.send(i)
    } else {
        this.request.send()
    }
}
;
canvas.utils.URLRequest.prototype.onLoad = function() {
    if (this.request.readyState == 4) {
        if (this.request.status == 200) {
            canvas.EventManager.dispatchEvent(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this)
        } else {
            canvas.Log.add(canvas.Log.ALL, "URL not found <b>" + this.url + "</b>", "#FF0000");
            canvas.EventManager.dispatchEvent(canvas.utils.URLRequestEvent.EVENT_ERROR, this)
        }
        this.busy = false;
        if (this.stack.length) {
            this.load.apply(this, this.stack.shift())
        }
    }
}
;
canvas.utils.URLRequest.prototype.abort = function() {
    if (this.request) {
        this.request.abort()
    }
}
;
canvas.utils.HintParams = function(t, e, a) {
    this.view = t;
    this.light = e || false;
    this.pos = a == undefined ? canvas.utils.HintPos.RIGHT_BOTTOM : a
}
;
canvas.utils.HintPos = {
    RIGHT_BOTTOM: "rb",
    RIGHT_TOP: "rt",
    LEFT_BOTTOM: "lb",
    LEFT_TOP: "lt"
};
canvas.utils.HintManager = function() {
    canvas.utils.HintManager.instance = this
}
;
canvas.utils.HintManager.prototype.init = function(t, e, a) {
    this.view = t;
    this.resize(e, a);
    if (this.interval == undefined)
        this.interval = setInterval(this.handlerTimer.bind(this), 200)
}
;
canvas.utils.HintManager.prototype.resize = function(t, e) {
    this.width = t;
    this.height = e
}
;
canvas.utils.HintManager.prototype.add = function(t, e) {
    t.hintParams = e;
    t.mouseover = this.handlerOver.bind(this);
    t.mouseout = this.handlerOut.bind(this)
}
;
canvas.utils.HintManager.prototype.remove = function(t) {
    this.hide(t);
    t.mouseover = null;
    t.mouseout = null
}
;
canvas.utils.HintManager.prototype.show = function(t) {
    if (!t)
        return;
    if (this.currentTarget != null) {
        this.hide(this.currentTarget)
    }
    var e = t.hintParams;
    if (e && e.view) {
        this.view.addChild(e.view);
        this.currentTarget = t;
        this.view.mousemove = this.handlerMove.bind(this);
        if (e.light) {
            this.currentTarget.filters = [canvas.Functions.getBrightness()]
        }
    }
}
;
canvas.utils.HintManager.prototype.hideAndRemove = function(t) {
    if (t == undefined)
        t = this.currentTarget;
    this.remove(t);
    this.hide(t)
}
;
canvas.utils.HintManager.prototype.hide = function(t) {
    if (t == undefined)
        t = this.currentTarget;
    if (!t)
        return;
    if (this.currentTarget != t)
        return;
    var e = t.hintParams;
    if (e) {
        if (e.light) {
            this.currentTarget.filters = []
        }
        this.view.removeChildren();
        this.currentTarget = null;
        this.view.mousemove = null
    }
}
;
canvas.utils.HintManager.prototype.handlerOver = function(t) {
    this.show(t.currentTarget);
    this.handlerMove(t)
}
;
canvas.utils.HintManager.prototype.handlerOut = function(t) {
    this.hide(t.currentTarget)
}
;
canvas.utils.HintManager.prototype.handlerMove = function(t) {
    if (!this.currentTarget.worldVisible) {
        this.hide(this.currentTarget);
        return
    }
    if (this.currentTarget) {
        var e, a;
        switch (this.currentTarget.hintParams.pos) {
        case canvas.utils.HintPos.RIGHT_BOTTOM:
            e = 15 + t.data.global.x;
            a = 20 + t.data.global.y;
            break;
        case canvas.utils.HintPos.RIGHT_TOP:
            e = 15 + t.data.global.x;
            a = t.data.global.y - this.currentTarget.hintParams.view.height - 2;
            break;
        case canvas.utils.HintPos.LEFT_BOTTOM:
            e = t.data.global.x - this.currentTarget.hintParams.view.width - 2;
            a = 20 + t.data.global.y;
            break;
        case canvas.utils.HintPos.LEFT_TOP:
            e = t.data.global.x - this.currentTarget.hintParams.view.width - 2;
            a = t.data.global.y - this.currentTarget.hintParams.view.height - 2;
            break
        }
        var i = e + this.currentTarget.hintParams.view.width - this.width;
        if (i > 0) {
            e -= i
        }
        i = a + this.currentTarget.hintParams.view.height - this.height;
        if (i > 0) {
            a -= i
        }
        if (e < 0)
            e = 0;
        if (a < 0)
            a = 0;
        this.currentTarget.hintParams.view.position.set(Math.round(e), Math.round(a))
    }
}
;
canvas.utils.HintManager.prototype.handlerTimer = function() {
    if (this.currentTarget && !this.currentTarget.worldVisible) {
        this.hide(this.currentTarget)
    }
}
;
canvas.utils.ServerTime = function(t, e) {
    this._serverDiff = 0;
    this._timezoneOffset = 180;
    if (t != undefined)
        this.init(t, e)
}
;
canvas.utils.ServerTime.prototype.init = function(t, e) {
    if (e == undefined)
        e = 180;
    this._serverDiff = Math.round(Date.now() * .001) - t;
    this._timezoneOffset = e
}
;
canvas.utils.ServerTime.prototype.getTime = function() {
    return Math.round(Date.now() * .001) - this._serverDiff
}
;
canvas.utils.ServerTime.prototype.getDate = function() {
    var t = new Date;
    t.setTime(t.getTime() - this._serverDiff * 1e3 + (this._timezoneOffset + t.getTimezoneOffset()) * 6e4);
    return t
}
;
canvas.utils.WindowsManager = function(t) {
    Object.defineProperty(this, "haveActiveWindows", {
        get: function() {
            return this.activeWindows.length > 0
        }
    });
    canvas.utils.WindowsManager.instance = this;
    this.activeWindows = [];
    this.container = null;
    this.dragingWindow = null;
    this.bottomContainer = null;
    this.w = 0;
    this.h = 0;
    this.dx = 0;
    this.dy = 0;
    this.currentWindow = null;
    if (t)
        this.wall = t;
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_DRAG, null, this.dragHandler, this)
}
;
canvas.utils.WindowsManager.prototype.init = function(t, e, a, i) {
    this.bottomContainer = i;
    this.container = t;
    this.w = e;
    this.h = a;
    this.resizeWindows()
}
;
canvas.utils.WindowsManager.prototype.openWindow = function(t, e, a, i, s) {
    if (e == undefined)
        e = true;
    if (a == undefined)
        a = true;
    if (i == undefined)
        i = true;
    if (s == undefined)
        s = false;
    t.__centered = i;
    if (this.activeWindows.indexOf(t) < 0) {
        this.activeWindows.push(t)
    }
    if (t.parent != this.container) {
        this.container.addChild(t);
        this.resizeWindow(t)
    }
    if (this.bottomContainer != null) {
        if (a) {
            this.bottomContainer.interactive = false;
            this.bottomContainer.interactiveChildren = false
        }
        if (e) {
            if (this.wall) {
                this.wall.active = true
            } else {
                this.bottomContainer.filters = [canvas.Functions.getGreyScale(.3)]
            }
        }
        if (s) {
            t.__wall = new canvas.px.Mask(this.bottomContainer.width,this.bottomContainer.height,0,.7);
            this.bottomContainer.addChild(t.__wall)
        }
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_OPEN, this, t)
    }
}
;
canvas.utils.WindowsManager.prototype.resizeWindows = function() {
    var t;
    var e = this.activeWindows.length;
    for (var a = 0; a < e; a++) {
        t = this.activeWindows[a];
        this.resizeWindow(t)
    }
}
;
canvas.utils.WindowsManager.prototype.resizeWindow = function(t) {
    if (t.__centered) {
        t.x = Math.max(0, Math.round((this.w - t.width) * .5));
        t.y = Math.max(0, Math.round((this.h - t.height) * .5))
    }
}
;
canvas.utils.WindowsManager.prototype.closeWindow = function(t) {
    var e = this.activeWindows.indexOf(t);
    if (e >= 0) {
        this.activeWindows.splice(e, 1)
    } else {
        return
    }
    if (t.parent == this.container)
        this.container.removeChild(t);
    if (t.__wall && this.bottomContainer) {
        if (t.__wall.parent == this.bottomContainer) {
            this.bottomContainer.removeChild(t.__wall)
        }
        t.__wall.destroy();
        t.__wall = null
    }
    if (this.bottomContainer != null && this.activeWindows.length == 0) {
        this.bottomContainer.interactive = true;
        this.bottomContainer.interactiveChildren = true;
        this.bottomContainer.filters = [];
        if (this.wall)
            this.wall.active = false
    }
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this, t)
}
;
canvas.utils.WindowsManager.prototype.windowIsActive = function(t) {
    return this.activeWindows.indexOf(t) >= 0
}
;
canvas.utils.WindowsManager.prototype.closeAllWindows = function() {
    var t;
    var e = [];
    var a = this.activeWindows.length;
    var i;
    for (i = 0; i < a; i++) {
        t = this.activeWindows[i];
        e.push(t)
    }
    a = e.length;
    for (i = 0; i < a; i++) {
        t = e[i];
        this.closeWindow(t)
    }
}
;
canvas.utils.WindowsManager.prototype.closeHandler = function(t) {
    if (this.windowIsActive(t.target)) {
        this.currentWindow = t.target;
        this.closeWindow(t.target)
    }
}
;
canvas.utils.WindowsManager.prototype.dragHandler = function(t) {
    this.dragingWindow = t.target;
    if (this.dragingWindow != null && this.windowIsActive(this.dragingWindow)) {
        this.container.setChildIndex(this.dragingWindow, this.container.numChildren - 1);
        this.dragingWindow.startDrag(new canvas.px.Rectangle(0,0,this.w - this.dragingWindow.width,this.h - this.dragingWindow.height), new canvas.px.Point(t.params.data.global.x + this.dx,t.params.data.global.y + this.dy));
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this)
    }
}
;
canvas.utils.WindowsManager.prototype.upHandler = function(t) {
    if (this.container != null && this.dragingWindow != null) {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
        this.dragingWindow.stopDrag();
        this.dragingWindow = null
    }
}
;
canvas.utils.ABCAbout = {
    VERSION: 1,
    REQUEST_URL_DWAR: "entry_point.php?object=common&action=action&json_mode_on=1"
};
canvas.utils.ABCEvent = {};
canvas.utils.ABCPointTypes = {
    END: 0,
    MOVE: 1,
    CLICK: 2,
    LEAVE: 3,
    TAB: 4,
    SPACE: 5,
    KEY: 6,
    MOUSE_DOWN: 7,
    MOUSE_UP: 8,
    toString: function(t) {
        switch (t) {
        case this.START:
            return "start";
        case this.END:
            return "end";
        case this.MOVE:
            return "move";
        case this.CLICK:
            return "click";
        case this.LEAVE:
            return "leave";
        case this.TAB:
            return "tab";
        case this.SPACE:
            return "space";
        case this.KEY:
            return "key";
        case this.MOUSE_DOWN:
            return "down";
        case this.MOUSE_UP:
            return "up"
        }
        return "unknow#" + t
    }
};
canvas.utils.ABCMouseEventTypes = {
    DOWN: 1,
    UP: 2,
    CLICK: 3,
    DCLICK: 4,
    toString: function(t) {
        switch (t) {
        case this.DOWN:
            return "down";
        case this.UP:
            return "up";
        case this.CLICK:
            return "click";
        case this.DCLICK:
            return "double-click"
        }
        return "none"
    }
};
canvas.utils.ABCKeyboardEventTypes = {
    DOWN: 1,
    UP: 2
};
canvas.utils.ABCPointData = function(t, e, a, i, s) {
    this.x = a;
    this.y = i;
    this.frame = 0;
    this.endType = -1;
    this.parent = t;
    this.status = e;
    this.time = s;
    this.uxIndex = canvas.utils.ABCPointData.uxIndexCount++
}
;
canvas.utils.ABCPointData.prototype.toObject = function() {
    if (this.object)
        return this.object;
    var t = {};
    t["s"] = this.status;
    t["x"] = Math.round(this.x * 1e3) / 1e3;
    t["y"] = Math.round(this.y * 1e3) / 1e3;
    t["t"] = this.time;
    if (this.endType != -1) {
        t["e"] = this.endType
    }
    if (this.keyInfo) {
        t["k"] = this.keyInfo.toObject()
    }
    if (this.sendInfo) {
        t["i"] = this.sendInfo
    }
    this.object = t;
    return t
}
;
canvas.utils.ABCPointData.uxIndexCount = 1;
canvas.utils.ABCMouseData = function(t, e, a, i) {
    this.event = t;
    this.time = e;
    this.x = a;
    this.y = i
}
;
canvas.utils.ABCMouseData.prototype.toObject = function() {
    if (this.object)
        return this.object;
    var t = new Object;
    t["e"] = this.event;
    t["t"] = this.time;
    t["x"] = this.x;
    t["y"] = this.y;
    this.object = t;
    return t
}
;
canvas.utils.ABCKeyboardData = function(t, e, a) {
    this.event = t;
    this.code = e;
    this.time = a
}
;
canvas.utils.ABCKeyboardData.prototype.toObject = function() {
    if (this.object)
        return this.object;
    var t = new Object;
    t["e"] = this.event;
    t["c"] = this.code;
    t["t"] = this.time;
    this.object = t;
    return t
}
;
canvas.utils.ABCKeyInfo = function(t, e) {
    this.keyCode = t;
    this.deltaTime = e
}
;
canvas.utils.ABCKeyInfo.prototype.toObject = function() {
    var t = {};
    t["c"] = this.keyCode;
    t["t"] = this.deltaTime;
    return t
}
;
canvas.utils.ABCParameters = function(t) {
    this.userId = t["user_id"];
    if (t["abc_cfcs"]) {
        this.countForClearSession = parseInt(t["abc_cfcs"])
    } else {
        this.countForClearSession = 20
    }
    this.keyboardLog = t["abc_keyboard"] == "1";
    this.mouseLog = t["abc_mouse"] == "1";
    this.maxPointsCount = t["abc_max_points"] ? parseInt(t["abc_max_points"]) : 0
}
;
canvas.utils.ABController = {
    init: function(t, e) {
        this.pointTime = 0;
        Object.defineProperty(this, "diffPointTime", {
            get: function() {
                if (this.pointTime != 0) {
                    var t = Date.now() - this.pointTime;
                    this.pointTime = Date.now();
                    return t
                }
                this.pointTime = Date.now();
                return 0
            }
        });
        this.keyboardTime = 0;
        Object.defineProperty(this, "diffKeyboardTime", {
            get: function() {
                if (this.keyboardTime != 0) {
                    var t = Date.now() - this.keyboardTime;
                    this.keyboardTime = Date.now();
                    return t
                }
                this.keyboardTime = Date.now();
                return 0
            }
        });
        this.mouseTime = 0;
        Object.defineProperty(this, "diffMouseTime", {
            get: function() {
                if (this.mouseTime != 0) {
                    var t = Date.now() - this.mouseTime;
                    this.mouseTime = Date.now();
                    return t
                }
                this.mouseTime = Date.now();
                return 0
            }
        });
        this.stage = t.stage;
        this.fromType = e;
        this.fromData = null;
        this.alc = null;
        this.tstjs = -1;
        this.tstcl = -1;
        this.app = t;
        this.isStageMove = false;
        this.stageMoveIsListening = false;
        this.clickTime = Date.now();
        this.leaveTime = Date.now();
        this.keyDowns = {};
        this._parameters = new canvas.utils.ABCParameters(t.par);
        this.reset(true);
        var a = is_touch_device();
        this.tstjs = parseInt(a) ? 1 : 0;
        this.stage.tstcl = this.tstclCallback.bind(this);
        this.stage.mousemove = this.moveHandler.bind(this);
        this.stage.click = this.clickHandler.bind(this);
        this.stage.mousedown = this.downHandler.bind(this);
        this.stage.mouseup = this.upHandler.bind(this);
        document.addEventListener("keydown", this.keyDownHandler.bind(this));
        document.addEventListener("keyup", this.keyUpHandler.bind(this));
        document.addEventListener("mouseout", this.leaveHandler.bind(this))
    },
    tstclCallback: function(t) {
        this.tstcl = t ? 1 : 0
    },
    reset: function(t) {
        this.focusedObject = null;
        if (t || this._points.length > this._parameters.countForClearSession) {
            this.resetIndex = 0;
            this._points = new Array;
            this._keyboardEventsList = new Array;
            this._mouseEventsList = new Array;
            this.pointTime = 0;
            this.keyboardTime = 0;
            this.mouseTime = 0
        } else {
            this.resetIndex = this._points.length
        }
    },
    addPoint: function(t) {
        this._points.push(t);
        if (this._parameters.maxPointsCount > 0 && this._points.length > this._parameters.maxPointsCount) {
            this._points.shift()
        }
    },
    addKey: function(t) {
        this._keyboardEventsList.push(t)
    },
    addMouse: function(t) {
        this._mouseEventsList.push(t)
    },
    getMousePosition: function() {
        return this.app.app.renderer.plugins.interaction.mouse.global
    },
    moveHandler: function(t) {
        var e = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.MOVE,e.x,e.y,this.diffPointTime));
        if (this.stageMoveIsListening) {
            this.isStageMove = true
        }
    },
    clickHandler: function(t) {
        if (this.isStageMove)
            return;
        if (this._parameters.mouseLog) {
            var e = this.getMousePosition();
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.CLICK,this.diffMouseTime,e.x,e.y))
        }
        if (Date.now() - this.clickTime < 500) {
            this.doubleClickHandler()
        }
        this.clickTime = Date.now()
    },
    downHandler: function(t) {
        var e = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.MOUSE_DOWN,e.x,e.y,this.diffPointTime));
        this.stageMoveIsListening = true;
        this.isStageMove = false;
        if (this._parameters.mouseLog) {
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.DOWN,this.diffMouseTime,e.x,e.y))
        }
    },
    upHandler: function(t) {
        if (this.isStageMove)
            return;
        var e = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.MOUSE_UP,e.x,e.y,this.diffPointTime));
        if (this._parameters.mouseLog) {
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.UP,this.diffMouseTime,e.x,e.y))
        }
    },
    doubleClickHandler: function() {
        if (this._parameters.mouseLog) {
            var t = this.getMousePosition();
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.DCLICK,this.diffMouseTime,t.x,t.y))
        }
    },
    leaveHandler: function(t) {
        if (Date.now() - this.leaveTime < 500)
            return;
        var e = this._points[this._points.length - 1];
        if (e) {
            this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.LEAVE,e.x,e.y,this.diffPointTime))
        }
        this.leaveTime = Date.now()
    },
    keyDownHandler: function(t) {
        this.keyDowns[t.code] = Date.now();
        if (this._parameters.keyboardLog) {
            this.addKey(new canvas.utils.ABCKeyboardData(canvas.utils.ABCKeyboardEventTypes.DOWN,t.code,this.diffKeyboardTime))
        }
    },
    keyUpHandler: function(t) {
        var e = this.keyDowns[t.code];
        var a = Date.now() - e;
        var i = new canvas.utils.ABCKeyInfo(t.code,a);
        var s = new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.KEY,0,0,this.diffPointTime);
        s.keyInfo = i;
        this.addPoint(s);
        if (this._parameters.keyboardLog) {
            this.addKey(new canvas.utils.ABCKeyboardData(canvas.utils.ABCKeyboardEventTypes.UP,t.code,this.diffKeyboardTime))
        }
    },
    toString: function(t) {
        var e = this.getMousePosition();
        var a = new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.END,e.x,e.y,this.diffPointTime);
        a.endType = t && t["et"] ? t["et"] : -1;
        this._points.push(a);
        var i;
        var s = [];
        var n;
        var r = 0;
        var o;
        var l;
        var c;
        var p;
        var h;
        var d;
        for (i = 0; i < this._points.length; i++) {
            d = this._points[i];
            s.push(d.toObject());
            if (i > this.resetIndex) {
                p = n.x - d.x;
                h = n.y - d.y;
                o = Math.sqrt(p * p + h * h);
                l = l != undefined ? Math.min(l, o) : o;
                c = c != undefined ? Math.max(c, o) : o;
                r += o
            }
            n = d
        }
        var v = [];
        var u;
        for (i = 0; i < this._keyboardEventsList.length; i++) {
            u = this._keyboardEventsList[i];
            v.push(u.toObject())
        }
        var m = [];
        var f;
        for (i = 0; i < this._mouseEventsList.length; i++) {
            f = this._mouseEventsList[i];
            m.push(f.toObject())
        }
        var _ = {};
        _["sum"] = r;
        _["count"] = s.length - 1 - this.resetIndex;
        _["min"] = l;
        _["max"] = c;
        var g = {};
        g["from"] = this.fromType;
        g["fromData"] = this.fromData;
        g["length"] = _;
        g["width"] = this.app.width;
        g["height"] = this.app.height;
        if (window.get_client_width)
            g["ex_width"] = get_client_width();
        if (window.get_client_height)
            g["ex_height"] = get_client_height();
        g["ai"] = t;
        g["cap"] = navigator.userAgent;
        g["tst"] = {};
        g["tst"]["js"] = this.tstjs;
        g["tst"]["cl"] = this.tstcl;
        g["st"] = this.resetIndex;
        g["id"] = this._parameters.userId;
        g["fps"] = 30;
        g["v"] = canvas.utils.ABCAbout.VERSION;
        var w = {};
        w["points"] = s;
        w["kb"] = v;
        w["ms"] = m;
        w["info"] = g;
        var E = JSON.stringify(w);
        E = btoa(E);
        this.reset(false);
        return E
    },
    sendRequest: function(t, e) {
        var a = {};
        a["m"] = this.toString(e);
        var i = new canvas.utils.URLRequest(t,"POST",a);
        i.load();
        return i
    }
};
canvas.utils.RGB = function(t) {
    if (t == undefined)
        t = 0;
    this.color = t;
    this.a = t >>> 24 & 255;
    this.r = t >>> 16 & 255;
    this.g = t >>> 8 & 255;
    this.b = t & 255
}
;
canvas.utils.RGB.prototype.toHex = function() {
    return this.a << 24 | this.r << 16 | this.g << 8 | this.b
}
;
canvas.utils.TimeLog = {
    start: Date.now(),
    last: Date.now(),
    log: function(t) {
        if (t == undefined)
            t = "";
        console.log("TimeLog (" + t + "): " + (Date.now() - this.last) + "/" + (Date.now() - this.start) + " ms.");
        this.last = Date.now()
    }
};
canvas.utils.ServerRandomizer = function() {
    this.LCG_A = 0;
    this.LCG_C = 0;
    this.LCG_M = 0
}
;
canvas.utils.ServerRandomizer.prototype.init = function(t, e, a, i) {
    this.seed = t;
    this.LCG_A = e;
    this.LCG_C = a;
    this.LCG_M = i
}
;
canvas.utils.ServerRandomizer.prototype.lcg = function(t, e, a, i) {
    return (e * t + a) % i
}
;
canvas.utils.ServerRandomizer.prototype.lcgRand = function(t, e) {
    this.seed = this.lcg(this.seed, this.LCG_A, this.LCG_C, this.LCG_M);
    return Math.round(Math.abs(this.seed) / this.LCG_M * (e - t) + t)
}
;
canvas.utils.ServerRandomizer.prototype.lcgShuffle = function(t) {
    var e = new Array, a;
    while ((a = t.length) > 0) {
        e.push(t.splice(this.lcgRand(0, a - 1), 1)[0])
    }
    return e
}
;
var WSProxy = function(t) {
    this.options = t || {};
    this.options.onConnect = this.options.onConnect || function() {
        console.warn("onConnect event", arguments)
    }
    ;
    this.options.onMessage = this.options.onMessage || function() {
        console.warn("onMessage event", arguments)
    }
    ;
    this.onOpenWs = this.onOpenWs.bind(this);
    this.onMessageWs = this.onMessageWs.bind(this);
    this.curPackSize = 0;
    this.curPack = ""
};
WSProxy.prototype.log = function() {
    if (this.options.logEnabled) {
        console.log.apply(console, arguments)
    }
}
;
WSProxy.prototype._connect = function() {
    var t = this.ws = new WebSocket("wss://" + this.connectOptions.ws.host);
    t.onopen = this.onOpenWs;
    t.onmessage = this.onMessageWs;
    var e = this;
    t.onclose = function(t) {
        console.warn("WSProxy:onclose", t);
        e.reconnect()
    }
    ;
    t.onerror = function(t) {
        console.error("WSProxy:onerror", t);
        e.reconnect()
    }
}
;
WSProxy.prototype._parseMessage = function(t) {
    if (this.storedMessage) {
        t = this.storedMessage + t;
        this.storedMessage = ""
    }
    var e = t.split("\0");
    var a, i = e.length;
    for (a = 0; a < i; a++) {
        if (e[a]) {
            if (e[a + 1] == undefined) {
                this.storedMessage = e[a]
            } else {
                this.options.onMessage(e[a])
            }
        }
    }
}
;
WSProxy.prototype.onOpenWs = function() {
    this.log("WSProxy:onOpenWs");
    this.ws.send(JSON.stringify({
        event: "connect",
        host: this.connectOptions.fs.host,
        port: this.connectOptions.fs.port
    }))
}
;
WSProxy.prototype.onMessageWs = function(e) {
    var a;
    try {
        a = JSON.parse(e.data)
    } catch (t) {
        console.error("parse json data", e.data, t);
        a = {}
    }
    switch (a.event) {
    case "connected":
        this.connected = true;
        this._tryCount = 0;
        this.sourcePool = "";
        this.options.onConnect();
        break;
    case "message":
        this._parseMessage(a.data);
        break
    }
}
;
WSProxy.prototype.connect = function(t) {
    this.log("WSProxy:connect", t);
    this.connectOptions = t;
    if (this.ws) {
        console.error("Connection already exists. Call destroy method");
        return
    }
    this._connect()
}
;
WSProxy.prototype.reconnect = function() {
    if (!this._tryCount)
        this._tryCount = 0;
    this._tryCount++;
    this.log("WSProxy:reconnectWs", this._tryCount);
    this.destroy();
    var t = this;
    this._reconnectTimeout = setTimeout(function() {
        t._connect()
    }, Math.pow(2, this._tryCount) * 1e3)
}
;
WSProxy.prototype.destroy = function() {
    this.log("WSProxy:destroy");
    this.connected = false;
    if (this.ws) {
        this.ws.onopen = null;
        this.ws.onmessage = null;
        this.ws.onclose = null;
        this.ws.onerror = null;
        this.ws.close();
        this.ws = null
    }
    clearTimeout(this._reconnectTimeout)
}
;
WSProxy.prototype.send = function(t) {
    if (!this.connected) {
        console.error("WSProxy is not connected");
        return
    }
    this.ws.send(JSON.stringify({
        event: "message",
        data: t
    }))
}
;
canvas.animation.Bot = function(t, e, a) {
    if (e) {
        this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass");
        this.preloader.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        this.preloader.loop = true;
        this.preloader.position.set(e.x, e.y);
        if (a) {
            a.addChild(this.preloader)
        } else {}
    }
    this.kick_array_all = {
        kick_up: {
            a_up_1: {
                die: ["die_1"],
                dodge: ["dodge_1"],
                wound: ["wound_1"],
                crit: ["wound_1"],
                block: ["b_up_1"]
            },
            a_up_2: {
                die: ["die_1"],
                dodge: ["dodge_1"],
                wound: ["wound_1"],
                crit: ["wound_1"],
                block: ["b_up_1"]
            }
        },
        kick_mid: {
            a_mid_1: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_up_1", "b_mid_1"]
            },
            a_mid_2: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_up_1", "b_mid_1"]
            }
        },
        kick_bot: {
            a_bot_1: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_up_1"]
            },
            a_bot_2: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_mid_1"]
            }
        },
        combo: {
            combo_1: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_2: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_3: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_4: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_5: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            }
        }
    };
    this.action_array_all = {
        kick_up: ["a_up_1"],
        kick_mid: ["a_mid_1"],
        kick_bot: ["a_bot_1"],
        combo: ["combo_1", "combo_2", "combo_3", "combo_4", "combo_5"]
    };
    this.ActionConf = {
        a_up_1: 11,
        a_mid_1: 11,
        a_bot_1: 14,
        combo_1: 9,
        combo_2: 6,
        combo_3: 8,
        combo_4: 20
    };
    this.ReactionConf = {
        b_up_1: 6,
        b_mid_1: 6,
        dodge_1: 8,
        wound_1: 2,
        wound_2: 2,
        die_1: 2,
        die_2: 2
    };
    this.ActionSound = {
        a_up_1: {
            std: true
        },
        a_mid_1: {
            std: true
        },
        a_bot_1: {
            std: true
        },
        combo_1: {
            std: true
        },
        combo_2: {
            std: true
        },
        combo_3: {
            std: true
        },
        combo_4: {
            std: true
        },
        b_up_1: {
            std: true
        },
        b_mid_1: {
            std: true
        },
        dodge_1: {
            std: true
        },
        wound_1: {
            std: true
        },
        wound_2: {
            std: true
        },
        die_1: {
            std: true
        },
        die_2: {
            std: true
        }
    };
    canvas.px.MovieClip.call(this, t)
}
;
canvas.animation.Bot.prototype = Object.create(canvas.px.MovieClip.prototype);
canvas.animation.Bot.prototype._init = function() {
    canvas.px.MovieClip.prototype._init.call(this);
    if (!this.data)
        return;
    this.kick_array_all = this.data.properties.kick_array_all;
    this.action_array_all = this.data.properties.action_array_all;
    this.ActionConf = this.data.properties.ActionConf;
    this.ReactionConf = this.data.properties.ReactionConf;
    this.ActionSound = this.data.properties.ActionSound
}
;
canvas.animation.Bot.prototype._ready = function() {
    canvas.px.MovieClip.prototype._ready.call(this);
    if (this.preloader) {
        this.preloader.destroy()
    }
}
;
canvas.animation.Bot.prototype.render = function() {
    canvas.px.MovieClip.prototype.render.call(this)
}
;
canvas.animation.Bot.prototype.getChildByName = function(t) {
    var e = this.container.children.length;
    for (var a = 0; a < e; a++) {
        if (this.container.children[a].shortName == t) {
            return this.container.children[a]
        }
    }
    return null
}
;
canvas.animation.Bot.prototype.updateFrameEvent = function() {
    canvas.px.MovieClip.prototype.updateFrameEvent.call(this);
    if (this.preloader) {
        this.preloader.frameEvent = this.frameEvent
    }
}
;
canvas.animation.Skeleton = function(t, e, a) {
    this._skeletonData = null;
    Object.defineProperty(this, "skeletonData", {
        get: function() {
            return this._skeletonData
        },
        set: function(t) {
            this._skeletonData = t;
            if (t) {
                for (var e in t.slots) {
                    var a = t.slots[e];
                    if (e == "BANNER")
                        continue;
                    for (var i = 0; i < a.length; i++) {
                        var s = a[i];
                        if (s.url) {
                            canvas.ResourceLoader.add([s.url])
                        }
                    }
                }
            }
        }
    });
    canvas.animation.Bot.call(this, t, e, a);
    this.animations = {};
    this.renderSlots = null
}
;
canvas.animation.Skeleton.prototype = Object.create(canvas.animation.Bot.prototype);
canvas.animation.Skeleton.prototype.render = function() {
    canvas.animation.Bot.prototype.render.call(this);
    if (this.skeletonData != null) {
        var t, e, a, i, s, n, r, o, l = this.container.children.length;
        for (var c = 0; c < l; c++) {
            i = this.container.children[c];
            r = i.name;
            t = r.substr(0, 4);
            e = r.substr(5);
            if (!i.shortName || !i.prefix) {
                a = r.split("_");
                i.prefix = a[1];
                o = i.shortName = a[0]
            } else {
                o = i.shortName
            }
            if (this.skeletonData.slots[o] && (!this.renderSlots || this.renderSlots.indexOf(o) >= 0)) {
                for (var p = 0; p < this.skeletonData.slots[o].length; p++) {
                    s = i.children[p];
                    if (s) {
                        s.texture = canvas.px.TextureEmpty;
                        s.filters = null
                    }
                    var h = this.skeletonData.slots[o][p];
                    if (h.url) {
                        var d = canvas.ResourceLoader.get(h.url);
                        if (d && d.textures) {
                            var v = r;
                            if (t == "FOOT" || t == "HAND") {
                                v = t + e
                            }
                            var u = d.textures[v + ".png"];
                            if (!s) {
                                s = i.addChild(new canvas.px.Sprite(u ? u : canvas.px.TextureEmpty))
                            } else {
                                if (u) {
                                    s.texture = u
                                }
                            }
                            if (h.colors[1] && s) {
                                s.filters = [canvas.Functions.getGlow(10, 2, 0, parseInt(h.colors[1], 16), .1)]
                            }
                            if (h.animation && s) {
                                if (!this.animations[h.animation]) {
                                    var m = new canvas.px.MovieClip(canvas.Config.packsAnimsPath + h.animation + "/" + h.animation);
                                    m.frameEvent = this.frameEvent;
                                    m.loop = true;
                                    m.name = h.animation;
                                    this.animations[h.animation] = m
                                }
                                this.destroyAnimations(s, h.animation);
                                m = s.addChild(this.animations[h.animation]);
                                if (!m.customFlag && m.ready && m.totalFrames == 1) {
                                    var f = 1;
                                    while (true) {
                                        if (m.mcChildsCache["mc" + f]) {
                                            m.customFlag = true;
                                            m.mcChildsCache["mc" + f].loop = true;
                                            m.mcChildsCache["mc" + f].play();
                                            if (!m.mcChildsCache["mc" + f].frameEvent) {
                                                m.mcChildsCache["mc" + f].frameEvent = this.frameEvent
                                            }
                                            f++
                                        } else {
                                            break
                                        }
                                    }
                                }
                            } else {
                                this.destroyAnimations(s)
                            }
                        }
                    }
                }
            }
        }
    }
}
;
canvas.animation.Skeleton.prototype.destroyAnimations = function(t, e) {
    if (t && t.numChildren > 0) {
        while (t.children.length > 0) {
            var a = t.removeChildAt(0);
            if (e && a.name == e)
                continue;
            if (this.animations[a.name]) {
                this.animations[a.name] = null
            }
            a.destroy({
                children: true
            })
        }
    }
}
;
canvas.animation.SkeletonInfo = function(t, e, a, i) {
    this.mount = 0;
    if (i != undefined && i) {
        this.mount = parseInt(i);
        if (this.mount > 0) {
            var s = "mount_" + canvas.Functions.setNumberLen(this.mount, 2) + "_bot";
            var n = "mount_" + canvas.Functions.setNumberLen(this.mount, 2) + "_top";
            this.mountBottom = new canvas.px.MovieClip(canvas.Config.mountsPath + s + "/" + s,null,true);
            this.mountTop = new canvas.px.MovieClip(canvas.Config.mountsPath + n + "/" + n,null,true);
            this.mountTop.loop = true;
            this.mountBottom.loop = true
        }
    }
    canvas.animation.Skeleton.call(this, t, e, a);
    if (this.mount > 0) {
        this.mountTop.position.set(-65, -85);
        this.mountBottom.position.set(-65, -85);
        this.container.position.set(-65, -85);
        this.addChildAt(this.mountBottom, 0);
        this.addChild(this.mountTop)
    }
}
;
canvas.animation.SkeletonInfo.prototype = Object.create(canvas.animation.Skeleton.prototype);
canvas.animation.SkeletonInfo.prototype.render = function() {
    canvas.animation.Skeleton.prototype.render.call(this);
    if (this.mount > 0) {
        if (this.mountBottom.stopped) {}
        if (this.mountTop.stopped) {}
        var t = this.currentFrame / this.totalFrames;
        if (this.mountTop.mcChildsCache["mc1"]) {
            this.mountTop.mcChildsCache["mc1"].gotoAndStop(Math.round(this.mountTop.mcChildsCache["mc1"].totalFrames * t))
        }
        if (this.mountBottom.mcChildsCache["mc1"]) {
            this.mountBottom.mcChildsCache["mc1"].gotoAndStop(Math.round(this.mountBottom.mcChildsCache["mc1"].totalFrames * t))
        }
    }
}
;
canvas.animation.SkeletonInfo.prototype.updateFrameEvent = function() {
    canvas.animation.Skeleton.prototype.updateFrameEvent.call(this);
    if (this.mountTop) {
        this.mountTop.frameEvent = this.frameEvent
    }
    if (this.mountBottom) {
        this.mountBottom.frameEvent = this.frameEvent
    }
}
;
canvas.animation.SkeletonAvatar = function(t, e) {
    this.gender = t == undefined ? "M" : t;
    canvas.animation.SkeletonInfo.call(this, canvas.Config.skPath + this.gender + "/sk01_UI");
    this.loop = true;
    this.container.x = this.gender == "M" ? 0 : -5;
    this.renderSlots = canvas.Const.AVATAR_SLOT_NAMES;
    if (e != undefined) {
        this.skeletonData = new canvas.data.battle.SkeletonData(e,this.gender)
    }
}
;
canvas.animation.SkeletonAvatar.prototype = Object.create(canvas.animation.SkeletonInfo.prototype);
canvas.animation.Pet = function(t, e) {
    canvas.px.Container.call(this);
    this.frameEvent = e;
    this.main = this.addChild(new canvas.px.Container);
    this.back = new canvas.ui.Image("images/pets_back.gif");
    this.back.visible = false;
    this.back.x = 2;
    this.main.addChild(this.back);
    var a = new canvas.px.Graphics;
    a.beginFill(16777215, 1);
    a.drawCircle(94, 88, 80);
    a.endFill();
    this.addChild(a);
    this.main.mask = a;
    this.petSrc = "";
    this.waiting = false;
    if (t)
        this.update(t);
    canvas.EventManager.addEventListener(this.frameEvent, null, this.frameHandler, this)
}
;
canvas.animation.Pet.prototype = Object.create(canvas.px.Container.prototype);
canvas.animation.Pet.prototype.update = function(t) {
    if (!this.main)
        return;
    if (t == undefined || !t.src) {
        if (this.pet) {
            this.pet.destroy()
        }
        this.petSrc = "";
        return
    }
    t.src = canvas.Functions.extractSwfName(t.src);
    if (this.petSrc != t.src) {
        this.petSrc = t.src;
        if (this.pet) {
            this.pet.destroy()
        }
        this.pet = new canvas.animation.Bot(canvas.Config.petsPath + this.petSrc + "/" + this.petSrc);
        this.main.addChild(this.pet);
        this.pet.frameEvent = this.frameEvent;
        this.waiting = true
    }
}
;
canvas.animation.Pet.prototype.frameHandler = function() {
    if (this.waiting && this.pet.ready) {
        var t = this.pet.getLocalBounds();
        var e;
        if (parseInt(this.pet.data.properties.type) == 0) {
            e = t.y < 100
        } else {
            e = parseInt(this.pet.data.properties.type) == 2
        }
        if (e) {
            this.back.y = 0;
            this.pet.position.set(30, -10)
        } else {
            this.back.y = -100;
            this.pet.position.set(-60, -205)
        }
        if (this.pet.data.properties.xCorrection) {
            this.pet.x += parseInt(this.pet.data.properties.xCorrection)
        }
        if (this.pet.data.properties.yCorrection) {
            this.pet.y += parseInt(this.pet.data.properties.yCorrection)
        }
        if (this.pet.data.properties.xAdd) {
            this.pet.x += parseInt(this.pet.data.properties.xAdd)
        }
        if (this.pet.data.properties.yAdd) {
            this.pet.y += parseInt(this.pet.data.properties.yAdd)
        }
        this.back.visible = true;
        this.waiting = false
    }
}
;
canvas.ui.Event = {
    EVENT_CHANGE: "canvas.ui.Event.CHANGE"
};
canvas.ui.Component = function() {
    this._enabled = true;
    this.interactive = true;
    canvas.px.Container.call(this)
}
;
canvas.ui.Component.prototype = Object.create(canvas.px.Container.prototype);
canvas.ui.Component.prototype.setSize = function(t, e) {
    if (t > 0)
        this._width = t;
    if (e > 0)
        this._height = e;
    this.update()
}
;
canvas.ui.Component.prototype.update = function() {}
;
canvas.ui.Component.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.ui.ButtonEvent = {
    EVENT_CLICK: "ButtonEvent.CLICK",
    EVENT_SELECT: "ButtonEvent.SELECT",
    EVENT_DOWN: "ButtonEvent.DOWN",
    EVENT_OVER: "ButtonEvent.OVER",
    EVENT_OUT: "ButtonEvent.OUT"
};
canvas.ui.Button = function(t, e, a, i, s, n, r) {
    canvas.ui.Component.call(this);
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t;
            if (this.disabledTexture) {
                this.sprite.texture = t ? this.baseTexture : this.disabledTexture
            } else {
                if (t) {
                    this.filters = null
                } else {
                    this.filters = [canvas.Functions.getBlackAndWhite()]
                }
            }
            this.buttonMode = this.sprite.interactive = t;
            this.update()
        },
        configurable: true
    });
    Object.defineProperty(this, "checked", {
        get: function() {
            return this._checked
        },
        set: function(t) {
            this._checked = t;
            if (this.checkSprite) {
                if (this._checked) {
                    if (this.checkSprite.parent != this)
                        this.addChild(this.checkSprite)
                } else {
                    if (this.checkSprite.parent == this)
                        this.removeChild(this.checkSprite)
                }
            }
        }
    });
    canvas.ui.Component.call(this);
    this.baseTexture = t;
    this.overTexture = e;
    this.downTexture = a;
    this.disabledTexture = i;
    this.checkSprite = n;
    this.radioArray = r;
    if (s) {
        this.sprite = new canvas.px.SlicedSprite(t,s[0],s[1],s[2],s[3])
    } else {
        this.sprite = new canvas.px.Sprite(this.baseTexture)
    }
    this.sprite.interactive = true;
    this.buttonMode = true;
    this.addChild(this.sprite);
    this.sprite.mouseover = this.handlerOver.bind(this);
    this.sprite.mouseout = this.handlerOut.bind(this);
    this.sprite.mousedown = this.handlerDown.bind(this);
    this.sprite.click = this.handlerUp.bind(this)
}
;
canvas.ui.Button.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Button.prototype.setSize = function(t, e) {
    canvas.ui.Component.prototype.setSize.apply(this, [t, e]);
    if (t > 0)
        this.sprite.width = t;
    if (e > 0)
        this.sprite.height = e
}
;
canvas.ui.Button.prototype.handlerOver = function(t) {
    if (this.overTexture)
        this.sprite.texture = this.overTexture;
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_OVER, this, t)
}
;
canvas.ui.Button.prototype.handlerOut = function(t) {
    if (this.baseTexture)
        this.sprite.texture = this.baseTexture;
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_OUT, this, t)
}
;
canvas.ui.Button.prototype.handlerDown = function(t) {
    if (this.downTexture)
        this.sprite.texture = this.downTexture;
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_DOWN, this, t)
}
;
canvas.ui.Button.prototype.handlerUp = function(t) {
    if (!canvas.Config.isMobile && this.overTexture) {
        this.sprite.texture = this.overTexture
    } else {
        this.sprite.texture = this.baseTexture
    }
    if (this.checkSprite) {
        if (this.radioArray) {
            this.select()
        } else {
            this.checked = !this.checked
        }
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this, t)
}
;
canvas.ui.Button.prototype.select = function() {
    if (this.radioArray) {
        var t = this.radioArray.length;
        for (var e = 0; e < t; e++) {
            this.radioArray[e].checked = this.radioArray[e] == this
        }
        canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_SELECT, this)
    }
}
;
canvas.ui.SimpleButton = function(t, e, a, i) {
    canvas.ui.Button.call(this, t, null, null, null, e, a, i);
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t;
            this.buttonMode = this.sprite.interactive = t;
            if (t) {
                this.filters = null
            } else {
                this.filters = [canvas.Functions.getBlackAndWhite()]
            }
        },
        configurable: true
    })
}
;
canvas.ui.SimpleButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.ui.SimpleButton.prototype.handlerOver = function(t) {
    this.filters = [canvas.Functions.getBrightness(1.2)];
    canvas.ui.Button.prototype.handlerOver.apply(this, t)
}
;
canvas.ui.SimpleButton.prototype.handlerOut = function(t) {
    this.filters = null;
    canvas.ui.Button.prototype.handlerOut.apply(this, t)
}
;
canvas.ui.SimpleButton.prototype.handlerDown = function(t) {
    this.filters = [canvas.Functions.getSaturation(-.2)];
    canvas.ui.Button.prototype.handlerDown.apply(this, t)
}
;
canvas.ui.SimpleButton.prototype.handlerUp = function(t) {
    if (canvas.Config.isMobile) {
        this.filters = null
    } else {
        this.filters = [canvas.Functions.getBrightness(1.2)]
    }
    canvas.ui.Button.prototype.handlerUp.apply(this, t)
}
;
canvas.ui.Text = function(t, e, a, i, s, n, r, o, l) {
    this._color = 0;
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t;
            this.field.tint = this._color
        }
    });
    this._font = "";
    Object.defineProperty(this, "font", {
        get: function() {
            return this._font
        },
        set: function(t) {
            if (this._font === t)
                return;
            this._font = t;
            this.field.font = this._font
        }
    });
    this._hAlign = "left";
    Object.defineProperty(this, "hAlign", {
        get: function() {
            return this._hAlign
        },
        set: function(t) {
            this._hAlign = t;
            this.field.align = this._hAlign;
            this.update()
        }
    });
    this._vAlign = "top";
    Object.defineProperty(this, "vAlign", {
        get: function() {
            return this._vAlign
        },
        set: function(t) {
            this._vAlign = t;
            this.update()
        }
    });
    this._text = "";
    Object.defineProperty(this, "text", {
        get: function() {
            return this._text
        },
        set: function(t) {
            this._text = t;
            this.field.text = this._text;
            this.update()
        }
    });
    this._border = false;
    Object.defineProperty(this, "border", {
        get: function() {
            return this._border
        },
        set: function(t) {
            this._border = t;
            if (this._border && !this.borderImage) {
                this.borderImage = new canvas.px.Graphics;
                this.addChild(this.borderImage)
            }
            this.update()
        }
    });
    this._backColor = 0;
    Object.defineProperty(this, "backColor", {
        get: function() {
            return this._backColor
        },
        set: function(t) {
            this._backColor = t;
            if (!this.back) {
                this.createBack()
            }
            this.update()
        }
    });
    this._backAlpha = 0;
    Object.defineProperty(this, "backAlpha", {
        get: function() {
            return this._backAlpha
        },
        set: function(t) {
            this._backAlpha = t;
            if (!this.back) {
                this.createBack()
            }
            this.update()
        }
    });
    Object.defineProperty(this, "textWidth", {
        get: function() {
            return Math.round(this.field.textWidth)
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "textHeight", {
        get: function() {
            return Math.round(this.field.textHeight)
        },
        set: function(t) {}
    });
    canvas.ui.Component.call(this);
    this._font = t;
    if (e != undefined)
        this._color = e;
    if (a != undefined)
        this._width = a;
    else
        this._width = 100;
    if (i != undefined)
        this._height = i;
    else
        this._height = 100;
    if (n != undefined)
        this._vAlign = n;
    if (s != undefined)
        this._hAlign = s;
    if (r != undefined) {
        this.createBack();
        this._backColor = r
    }
    if (o)
        this._backAlpha = o;
    if (l != undefined && l) {
        this.createMask()
    }
    this.field = new canvas.px.BitmapText("",{
        font: t,
        align: this._hAlign
    });
    if (e >= 0)
        this.field.tint = e;
    this.addChild(this.field);
    this.interactive = false
}
;
canvas.ui.Text.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Text.prototype.update = function() {
    this.field.maxWidth = this._width;
    var t = this.field.textHeight;
    if (this._height < t)
        t = this._height;
    switch (this.hAlign) {
    case "left":
        this.field.x = 0;
        break;
    case "center":
        this.field.x = Math.round((this._width - this.field.textWidth) * .5);
        break;
    case "right":
        this.field.x = Math.round(this._width - this.field.textWidth);
        break
    }
    switch (this.vAlign) {
    case "top":
        this.field.y = 0;
        break;
    case "middle":
        this.field.y = Math.round((this._height - t) * .5);
        break;
    case "bottom":
        this.field.y = Math.round(this._height - t);
        break
    }
    if (this.border) {
        this.borderImage.clear();
        this.borderImage.beginFill(0, 0);
        this.borderImage.lineStyle(2, 16711680, 1);
        this.borderImage.drawRect(0, 0, this._width, this._height);
        this.borderImage.endFill()
    }
    if (this.back) {
        this.back.clear();
        this.back.beginFill(this.backColor, this.backAlpha);
        this.back.drawRect(0, 0, this._width, this._height);
        this.back.endFill()
    }
    if (this.msk) {
        this.msk.clear();
        this.msk.beginFill(0, 1);
        this.msk.drawRect(0, 0, this._width, this._height);
        this.msk.endFill()
    }
}
;
canvas.ui.Text.prototype.createBack = function() {
    this.back = new canvas.px.Graphics;
    this.addChildAt(this.back, 0)
}
;
canvas.ui.Text.prototype.createMask = function() {
    this.msk = new canvas.px.Graphics;
    this.addChildAt(this.msk, 0);
    this.mask = this.msk
}
;
canvas.ui.Text.prototype.clone = function() {
    return new canvas.ui.Text(this._font,this._color,this._width,this._height,this._hAlign,this._vAlign,this._backColor,this._backAlpha)
}
;
canvas.ui.ProgressEvent = {
    EVENT_PROGRESS: "ProgressEvent.EVENT_PROGRESS"
};
canvas.ui.ProgressType = {
    HORIZONTAL: "h",
    VERTICAL: "v"
};
canvas.ui.Progress = function(t, e, a) {
    this._selectable = false;
    Object.defineProperty(this, "selectable", {
        get: function() {
            return this._selectable
        },
        set: function(t) {
            this._selectable = t;
            if (t) {
                if (!this.back) {
                    this.back = new canvas.px.Graphics;
                    this.addChildAt(this.back);
                    this.back.interactive = true;
                    this.back.mousedown = this.handlerBackDown.bind(this)
                }
                this.back.interactive = true
            } else {
                if (this.back)
                    this.back.interactive = false
            }
            this.update()
        }
    });
    this._progress = 1;
    Object.defineProperty(this, "progress", {
        get: function() {
            return this._progress
        },
        set: function(t) {
            this._progress = t > 1 ? 1 : t < 0 ? 0 : t;
            this.update()
        }
    });
    canvas.ui.Component.call(this);
    if (a == undefined)
        a = canvas.ui.ProgressType.HORIZONTAL;
    this.type = a;
    if (t) {
        if (e) {
            this.backImage = this.addChild(new canvas.px.SlicedSprite(t,e[0],e[1],e[2],e[3]))
        } else {
            this.backImage = this.addChild(new canvas.px.Sprite(t))
        }
        this.sprite = new canvas.px.Mask(this.backImage.width,this.backImage.height);
        this.addChild(this.sprite);
        this.backImage.mask = this.sprite;
        this.setSize(this.backImage.width, this.backImage.height)
    } else {
        this.sprite = new canvas.px.Graphics;
        this.sprite.beginFill(0, 1);
        this.sprite.lineStyle(0, 0, 0);
        this.sprite.drawRect(0, 0, 1, 1);
        this.sprite.endFill()
    }
    this.addChild(this.sprite)
}
;
canvas.ui.Progress.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Progress.prototype.update = function() {
    if (this.back) {
        this.back.clear();
        this.back.beginFill(0, 0);
        this.back.lineStyle(0, 0, 0);
        this.back.drawRect(0, 0, this._width, this._height);
        this.back.endFill()
    }
    if (this.type == canvas.ui.ProgressType.HORIZONTAL) {
        if (this.backImage) {
            this.backImage.width = this._width;
            this.sprite.setSize(this._width * this.progress, this._height)
        } else {
            this.sprite.width = this._width * this.progress;
            if (this._height)
                this.sprite.height = this._height
        }
    } else {
        if (this.backImage) {
            this.backImage.height = this._height;
            this.sprite.setSize(this._width, this._height * this.progress)
        } else {
            this.sprite.height = this._height * this.progress;
            if (this._width)
                this.sprite.width = this._width
        }
    }
}
;
canvas.ui.Progress.prototype.handlerBackDown = function(t) {
    this.back.mousemove = this.handlerBackMove.bind(this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this);
    this.handlerBackMove(t)
}
;
canvas.ui.Progress.prototype.handlerBackMove = function(t) {
    var e = this.back.toLocal(new canvas.px.Point(t.data.global.x,t.data.global.y));
    if (this.type == canvas.ui.ProgressType.HORIZONTAL) {
        this.progress = e.x / this._width
    } else {
        this.progress = e.y / this._height
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ProgressEvent.EVENT_PROGRESS, this)
}
;
canvas.ui.Progress.prototype.handlerStageMouseUp = function(t) {
    if (this.back)
        this.back.mousemove = null;
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this)
}
;
canvas.ui.Progress.prototype.destroy = function() {
    if (this.back)
        this.back.mousedown = null;
    this.handlerStageMouseUp();
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.ui.ImageEvent = {
    EVENT_LOADED: "ImageEvent.LOADED"
};
canvas.ui.Image = function(t, e, a, i) {
    canvas.ui.Component.call(this);
    this.smoothing = i == undefined ? true : i;
    this.ready = false;
    if (e && a) {
        this.wall = new canvas.px.Mask(e,a,0,0);
        this.addChild(this.wall)
    }
    if (t)
        this.setImage(t)
}
;
canvas.ui.Image.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Image.prototype.setImage = function(t) {
    if (this.url === t)
        return;
    this.url = t;
    var e = canvas.ResourceLoader.getTexture(t);
    if (!this.sprite) {
        this.sprite = new canvas.px.Sprite;
        this.addChild(this.sprite)
    }
    if (e == canvas.px.TextureEmpty) {
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
        canvas.ResourceLoader.add([t])
    } else {
        this.setTexture(e);
        this._ready()
    }
}
;
canvas.ui.Image.prototype.setTexture = function(t) {
    if (!this.smoothing)
        t.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST;
    this.sprite.texture = t
}
;
canvas.ui.Image.prototype.clear = function() {
    this.url = "";
    if (this.sprite) {
        this.sprite.texture = canvas.px.TextureEmpty
    }
}
;
canvas.ui.Image.prototype.handlerLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
    this.setTexture(canvas.ResourceLoader.getTexture(this.url));
    this._ready()
}
;
canvas.ui.Image.prototype._ready = function() {
    this.ready = true;
    canvas.EventManager.dispatchEvent(canvas.ui.ImageEvent.EVENT_LOADED, this);
    if (this.wall) {
        this.removeChild(this.wall);
        if (this.wall.graphicsData)
            this.wall.destroy({
                children: true
            });
        delete this.wall
    }
}
;
canvas.ui.ScrollEvent = {
    EVENT_SCROLL: "ScrollEvent.EVENT_SCROLL"
};
canvas.ui.ScrollType = {
    HORIZONTAL: "h",
    VERTICAL: "v"
};
canvas.ui.Scroll = function(t, e, a, i, s, n, r, o, l, c, p) {
    this._min = 0;
    Object.defineProperty(this, "min", {
        get: function() {
            return this._min
        },
        set: function(t) {
            if (!t)
                t = 0;
            this._min = t > this.max ? this.max : t;
            this.current = this.current
        }
    });
    this._max = 100;
    Object.defineProperty(this, "max", {
        get: function() {
            return this._max
        },
        set: function(t) {
            if (!t)
                t = 0;
            this._max = t < this.min ? this.min : t;
            this.current = this.current
        }
    });
    this._step = 1;
    Object.defineProperty(this, "step", {
        get: function() {
            return this._step
        },
        set: function(t) {
            this._step = t
        }
    });
    this._current = 0;
    Object.defineProperty(this, "current", {
        get: function() {
            return this._current
        },
        set: function(t) {
            if (!t)
                t = 0;
            this._current = t < this.min ? this.min : t > this.max ? this.max : t;
            this.update()
        }
    });
    this._backPadding = 0;
    Object.defineProperty(this, "backPadding", {
        get: function() {
            return this._backPadding
        },
        set: function(t) {
            this._backPadding = t;
            this.update()
        }
    });
    this._padding = 0;
    Object.defineProperty(this, "padding", {
        get: function() {
            return this._padding
        },
        set: function(t) {
            this._padding = t;
            this.update()
        }
    });
    canvas.ui.Component.call(this);
    if (r == undefined)
        r = false;
    if (o == undefined)
        o = true;
    if (l == undefined)
        l = true;
    this.type = t;
    this.useDrag = r;
    this.useWheel = o;
    this.minusView = e;
    this.plusView = a;
    this.backView = i;
    this.dragView = s;
    this.wheelTarget = n;
    this.dragTarget = p || this.wheelTarget;
    this.hidePlusMinus = c ? c : false;
    if (this.backView) {
        this.addChild(this.backView);
        this.backView.interactive = true
    }
    this.dragDirection = true;
    this.wasDragged = false;
    this.shape = new canvas.px.Graphics;
    this.addChild(this.shape);
    this.shape.interactive = this.backView ? true : false;
    this.shape.click = this.shapeClickHandler.bind(this);
    if (this.dragView) {
        this.addChild(this.dragView);
        this.dragView.interactive = true;
        this.dragView.buttonMode = true;
        this.dragView.mousedown = this.handlerDragDown.bind(this)
    }
    if (this.minusView) {
        this.addChild(this.minusView);
        this.minusView.interactive = true;
        this.minusView.buttonMode = true;
        this.minusView.click = this.minusClickHandler.bind(this)
    }
    if (this.plusView) {
        this.addChild(this.plusView);
        this.plusView.interactive = true;
        this.plusView.buttonMode = true;
        this.plusView.click = this.plusClickHandler.bind(this)
    }
    if (this.wheelTarget) {
        this.wheelTarget.interactive = true;
        this.wheelTarget.mouseover = this.handlerWheelTargetOver.bind(this);
        this.wheelTarget.mouseout = this.handlerWheelTargetOut.bind(this);
        if (r) {
            this.dragTarget.interactive = true;
            this.dragTarget.mousedown = this.handlerDragDown.bind(this)
        }
    }
    if (l) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.stageOutHandler, this)
    }
}
;
canvas.ui.Scroll.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Scroll.prototype.update = function() {
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        if (this.backView) {
            this.backView.width = this._width;
            this.backView.height = this._height - this._backPadding * 2;
            this.backView.y = this._backPadding
        }
        this.shape.clear();
        this.shape.beginFill(0, 0);
        this.shape.lineStyle(0, 0, 0);
        this.shape.drawRect(0, 0, this._width, this._height - this._padding * 2);
        this.shape.endFill();
        this.shape.y = this._padding;
        if (this.minusView) {
            this.minusView.x = Math.round((this._width - this.minusView.width) * .5)
        }
        if (this.plusView) {
            this.plusView.x = Math.round((this._width - this.plusView.width) * .5);
            this.plusView.y = this._height - this.plusView.height
        }
        if (this.dragView) {
            this.dragView.position.set(Math.round((this._width - this.dragView.width) * .5), this._padding + Math.round((this.shape.height - this.dragView.height) * ((this.current - this.min) / (this.max - this.min))))
        }
    } else {
        if (this.backView) {
            this.backView.height = this._height;
            this.backView.width = this._width - this._backPadding * 2;
            this.backView.x = this._backPadding
        }
        this.shape.clear();
        this.shape.beginFill(0, 0);
        this.shape.lineStyle(0, 0, 0);
        this.shape.drawRect(0, 0, this._width - this._padding * 2, this._height);
        this.shape.endFill();
        this.shape.x = this._padding;
        if (this.minusView) {
            this.minusView.y = Math.round((this._height - this.minusView.height) * .5)
        }
        if (this.plusView) {
            this.plusView.y = Math.round((this._height - this.plusView.height) * .5);
            this.plusView.x = this._width - this.plusView.width
        }
        if (this.dragView) {
            this.dragView.position.set(this._padding + Math.round((this.shape.width - this.dragView.width) * ((this.current - this.min) / (this.max - this.min))), Math.round((this._height - this.dragView.height) * .5))
        }
    }
    if (this.minusView) {
        if (this.hidePlusMinus == 2) {
            this.minusView.enabled = !this.hidePlusMinus || this.current != this.min
        } else {
            this.minusView.visible = !this.hidePlusMinus || this.current != this.min
        }
    }
    if (this.plusView) {
        if (this.hidePlusMinus == 2) {
            this.plusView.enabled = !this.hidePlusMinus || this.current != this.max
        } else {
            this.plusView.visible = !this.hidePlusMinus || this.current != this.max
        }
    }
    if (this.dragView) {
        this.dragView.visible = !this.isDisabled();
        this.dragView.__height = this.dragView.height;
        this.dragView.__width = this.dragView.width
    }
}
;
canvas.ui.Scroll.prototype.minusClickHandler = function() {
    this.current -= this.step;
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this)
}
;
canvas.ui.Scroll.prototype.plusClickHandler = function() {
    this.current += this.step;
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this)
}
;
canvas.ui.Scroll.prototype.shapeClickHandler = function(t) {
    var e = this.shape.toLocal(new canvas.px.Point(t.data.global.x,t.data.global.y));
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        this.current = this.min + Math.round(e.y / this.shape.height * (this.max - this.min))
    } else {
        this.current = this.min + Math.round(e.x / this.shape.width * (this.max - this.min))
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this)
}
;
canvas.ui.Scroll.prototype.handlerDragDown = function(t) {
    this.isDraggingContent = t.currentTarget != this.dragView;
    this.dragDirection = t.currentTarget == this.dragView;
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        this.startDragPosition = t.data.global.y;
        this.startDragViewPosition = this.dragView.y
    } else {
        this.startDragPosition = t.data.global.x;
        this.startDragViewPosition = this.dragView.x
    }
    this.startCurrent = this.current;
    this.shape.mousemove = this.handlerDragMove.bind(this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this);
    this.wasDragged = false
}
;
canvas.ui.Scroll.prototype.handlerDragMove = function(t) {
    var e;
    var a, i;
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        a = this.startDragPosition - t.data.global.y;
        if (this.dragDirection) {
            e = this.startDragViewPosition - a
        } else {
            e = this.startDragViewPosition + a
        }
        i = this.isDraggingContent ? this.startCurrent + a : Math.round((e - this.padding) / (this.shape.height - this.dragView.__height) * (this.max - this.min))
    } else {
        a = this.startDragPosition - t.data.global.x;
        if (this.dragDirection) {
            e = this.startDragViewPosition - a
        } else {
            e = this.startDragViewPosition + a
        }
        i = this.isDraggingContent ? this.startCurrent + a : Math.round((e - this.padding) / (this.shape.width - this.dragView.__width) * (this.max - this.min))
    }
    if (!this.wasDragged && Math.abs(e - this.startDragViewPosition) > 2)
        this.wasDragged = true;
    if (this.current != i) {
        this.current = i;
        canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this)
    }
}
;
canvas.ui.Scroll.prototype.handlerStageMouseUp = function(t) {
    this.isDraggingContent = false;
    this.shape.mousemove = null;
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this);
    this.wasDragged = false
}
;
canvas.ui.Scroll.prototype.handlerWheelTargetOver = function() {
    if (this.useWheel) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)
    }
}
;
canvas.ui.Scroll.prototype.handlerWheelTargetOut = function() {
    if (this.useWheel) {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)
    }
}
;
canvas.ui.Scroll.prototype.mouseWheelHandler = function(t) {
    if (!this.wheelTarget.parent)
        return;
    if (t.params.wheelDelta > 0) {
        this.minusClickHandler()
    } else {
        this.plusClickHandler()
    }
}
;
canvas.ui.Scroll.prototype.stageOutHandler = function(t) {
    this.handlerStageMouseUp()
}
;
canvas.ui.Scroll.prototype.isDisabled = function() {
    return this.min == this.max
}
;
canvas.ui.Scroll.prototype.destroy = function() {
    if (this.minusView) {
        this.minusView.click = null
    }
    if (this.plusView) {
        this.plusView.click = null
    }
    if (this.dragView) {
        this.dragView.mousedown = null
    }
    if (this.wheelTarget) {
        this.wheelTarget.mouseover = null;
        this.wheelTarget.mouseout = null;
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)
    }
    if (this.dragTarget) {
        this.dragTarget.mousedown = null
    }
    this.shape.click = null;
    this.shape.mousemove = null;
    this.handlerStageMouseUp();
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.stageOutHandler, this);
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.ui.HtmlTextEvent = {
    EVENT_LINK: "HtmlTextEvent.EVENT_LINK"
};
canvas.ui.HtmlText = function(t, e, a, i, s, n, r, o, l, c) {
    this._hAlign = "left";
    Object.defineProperty(this, "hAlign", {
        get: function() {
            return this._hAlign
        },
        set: function(t) {
            this._hAlign = t;
            this.update()
        }
    });
    this._vAlign = "top";
    Object.defineProperty(this, "vAlign", {
        get: function() {
            return this._vAlign
        },
        set: function(t) {
            this._vAlign = t;
            this.update()
        }
    });
    this._lineSpace = 2;
    Object.defineProperty(this, "lineSpace", {
        get: function() {
            return this._lineSpace
        },
        set: function(t) {
            this._lineSpace = t;
            this.update()
        }
    });
    this._text = "";
    Object.defineProperty(this, "text", {
        get: function() {
            return this._text
        },
        set: function(t) {
            this._text = t.replace(/<br>/gi, "<br/>");
            this.make()
        }
    });
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t;
            this.make()
        }
    });
    this._border = false;
    Object.defineProperty(this, "border", {
        get: function() {
            return this._border
        },
        set: function(t) {
            this._border = t;
            if (this._border && !this.borderImage) {
                this.borderImage = new canvas.px.Graphics;
                this.addChild(this.borderImage)
            }
            this.update()
        }
    });
    this._backColor = 0;
    Object.defineProperty(this, "backColor", {
        get: function() {
            return this._backColor
        },
        set: function(t) {
            this._backColor = t;
            if (!this.back) {
                this.createBack()
            }
            this.update()
        }
    });
    this._backAlpha = 0;
    Object.defineProperty(this, "backAlpha", {
        get: function() {
            return this._backAlpha
        },
        set: function(t) {
            this._backAlpha = t;
            if (!this.back) {
                this.createBack()
            }
            this.update()
        }
    });
    Object.defineProperty(this, "textWidth", {
        get: function() {
            return Math.round(this.container.width)
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "textHeight", {
        get: function() {
            return Math.round(this.container.height)
        },
        set: function(t) {}
    });
    canvas.ui.Component.call(this);
    if (t == undefined)
        t = canvas.Const.FONT_TAHOMA_12;
    if (e == undefined)
        e = t + "_BOLD";
    if (a == undefined)
        a = 16777215;
    this.font = t;
    this.boldFont = e;
    this._color = a;
    if (i != undefined)
        this._width = i;
    else
        this._width = 100;
    if (s != undefined)
        this._height = s;
    else
        this._height = 100;
    if (r != undefined)
        this._vAlign = r;
    if (n != undefined)
        this._hAlign = n;
    if (o != undefined) {
        this.createBack();
        this._backColor = o
    }
    if (l)
        this._backAlpha = l;
    if (c != undefined && c) {
        this.createMask()
    }
    this.lineHeight = canvas.px.BitmapText.fonts[this.font].lineHeight;
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.click = this.clickHandler.bind(this)
}
;
canvas.ui.HtmlText.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.HtmlText.prototype.make = function() {
    canvas.Functions.destroyChildren(this.container);
    this.style = {};
    this.style.font = this.font;
    this.style.color = this.color;
    var t = (new DOMParser).parseFromString("<root>" + this.text + "</root>", "text/xml");
    this.parseList(t.children[0].childNodes, this.style);
    this.update()
}
;
canvas.ui.HtmlText.prototype.parseList = function(t, e) {
    var a = t.length;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    var h;
    var d;
    for (var v = 0; v < a; v++) {
        s = t[v];
        switch (s.nodeName) {
        case "font":
            p = canvas.Functions.cloneSimpleObject(e);
            if (s.attributes.color) {
                p.color = parseInt(s.attributes.color.value.substr(1), 16)
            }
            if (s.attributes.face) {
                p.font = s.attributes.face.value
            }
            this.parseList(s.childNodes, p);
            break;
        case "b":
            p = canvas.Functions.cloneSimpleObject(e);
            p.font = this.boldFont;
            this.parseList(s.childNodes, p);
            break;
        case "img":
            if (s.attributes.src) {
                if (s.attributes.atlas) {
                    r = new canvas.px.Sprite(canvas.ResourceLoader.getImage(s.attributes.atlas.value, s.attributes.src.value))
                } else {
                    r = new canvas.ui.Image(s.attributes.src.value,s.attributes.width ? parseInt(s.attributes.width.value) : 20,s.attributes.height ? parseInt(s.attributes.height.value) : 20)
                }
                r.image = true;
                r.xOffset = s.attributes.xOffset ? parseInt(s.attributes.xOffset.value) : 0;
                r.yOffset = s.attributes.yOffset ? parseInt(s.attributes.yOffset.value) : 0;
                r.xyScale = s.attributes.scale ? parseFloat(s.attributes.scale.value) : 1;
                if (e.href) {
                    r.href = e.href;
                    r.target = e.target;
                    r.interactive = true;
                    r.buttonMode = true
                } else {
                    r.interactive = false
                }
                this.container.addChild(r)
            }
            break;
        case "a":
            p = canvas.Functions.cloneSimpleObject(e);
            p.normal = s.attributes.normal && parseInt(s.attributes.normal.value);
            if (s.attributes.href) {
                p.href = s.attributes.href.value
            } else {
                p.href = "#"
            }
            if (s.attributes.target) {
                p.target = s.attributes.target.value
            }
            this.parseList(s.childNodes, p);
            break;
        case "br":
            r = new canvas.px.Sprite(canvas.px.TextureEmpty);
            r.br = true;
            r.charCode = 32;
            this.container.addChild(r);
            break
        }
        if (s.nodeValue) {
            n = s.nodeValue;
            i = n.length;
            o = canvas.px.BitmapText.fonts[e.font];
            for (var u = 0; u < i; u++) {
                c = n.charCodeAt(u);
                l = o.chars[c];
                if (!l)
                    continue;
                r = new canvas.px.Sprite(l.texture);
                r.xOffset = l.xOffset;
                r.yOffset = l.yOffset;
                r.xAdvance = l.xAdvance;
                r.tint = e.color;
                r.charCode = c;
                d = c;
                if (e.href) {
                    r.href = e.href;
                    r.target = e.target;
                    if (!e.normal) {
                        h = new canvas.px.Graphics;
                        h.lineStyle(1, e.color, 1);
                        h.beginFill();
                        h.moveTo(0, o.lineHeight - r.yOffset);
                        h.lineTo(this.getWidth(r) + 1, o.lineHeight - r.yOffset);
                        h.endFill();
                        r.addChildAt(h, 0)
                    }
                    if (e.href != "#") {
                        r.interactive = true;
                        r.buttonMode = true
                    }
                }
                this.container.addChild(r)
            }
        }
    }
    r = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    r.charCode = 32
}
;
canvas.ui.HtmlText.prototype.update = function() {
    var t = this.container.children.length;
    var e;
    var a = 0;
    var i = 0;
    var s = 0;
    var n = 0;
    var r;
    var o = [];
    var l = [];
    var c = [];
    var p = 0;
    var h = 0;
    var d;
    var v;
    var u;
    var m;
    o.push(l);
    for (d = 0; d < t; d++) {
        r = this.container.children[d];
        r.visible = true;
        if (r.charCode == 32) {
            if (s >= this._width) {
                o[o.length - 1] = l;
                l = [];
                o.push(l);
                s = p
            }
            l = l.concat(c);
            c = [];
            p = 0
        }
        if (r.br) {
            l = l.concat(c);
            c = [];
            p = 0;
            o[o.length - 1] = l;
            l = [];
            o.push(l);
            s = p
        }
        c.push(r);
        s += this.getWidth(r);
        p += this.getWidth(r)
    }
    o[o.length - 1] = l.concat(c);
    t = o.length;
    s = 0;
    n = 0;
    for (d = 0; d < t; d++) {
        l = o[d];
        e = l.length;
        if (l.length == 1 && l[0].br) {
            n += this.lineHeight
        }
        for (v = 0; v < e; v++) {
            r = l[v];
            if (v == 0 && r.charCode == 32) {
                r.visible = false;
                continue
            }
            r.position.set(s + r.xOffset, n + r.yOffset);
            if (r.xyScale)
                r.scale.set(r.xyScale, r.xyScale);
            s += this.getWidth(r);
            i = Math.max(i, r.height);
            if (!r.image)
                h = Math.max(h, r.height)
        }
        m = Math.round((i - h) * .5);
        switch (this.hAlign) {
        case "center":
            u = Math.round((this._width - s) * .5);
            break;
        case "right":
            u = Math.round(this._width - s);
            break;
        default:
            u = 0
        }
        for (v = 0; v < e; v++) {
            r = l[v];
            r.x += u;
            if (r.image) {
                r.y += Math.round((i - r.height) * .5)
            } else {
                r.y += m
            }
        }
        s = 0;
        n += i + this.lineSpace;
        i = 0;
        h = 0
    }
    switch (this.vAlign) {
    case "top":
        this.container.y = 0;
        break;
    case "middle":
        this.container.y = Math.round((this._height - this.container.height) * .5);
        break;
    case "bottom":
        this.container.y = Math.round(this._height - this.container.height);
        break
    }
    if (this.border) {
        this.borderImage.clear();
        this.borderImage.beginFill(0, 0);
        this.borderImage.lineStyle(2, 16711680, 1);
        this.borderImage.drawRect(-2, -2, this._width + 4, this._height + 4);
        this.borderImage.endFill()
    }
    if (this.back) {
        this.back.clear();
        this.back.beginFill(this.backColor, this.backAlpha);
        this.back.drawRect(0, 0, this._width, this._height);
        this.back.endFill()
    }
    if (this.msk) {
        this.msk.clear();
        this.msk.beginFill(0, 1);
        this.msk.drawRect(0, 0, this._width, this._height);
        this.msk.endFill()
    }
}
;
canvas.ui.HtmlText.prototype.createBack = function() {
    this.back = new canvas.px.Graphics;
    this.addChildAt(this.back, 0)
}
;
canvas.ui.HtmlText.prototype.getWidth = function(t) {
    return Math.round(t.xAdvance ? t.xAdvance : t.width)
}
;
canvas.ui.HtmlText.prototype.clickHandler = function(t) {
    if (t.target.href) {
        if (t.target.href.substr(0, 6) == "event:") {
            canvas.EventManager.dispatchEvent(canvas.ui.HtmlTextEvent.EVENT_LINK, this, t.target.href.substr(6))
        } else {
            canvas.Functions.navigateToURL(t.target.href, t.target.target ? t.target.target : "_blank")
        }
    }
}
;
canvas.ui.HtmlText.prototype.createMask = function() {
    this.msk = new canvas.px.Graphics;
    this.addChildAt(this.msk, 0);
    this.mask = this.msk
}
;
canvas.ui.PagerEvent = {
    EVENT_CHANGE: "PagerEvent.CHANGE"
};
canvas.ui.Pager = function(t, e, a, i, s, n) {
    Object.defineProperty(this, "startIndex", {
        get: function() {
            return this.currentPage * this.onPage
        }
    });
    Object.defineProperty(this, "endIndex", {
        get: function() {
            return this.currentPage * this.onPage + this.onPage
        }
    });
    this._paddingNumbersLeft = 5;
    Object.defineProperty(this, "paddingNumbersLeft", {
        get: function() {
            return this._paddingNumbersLeft
        },
        set: function(t) {
            this._paddingNumbersLeft = t;
            this.update()
        }
    });
    this._paddingNumbersRight = 5;
    Object.defineProperty(this, "paddingNumbersRight", {
        get: function() {
            return this._paddingNumbersRight
        },
        set: function(t) {
            this._paddingNumbersRight = t;
            this.update()
        }
    });
    this._padding = 2;
    Object.defineProperty(this, "padding", {
        get: function() {
            return this._padding
        },
        set: function(t) {
            this._padding = t;
            this.update()
        }
    });
    this._showCount = 5;
    Object.defineProperty(this, "showCount", {
        get: function() {
            return this._showCount
        },
        set: function(t) {
            this._showCount = t;
            var e = this.numbersContainer.numChildren;
            var a = Math.max(this._showCount, e - 1);
            var i;
            for (var s = 0; s < a; s++) {
                if (s < this._showCount && s >= e) {
                    i = this.fieldTemplate.clone();
                    i.name = "field" + s;
                    i.interactive = true;
                    i.buttonMode = true;
                    i.text = "";
                    this.numbersContainer.addChild(i)
                }
                if (s >= this._showCount && s < e) {
                    i = this.numbersContainer.removeChildAt(s);
                    i.destroy()
                }
            }
            this.update()
        }
    });
    this._currentPage = 0;
    Object.defineProperty(this, "currentPage", {
        get: function() {
            return this._currentPage
        },
        set: function(t) {
            this._currentPage = t < 0 ? 0 : t >= this.numPages ? this.numPages - 1 : t;
            this.update()
        }
    });
    canvas.ui.Component.call(this);
    this.fieldTemplate = s;
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.buttonsContainer = new canvas.px.Container;
    this.container.addChild(this.buttonsContainer);
    this.buttonHome = new canvas.ui.SimpleButton(t);
    this.buttonEnd = new canvas.ui.SimpleButton(e);
    this.buttonMinus = new canvas.ui.SimpleButton(a);
    this.buttonPlus = new canvas.ui.SimpleButton(i);
    this.buttonsContainer.addChild(this.buttonHome);
    this.buttonsContainer.addChild(this.buttonEnd);
    this.buttonsContainer.addChild(this.buttonMinus);
    this.buttonsContainer.addChild(this.buttonPlus);
    this.buttonsContainer.visible = false;
    this.numbersContainer = new canvas.px.Container;
    this.container.addChild(this.numbersContainer);
    this.showCount = n == undefined ? 5 : n;
    this.container.addChild(this.numbersContainer);
    this.click = this._clickHandler.bind(this)
}
;
canvas.ui.Pager.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Pager.prototype.init = function(t, e) {
    this.numPages = Math.ceil(t / e);
    this.currentPage = 0;
    this.onPage = e;
    this.update()
}
;
canvas.ui.Pager.prototype.update = function() {
    if (this._currentPage == 0) {
        this.buttonHome.interactive = false;
        this.buttonHome.alpha = .5;
        this.buttonMinus.interactive = false;
        this.buttonMinus.alpha = .5
    } else {
        this.buttonHome.interactive = true;
        this.buttonHome.alpha = 1;
        this.buttonMinus.interactive = true;
        this.buttonMinus.alpha = 1
    }
    if (this._currentPage == this.numPages - 1) {
        this.buttonEnd.interactive = false;
        this.buttonEnd.alpha = .5;
        this.buttonPlus.interactive = false;
        this.buttonPlus.alpha = .5
    } else {
        this.buttonEnd.interactive = true;
        this.buttonEnd.alpha = 1;
        this.buttonPlus.interactive = true;
        this.buttonPlus.alpha = 1
    }
    var t;
    var e;
    var a;
    var i = 0;
    var s;
    var n;
    if (this.numPages > this._showCount) {
        this.buttonsContainer.visible = true;
        t = this._currentPage - Math.round((this._showCount - 1) * .5)
    } else {
        t = 0;
        e = this.numPages - 1;
        this.buttonsContainer.visible = false
    }
    if (t < 0)
        t = 0;
    e = t + this._showCount;
    for (a = 0; a < this._showCount; a++) {
        n = this.numbersContainer.getChildAt(a);
        n.visible = false;
        if (t + a >= this.numPages) {
            continue
        }
        n.visible = true;
        n.text = (t + a + 1).toString();
        n.x = i;
        i += n.width + this._padding;
        if (t + a == this._currentPage) {
            n.color = 7026733;
            n.interactive = false
        } else {
            n.color = 12713984;
            n.interactive = true
        }
    }
    this.buttonMinus.x = this.buttonHome.width + this._padding;
    this.numbersContainer.x = Math.round(this.buttonMinus.x + this.buttonMinus.width + this.paddingNumbersLeft);
    this.buttonPlus.x = this.numbersContainer.x + this.numbersContainer.width + this.paddingNumbersRight;
    this.buttonEnd.x = this.buttonPlus.x + this.buttonPlus.width + this._padding;
    this.numbersContainer.y = Math.round((Math.max(this.buttonsContainer.height, this.numbersContainer.height) - this.numbersContainer.height) * .5);
    this.container.x = -Math.round(this.buttonsContainer.width * .5)
}
;
canvas.ui.Pager.prototype._clickHandler = function(t) {
    if (this.buttonHome.interactive && canvas.Functions.findParent(this.buttonHome, t.target)) {
        this.currentPage = 0;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)
    } else if (this.buttonMinus.interactive && canvas.Functions.findParent(this.buttonMinus, t.target)) {
        this.currentPage--;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)
    } else if (this.buttonEnd.interactive && canvas.Functions.findParent(this.buttonEnd, t.target)) {
        this.currentPage = this.numPages - 1;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)
    } else if (this.buttonPlus.interactive && canvas.Functions.findParent(this.buttonPlus, t.target)) {
        this.currentPage++;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)
    } else if (t.target.name && t.target.name.substr(0, 5) == "field") {
        var e = this._currentPage - Math.round((this._showCount - 1) * .5);
        if (e < 0)
            e = 0;
        this.currentPage = parseInt(t.target.name.substr(5)) + e;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)
    }
}
;
canvas.ui.Pager.prototype.destroy = function() {
    this.click = null;
    canvas.ui.Component.prototype.destroy.call(this)
}
;
canvas.ui.InputEvent = {
    EVENT_CHANGE: "InputEvent.CHANGE"
};
canvas.ui.Input = function(t, e, a, i, s) {
    this._color = 5191459;
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t;
            this.input.style.color = t
        }
    });
    this._parent = null;
    Object.defineProperty(this, "parent", {
        get: function() {
            return this._parent
        },
        set: function(t) {
            this._parent = t;
            if (this._parent) {
                this.interval = setInterval(this.handlerEnterFrame.bind(this), 10);
                this.input.style.display = "block";
                this.handlerEnterFrame();
                this.lastPoint.x = undefined;
                this.lastPoint.y = undefined
            } else {
                if (this.interval)
                    clearInterval(this.interval);
                this.input.style.display = "none"
            }
        }
    });
    Object.defineProperty(this, "text", {
        get: function() {
            return this.input.value
        },
        set: function(t) {
            this.input.value = t
        }
    });
    Object.defineProperty(this, "align", {
        get: function() {
            return this.input.style["text-align"]
        },
        set: function(t) {
            this.input.style["text-align"] = t
        }
    });
    this._width = 0;
    Object.defineProperty(this, "width", {
        get: function() {
            return this._width
        },
        set: function(t) {
            this._width = t;
            this.input.style.width = this._width * this.scale
        }
    });
    Object.defineProperty(this, "bold", {
        set: function(t) {
            this.input.style["font-weight"] = t ? "bold" : "normal"
        }
    });
    this._scale = 1;
    Object.defineProperty(this, "scale", {
        get: function() {
            return this._scale
        },
        set: function(t) {
            this._scale = t;
            this.lastPoint.x = undefined;
            this.lastPoint.y = undefined;
            if (this.input) {
                this.width = this.width;
                this.input.style.fontSize = Math.floor(12 * this.scale)
            }
        }
    });
    if (e == undefined)
        e = "left";
    if (a == undefined)
        a = 100;
    this.x = 0;
    this.y = 0;
    this.dx = i || 0;
    this.dy = s || 0;
    this.input = document.createElement("input");
    this.input.type = "text";
    this.input.style = "border: none;background-color: transparent; height:14px; position:absolute;font-size: 12px;font-family: Tahoma;color:#ffffff;text-align: " + e + ";outline: none;overflow: hidden;";
    this.width = a;
    this.input.value = "";
    this.input.oninput = this.changeHandler.bind(this);
    t.appendChild(this.input);
    this.lastPoint = new canvas.px.Point(-1e3,-1e3)
}
;
canvas.ui.Input.prototype.changeHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.value)
}
;
canvas.ui.Input.prototype.handlerEnterFrame = function(t) {
    if (!this.parent)
        return;
    var e = this.parent.toGlobal(new canvas.px.Point(0,0));
    if (this.lastPoint.x != e.x || this.lastPoint.y != e.y || t) {
        this.lastPoint.x = e.x;
        this.lastPoint.y = e.y;
        this.input.style.left = e.x + this.x * this.scale + this.dx;
        this.input.style.top = e.y + this.y * this.scale + this.dy - 7
    }
}
;
canvas.ui.ListEvent = {
    EVENT_SELECT: "ListEvent.SELECT"
};
canvas.ui.ListType = {
    VERTICAL: "ListType.VERTICAL",
    HORIZONTAL: "ListType.HORIZONTAL"
};
canvas.ui.List = function(t, e) {
    this._scrollMaxAdd = 0;
    Object.defineProperty(this, "scrollMaxAdd", {
        get: function() {
            return this._scrollMaxAdd
        },
        set: function(t) {
            this._scrollMaxAdd = t;
            this.update()
        }
    });
    this._paddingV = 5;
    Object.defineProperty(this, "paddingV", {
        get: function() {
            return this._paddingV
        },
        set: function(t) {
            this._paddingV = t;
            this.update()
        }
    });
    this._paddingH = 5;
    Object.defineProperty(this, "paddingH", {
        get: function() {
            return this._paddingH
        },
        set: function(t) {
            this._paddingH = t;
            this.update()
        }
    });
    this._scrollPadding = 0;
    Object.defineProperty(this, "scrollPadding", {
        get: function() {
            return this._scrollPadding
        },
        set: function(t) {
            this._scrollPadding = t;
            this.update()
        }
    });
    this._cellsCount = 2;
    Object.defineProperty(this, "cellsCount", {
        get: function() {
            return this._cellsCount
        },
        set: function(t) {
            this._cellsCount = t;
            this.update()
        }
    });
    this._scroll = null;
    Object.defineProperty(this, "scroll", {
        get: function() {
            return this._scroll
        },
        set: function(t) {
            if (this._scroll) {
                canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this._scroll, this.scrollHandler, this)
            }
            this._scroll = t;
            if (this._scroll) {
                canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this._scroll, this.scrollHandler, this)
            }
        }
    });
    canvas.ui.Component.call(this);
    this._cellsCount = e ? e : 2;
    this.type = t ? t : canvas.ui.ListType.VERTICAL;
    this.multiSelect = false;
    this.virtual = true;
    this.reverseLayers = false;
    this.autoDestroy = true;
    this.items = [];
    this.mainContainer = new canvas.px.Container;
    this.wall = new canvas.px.Mask;
    this.mainContainer.addChild(this.wall);
    this.container = new canvas.px.Container;
    this.mainContainer.addChild(this.container);
    this.msk = new canvas.px.Mask;
    this.mainContainer.addChild(this.msk);
    this.mainContainer.mask = this.msk;
    this.addChild(this.mainContainer)
}
;
canvas.ui.List.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.List.prototype.add = function(t, e) {
    if (e == undefined)
        e = true;
    this.items.push(t);
    if (e)
        this.update()
}
;
canvas.ui.List.prototype.remove = function(t, e) {
    if (e == undefined)
        e = true;
    var a = this.items.indexOf(t);
    if (a >= 0)
        this.items.splice(a, 1);
    if (e)
        this.update();
    if (autoDestroy)
        t.destroy()
}
;
canvas.ui.List.prototype.addAt = function(t, e, a) {
    if (a == undefined)
        a = true;
    this.items[t] = e;
    if (a)
        this.update()
}
;
canvas.ui.List.prototype.removeAt = function(t, e) {
    if (e == undefined)
        e = true;
    var a = this.items[t];
    this.items.splice(t, 1);
    if (e)
        this.update();
    if (autoDestroy)
        a.destroy()
}
;
canvas.ui.List.prototype.clear = function(t) {
    if (t == undefined)
        t = true;
    if (this.autoDestroy) {
        var e = this.items.length;
        for (var a = 0; a < e; a++) {
            this.items[a].destroy()
        }
    }
    this.items = [];
    if (t)
        this.update()
}
;
canvas.ui.List.prototype.update = function() {
    this.wall.setSize(this._width, this._height);
    this.msk.setSize(this._width, this._height);
    var t = this.items.length;
    this.container.removeChildren();
    var e;
    var a = 0;
    var i = 0;
    var s = 0;
    var n = 0;
    for (var r = 0; r < t; r++) {
        if (a == this.cellsCount) {
            a = 0;
            s += n;
            n = 0;
            i++
        }
        e = this.items[r];
        if (this.reverseLayers) {
            this.container.addChildAt(e, 0)
        } else {
            this.container.addChild(e)
        }
        if (this.type == canvas.ui.ListType.VERTICAL) {
            e.position.set(a * (e._width + this.paddingH), s);
            n = Math.max(n, e._height + this.paddingV)
        } else {
            e.position.set(s, a * (e._height + this.paddingV));
            n = Math.max(n, e._width + this.paddingH)
        }
        a++
    }
    if (this._scroll) {
        if (this.type == canvas.ui.ListType.VERTICAL) {
            if (this.container.height > this._height) {
                this.addChild(this.scroll);
                this.scroll.setSize(0, this._height);
                this.scroll.position.set(this._width - this.scroll._width + this.scrollPadding, 0);
                this.scroll.max = this.container.height - this._height + this.scrollMaxAdd;
                this.scroll.dragView.setSize(0, Math.max(16, Math.round((this._height - 32) * (this._height / this.container.height))));
                this.scroll.current = this.scroll.current
            } else {
                this.scroll.max = 0;
                if (this.contains(this.scroll))
                    this.removeChild(this.scroll)
            }
        } else {
            if (this.container.width > this._width) {
                this.addChild(this.scroll);
                this.scroll.setSize(this._width, 0);
                this.scroll.position.set(0, this._height - this.scroll._height + this.scrollPadding);
                this.scroll.max = this.container.width - this._width + this.scrollMaxAdd;
                this.scroll.dragView.setSize(Math.max(16, Math.round((this._width - 32) * (this._width / this.container.width))), 0);
                this.scroll.current = this.scroll.current
            } else {
                this.scroll.max = 0;
                if (this.contains(this.scroll))
                    this.removeChild(this.scroll)
            }
        }
        this.scrollHandler()
    }
}
;
canvas.ui.List.prototype.scrollHandler = function(t) {
    if (this.type == canvas.ui.ListType.VERTICAL) {
        this.container.y = -this.scroll.current
    } else {
        this.container.x = -this.scroll.current
    }
    var e = this.items.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = this.items[i];
        if (this.type == canvas.ui.ListType.VERTICAL) {
            if (a.y >= this.scroll.current - a._height && a.y <= this.scroll.current + this._height) {
                if (this.reverseLayers) {
                    this.container.addChildAt(a, 0)
                } else {
                    this.container.addChild(a)
                }
            } else {
                if (this.container.contains(a))
                    this.container.removeChild(a)
            }
        } else {
            if (a.x >= this.scroll.current - a._width && a.x <= this.scroll.current + this._width) {
                if (this.reverseLayers) {
                    this.container.addChildAt(a, 0)
                } else {
                    this.container.addChild(a)
                }
            } else {
                if (this.container.contains(a))
                    this.container.removeChild(a)
            }
        }
    }
}
;
canvas.ui.List.prototype.select = function(t) {
    if (this.scroll && this.scroll.wasDragged)
        return;
    if (this.multiSelect) {
        t.selected = !t.selected
    } else {
        var e = this.items.length;
        for (var a = 0; a < e; a++) {
            this.items[a].selected = this.items[a] === t
        }
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ListEvent.EVENT_SELECT, this, t)
}
;
canvas.ui.List.prototype.getSelectedItems = function() {
    var t = [];
    var e = this.items.length;
    for (var a = 0; a < e; a++) {
        if (this.items[a].selected) {
            t.push(this.items[a])
        }
    }
    return t
}
;
canvas.ui.List.prototype.destroy = function() {
    this.scroll = null;
    this.container.click = null;
    this.autoDestroy = true;
    this.clear();
    canvas.ui.Component.prototype.destroy.apply(this)
}
;
canvas.ui.ListRenderer = function(t, e, a) {
    this.oldData = null;
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this.oldData = this._data;
            this._data = t;
            this.update()
        }
    });
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            this.updateSelection()
        }
    });
    canvas.ui.Component.call(this);
    this.click = this.clickHandler.bind(this);
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    if (e != undefined)
        this._width = e;
    if (a != undefined)
        this._height = a;
    if (t != undefined)
        this.data = t
}
;
canvas.ui.ListRenderer.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.ListRenderer.prototype.updateSelection = function() {}
;
canvas.ui.ListRenderer.prototype.clickHandler = function() {
    if (this.parent && this.parent.parent.parent && this.parent.parent.parent.select) {
        this.parent.parent.parent.select(this)
    }
}
;
canvas.ui.ListRenderer.prototype.overHandler = function() {}
;
canvas.ui.ListRenderer.prototype.outHandler = function() {}
;
canvas.ui.ListRenderer.prototype.destroy = function() {
    this.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.ui.Component.prototype.destroy.apply(this)
}
;
canvas.ui.ComboBoxEvent = {
    EVENT_SELECT: "ComboBoxEvent.SELECT",
    EVENT_OPEN: "ComboBoxEvent.OPEN",
    EVENT_CLOSE: "ComboBoxEvent.CLOSE"
};
canvas.ui.ComboBoxType = {
    UP: "UP",
    DOWN: "DOWN"
};
canvas.ui.ComboBox = function(t, e, a, i, s) {
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t;
            if (t) {
                this.filters = null
            } else {
                this.filters = [canvas.Functions.getBlackAndWhite()]
            }
            this.interactive = this.interactiveChildren = t;
            this.close()
        },
        configurable: true
    });
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t;
            this.selectedItem = this.list.items[this._selectedIndex].data;
            this.update()
        }
    });
    canvas.ui.Component.call(this);
    if (s == undefined)
        s = canvas.ui.ComboBoxType.DOWN;
    this.type = s;
    this.headerBack = t;
    this.listBack = a;
    this.listRenderer = i;
    this.headerRenderer = e;
    this.addChild(this.headerBack);
    this.addChild(this.headerRenderer);
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1);
    this.listBack.addChild(this.list);
    this.headerBack.click = this.headerClickHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this)
}
;
canvas.ui.ComboBox.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.ComboBox.prototype.init = function(t) {
    this.list.clear();
    var e = t.length;
    if (e > 0) {
        for (var a = 0; a < e; a++) {
            this.list.add(new this.listRenderer(t[a]), false)
        }
    }
    this.setSize(this._width, this._height);
    this.selectedIndex = 0
}
;
canvas.ui.ComboBox.prototype.update = function() {
    this.headerRenderer.data = this.selectedItem
}
;
canvas.ui.ComboBox.prototype.setSize = function(t, e) {
    canvas.ui.Component.prototype.setSize.apply(this, [t, e]);
    if (t > 0) {
        this.headerBack.setSize(t, 0);
        this.headerRenderer.setSize(t, 0)
    }
    if (e > 0) {}
    this.list.setSize(t, e - this.headerBack.height);
    var a = this.list.items.length;
    for (var i = 0; i < a; i++) {
        this.list.items[i].setSize(this._width, 0)
    }
    this.listBack.setSize(t, Math.min(this.list.container.height + this.list.paddingV + 4, e - this.headerBack.height));
    if (this.type == canvas.ui.ComboBoxType.UP) {
        this.listBack.y = -this.listBack._height
    } else {
        this.listBack.y = this.headerBack.height
    }
}
;
canvas.ui.ComboBox.prototype.headerClickHandler = function(t) {
    if (this.listBack.parent) {
        this.close()
    } else {
        this.open()
    }
}
;
canvas.ui.ComboBox.prototype.open = function() {
    this.addChild(this.listBack);
    this.setSize(this._width, this._height);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this);
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_OPEN, this)
}
;
canvas.ui.ComboBox.prototype.isOpened = function() {
    return this.listBack.parent != null
}
;
canvas.ui.ComboBox.prototype.stageMouseUpHandler = function(t) {
    if (this.isOver)
        return;
    this.close()
}
;
canvas.ui.ComboBox.prototype.close = function(t) {
    if (this.listBack.parent) {
        this.removeChild(this.listBack)
    }
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this);
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this)
}
;
canvas.ui.ComboBox.prototype.listSelectHandler = function(t) {
    if (t.params) {
        this.selectedIndex = this.list.items.indexOf(t.params);
        canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_SELECT, this, this.selectedItem);
        this.close()
    }
}
;
canvas.ui.ComboBox.prototype.outHandler = function(t) {
    this.isOver = false
}
;
canvas.ui.ComboBox.prototype.overHandler = function(t) {
    this.isOver = true
}
;
canvas.ui.ComboBox.prototype.setSelectedItem = function(t, e) {
    var a, i = this.list.items.length;
    for (a = 0; a < i; a++) {
        if (e != undefined) {
            if (this.list.items[a].data[t] === e) {
                this.selectedIndex = a;
                return
            }
        } else {
            if (this.list.items[a].data === t) {
                this.selectedIndex = a;
                return
            }
        }
    }
}
;
canvas.ui.ComboBox.prototype.destroy = function() {
    this.headerBack.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.data.Artikuls = {
    loadingCount: 0,
    get: function(t) {
        if (get_art_alt == undefined) {
            console.log("Warning! get_art_alt is not defined, can't get artikul info.");
            return false
        }
        var e = false;
        if (typeof t != "object") {
            t = [t];
            e = true
        }
        var a = t.length;
        var i = {};
        var s;
        for (var n = 0; n < a; n++) {
            s = get_art_alt("AA_" + t[n]);
            if (!s) {
                this.loadingCount++;
                loadArtifactArtikulsData(t, this.complete.bind(this));
                return false
            } else {
                i[t[n]] = s
            }
        }
        return e ? i[t[0]] : i
    },
    complete: function() {
        this.loadingCount--;
        if (this.loadingCount < 1) {
            canvas.EventManager.dispatchEvent(canvas.Event.ARTIKULS_LOADED)
        }
    }
};
canvas.data.ItemPrototypeData = {
    EVENT_COMPLETE: "ItemPrototypeData.EVENT_COMPLETE",
    QUALITY_GREY: 0,
    QUALITY_GREEN: 1,
    QUALITY_BLUE: 2,
    QUALITY_VIOLET: 3,
    QUALITY_RED: 4,
    QUALITY_TURQUOISE: 5,
    QUALITY_ORANGE: 6,
    prototypes: {},
    unParsedData: {},
    loadPrototype: function(t) {
        var e = (Math.floor(parseInt(t) * .01) * 100).toString();
        while (e.length < 5)
            e = "0" + e;
        if (this.unParsedData[e])
            return;
        var a = canvas.Config.amfPath + "artifact_artikul_" + e + ".amf";
        this.unParsedData[a] = true;
        canvas.ResourceLoader.add([a]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this)
    },
    completeHandler: function() {
        canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
        for (var t in this.unParsedData) {
            this.parse(canvas.ResourceLoader.get(t))
        }
        this.unParsedData = new Object;
        canvas.EventManager.dispatchEvent(this.EVENT_COMPLETE)
    },
    parse: function(t) {
        var e, a;
        for (var i in t) {
            e = t[i];
            a = new Object;
            a.id = e.id;
            a.title = e.title;
            a.description = e.description;
            a.quality = e.quality;
            a.picture = e.picture;
            this.prototypes[a.id] = a
        }
    },
    getItemPrototype: function(t) {
        var e = this.prototypes[t];
        if (!e) {
            this.loadPrototype(t)
        }
        return e
    },
    getColorByQuality: function(t) {
        switch (parseInt(t)) {
        case this.QUALITY_GREY:
            return 6710886;
        case this.QUALITY_GREEN:
            return 3381504;
        case this.QUALITY_BLUE:
            return 3342591;
        case this.QUALITY_VIOLET:
            return 10027161;
        case this.QUALITY_RED:
            return 16711680;
        case this.QUALITY_TURQUOISE:
            return 93809;
        case this.QUALITY_ORANGE:
            return 16080423;
        default:
            return 0
        }
    }
};
canvas.data.battle.AuraData = function(t, e, a) {
    this.id = t;
    this.title = e;
    this.image = a
}
;
canvas.data.battle.ComboData = function(t, e, a, i, s) {
    this.id = t;
    this.description = e;
    this.level = a;
    this.seq = i;
    this.title = s;
    this.size = this.seq.length
}
;
canvas.data.battle.EffectData = function(t, e, a) {
    this.type = t;
    this.image = e;
    this.ids = a
}
;
canvas.data.battle.EffectInfoData = function(t, e, a, i, s, n) {
    this.id = t;
    this.image = e;
    this.count = a;
    this.title = i;
    this.finishTime = s;
    this.turnsLeft = n
}
;
canvas.data.battle.EffectInfoData.prototype.equals = function(t) {
    return this.id == t.id && this.image == t.image && this.count == t.count && this.title == t.title && this.finishTime == t.finishTime && this.turnsLeft == t.turnsLeft
}
;
canvas.data.battle.EffectInfoData.prototype.add = function(t) {
    this.count += t.count;
    if (t.finishTime > this.finishTime)
        this.finishTime = t.finishTime;
    if (t.turnsLeft > this.turnsLeft)
        this.turnsLeft = t.turnsLeft
}
;
canvas.data.battle.EffectInfoData.prototype.toString = function() {
    return "id=" + this.id + ", image=" + this.image + ", count=" + this.count + ", title=" + this.title + ", timeLeft=" + Math.floor(this.finishTime - Date.now() / 1e3 - canvas.app.mem.model.effectsDeltaTime) + ", turnsLeft=" + this.turnsLeft
}
;
canvas.data.battle.PersData = function() {
    this.wasChanged = true;
    this._id = 0;
    Object.defineProperty(this, "id", {
        get: function() {
            return this._id
        },
        set: function(t) {
            if (this._id != t) {
                this._id = t;
                this.wasChanged = true
            }
        }
    });
    this._nick = "";
    Object.defineProperty(this, "nick", {
        get: function() {
            return this._nick
        },
        set: function(t) {
            if (this._nick != t) {
                this._nick = t;
                this.wasChanged = true
            }
        }
    });
    this._level = 0;
    Object.defineProperty(this, "level", {
        get: function() {
            return this._level
        },
        set: function(t) {
            if (this._level != t) {
                this._level = t;
                this.wasChanged = true
            }
        }
    });
    this._team = 0;
    Object.defineProperty(this, "team", {
        get: function() {
            return this._team
        },
        set: function(t) {
            if (this._team != t) {
                this._team = t;
                this.wasChanged = true
            }
        }
    });
    this._status = -1;
    Object.defineProperty(this, "status", {
        get: function() {
            return this._status
        },
        set: function(t) {
            if (this._status != t) {
                this._status = t;
                this.wasChanged = true
            }
        }
    });
    this._hpRatio = 1;
    Object.defineProperty(this, "hpRatio", {
        get: function() {
            return this._hpRatio
        },
        set: function(t) {
            if (this._hpRatio != t) {
                this._hpRatio = t;
                this.wasChanged = true
            }
        }
    });
    this._mpRatio = 0;
    Object.defineProperty(this, "mpRatio", {
        get: function() {
            return this._mpRatio
        },
        set: function(t) {
            if (this._mpRatio != t) {
                this._mpRatio = t;
                this.wasChanged = true
            }
        }
    });
    this._clanImage = "";
    Object.defineProperty(this, "clanImage", {
        get: function() {
            return this._clanImage
        },
        set: function(t) {
            if (this._clanImage != t) {
                this._clanImage = t;
                this.wasChanged = true
            }
        }
    });
    this._isBot = false;
    Object.defineProperty(this, "isBot", {
        get: function() {
            return this._isBot
        },
        set: function(t) {
            if (this._isBot != t) {
                this._isBot = t;
                this.wasChanged = true
            }
        }
    });
    this._isShadow = false;
    Object.defineProperty(this, "isShadow", {
        get: function() {
            return this._isShadow
        },
        set: function(t) {
            if (this._isShadow != t) {
                this._isShadow = t;
                this.wasChanged = true
            }
        }
    });
    this._flags = 0;
    Object.defineProperty(this, "flags", {
        get: function() {
            return this._flags
        },
        set: function(t) {
            if (this._flags != t) {
                this._flags = t;
                this.wasChanged = true
            }
        }
    });
    this._fightId = 0;
    Object.defineProperty(this, "fightId", {
        get: function() {
            return this._fightId
        },
        set: function(t) {
            if (this._fightId != t) {
                this._fightId = t;
                this.wasChanged = true
            }
        }
    })
}
;
canvas.data.battle.PersData.prototype.setRatios = function(t, e, a, i) {
    this.hpRatio = e ? Math.max(0, Math.min(1, t / e)) : 0;
    this.mpRatio = i ? Math.max(0, Math.min(1, a / i)) : 0
}
;
canvas.data.battle.SkeletonData = function(t, e) {
    this.source = t;
    this.slots = {};
    var a = t.split(",");
    var i = a.length;
    var s = 0;
    var n = 0;
    for (var r = 0; r < i; r++) {
        var o = canvas.Const.SK_SLOT_NAMES[n];
        if (!this.slots[o]) {
            this.slots[o] = []
        }
        this.slots[o].push(new canvas.data.battle.SkeletonLayerData(a[r],canvas.Const.SK_WPN_SLOT_NAMES.indexOf(o) < 0 ? e : "WPN"));
        s++;
        if (s >= 3) {
            s = 0;
            n++
        }
    }
}
;
canvas.data.battle.SkeletonLayerData = function(t, e) {
    var a = t.split(";");
    var i = a[0] & 65535;
    this.colors = [0, a[1], a[2]];
    this.animation = a[3] ? canvas.Functions.extractSwfName(a[3]) : "";
    if (i == 0) {
        this.url = ""
    } else {
        this.colors[0] = a[0] >> 16;
        var s = "p" + canvas.Functions.setNumberLen(i, 4) + (this.colors[0] > 0 ? "_" + this.colors[0] : "");
        this.url = canvas.Config.packsPath + e + "/" + s + "/" + s + ".json"
    }
}
;
canvas.data.clanWar.UserData = function(t, e, a, i, s, n, r, o, l) {
    this.login = t;
    this.ready = e == undefined ? true : e;
    this.online = a == undefined ? true : a;
    this.id = i == undefined ? "0" : i;
    this.hp = s == undefined ? -1 : s;
    this.mp = n == undefined ? -1 : n;
    this.voivoda = r == undefined ? false : r;
    this.room = o == undefined ? 0 : o;
    this.delayed = l == undefined ? false : l
}
;
canvas.data.cube.ItemData = function(t, e, a, i) {
    if (i == undefined)
        i = 1;
    this.id = t;
    this.image = canvas.Config.artifactsPath + e;
    this.title = a;
    this.count = parseInt(i)
}
;
canvas.data.leftMenu.ItemData = function(t) {
    if (t != undefined) {
        this.slot = parseInt(t[0]);
        this.id = t[1];
        this.count = parseInt(t[2]);
        this.image = t[3];
        this.variant = false;
        this.disable = false;
        if (t.length > 4) {
            t[8] = t[8] == "0" ? "1" : t[8];
            this.cdTime = Math.max(parseInt(t[4]), canvas.app.leftMenu.Const.MIN_COOLDOWN);
            this.cdGroupId = parseInt(t[5]);
            this.cdLeft = parseInt(t[6]);
            this.disable = String(t[7]) == "1";
            this.cdType = parseInt(t[9]);
            this.variant = parseInt(t[8]) != 1;
            this.variantNum = parseInt(t[8])
        }
    }
}
;
canvas.data.location.DCampaign = function() {
    this.title = "";
    this.picture = "";
    this.finishTime = 0
}
;
canvas.data.location.DEvent = function() {
    this.title = "";
    this.url = "";
    this.picture = "";
    this.description = "";
    this.finishTime = 0
}
;
canvas.data.location.DFronts = function() {
    this.frontsEnabled = false;
    this.frontsPanelEnabled = false;
    this.humLocs = 0;
    this.magLocs = 0;
    this.frontTitle = "";
    this.locationsData = [];
    this.currentLocationData = new canvas.data.location.DFrontsLoc;
    this.availableLocationData = null
}
;
canvas.data.location.DFrontsLoc = function() {
    this.id = "0";
    this.title = "Location";
    this.image = "images/data/areas/zg_ruin_plosh.jpg";
    this.owner = 0;
    this.status = 2;
    this.description = "Description";
    this.cooldown = 0;
    this.cooldownStart = 0;
    this.fightAvail = true;
    this.fightID = "";
    this.weight = 0
}
;
canvas.data.location.DResurrect = function() {
    this.id = 0;
    this.title = "";
    this.enabled = false;
    this.error = "";
    this.picture = ""
}
;
canvas.data.manor.DBuilding = function() {
    this.type = 0;
    this.level = 0;
    this.name = "";
    this.title = "";
    this.desc = "";
    this.image = "";
    this.picture = "";
    this.cost = 0;
    this.enabled = true;
    this.destroyEnabled = true;
    this.ownDichIndex = 0;
    this.dx = 0;
    this.dy = 0
}
;
canvas.data.manor.DBuilding.TYPE_MAIN = 1;
canvas.data.manor.DBuilding.TYPE_EXP = 2;
canvas.data.manor.DBuilding.TYPE_OBELISK = 3;
canvas.data.manor.DBuilding.TYPE_PETS = 4;
canvas.data.manor.DBuilding.TYPE_STORAGE = 5;
canvas.data.manor.DBuilding.TYPE_WORKSHOP = 6;
canvas.data.manor.DBuilding.TYPE_MAIL = 7;
canvas.data.manor.DBuilding.TYPE_HOSPITAL = 8;
canvas.data.manor.DBuilding.TYPE_MARKET = 9;
canvas.data.manor.DBuilding.TYPE_WALL = 10;
canvas.data.manor.DBuilding.TYPE_TREE = 11;
canvas.data.manor.DBuilding.TYPE_MINE1 = 12;
canvas.data.manor.DBuilding.TYPE_MINE2 = 13;
canvas.data.manor.DBuilding.TYPE_MINE3 = 14;
canvas.data.manor.DBuilding.TYPE_MAKE1 = 15;
canvas.data.manor.DBuilding.TYPE_MAKE2 = 16;
canvas.data.manor.DBuilding.TYPE_MAKE3 = 17;
canvas.data.manor.DBuilding.TYPE_PORTAL = 18;
canvas.data.manor.DBuilding.TYPE_HALLOWEEN = 19;
canvas.data.manor.DBuilding.typeIsMultiBuild = function(t) {
    return canvas.app.manor.model.multiBuildingTypes.indexOf(t) >= 0
}
;
canvas.data.manor.DCampActiveMission = function() {
    this.id = 0;
    this.missionId = 0;
    this.type = 0;
    this.objectId = 0;
    this.pet1 = 0;
    this.pet2 = 0;
    this.pet3 = 0;
    this.stime = 0;
    this.dtime = 0
}
;
canvas.data.manor.DCampActiveMission.prototype.isResource = function() {
    return this.type >= 1 && this.type <= 3
}
;
canvas.data.manor.DCampActiveMission.prototype.isArtifact = function() {
    return this.type >= 4 && this.type <= 6
}
;
canvas.data.manor.DCampData = function() {
    this.missions;
    this.pets;
    this.resourceSlots = 1;
    this.artifactSlots = 1;
    this.selectedSlot = 1;
    this.selectedType = 0;
    this.artifacts;
    this.forgeItems;
    this.forgeLevels;
    this.fragmentItem;
    this.currentDestructItemAid = "";
    this.currentForgeLevel = 0;
    this.currentActiveMission;
    this.activeMissions;
    this.waitChangeCountArtifacts
}
;
canvas.data.manor.DCampData.TYPE_COUNT = 6;
canvas.data.manor.DCampData.ARTIFACT_TYPE_COUNT = 3;
canvas.data.manor.DCampData.ARTIFACT_PETS_MAX = 3;
canvas.data.manor.DCampData.PET_A_DISCIPLINE = "PET_A_DISCIPLINE";
canvas.data.manor.DCampData.PET_S_GEMS = "PET_S_GEMS";
canvas.data.manor.DCampData.PET_S_FISH = "PET_S_FISH";
canvas.data.manor.DCampData.PET_S_GRASS = "PET_S_GRASS";
canvas.data.manor.DCampData.PET_S_ITEMS = "PET_S_ITEMS";
canvas.data.manor.DCampData.PET_S_TALISMANS = "PET_S_TALISMANS";
canvas.data.manor.DCampData.PET_S_VALUE = "PET_S_VALUE";
canvas.data.manor.DCampData.PET_A_STEALTH = "PET_A_STEALTH";
canvas.data.manor.DCampData.prototype.parse = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    if (t.settings) {
        this.resourceSlots = parseInt(t.settings.FARM_SLOTS);
        this.artifactSlots = parseInt(t.settings.SEARCH_SLOTS)
    }
    if (t.artifacts) {
        if (!this.artifacts)
            this.artifacts = new Object;
        for (a in t.artifacts) {
            n = t.artifacts[a];
            r = new canvas.data.manor.DItem;
            r.canBeZeroCount = true;
            r.aid = r.id = n.id;
            r.image = n.image;
            r.count = n.count;
            r.title = n.title;
            this.applyAlt(n.alt);
            this.artifacts[r.aid] = r
        }
    }
    if (t.missions) {
        if (!this.missions)
            this.missions = new Object;
        for (a in t.missions) {
            s = t.missions[a];
            e = new canvas.data.manor.DCampMission;
            e.bonusDifficulty = s.bonus_difficulty;
            e.bonusId = s.bonus_id;
            e.duration = s.duration;
            e.exp = s.exp;
            e.id = s.id;
            e.injury = s.injury;
            e.price1Amount = s.price1_amount;
            e.price1Id = s.price1_id;
            e.price2Amount = s.price2_amount;
            e.price2Id = s.price2_id;
            e.type = parseInt(s.type);
            e.title = s.title;
            if (s.rewards) {
                e.rewards = new Array;
                o = s.rewards.length;
                for (l = 0; l < o; l++) {
                    c = new canvas.data.manor.DCampReward;
                    c.bonusDifficulty = s.rewards[l].difficulty;
                    c.skillValue = s.rewards[l].skill_value;
                    c.item = this.artifacts[s.rewards[l].reward];
                    e.rewards.push(c)
                }
            }
            e.objects = s["objects"];
            this.missions[e.type] = e
        }
    }
    if (t.pets)
        this.parsePets(t.pets);
    if (t.forge) {
        var p = t.forge;
        this.forgeItems = [];
        o = p.items.length;
        for (a in p.items) {
            n = p.items[a];
            if (typeof n == "function")
                continue;
            this.addForgeItem(n)
        }
        this.forgeLevels = [];
        o = p.builds.length;
        for (l = 0; l < o; l++) {
            this.forgeLevels.push(parseInt(p.builds[l]))
        }
        this.fragmentItem = this.artifacts[p.fragment]
    }
    if (t.missions_active)
        this.parseActiveMissions(t.missions_active)
}
;
canvas.data.manor.DCampData.prototype.addForgeItem = function(t, e) {
    var a;
    if (e) {
        var i, s = this.forgeItems.length;
        for (i = 0; i < s; i++) {
            a = this.forgeItems[i];
            if (a.id == t.id) {
                a.count++;
                return
            }
        }
    }
    a = new canvas.data.manor.DItem;
    a.canBeZeroCount = true;
    a.aid = a.id = t.id;
    a.image = t.image;
    a.title = t.title;
    a.count = t.count;
    this.applyAlt(t.alt);
    this.forgeItems.push(a)
}
;
canvas.data.manor.DCampData.prototype.parseActiveMissions = function(t) {
    if (!this.activeMissions)
        this.activeMissions = new Array;
    var e;
    var a;
    var i, s = t.length;
    for (i = 0; i < s; i++) {
        e = t[i];
        a = new canvas.data.manor.DCampActiveMission;
        a.id = parseInt(e.id);
        a.missionId = parseInt(e.mission_id);
        a.type = parseInt(e.mission_type);
        a.objectId = parseInt(e.farm_id);
        a.pet1 = parseInt(e.pet1);
        a.pet2 = parseInt(e.pet2);
        a.pet3 = parseInt(e.pet3);
        a.stime = parseInt(e.stime);
        a.dtime = parseInt(e.dtime);
        this.removeActiveMission(a);
        this.addActiveMission(a)
    }
}
;
canvas.data.manor.DCampData.prototype.applyMissionToPets = function(t) {
    if (t.pet1 > 0 && this.pets[t.pet1])
        this.pets[t.pet1].mission = t;
    if (t.pet2 > 0 && this.pets[t.pet2])
        this.pets[t.pet2].mission = t;
    if (t.pet3 > 0 && this.pets[t.pet3])
        this.pets[t.pet3].mission = t
}
;
canvas.data.manor.DCampData.prototype.freeMissionPets = function(t) {
    if (t.pet1 > 0 && this.pets[t.pet1])
        this.pets[t.pet1].mission = null;
    if (t.pet2 > 0 && this.pets[t.pet2])
        this.pets[t.pet2].mission = null;
    if (t.pet3 > 0 && this.pets[t.pet3])
        this.pets[t.pet3].mission = null
}
;
canvas.data.manor.DCampData.prototype.addActiveMission = function(t) {
    this.activeMissions.push(t);
    this.applyMissionToPets(t)
}
;
canvas.data.manor.DCampData.prototype.removeActiveMission = function(t) {
    var e;
    var a, i = this.activeMissions.length;
    for (a = 0; a < i; a++) {
        e = this.activeMissions[a];
        if (e.id == t.id) {
            this.activeMissions.splice(a, 1);
            this.freeMissionPets(e);
            break
        }
    }
}
;
canvas.data.manor.DCampData.prototype.parsePets = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    if (!this.pets)
        this.pets = new Object;
    for (i in t) {
        n = t[i];
        e = new canvas.data.manor.DCampPet;
        e.id = n.id;
        e.title = n.title;
        e.image = canvas.Config.dataPath + "pets/" + n.image;
        e.skills = n.skills;
        e.mission = n.mission_id > 0 ? this.missions[n.mission_id] : null;
        e.canQuest = n.can_quest;
        e.item = new canvas.data.manor.DItem;
        e.item.title = e.title;
        e.item.image = e.image;
        o = [];
        if (n.abilities.family)
            o.push(n.abilities.family);
        if (n.abilities.ability1)
            o.push(n.abilities.ability1);
        if (n.abilities.ability2)
            o.push(n.abilities.ability2);
        if (n.abilities.ability3)
            o.push(n.abilities.ability3);
        var l, c = o.length;
        for (l = 0; l < c; l++) {
            s = o[l];
            r = n.artifacts[s];
            a = new canvas.data.manor.DItem;
            a.aid = a.id = r.id;
            a.title = r.title;
            a.image = r.image;
            e.artifacts.push(a);
            this.applyAlt(r.alt)
        }
        if (this.pets[e.id]) {
            e.mission = this.pets[e.id].mission
        }
        this.pets[e.id] = e
    }
}
;
canvas.data.manor.DCampData.prototype.getTypeByIndex = function(t) {
    switch (t) {
    case 1:
        return canvas.data.manor.DCampData.PET_S_GRASS;
    case 2:
        return canvas.data.manor.DCampData.PET_S_GEMS;
    case 3:
        return canvas.data.manor.DCampData.PET_S_FISH;
    case 4:
        return canvas.data.manor.DCampData.PET_S_ITEMS;
    case 5:
        return canvas.data.manor.DCampData.PET_S_TALISMANS;
    case 6:
        return canvas.data.manor.DCampData.PET_S_VALUE
    }
    return ""
}
;
canvas.data.manor.DCampData.prototype.getTitleByIndex = function(t) {
    switch (t) {
    case 1:
        return canvas.Translator.getText(335);
    case 2:
        return canvas.Translator.getText(336);
    case 3:
        return canvas.Translator.getText(337);
    case 4:
        return canvas.Translator.getText(333);
    case 5:
        return canvas.Translator.getText(331);
    case 6:
        return canvas.Translator.getText(332)
    }
    return ""
}
;
canvas.data.manor.DCampData.prototype.parseDestructResult = function(t) {
    var e = this.forgeItems.length;
    var a;
    var i;
    for (a = 0; a < e; a++) {
        i = this.forgeItems[a];
        if (i.aid == this.currentDestructItemAid) {
            if (i.count == 1) {
                this.forgeItems.splice(a, 1)
            }
            i.count--;
            break
        }
    }
    this.fragmentItem.count += t.talisman_amount
}
;
canvas.data.manor.DCampData.prototype.deltaFragment = function(t) {
    if (t == undefined)
        t = 0;
    this.fragmentItem.count -= this.forgeLevels[t]
}
;
canvas.data.manor.DCampData.prototype.getActiveMissionsByTypes = function(t) {
    var e = [];
    var a;
    var i, s = this.activeMissions.length;
    for (i = 0; i < s; i++) {
        a = this.activeMissions[i];
        if (t.indexOf(a.type) >= 0) {
            e.push(a)
        }
    }
    return e
}
;
canvas.data.manor.DCampData.prototype.applyAlt = function(alt) {
    if (alt) {
        var str = alt.replace('<script type="text/javascript">', "");
        str = str.replace("<\/script>", "");
        eval(str)
    }
}
;
canvas.data.manor.DCampData.prototype.changeArtifactsCount = function() {
    var t;
    if (this.waitChangeCountArtifacts) {
        for (t in this.waitChangeCountArtifacts) {
            if (this.artifacts[t]) {
                this.artifacts[t].count -= this.waitChangeCountArtifacts[t]
            }
        }
        this.waitChangeCountArtifacts = null
    }
}
;
canvas.data.manor.DCampData.prototype.haveResourceMission = function() {
    if (!this.missions)
        return false;
    var t;
    for (var e in this.missions) {
        t = this.missions[e];
        if (t.isResource())
            return true
    }
    return false
}
;
canvas.data.manor.DCampData.prototype.haveArtifactMission = function() {
    if (!this.missions)
        return false;
    var t;
    for (var e in this.missions) {
        t = this.missions[e];
        if (t.isArtifact())
            return true
    }
    return false
}
;
canvas.data.manor.DCampMission = function() {
    this.id = 1;
    this.type = 1;
    this.title = "";
    this.bonusDifficulty = 3e3;
    this.bonusId = 3;
    this.duration = 1800;
    this.exp = 50;
    this.injury = 100;
    this.price1Amount = 3;
    this.price1Id = 1;
    this.price2Amount = 3;
    this.price2Id = 1;
    this.item;
    this.rewards;
    this.objects
}
;
canvas.data.manor.DCampMission.prototype.isResource = function() {
    return this.type >= 1 && this.type <= 3
}
;
canvas.data.manor.DCampMission.prototype.isArtifact = function() {
    return this.type >= 4 && this.type <= 6
}
;
canvas.data.manor.DCampMission.prototype.getRewardBySkill = function(t) {
    var e;
    var a = this.rewards ? this.rewards[0] : null;
    var i, s = this.rewards.length;
    for (i = 0; i < s; i++) {
        e = this.rewards[i];
        if (t >= e.skillValue && (!a || a.skillValue < e.skillValue)) {
            a = e
        }
    }
    return a
}
;
canvas.data.manor.DCampPet = function() {
    this.id = 0;
    this.title = "";
    this.image = "";
    this.skills = {};
    this.artifacts = [];
    this.mission;
    this.item;
    this.canQuest = true
}
;
canvas.data.manor.DCampPet.prototype.getSkill = function(t) {
    return this.skills[t] ? this.skills[t] : 0
}
;
canvas.data.manor.DCampPet.prototype.getSkillByIndex = function(t) {
    return this.getSkill(canvas.app.manor.model.campData.getTypeByIndex(t))
}
;
canvas.data.manor.DCampPet.prototype.missionIsComplete = function() {
    return canvas.app.manor.model.serverTime.getTime() >= this.mission.dtime
}
;
canvas.data.manor.DCampReward = function() {
    this.bonusDifficulty = 3e3;
    this.item;
    this.skillValue = 0
}
;
canvas.data.manor.DCraftData = function() {
    this.queueSizeMax = 0;
    this.price = 0;
    this.requests;
    this.requestsCompleted;
    this.item;
    this.item2;
    this.materialCount = 0
}
;
canvas.data.manor.DCraftRequest = function() {
    this.id = "";
    this.recipe = "";
    this.count = 1;
    this.duration = 0;
    this.durationMax = 0;
    this.item
}
;
canvas.data.manor.DItem = function(t) {
    this._count = 1;
    Object.defineProperty(this, "count", {
        get: function() {
            return this._count
        },
        set: function(t) {
            this.stackable = t > 0;
            if (this.canBeZeroCount) {
                this._count = t < 0 ? 0 : t
            } else {
                this._count = t < 1 ? 1 : t
            }
        }
    });
    this._count2 = 1;
    Object.defineProperty(this, "count2", {
        get: function() {
            return this._count2
        },
        set: function(t) {
            this._count2 = t
        }
    });
    this.id = "";
    this.aid = "";
    this.image = "";
    this.title = "None";
    this.time = 0;
    this.timeFull = 0;
    this.stackable = false;
    this.area = "";
    this.flags = new Object;
    this.enchantQuality = 0;
    this.enchantParam = 0;
    this.enchant2 = 0;
    this.enchant3 = 0;
    this.type = 0;
    this.color = 0;
    this.itemFlags = 0;
    this.canBeZeroCount = false;
    if (t) {
        this.id = t.id;
        this.image = t.picture;
        this.title = t.title;
        this.count = parseInt(t.cnt);
        this.aid = t.artikul_id;
        this.flags.cell = t.cell == "1";
        this.flags.storage = t.storage == "1";
        this.itemFlags = t.flags || 0;
        this.time = t.time_expire ? parseInt(t.time_expire) : 0;
        this.type = parseInt(t.type_id);
        this.color = parseInt(t.quality);
        if (t.enchant_quality)
            this.enchantQuality = parseInt(t.enchant_quality);
        if (t.enchant_param)
            this.enchantParam = parseInt(t.enchant_param);
        if (t.enchant2)
            this.enchant2 = t.enchant2;
        if (t.enchant3)
            this.enchant3 = t.enchant3
    }
}
;
canvas.data.manor.DItem.prototype.clone = function() {
    var t = new canvas.data.manor.DItem;
    t.area = this.area;
    t.count = this.count;
    t.id = this.id;
    t.aid = this.aid;
    t.image = this.image;
    t.time = this.time;
    t.timeFull = this.timeFull;
    t.title = this.title;
    return t
}
;
canvas.data.manor.DItem.prototype.equals = function(t) {
    return this.aid == t.aid && this.isNonTransferable() == t.isNonTransferable() && this.stackable == t.stackable
}
;
canvas.data.manor.DItem.prototype.isNonTransferable = function() {
    var t = 32;
    return canvas.Functions.testFlag(this.itemFlags, t)
}
;
canvas.data.manor.DItemCell = function() {
    this.area = "";
    this.title = "";
    this.size = 0;
    this.items = new Array
}
;
canvas.data.manor.DKennel = function() {
    this.canKill = 0;
    this.canKillTotal = 0;
    this.killPriceExt = 0;
    this.killColldown = 0;
    this.killBigCooldown = 0;
    this.killTime = 0;
    this.killBigTime = 0;
    this.bots
}
;
canvas.data.manor.DKennel.prototype.getBotById = function(t) {
    var e, a, i = this.bots.length;
    for (a = 0; a < i; a++) {
        e = this.bots[a];
        if (e.id == t)
            return e
    }
    return null
}
;
canvas.data.manor.DKennel.prototype.getStartTime = function() {
    return Math.max(this.killTime, this.killBigTime)
}
;
canvas.data.manor.DKennel.prototype.getFinishTime = function() {
    return this.getStartTime() + this.getCoolDown()
}
;
canvas.data.manor.DKennel.prototype.getCoolDown = function() {
    return this.killTime > this.killBigTime ? this.killColldown : this.killBigCooldown
}
;
canvas.data.manor.DKennelBot = function() {
    this.id = 0;
    this.nick = "";
    this.picture = "";
    this.moneyMin = 0;
    this.moneyMax = 0;
    this.price = 0;
    this.exp = 0
}
;
canvas.data.manor.DLabourRequest = function() {
    this.user;
    this.labour = 0;
    this.price = 0;
    this.id = ""
}
;
canvas.data.manor.DLocation = function() {
    this.id = 0;
    this.areaID = 0;
    this.picture = "";
    this.title = "";
    this.error = ""
}
;
canvas.data.manor.DPet = function() {
    this.id = "";
    this.title = "";
    this.image = "";
    this.swf = "";
    this.exp = 0;
    this.expUp = 0;
    this.time = 0;
    this.timeFull = 0;
    this.level = 0;
    this.error = "";
    this.color = 0
}
;
canvas.data.manor.DPetTrainingType = function() {
    this.id = "";
    this.duration = 0;
    this.feedCost = 0;
    this.exp = 0
}
;
canvas.data.manor.DPortal = function() {
    this.level = 0;
    this.status = 0;
    this.locationID = 0
}
;
canvas.data.manor.DRecipe = function() {
    this.id = "";
    this.title = "";
    this.duration = 0;
    this.items;
    this.image = "";
    this.resultCount = 1;
    this.resultAid = "";
    this.favorite = false
}
;
canvas.data.manor.DSellRequest = function() {
    this.user;
    this.price = 0;
    this.id = ""
}
;
canvas.data.manor.DSortData = function(t, e, a) {
    this.type = t;
    this.title = e
}
;
canvas.data.manor.DSortData.TYPE_DEFAULT = "typeDefault";
canvas.data.manor.DSortData.TYPE_TYPE = "typeType";
canvas.data.manor.DSortData.TYPE_TITLE = "typeTitle";
canvas.data.manor.DSortData.TYPE_COLOR = "typeColor";
canvas.data.manor.DSortData.TYPE_TIME = "typeTime";
canvas.data.manor.DSortData.TYPE_LEVEL = "typeLevel";
canvas.data.manor.DThroneRoomData = function(t) {
    this._currentType = 0;
    Object.defineProperty(this, "currentType", {
        get: function() {
            return this._currentType
        },
        set: function(t) {
            this._currentType = t;
            this.userData.redressItemID = 0
        }
    });
    this.typesPath = t.typesPath != undefined ? t.typesPath : "images/data/locale/ru/amf/throne_room_types.amf";
    this.itemsPath = t.itemsPath != undefined ? t.itemsPath : "images/data/locale/ru/amf/throne_room_items.amf";
    this.watchMode = this.guestMode = t.Guest != undefined ? t.Guest == "1" : false;
    canvas.data.manor.throne.Prototypes.init();
    this.userData = new canvas.data.manor.throne.UserData;
    var e;
    var a;
    if (this.guestMode && t.ThroneRoomItems) {
        if (t.throne_room_background)
            this.userData.throneRoomBack = t.throne_room_background;
        if (t.throne_picture)
            this.userData.throneRoomFront = t.throne_picture;
        if (t.throne_room_throne_layer)
            this.userData.throneRoomFrontLayerIndex = t.throne_room_throne_layer;
        this.shopItems = new Array;
        this.userData.items = new Array;
        var i = JSON.parse(t.ThroneRoomItems);
        i.push(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID);
        if (i && i.length) {
            var a, s, n = i.length;
            for (a = 0; a < n; a++) {
                s = i[a];
                e = new canvas.data.manor.throne.ItemData(s);
                e.isActive = true;
                e.mode = canvas.data.manor.throne.ItemData.MODE_MY;
                this.userData.items.push(e)
            }
        }
    }
}
;
canvas.data.manor.DThroneRoomData.prototype.init = function() {
    canvas.data.manor.throne.Prototypes.storeTypePrototypes(canvas.ResourceLoader.get("throne_room_types"));
    canvas.data.manor.throne.Prototypes.storeItemPrototypes(canvas.ResourceLoader.get("throne_room_items"))
}
;
canvas.data.manor.DThroneRoomData.prototype.parseShopItems = function(t) {
    canvas.data.manor.throne.Prototypes.storeArtifactPrototypes(t.artikul_hash);
    canvas.data.manor.throne.Prototypes.storeArtifactPrototypes(t.badges_artikuls);
    this.shopItems = new Array;
    var e, a;
    for (a in t.artikul_hash) {
        e = t.artikul_hash[a];
        if (e)
            this.shopItems.push(canvas.data.manor.throne.Serializer.deserializeShopItem(e))
    }
    this.updateActiveShopItems()
}
;
canvas.data.manor.DThroneRoomData.prototype.parseConf = function(t) {
    this.userData.throneRoomBack = t.throne_room_background;
    canvas.data.manor.throne.Prototypes.getItemPrototype(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID).picture = canvas.data.manor.throne.Prototypes.getTypePrototype(canvas.data.manor.throne.Prototypes.THRONE_TYPE_ID).imageURL = t.throne_picture;
    canvas.data.manor.throne.Prototypes.getTypePrototype(canvas.data.manor.throne.Prototypes.THRONE_TYPE_ID).layerIndex = t.throne_room_throne_layer;
    this.userData.items = new Array;
    var e;
    var a;
    var i, s = t.items.length;
    for (i = 0; i < s; i++) {
        e = t.items[i];
        a = canvas.data.manor.throne.Serializer.deserializeItem(e);
        if (!a.isExpired())
            this.userData.items.push(a)
    }
    a = new canvas.data.manor.throne.ItemData(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID);
    a.isActive = true;
    a.id = 0;
    a.mode = canvas.data.manor.throne.ItemData.MODE_MY;
    this.userData.items.push(a);
    this.updateActiveShopItems()
}
;
canvas.data.manor.DThroneRoomData.prototype.mergeItems = function(t) {
    var e;
    var a;
    var i, s, n, r = t.length, o;
    for (s = 0; s < r; s++) {
        e = t[s];
        i = 0;
        o = this.userData.items.length;
        for (n = 0; n < o; n++) {
            a = this.userData.items[n];
            if (parseInt(a.id) == parseInt(e.id)) {
                this.userData.items[n] = canvas.data.manor.throne.Serializer.deserializeItem(e);
                i = -1;
                break
            }
            i++
        }
        if (i >= 0) {
            this.userData.items.push(canvas.data.manor.throne.Serializer.deserializeItem(e))
        }
    }
    this.updateActiveShopItems()
}
;
canvas.data.manor.DThroneRoomData.prototype.updateActiveShopItems = function() {
    if (!this.shopItems)
        return;
    var t;
    var e = new Array;
    var a, i = this.userData.items.length;
    for (a = 0; a < i; a++) {
        t = this.userData.items[a];
        if (t.artifact)
            e.push(t.artifact.id)
    }
    i = this.shopItems.length;
    for (a = 0; a < i; a++) {
        t = this.shopItems[a];
        if (t.artifact)
            t.isActive = e.indexOf(t.artifact.id) >= 0
    }
}
;
canvas.data.manor.DThroneRoomData.prototype.parseState = function(t) {
    if (t) {
        canvas.app.manor.model.serverTime.init(t["server_time"])
    }
}
;
canvas.data.manor.DThroneRoomData.prototype.testExpiredItems = function(t) {
    var e;
    var a = false;
    var i = new Array;
    if (!this.userData.items)
        return;
    var s, n = this.userData.items.length;
    for (s = 0; s < n; s++) {
        e = this.userData.items[s];
        if (e.isExpired())
            i.push(e)
    }
    n = i.length;
    if (n > 0) {
        for (s = 0; s < n; s++) {
            e = i[s];
            this.userData.items.splice(this.userData.items.indexOf(e), 1)
        }
        this.updateActiveShopItems();
        return true
    } else {
        return false
    }
}
;
canvas.data.manor.DThroneRoomData.prototype.filterActiveItems = function(t) {
    return t.isActive
}
;
canvas.data.manor.DThroneRoomData.prototype.filterTypeItems = function(t) {
    return t.proto.type == this.currentType
}
;
canvas.data.manor.DThroneRoomData.prototype.loadHints = function() {
    var t = new Array;
    var e;
    for (var a in canvas.data.manor.throne.Prototypes.artifactPrototypes) {
        t.push(canvas.data.manor.throne.Prototypes.artifactPrototypes[a].id)
    }
    loadArtifactArtikulsData(t)
}
;
canvas.data.manor.DThroneRoomData.prototype.compareItemDataIndex = function(t, e) {
    var a;
    var i;
    if (t.artikulID > 0)
        a = canvas.data.manor.throne.Prototypes.getTypePrototype(t.proto.type);
    else
        a = canvas.data.manor.throne.Prototypes.getTypePrototype(t.id);
    if (e.artikulID > 0)
        i = canvas.data.manor.throne.Prototypes.getTypePrototype(e.proto.type);
    else
        i = canvas.data.manor.throne.Prototypes.getTypePrototype(e.id);
    if (!a || !i)
        return 0;
    return a.layerIndex < i.layerIndex ? -1 : a.layerIndex > i.layerIndex ? 1 : 0
}
;
canvas.data.manor.DUser = function() {
    this.race = 0;
    this.labour = 0;
    this.labourMax = 0;
    this.cement = 0;
    this.buildings = new Object;
    this.buildingsById = new Object;
    this.buildingsByIndex = new Array;
    this.requests;
    this.money = 0;
    this.ghost = false;
    this.workRefreshTime = 0
}
;
canvas.data.manor.DUser.prototype.getRequestById = function(t) {
    var e = this.requests.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = this.requests[i];
        if (a.id == t)
            return a
    }
    return null
}
;
canvas.data.manor.DUserBuilding = function() {
    this.id = 0;
    this.type = 1;
    this.level = 0;
    this.name = "main";
    this.labour = 0;
    this.hirePrice = 0;
    this.hireTimeLeft = 0;
    this.params = "";
    this.dichIndex = 0
}
;
canvas.data.manor.DUserBuilding.prototype.getLevel = function() {
    return this.level == 0 ? 1 : this.level
}
;
canvas.data.manor.DUserBuilding.prototype.getLevelMin = function() {
    return this.level == 0 && this.labour > 0 ? 1 : this.level
}
;
canvas.data.manor.DUserBuilding.prototype.isUnknownDich = function() {
    return this.level == 0 && canvas.data.manor.DBuilding.typeIsMultiBuild(this.type) && this.labour == 0
}
;
canvas.data.manor.DUserGame = function() {
    this.id = "";
    this.login = "";
    this.level = 0
}
;
canvas.data.manor.DWorkRequest = function() {
    this.id = "";
    this.building = "";
    this.price = 0;
    this.labour = 0
}
;
canvas.data.manor.throne.ItemData = function(t) {
    this.id;
    this.artikulID = t;
    this.expiry;
    this.isActive;
    this.mode;
    this.money;
    Object.defineProperty(this, "proto", {
        get: function() {
            return canvas.data.manor.throne.Prototypes.itemPrototypes[this.artikulID] || canvas.data.manor.throne.Prototypes.defaultItemPrototypeData
        }
    });
    Object.defineProperty(this, "artifact", {
        get: function() {
            return canvas.data.manor.throne.Prototypes.artifactPrototypes[this.proto.artifactArtikul]
        }
    })
}
;
canvas.data.manor.throne.ItemData.MODE_MY = 0;
canvas.data.manor.throne.ItemData.MODE_SHOP = 1;
canvas.data.manor.throne.ItemData.prototype.isExpired = function() {
    return this.expiry && this.expiry <= canvas.app.manor.model.serverTime.getTime()
}
;
canvas.data.manor.throne.MoneyData = function() {
    this.price;
    this.priceType;
    this.bages
}
;
canvas.data.manor.throne.ItemData.TYPE_MONEY = 1;
canvas.data.manor.throne.ItemData.TYPE_GEMS = 2;
canvas.data.manor.throne.ItemData.TYPE_DIAMONDS = 3;
canvas.data.manor.throne.MoneyData.prototype.getMoney = function() {
    return this.priceType == canvas.data.manor.throne.ItemData.TYPE_MONEY ? price : 0
}
;
canvas.data.manor.throne.MoneyData.prototype.getDiamonds = function() {
    return this.priceType == canvas.data.manor.throne.ItemData.TYPE_DIAMONDS ? price : 0
}
;
canvas.data.manor.throne.MoneyData.prototype.getBageArtikul = function() {
    var t;
    var e, a = this.bages.length;
    for (e = 0; e < a; e++) {
        t = this.bages[e];
        if (t.type == "artifact")
            return t.artikul_id
    }
    return 0
}
;
canvas.data.manor.throne.MoneyData.prototype.getBageCount = function() {
    var t;
    var e, a = this.bages.length;
    for (e = 0; e < a; e++) {
        t = this.bages[e];
        if (t.type == "artifact")
            return t.cnt
    }
    return 0
}
;
canvas.data.manor.throne.Prototypes = {
    THRONE_TYPE_ID: 1e3,
    THRONE_ITEM_ID: 1e4,
    artifactPrototypes: {},
    itemPrototypes: {},
    typePrototypes: {},
    defaultItemPrototypeData: {},
    init: function() {
        this.defaultItemPrototypeData.id = 0;
        this.defaultItemPrototypeData.picture = "images/table.jpg"
    },
    storeTypePrototypes: function(t) {
        var e;
        var a;
        var i, s = t.length;
        for (i = 0; i < s; i++) {
            e = t[i];
            a = new Object;
            a.id = parseInt(e.id);
            a.title = e.title;
            a.posX = parseInt(e.position_x);
            a.posY = parseInt(e.position_y);
            a.layerIndex = e.layer_index;
            a.imageURL = e.default_picture;
            a.disabled = (parseInt(e.flags) & 1) != 0;
            this.typePrototypes[a.id] = a
        }
        a = new Object;
        a.id = this.THRONE_TYPE_ID;
        a.title = "Throne";
        a.posX = 0;
        a.posY = 0;
        a.layerIndex = canvas.app.manor.model.throneRoomData.userData.throneRoomFrontLayerIndex;
        a.imageURL = canvas.app.manor.model.throneRoomData.userData.throneRoomFront;
        a.disabled = true;
        this.typePrototypes[a.id] = a
    },
    storeItemPrototypes: function(t) {
        var e;
        var a;
        var i, s = t.length;
        for (i = 0; i < s; i++) {
            e = t[i];
            a = new Object;
            a.id = parseInt(e.id);
            a.type = parseInt(e.type_id);
            a.picture = e.picture;
            a.artifactArtikul = e.artifact_artikul_id || 11764;
            this.itemPrototypes[a.id] = a
        }
        a = new Object;
        a.id = this.THRONE_ITEM_ID;
        a.type = this.THRONE_TYPE_ID;
        a.picture = canvas.app.manor.model.throneRoomData.userData.throneRoomFront;
        this.itemPrototypes[a.id] = a
    },
    storeArtifactPrototypes: function(t) {
        var e;
        var a;
        var i;
        for (i in t) {
            if (typeof t[i] == "function")
                continue;
            e = t[i];
            a = new Object;
            a.id = parseInt(e.id);
            a.title = e.title;
            a.picture = e.picture;
            this.artifactPrototypes[a.id] = a
        }
    },
    getTypePrototype: function(t) {
        return this.typePrototypes[t]
    },
    getItemPrototype: function(t) {
        return this.itemPrototypes[t]
    },
    getArtifactPrototype: function(t) {
        return this.artifactPrototypes[t]
    }
};
canvas.data.manor.throne.Serializer = {
    deserializeItem: function(t) {
        var e = new canvas.data.manor.throne.ItemData(parseInt(t.artikul_id));
        e.isActive = parseInt(t.is_installed) == 1;
        e.id = parseInt(t.id);
        e.mode = canvas.data.manor.throne.ItemData.MODE_MY;
        e.expiry = parseInt(t.expire_time);
        return e
    },
    deserializeShopItem: function(t) {
        var e = parseInt(t.id);
        var a;
        for (str in canvas.data.manor.throne.Prototypes.itemPrototypes) {
            a = canvas.data.manor.throne.Prototypes.itemPrototypes[str];
            if (a.artifactArtikul == e)
                break
        }
        var i = new canvas.data.manor.throne.ItemData(a ? a.id : 1);
        i.id = parseInt(t.store_artikul_id);
        i.mode = canvas.data.manor.throne.ItemData.MODE_SHOP;
        i.money = new canvas.data.manor.throne.MoneyData;
        i.money.price = parseFloat(t.price);
        i.money.priceType = parseInt(t.price_type);
        i.expiry = parseInt(t.validity);
        i.money.bages = new Array;
        var s;
        if (t.badge_data) {
            var n, r = t.badge_data.badges.length;
            for (n = 0; n < r; n++) {
                s = t.badge_data.badges[n];
                i.money.bages.push(s)
            }
        }
        return i
    }
};
canvas.data.manor.throne.UserData = function() {
    this.throneRoomBack;
    this.throneRoomFront;
    this.throneRoomFrontLayerIndex;
    this.items;
    this.restrictions;
    this.redressItemID
}
;
canvas.app.CanvasApp = function(t, e, a, i, s, n, r, o, l) {
    if (a == undefined)
        a = true;
    if (n == undefined)
        n = false;
    this.topWindow = r == undefined ? window : r;
    this._fpsInterval;
    this._fps = 0;
    Object.defineProperty(this, "fps", {
        get: function() {
            return this._fps
        },
        set: function(t) {
            this._fps = t;
            clearInterval(this._fpsInterval);
            if (this._fps > 0) {
                this._fpsInterval = setInterval(this.handlerEnterFrame.bind(this), 1e3 / this._fps)
            }
        }
    });
    this.par = typeof t == "string" ? canvas.Functions.decodeUrlParams(t.replace(/\+/g, "%20")) : t;
    this.par.width = parseInt(this.par.width) || this.defaultWidth;
    this.par.height = parseInt(this.par.height) || this.defaultHeight;
    this.par.parent = e ? e : {
        style: {},
        setAttribute: function() {},
        addEventListener: function() {}
    };
    this.par.parent.style.userSelect = "none";
    canvas.px.utils.skipHello();
    if (!n) {
        this.app = new canvas.px.Application(this.par.width || 100,this.par.height || 100,{
            transparent: true,
            antialias: o == undefined ? false : o,
            preserveDrawingBuffer: l == undefined ? false : l
        });
        this.par.parent.appendChild(this.app.view);
        if (r != undefined) {
            this.app.renderer.plugins.interaction.removeEvents();
            this.app.renderer.plugins.interaction.topWindow = r;
            this.app.renderer.plugins.interaction.interactionDOMElement = this.app.view;
            this.app.renderer.plugins.interaction.addEvents()
        }
    }
    this.par.parent.setAttribute("tabindex", 0);
    this.par.parent.style.outline = "none";
    this.width = this.par.width;
    this.height = this.par.height;
    this.widthOffset = i || 0;
    this.heightOffset = s || 0;
    this.stage = this.app ? this.app.stage : new canvas.px.Container;
    this.root = new canvas.px.Container;
    this.stage.addChild(this.root);
    var c = canvas.isMobile();
    this.topWindow.document.addEventListener(c ? "pointermove" : "mousemove", this.handlerStageMouseMove);
    this.topWindow.addEventListener(c ? "pointerup" : "mouseup", this.handlerStageMouseUp);
    this.topWindow.document.addEventListener("mousewheel", this.handlerWheelHandler);
    this.destroy = this.destroy.bind(this);
    window.addEventListener("unload", this.destroy);
    this.stage.interactive = true;
    canvas.ResourceLoader.init();
    canvas.Config.init();
    if (a) {
        this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader");
        this.preloader.gotoAndStop(1);
        if (this.preloader.ready) {
            this.preloaderReady()
        } else {
            canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this)
        }
    } else {
        this.preInit()
    }
    this.handlerMouseDownBinded = this.handlerMouseDown.bind(this);
    this.handlerMouseOutBinded = this.handlerMouseOut.bind(this);
    this.handlerDragStartBinded = this.handlerDragStart.bind(this);
    this.resizeBinded = this.resize.bind(this);
    this.par.parent.addEventListener(c ? "pointerdown" : "mousedown", this.handlerMouseDownBinded);
    this.par.parent.addEventListener(c ? "pointerout" : "mouseout", this.handlerMouseOutBinded);
    this.par.parent.addEventListener("dragstart", this.handlerDragStartBinded);
    this.topWindow.addEventListener("resize", this.resizeBinded);
    this.render = this.render.bind(this);
    this.resize()
}
;
canvas.app.CanvasApp.prototype.preloaderReady = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this);
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.handlerProgress, this);
    this.stage.addChild(this.preloader);
    this.preInit()
}
;
canvas.app.CanvasApp.prototype.preInit = function() {
    if (this.par.ux_conf) {
        var t = this.par.ux_conf.split(",");
        var e = [];
        for (var a = 0; a < t.length; a++)
            e.push(["ux" + a, canvas.Config.wwwPath + t[a]]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preInitReady, this);
        canvas.ResourceLoader.add(e)
    } else {
        this.init()
    }
}
;
canvas.app.CanvasApp.prototype.preInitReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preInitReady, this);
    if (canvas.ResourceLoader.uxReady) {
        this.uxReady()
    } else if (canvas.ResourceLoader.ux) {
        canvas.EventManager.addEventListener(canvas.Event.UX_READY, null, this.uxReady, this)
    } else {
        canvas.Functions.parseUx();
        this.uxReady()
    }
}
;
canvas.app.CanvasApp.prototype.uxReady = function() {
    canvas.EventManager.removeEventListener(canvas.Event.UX_READY, null, this.uxReady, this);
    this.init()
}
;
canvas.app.CanvasApp.prototype.init = function(t) {
    if (t == undefined)
        t = [];
    if (!canvas.Translator.isInited && this.par.locale_file) {
        canvas.Translator.lang = this.par.locale_file.match(/locale\/([a-z]{2})\//i)[1];
        t.push(["translate", canvas.Config.wwwPath + this.par.locale_file])
    }
    canvas.Config.initLang(canvas.Translator.lang);
    for (var e = 0; e < t.length; e++) {
        for (var a = 0; a < t[e].length; a++) {
            t[e][a] = t[e][a].replace("{canvas.Config.langPath}", canvas.Config.langPath)
        }
    }
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    canvas.ResourceLoader.add(t)
}
;
canvas.app.CanvasApp.prototype.ready = function(t) {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.handlerProgress, this);
    var e = canvas.ResourceLoader.get("translate");
    if (!canvas.Translator.isInited) {
        canvas.Translator.init(e && e.data ? e.data : null)
    }
    if (this.preloader) {
        this.preloader.destroy();
        delete this.preloader
    }
    if (this.app)
        this.app.ticker.stop()
}
;
canvas.app.CanvasApp.prototype.handlerProgress = function(t) {
    this.preloader.gotoAndStop(Math.round(t.params.progress))
}
;
canvas.app.CanvasApp.prototype.handlerStageMouseMove = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_MOVE, null, {
        x: t.clientX,
        y: t.clientY,
        mouseData: t
    })
}
;
canvas.app.CanvasApp.prototype.handlerStageMouseUp = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_UP, null, {
        x: t.clientX,
        y: t.clientY,
        mouseData: t
    })
}
;
canvas.app.CanvasApp.prototype.handlerWheelHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_WHEEL, null, {
        wheelDelta: t.wheelDelta
    })
}
;
canvas.app.CanvasApp.prototype.handlerEnterFrame = function() {
    if (this.app && !this.animationRequested) {
        this.animationRequested = true;
        requestAnimationFrame(this.render)
    }
}
;
canvas.app.CanvasApp.prototype.render = function() {
    if (this.app)
        this.app.render();
    this.animationRequested = false
}
;
canvas.app.CanvasApp.prototype.handlerMouseDown = function(t) {}
;
canvas.app.CanvasApp.prototype.handlerMouseOut = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_OUT)
}
;
canvas.app.CanvasApp.prototype.handlerDragStart = function(t) {
    t.preventDefault();
    t.stopPropagation()
}
;
canvas.app.CanvasApp.prototype.focus = function() {
    this.par.parent.focus()
}
;
canvas.app.CanvasApp.prototype.externalKey = function(t) {
    canvas.InputManager.externalKey(t)
}
;
canvas.app.CanvasApp.prototype.resize = function() {
    if (this.app)
        this.app.renderer.resize(0, 0);
    this.width = (this.par.width ? this.par.width : this.par.parent.clientWidth) + this.widthOffset;
    this.height = (this.par.height ? this.par.height : this.par.parent.clientHeight) + this.heightOffset;
    if (this.preloader) {
        this.preloader.position.set(Math.round(this.width * .5), Math.round(this.height * .5))
    }
    if (this.app)
        this.app.renderer.resize(this.width, this.height)
}
;
canvas.app.CanvasApp.prototype.destroy = function(t, e) {
    if (t == undefined)
        t = true;
    if (e == undefined)
        e = true;
    this.fps = 0;
    this.topWindow.document.removeEventListener("mousemove", this.handlerStageMouseMove);
    this.topWindow.removeEventListener("mouseup", this.handlerStageMouseUp);
    this.topWindow.document.removeEventListener("mousewheel", this.handlerWheelHandler);
    if (this.par.parent && this.par.parent.removeEventListener) {
        this.par.parent.removeEventListener("mousedown", this.handlerMouseDownBinded);
        this.par.parent.removeEventListener("mouseout", this.handlerMouseOutBinded);
        this.par.parent.removeEventListener("dragstart", this.handlerDragStartBinded)
    }
    this.topWindow.removeEventListener("resize", this.resizeBinded);
    window.removeEventListener("unload", this.destroy);
    if (t)
        this.destroyResources();
    if (this.app) {
        if (this.par.parent)
            this.par.parent.removeChild(this.app.view);
        var a = this.app;
        this.app = null;
        a.destroy(true, true)
    }
    delete this.par.parent;
    delete this.par;
    if (e)
        canvas.EventManager.destroy();
    canvas.Functions.destroy();
    canvas.px.Container.prototype.destroy.apply(this.stage, [true])
}
;
canvas.app.CanvasApp.prototype.destroyResources = function() {
    canvas.px.Loader.destroy();
    canvas.ResourceLoader.destroy();
    canvas.px.utils.destroyTextureCache()
}
;
canvas.app.CanvasAvatar = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0)
}
;
canvas.app.CanvasAvatar.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasAvatar.prototype.init = function() {
    this.model = new canvas.app.avatar.Model(this.par);
    canvas.app.avatar.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP, canvas.Const.FONT_TAHOMA_10_STROKE, canvas.Const.FONT_TAHOMA_10_BOLD_SHARP];
    var e = [["ui", canvas.Config.ui + "main.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasAvatar.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.hintManager = new canvas.utils.HintManager;
    this.main = new canvas.app.avatar.Main(this.model,this.hintManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20
}
;
canvas.app.CanvasAvatar.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasAvatar.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasAvatar.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.CanvasAvatar.prototype.swfData = function(t, e) {
    if (this.main) {
        this.main.swfData(e)
    }
}
;
canvas.app.avatar.log = function(t, e) {
    canvas.Log.add(canvas.Log.AVATAR, t, e)
}
;
canvas.app.CanvasBalance = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0)
}
;
canvas.app.CanvasBalance.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBalance.prototype.init = function() {
    var t = [["ui", canvas.Config.ui + "balance.json"], canvas.Config.fontsPath + canvas.Const.FONT_IFLASH + ".fnt", canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_10_STROKE + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
;
canvas.app.CanvasBalance.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.useTahoma = canvas.Translator.getLang() != canvas.Const.LANG_RU;
    this.main = new canvas.px.Container;
    this.root.addChild(this.main);
    this.start()
}
;
canvas.app.CanvasBalance.prototype.start = function() {
    var t = new canvas.px.Container;
    var e = this.par.scale > 0;
    this.main.addChild(t);
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", e ? "bar_empty" : "bar_full")));
    var a = this.par.labels.split("|");
    var i = parseInt(this.par.val) / 100;
    var s = parseInt(this.par.val);
    var n = parseInt(this.par.diff);
    var r = Math.max(0, Math.min(1, i));
    var o = new canvas.ui.Progress;
    o.setSize(200, 40);
    o.position.set(14, 0);
    var l = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", e ? "bar_full" : "bar_empty"));
    t.addChild(l);
    t.addChild(o);
    l.mask = o.sprite;
    o.progress = r;
    if (r > 0 && r < 1) {
        var c = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "center"));
        c.position.set(o.sprite.width + 7, 7);
        t.addChild(c)
    }
    this.hintContainer = new canvas.px.Container;
    var p = this.useTahoma ? 13 : 15;
    var h = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"left"));
    h.text = e ? a[1] : a[0];
    h.position.set(20, p);
    var d = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"right"));
    d.text = e ? a[0] : a[1];
    d.position.set(this.width - 120, p);
    var v = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"center"));
    v.text = n > 0 ? "+" + n : n;
    v.position.set(Math.round((this.width - 100) * .5), p);
    t.interactive = true;
    t.mouseover = this.overHandler.bind(this);
    t.mouseout = this.outHandler.bind(this);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasBalance.prototype.overHandler = function() {
    this.main.addChild(this.hintContainer);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasBalance.prototype.outHandler = function() {
    this.main.removeIfExist(this.hintContainer);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasBarber = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0)
}
;
canvas.app.CanvasBarber.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBarber.prototype.init = function() {
    var t = [["ui", "{canvas.Config.langPath}barber/barber.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
;
canvas.app.CanvasBarber.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container;
    this.root.addChild(this.main);
    this.start();
    this.fps = 30
}
;
canvas.app.CanvasBarber.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasBarber.prototype.start = function() {
    this.main.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.barber = this.main.addChild(new canvas.app.barber.Barber(this.par,this));
    this.barber.y = 54;
    this.title = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769465,130,16,"center"));
    this.title.text = canvas.Translator.getText(3027);
    this.title.position.set(180, 26)
}
;
canvas.app.CanvasBattle = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0);
    this.createLogTitle()
}
;
canvas.app.CanvasBattle.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBattle.prototype.init = function() {
    this.model = new canvas.app.battle.Model(this.par);
    canvas.app.battle.model = this.model;
    var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_9_STROKE, canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_9_BOLD, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_ARIAL_11, canvas.Const.FONT_ARIAL_11_BOLD, canvas.Const.FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE, canvas.Const.FONT_TAHOMA_20_BOLD_STROKE];
    var e = [["locale", "{canvas.Config.langPath}locale.json"], ["ui", canvas.Config.ui + "battle.json"], ["bg", this.model.bgLink], ["eff_conf", this.model.effConfLink], canvas.Config.effects, canvas.Config.effectsPath + "hourglass.mci"];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasBattle.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    var t = canvas.ResourceLoader.get("eff_conf");
    this.model.parseEffectsConf(t ? t.data : "");
    this.hintManager = new canvas.utils.HintManager;
    this.main = new canvas.app.battle.Main(this.model,this.hintManager);
    this.root.addChild(this.main);
    this.main.resize(this.width, this.height);
    this.fps = this.model.fps
}
;
canvas.app.CanvasBattle.prototype.swfData = function(t, e) {
    this.main.swfData(t, e)
}
;
canvas.app.CanvasBattle.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasBattle.prototype.handlerMouseDown = function() {
    canvas.app.CanvasApp.prototype.handlerMouseDown.call(this);
    this.focus()
}
;
canvas.app.CanvasBattle.prototype.focus = function() {
    canvas.app.CanvasApp.prototype.focus.call(this)
}
;
canvas.app.CanvasBattle.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasBattle.prototype.createLogTitle = function() {
    var t = this.app.view.getContext("webgl") || this.app.view.getContext("experimental-webgl");
    if (t) {
        var e = t.getExtension("WEBGL_debug_renderer_info");
        canvas.Log.title += t.getParameter(e.UNMASKED_RENDERER_WEBGL)
    } else {
        canvas.Log.title += "WEBGL not available"
    }
}
;
canvas.app.battle.log = function(t, e) {
    canvas.Log.add(canvas.Log.BATTLE, t, e)
}
;
canvas.app.CanvasBirthday = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0, false, _top().window)
}
;
canvas.app.CanvasBirthday.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBirthday.prototype.preInit = function() {
    if (this.par.ux_conf == undefined)
        this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
;
canvas.app.CanvasBirthday.prototype.init = function() {
    this.model = new canvas.app.birthday.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.birthday.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_14_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["locale", "{canvas.Config.langPath}locale.json"], ["birthday", canvas.Config.ui + "birthday.json"], ["birthday_conf", canvas.app.birthday.Const.configUrl]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasBirthday.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui"))
        canvas.ResourceLoader.addSubAlias("birthday", "ui");
    this.main = new canvas.app.birthday.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 20
}
;
canvas.app.CanvasBirthday.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasBirthday.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.birthday.log = function(t, e) {
    canvas.Log.add(canvas.Log.BIRTHDAY, t, e)
}
;
canvas.app.CanvasCasino = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e)
}
;
canvas.app.CanvasCasino.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasCasino.prototype.init = function() {
    this.model = new canvas.app.casino.Model(this.par);
    canvas.app.casino.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var t = [canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_ARIAL_11, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["ui", canvas.Config.ui + "casino/casino.json"], ["title_jackpot", "{canvas.Config.langPath}casino/title_jackpot.png"], ["title_prize", "{canvas.Config.langPath}casino/title_prize.png"], ["locale", "{canvas.Config.langPath}casino/casino.json"], ["front_mask", canvas.Config.ui + "casino/front_mask.png"], ["dragon_mask", canvas.Config.ui + "casino/dragon_mask.png"], ["play_button_mask", canvas.Config.ui + "casino/play_button_mask.png"], canvas.Config.effects];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasCasino.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.casino.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30
}
;
canvas.app.CanvasCasino.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasCasino.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasCasino.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.casino.log = function(t, e) {
    canvas.Log.add(canvas.Log.CASINO, t, e)
}
;
canvas.app.CanvasClanCitadel = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, -4, -4)
}
;
canvas.app.CanvasClanCitadel.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasClanCitadel.prototype.init = function() {
    this.model = new canvas.app.clanCitadel.Model(this.par);
    canvas.app.clanCitadel.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["ui", canvas.Config.ui + "clan_citadel.json"], ["buildings", this.model.clanBuildingsAmf], ["resources", this.model.clanResourcesAmf], ["sanctuary", this.model.sanctuaryAmf], ["config", this.model.configUrl], ["configSanctuary", this.model.configSanctuaryUrl], canvas.Config.effectsAtlasPath + "citadel_back.json", canvas.Config.effectsPath + "citadel_back.mci"];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasClanCitadel.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.init();
    this.main = new canvas.app.clanCitadel.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize()
}
;
canvas.app.CanvasClanCitadel.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(this.model.paused ? canvas.app.clanCitadel.Event.ENTER_FRAME_WIN : canvas.app.clanCitadel.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasClanCitadel.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.width = this.width > canvas.app.clanCitadel.Const.MAP_WIDTH ? canvas.app.clanCitadel.Const.MAP_WIDTH : this.width;
        this.model.height = this.height > canvas.app.clanCitadel.Const.MAP_HEIGHT ? canvas.app.clanCitadel.Const.MAP_HEIGHT : this.height;
        if (this.main)
            this.main.resize(this.width, this.height)
    }
}
;
canvas.app.clanCitadel.log = function(t, e) {
    canvas.Log.add(canvas.Log.CLAN_CITADEL, t, e)
}
;
canvas.app.CanvasClanWar = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, -2);
    canvas.app.CanvasClanWar.App = this.app
}
;
canvas.app.CanvasClanWar.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasClanWar.prototype.init = function() {
    this.model = new canvas.app.clanWar.Model(this.par);
    canvas.app.clanWar.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var t = [canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["ui", canvas.Config.ui + "clan_war.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasClanWar.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.clanWar.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize()
}
;
canvas.app.CanvasClanWar.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasClanWar.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.w = this.model.width = this.width < canvas.app.clanWar.Const.WIDTH ? canvas.app.clanWar.Const.WIDTH : this.width;
        this.model.h = this.model.height = this.height < canvas.app.clanWar.Const.HEIGHT ? canvas.app.clanWar.Const.HEIGHT : this.height;
        this.main.resize()
    }
}
;
canvas.app.CanvasClanWar.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.clanWar.log = function(t, e) {
    canvas.Log.add(canvas.Log.CLAN_WAR, t, e)
}
;
canvas.app.CanvasCompass = function(t, e, a) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0, true);
    document.onkeydown = null;
    document.onkeyup = null;
    this.onlyModel = a == undefined ? false : a
}
;
canvas.app.CanvasCompass.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasCompass.prototype.init = function() {
    this.model = new canvas.app.compass.Model(this.par);
    canvas.app.compass.model = canvas.app.world.model = this.model;
    var t = [["config", this.model.CfgLink], ["config_world", this.model.CfgWorldLink]];
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    canvas.ResourceLoader.add(t)
}
;
canvas.app.CanvasCompass.prototype.preReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    this.model.parse_world_confing(canvas.ResourceLoader.get("config_world").data);
    canvas.app.CanvasApp.prototype.init.call(this, this.model.areas_xml)
}
;
canvas.app.CanvasCompass.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.initConfig();
    this.model.parse_areas();
    if (!this.onlyModel)
        this.main = new canvas.app.compass.Main(this.model,this.par.parent);
    this.fps = 0;
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.READY)
}
;
canvas.app.CanvasCompass.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasCompass.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.saveWindowSize(window.outerWidth, window.outerHeight)
    }
}
;
canvas.app.compass.log = function(t, e) {
    canvas.Log.add(canvas.Log.COMPASS, t, e)
}
;
canvas.app.CanvasCube = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true)
}
;
canvas.app.CanvasCube.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasCube.prototype.init = function() {
    this.model = new canvas.app.cube.Model(this.par);
    canvas.app.cube.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var t = [canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12];
    var e = [["locale", "{canvas.Config.langPath}locale.json"], ["ui", canvas.Config.ui + "cube.json"], canvas.Config.effectsPath + "cube.mci", canvas.Config.effectsAtlasPath + "cube.json"];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasCube.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.cube.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30
}
;
canvas.app.CanvasCube.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.cube.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasCube.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasCube.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.cube.log = function(t, e) {
    canvas.Log.add(canvas.Log.CUBE, t, e)
}
;
canvas.app.CanvasDiceGame = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0, false, _top().window)
}
;
canvas.app.CanvasDiceGame.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasDiceGame.prototype.preInit = function() {
    if (this.par.ux_conf == undefined)
        this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
;
canvas.app.CanvasDiceGame.prototype.init = function() {
    this.model = new canvas.app.diceGame.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.diceGame.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_15_BOLD_STROKE];
    var e = [["diceGame", canvas.Config.ui + "dice_game.json"], ["conf", this.model.entryPoint + "?object=" + canvas.app.diceGame.Const.REQUEST_OBJECT + "&action=" + canvas.app.diceGame.Const.REQUEST_INIT + "&json_mode_on=1"], canvas.Config.effectsPath + "dice1.mci", canvas.Config.effectsPath + "dice2.mci", canvas.Config.effectsPath + "dice3.mci", canvas.Config.effectsPath + "dice4.mci", canvas.Config.effectsPath + "dice5.mci", canvas.Config.effectsPath + "dice6.mci"];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasDiceGame.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui"))
        canvas.ResourceLoader.addSubAlias("diceGame", "ui");
    this.model.parse(JSON.parse(canvas.ResourceLoader.get("conf").data)[canvas.app.diceGame.Const.REQUEST_OBJECT + "|" + canvas.app.diceGame.Const.REQUEST_INIT]);
    this.main = new canvas.app.diceGame.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30
}
;
canvas.app.CanvasDiceGame.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null)
        this.fps = 0
}
;
canvas.app.CanvasDiceGame.prototype.destroy = function() {
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false)
}
;
canvas.app.CanvasDiceGame.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.diceGame.log = function(t, e) {
    canvas.Log.add(canvas.Log.DICE_GAME, t, e)
}
;
canvas.app.CanvasEventProgress = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0)
}
;
canvas.app.CanvasEventProgress.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasEventProgress.prototype.init = function() {
    this.smallSize = this.height < 32;
    var t = [["ui", canvas.Config.ui + "event_progress.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
;
canvas.app.CanvasEventProgress.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container;
    this.root.addChild(this.main);
    setTimeout(this.start.bind(this), 10)
}
;
canvas.app.CanvasEventProgress.prototype.start = function() {
    var t = new canvas.px.Container;
    this.main.addChild(t);
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    var e = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16771494,213,17,"center");
    t.addChild(e);
    e.position.set(112, 3);
    var a = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,0,396,17,"center");
    t.addChild(a);
    a.position.set(20, 22);
    var i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,0,396,17,"center");
    t.addChild(i);
    i.position.set(20, 75);
    var s = parseInt(this.par.type1);
    var n = parseInt(this.par.type2);
    var r, o, l, c;
    if (this.par.labels != undefined) {
        r = this.par.labels.split("|");
        o = r[0];
        l = r[1];
        c = r[2]
    }
    e.text = o;
    a.text = s > 0 ? l : "";
    i.text = n > 0 ? c : "";
    var p = a.y + (a.text == "" ? 15 : a.textHeight + 2);
    var h = t.addChild(this.createLine(s));
    h.position.set(38, p);
    h.setProgress(this.par.cur_val1, this.par.max_val1);
    p += h.getHeight() + 5;
    i.y = p + 2;
    p += i.textHeight + 4;
    var d = t.addChild(this.createLine(n));
    d.position.set(38, p);
    d.setProgress(this.par.cur_val2, this.par.max_val2);
    if (s <= 0) {
        t.removeIfExist(h);
        t.removeIfExist(a)
    }
    if (n <= 0) {
        t.removeIfExist(d);
        t.removeIfExist(i)
    }
    if (n == 0 && s > 0) {
        h.y = 60;
        a.y = 42
    }
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasEventProgress.prototype.createLine = function(t) {
    switch (t) {
    case 1:
        return this.createLine1();
    case 2:
        return this.createLine2();
    case 3:
        return this.createLine3();
    default:
        return this.createLine0()
    }
}
;
canvas.app.CanvasEventProgress.prototype.createLine0 = function() {
    var t = new canvas.px.Container;
    t.setProgress = function(t, e) {}
    ;
    t.getHeight = function() {
        return 0
    }
    ;
    return t
}
;
canvas.app.CanvasEventProgress.prototype.createLine1 = function() {
    var t = new canvas.px.Container;
    var e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    e.position.set(1, 30);
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_red")));
    e.position.set(285, 30);
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line1")));
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line1_mask")));
    t.msk = t.addChild(new canvas.px.Mask(348,28));
    t.msk.position.set(6, 1);
    e.mask = t.msk;
    t.currentField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,11468800,57,17,"center"));
    t.currentField.position.set(6, 30);
    t.maxField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16771494,57,17,"center"));
    t.maxField.position.set(296, 30);
    t.cursor = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pointer")));
    t.cursor.position.set(12, 0);
    t.setProgress = function(t, e) {
        this.currentField.text = t;
        this.maxField.text = e;
        this.msk.scale.x = t / e;
        this.cursor.x = this.msk.x + this.msk.width - 5
    }
    ;
    t.getHeight = function() {
        return this.msk._height + 3
    }
    ;
    return t
}
;
canvas.app.CanvasEventProgress.prototype.createLine2 = function() {
    var t = new canvas.px.Container;
    var e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    e.position.set(1, 30);
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    e.scale.set(-1, 1);
    e.position.set(360, 30);
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line2")));
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line2_mask")));
    t.msk = t.addChild(new canvas.px.Mask(348,28));
    t.msk.position.set(6, 1);
    e.mask = t.msk;
    t.currentField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15716,57,17,"center"));
    t.currentField.position.set(6, 30);
    t.maxField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,11468800,57,17,"center"));
    t.maxField.position.set(296, 30);
    t.cursor = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pointer")));
    t.cursor.position.set(12, 0);
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hum_icon")));
    e.position.set(5, 6);
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mag_icon")));
    e.position.set(336, 6);
    t.setProgress = function(t, e) {
        this.currentField.text = t + "%";
        this.maxField.text = (100 - t).toString() + "%";
        this.msk.scale.x = t / 100;
        this.cursor.x = this.msk.x + this.msk.width - 5
    }
    ;
    t.getHeight = function() {
        return this.msk._height + 3
    }
    ;
    return t
}
;
canvas.app.CanvasEventProgress.prototype.createLine3 = function() {
    var t = new canvas.px.Container;
    var e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3")));
    e.position.set(-7, 0);
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3_mask")));
    e.position.set(-7, 0);
    t.msk_hum = t.addChild(new canvas.px.Mask(358,19));
    t.msk_hum.position.set(-1, 1);
    e.mask = t.msk_hum;
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3_mask")));
    e.position.set(-7, 0);
    t.msk_mag = t.addChild(new canvas.px.Mask(358,19));
    t.msk_mag.position.set(-1, 21);
    e.mask = t.msk_mag;
    t.cursor_hum = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hum_icon")));
    t.cursor_hum.position.set(78, 1);
    t.cursor_mag = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mag_icon")));
    t.cursor_mag.position.set(219, 20);
    t.setProgress = function(t, e) {
        this.msk_hum.scale.x = t / 100;
        this.msk_mag.scale.x = e / 100;
        this.cursor_hum.x = this.msk_hum.x + this.msk_hum.width - 5;
        this.cursor_mag.x = this.msk_mag.x + this.msk_mag.width - 5
    }
    ;
    t.getHeight = function() {
        return this.msk_hum._height + this.msk_mag._height - 5
    }
    ;
    return t
}
;
canvas.app.CanvasFirstBattle = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0)
}
;
canvas.app.CanvasFirstBattle.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasFirstBattle.prototype.init = function() {
    this.model = new canvas.app.firstBattle.Model(this.par);
    canvas.app.firstBattle.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_9_STROKE, canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_9_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE, canvas.Const.FONT_TAHOMA_20_BOLD_STROKE];
    var e = [["locale", "{canvas.Config.langPath}locale.json"], ["ui", canvas.Config.ui + "first_battle.json"], canvas.Config.spellsPath + "_SP1.mci", canvas.Config.spellsPath + "_SP2.mci", canvas.Config.spellsPath + "_SP4.mci", canvas.Config.spellsPath + "_SP5.mci", canvas.Config.spellsPath + "_SP6.mci", canvas.Config.spellsAtlasPath + "spells2.json", canvas.Config.spellsAtlasPath + "spells4.json", canvas.Config.spellsAtlasPath + "spells7.json", canvas.Config.botsPath + "img" + this.model.enemyParams.sk + "/img" + this.model.enemyParams.sk + ".mci", canvas.Config.botsPath + "img" + this.model.enemyParams.sk + "/img" + this.model.enemyParams.sk + ".json", canvas.Config.skPath + "sk.json"];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasFirstBattle.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.hintManager = new canvas.utils.HintManager;
    this.main = new canvas.app.firstBattle.Main(this.model,this.hintManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20
}
;
canvas.app.CanvasFirstBattle.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasFirstBattle.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.firstBattle.log = function(t, e) {
    canvas.Log.add(canvas.Log.FIRST_BATTLE, t, e)
}
;
canvas.app.CanvasHunt = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0, undefined, undefined, true);
    canvas.app.CanvasHunt.App = this.app;
    document.body.style.overflow = "hidden"
}
;
canvas.app.CanvasHunt.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasHunt.prototype.init = function() {
    this.model = new canvas.app.hunt.Model(this.par);
    canvas.app.hunt.model = canvas.app.location.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_10_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["ui", canvas.Config.ui + "hunt.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    if (this.model.mapFile) {
        var i = this.model.mapFile.split(".swf")[0];
        e.push(["map_bot", i + "_mask.dat"]);
        e.push(["map_plant", i + "_mask_farm01.dat"]);
        e.push(["map_stone", i + "_mask_farm02.dat"]);
        e.push(["map_fish", i + "_mask_farm04.dat"]);
        e.push(["map_mci", canvas.Config.huntMapsPath + this.model.mapName + "/" + this.model.mapName + ".mci"]);
        e.push(["map", canvas.Config.huntMapsPath + this.model.mapName + "/" + this.model.mapName + ".json"]);
        e.push(["first_data", this.model.reqConfURL])
    }
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasHunt.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.InputManager.init();
    this.model.prep_language();
    this.hintManager = new canvas.utils.HintManager;
    this.windowsManager = new canvas.utils.WindowsManager;
    this.main = new canvas.app.hunt.Main(this.model,this.hintManager,this.windowsManager);
    this.model.init(this.main);
    this.root.addChild(this.main);
    this.main.view.init();
    this.fps = 30;
    this.resize();
    canvas.utils.ABController.init(this, "hunt")
}
;
canvas.app.CanvasHunt.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasHunt.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main)
        this.main.resize(this.width, this.height)
}
;
canvas.app.CanvasHunt.prototype.handlerMouseDown = function() {
    canvas.app.CanvasApp.prototype.handlerMouseDown.call(this);
    this.focus()
}
;
canvas.app.CanvasHunt.prototype.focus = function() {
    canvas.app.CanvasApp.prototype.focus.call(this)
}
;
canvas.app.CanvasHunt.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.hunt.log = function(t, e) {
    canvas.Log.add(canvas.Log.HUNT, t, e)
}
;
canvas.app.CanvasInst = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0)
}
;
canvas.app.CanvasInst.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasInst.prototype.init = function() {
    this.model = new canvas.app.inst.Model(this.par);
    canvas.app.inst.model = this.model;
    canvas.app.world.model = canvas.app.inst.model;
    canvas.Config.worldPath = canvas.Config.instPath;
    canvas.app.world.Event.ENTER_FRAME = canvas.app.inst.Event.ENTER_FRAME;
    var t = [canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD];
    var e = [["ui", canvas.Config.ui + "inst.json"], ["config", this.model.ListLink]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    document.body.style.overflow = "hidden";
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    canvas.ResourceLoader.add(e)
}
;
canvas.app.CanvasInst.prototype.preReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    this.model.initConfig();
    var t = canvas.app.inst.model;
    var e = t.INS_LIST[t.ActiveIns];
    if (e) {
        canvas.app.CanvasApp.prototype.init.call(this, [["map" + e.id, t.LOCALE + "/ins_" + e.id + ".xml"]])
    }
}
;
canvas.app.CanvasInst.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.ResourceLoader.addSubAlias("ui", "world");
    this.model.init();
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager;
    this.main = new canvas.app.inst.Main(this.model,this.hintManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize()
}
;
canvas.app.CanvasInst.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.inst.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasInst.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main)
        this.main.resize(this.width, this.height)
}
;
canvas.app.CanvasInst.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.inst.log = function(t, e) {
    canvas.Log.add(canvas.Log.INST, t, e)
}
;
canvas.app.CanvasLeftMenu = function(t, e) {
    var a = typeof t == "string" ? canvas.Functions.decodeUrlParams(t.replace(/\+/g, "%20")) : t;
    canvas.app.leftMenu.Const.ON_PAGE = parseInt(a.slotsOnPage) || canvas.app.leftMenu.Const.ON_PAGE;
    if (canvas.app.leftMenu.Const.ON_PAGE < canvas.app.leftMenu.Const.ON_PAGE_MIN || canvas.app.leftMenu.Const.ON_PAGE > canvas.app.leftMenu.Const.ON_PAGE_MAX) {
        this.autoSlots = true;
        this.defaultHeight = 565
    } else {
        this.defaultHeight = canvas.app.leftMenu.Const.ON_PAGE * canvas.app.leftMenu.Const.SLOT_HEIGHT + 25
    }
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0);
    e.style.overflow = "hidden"
}
;
canvas.app.CanvasLeftMenu.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasLeftMenu.prototype.init = function() {
    this.model = new canvas.app.leftMenu.Model(this.par);
    canvas.app.leftMenu.model = this.model;
    this.resize();
    var t = [canvas.Const.FONT_TAHOMA_9_STROKE, canvas.Const.FONT_TAHOMA_9_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD];
    var e = [["ui", canvas.Config.ui + "main.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasLeftMenu.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.leftMenu.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20
}
;
canvas.app.CanvasLeftMenu.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasLeftMenu.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.autoSlots && this.model) {
        canvas.app.leftMenu.Const.ON_PAGE = Math.min(canvas.app.leftMenu.Const.ON_PAGE_MAX, Math.max(canvas.app.leftMenu.Const.ON_PAGE_MIN, Math.floor(($(document).height() - 115) / canvas.app.leftMenu.Const.SLOT_HEIGHT)), this.model && this.model.slotsCount ? this.model.slotsCount : canvas.app.leftMenu.Const.ON_PAGE_MAX);
        if (this.main && this.main.view) {
            if (this.model.lastOnPageCount != canvas.app.leftMenu.Const.ON_PAGE) {
                this.model.lastOnPageCount = canvas.app.leftMenu.Const.ON_PAGE;
                this.main.view.initList();
                this.main.view.update()
            }
        }
    }
}
;
canvas.app.CanvasLeftMenu.prototype.swfObject = function(t) {
    if (this.main) {
        var e = this.model.slotsCount;
        this.main.swfObject(t);
        if (this.model.slotsCount != e) {
            this.resize()
        }
    }
}
;
canvas.app.CanvasLeftMenu.prototype.swfData = function(t, e) {
    if (this.main) {
        this.main.swfData(e)
    }
}
;
canvas.app.leftMenu.log = function(t, e) {
    canvas.Log.add(canvas.Log.LEFT_MENU, t, e)
}
;
canvas.app.CanvasLocation = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, -2, -17)
}
;
canvas.app.CanvasLocation.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasLocation.prototype.init = function() {
    this.model = new canvas.app.location.Model(this.par);
    canvas.app.location.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_16_BOLD_STROKE];
    var e = [["ui", canvas.Config.ui + "location.json"], ["navigate", canvas.Config.wwwPath + this.model.CfgNav]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasLocation.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager;
    this.windowsManager = new canvas.utils.WindowsManager;
    this.main = new canvas.app.location.Main(this.model,this.hintManager,this.windowsManager);
    this.blinkButton = this.main.view.blinkButton;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize()
}
;
canvas.app.CanvasLocation.prototype.swfObject = function(t) {
    this.main.swfObject(t)
}
;
canvas.app.CanvasLocation.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ENTER_FRAME);
    canvas.px.Tween.update();
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasLocation.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main)
        this.main.resize(this.width, this.height)
}
;
canvas.app.location.log = function(t, e) {
    canvas.Log.add(canvas.Log.LOCATION, t, e)
}
;
canvas.app.CanvasMagic = function(t, e, a) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0);
    this.type = a
}
;
canvas.app.CanvasMagic.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasMagic.prototype.init = function() {
    this.model = new canvas.app.magic.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    this.model.type = this.type;
    canvas.app.magic.model = this.model;
    switch (this.model.type) {
    case canvas.app.magic.Const.TYPE_AURA:
        canvas.app.magic.modelAura = this.model;
        break;
    case canvas.app.magic.Const.TYPE_SHADOW:
        canvas.app.magic.modelShadow = this.model;
        break;
    default:
        canvas.app.magic.modelMagic = this.model
    }
    var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_9_STROKE];
    var e = [["ui", canvas.Config.ui + "magic.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasMagic.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.hintManager = new canvas.utils.HintManager;
    this.main = new canvas.app.magic.Main(this.model,this.hintManager);
    this.root.addChild(this.main);
    this.fps = 20
}
;
canvas.app.CanvasMagic.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.magic.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasMagic.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.magic.log = function(t, e) {
    canvas.Log.add(canvas.Log.MAGIC, t, e)
}
;
canvas.app.CanvasManor = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, -4, -4);
    if (this.par.Guest == "1") {
        this.widthOffset = 0;
        this.heightOffset = 0
    }
    canvas.app.CanvasManor.App = this.app
}
;
canvas.app.CanvasManor.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasManor.prototype.init = function() {
    this.model = new canvas.app.manor.Model(this.par);
    canvas.app.manor.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_9_BOLD, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_13_BOLD_STROKE, canvas.Const.FONT_TAHOMA_14_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_16_BOLD];
    var e = [["ui", canvas.Config.ui + "manor.json"], ["dic", this.model.dicURL], canvas.Config.effectsAtlasPath + this.model.backImage + ".json", canvas.Config.effectsPath + this.model.backImage + ".mci", ["throne_room_items", this.model.throneRoomData.itemsPath], ["throne_room_types", this.model.throneRoomData.typesPath], canvas.Config.effectsPath + "hourglass.mci"];
    if (!this.model.guestMode) {
        e.push(["conf", canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=conf"])
    }
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasManor.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.parseDic();
    this.model.throneRoomData.init();
    this.main = new canvas.app.manor.Main(this.model);
    var t;
    this.inputCount = 12;
    for (var e = 0; e < this.inputCount; e++) {
        t = "input" + (e ? e : "");
        canvas.app.manor.view[t] = new canvas.ui.Input(this.par.parent);
        canvas.app.manor.view[t].parent = null
    }
    this.root.addChild(this.main);
    this.fps = 30;
    this.__resize()
}
;
canvas.app.CanvasManor.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.ENTER_FRAME);
    if (!this.model.paused)
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.ENTER_FRAME_ANIM);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    canvas.px.Tween.update()
}
;
canvas.app.CanvasManor.prototype.resize = function() {
    if (this.model && this.model.guestMode) {
        setTimeout(this.__resize.bind(this), 50)
    } else {
        this.__resize()
    }
}
;
canvas.app.CanvasManor.prototype.__resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.width = Math.max(Math.min(this.width, canvas.app.manor.Const.WIDTH_MAX), canvas.app.manor.Const.WIDTH_MIN);
        this.model.height = Math.min(this.height, canvas.app.manor.Const.HEIGHT_MAX);
        if (this.model.guestMode) {
            this.model.width += 50;
            this.model.height += 60
        }
        if (this.main)
            this.main.resize(this.width, this.height);
        var t;
        for (var e = 0; e < this.inputCount; e++) {
            t = "input" + (e ? e : "");
            if (canvas.app.manor.view[t]) {
                canvas.app.manor.view[t].stageHeight = this.model.height;
                canvas.app.manor.view[t].scale = this.model.winScale;
                canvas.app.manor.view[t].handlerEnterFrame(true)
            }
        }
    }
}
;
canvas.app.CanvasManor.prototype.updateCurrentBuilding = function() {
    if (this.main)
        this.main.controller.updateCurrentBuilding()
}
;
canvas.app.CanvasManor.prototype.ScrollMove = function(t, e) {
    this.main.view.manor.scrollMove(t, e)
}
;
canvas.app.manor.log = function(t, e) {
    canvas.Log.add(canvas.Log.MANOR, t, e)
}
;
canvas.app.CanvasMem = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, -20, true);
    document.onkeydown = null;
    document.onkeyup = null
}
;
canvas.app.CanvasMem.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasMem.prototype.init = function() {
    this.model = new canvas.app.mem.Model(this.par);
    canvas.app.mem.model = this.model;
    canvas.app.CanvasApp.prototype.init.call(this)
}
;
canvas.app.CanvasMem.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.mem.Main(this.model,this.par.parent);
    this.fps = 0
}
;
canvas.app.CanvasMem.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main)
        this.main.resize()
}
;
canvas.app.CanvasMem.prototype.swfData = function(t, e) {
    this.main.swfData(t, e)
}
;
canvas.app.mem.log = function(t, e) {
    canvas.Log.add(canvas.Log.MEM, t, e)
}
;
canvas.app.CanvasMirror = function(t, e) {
    if (canvas.app.mirror.instance && this.par) {
        canvas.app.mirror.instance.destroy()
    }
    canvas.app.mirror.instance = this;
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0, false, _top().window)
}
;
canvas.app.CanvasMirror.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasMirror.prototype.preInit = function() {
    if (this.par.ux_conf == undefined)
        this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
;
canvas.app.CanvasMirror.prototype.init = function() {
    this.model = new canvas.app.mirror.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.mirror.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD_STROKE, canvas.Const.FONT_TAHOMA_16_BOLD_STROKE, canvas.Const.FONT_TAHOMA_18, canvas.Const.FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT];
    var e = [["mirror", canvas.Config.ui + "mirror.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasMirror.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui"))
        canvas.ResourceLoader.addSubAlias("mirror", "ui");
    this.main = new canvas.app.mirror.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30
}
;
canvas.app.CanvasMirror.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null)
        this.destroy()
}
;
canvas.app.CanvasMirror.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasMirror.prototype.destroy = function() {
    this.main.destroy();
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false)
}
;
canvas.app.mirror.log = function(t, e) {
    canvas.Log.add(canvas.Log.MIRROR, t, e)
}
;
canvas.app.CanvasPets = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0);
    this.ENTER_FRAME = "Pets.ENTER_FRAME"
}
;
canvas.app.CanvasPets.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasPets.prototype.init = function() {
    var t = [];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
;
canvas.app.CanvasPets.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.fps = 20;
    this.pet = this.root.addChild(new canvas.animation.Pet(this.par,this.ENTER_FRAME))
}
;
canvas.app.CanvasPets.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(this.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasPets.prototype.updatePet = function(t) {
    if (this.pet) {
        this.pet.update(t)
    }
}
;
canvas.app.CanvasProgress = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0)
}
;
canvas.app.CanvasProgress.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasProgress.prototype.init = function() {
    this.smallSize = this.height < 32;
    var t = [["ui", canvas.Config.ui + "progress.json"], canvas.Config.fontsPath + (this.smallSize ? canvas.Const.FONT_TAHOMA_11_BOLD_STROKE : canvas.Const.FONT_TAHOMA_16_BOLD_GLOW_NUMBERS) + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
;
canvas.app.CanvasProgress.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container;
    this.root.addChild(this.main);
    this.start()
}
;
canvas.app.CanvasProgress.prototype.start = function() {
    var t = new canvas.px.Container;
    this.main.addChild(t);
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bar_full")));
    var e = this.par.current != undefined ? parseFloat(this.par.current) : 123.36;
    var a = this.par.total != undefined ? parseFloat(this.par.total) : 1234.51;
    var i = this.par.moneyFormat != undefined ? parseInt(this.par.moneyFormat) : 0;
    var s = e / a;
    var n = new canvas.ui.Progress;
    n.setSize(466, 47);
    n.position.set(5, -9);
    var r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bar_empty"));
    t.addChild(r);
    t.addChild(n);
    r.mask = n.sprite;
    n.progress = s;
    if (s > 0 && s < 1) {
        var o = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "center"));
        o.position.set(n.sprite.width, -1);
        t.addChild(o)
    }
    var l = new canvas.ui.Text(this.smallSize ? canvas.Const.FONT_TAHOMA_11_BOLD_STROKE : canvas.Const.FONT_TAHOMA_16_BOLD_GLOW_NUMBERS,16771494,this.smallSize ? this.width : 459,23,"center");
    this.main.addChild(l);
    if (this.smallSize) {
        l.position.set(0, 1)
    } else {
        l.position.set(7, 6)
    }
    l.text = e + " / " + a;
    if (this.height < this.main.height) {
        t.scale.set(this.width / this.main.width, this.height / this.main.height)
    }
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasPuzzle = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0, false, _top().window)
}
;
canvas.app.CanvasPuzzle.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasPuzzle.prototype.preInit = function() {
    if (this.par.ux_conf == undefined)
        this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
;
canvas.app.CanvasPuzzle.prototype.init = function() {
    this.model = new canvas.app.puzzle.Model(this.par);
    canvas.app.puzzle.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var t = [canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD];
    var e = [["puzzle", canvas.Config.ui + "puzzle.json"], ["puzzleImage", this.model.pictureUrl]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasPuzzle.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui"))
        canvas.ResourceLoader.addSubAlias("puzzle", "ui");
    this.main = new canvas.app.puzzle.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30
}
;
canvas.app.CanvasPuzzle.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.ENTER_FRAME);
    canvas.px.Tween.update();
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null)
        this.fps = 0
}
;
canvas.app.CanvasPuzzle.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasPuzzle.prototype.destroy = function() {
    this.main.destroy();
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false)
}
;
canvas.app.puzzle.log = function(t, e) {
    canvas.Log.add(canvas.Log.puzzle, t, e)
}
;
canvas.app.CanvasReg = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0)
}
;
canvas.app.CanvasReg.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasReg.prototype.init = function() {
    var t = [["ui", "{canvas.Config.langPath}reg/reg.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_12 + ".fnt", canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
;
canvas.app.CanvasReg.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container;
    this.root.addChild(this.main);
    this.start();
    this.fps = 30
}
;
canvas.app.CanvasReg.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasReg.prototype.start = function() {
    this.main.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.barber = this.main.addChild(new canvas.app.barber.Barber(this.par,this));
    this.barber.y = 232;
    var t = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769465,130,16,"center"));
    t.text = canvas.Translator.getText(3028);
    t.position.set(180, 201);
    t = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769465,130,16,"center"));
    t.text = canvas.Translator.getText(3029);
    t.position.set(180, 53);
    this.genderImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.genderImage.position.set(295, 229);
    this.humImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.humImage.position.set(5, 20);
    this.magImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.magImage.position.set(242, 24);
    this.humButton = this.main.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_hum")));
    this.humButton.position.set(56, 153);
    this.humButton.sprite.hitArea = new canvas.px.Rectangle(-40,-120,230,160);
    this.magButton = this.main.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_mag")));
    this.magButton.position.set(261, 153);
    this.magButton.sprite.hitArea = new canvas.px.Rectangle(-20,-120,230,160);
    if (this.par.kind_bonus) {
        this.bonus = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bonus"));
        this.bonus.position.set(0, -28);
        if (this.par.kind_bonus == "1") {
            this.humButton.sprite.addChild(this.bonus)
        } else {
            this.magButton.sprite.addChild(this.bonus)
        }
    }
    this.descriptionField = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,6500627,196,96,"left"));
    this.descriptionField.position.set(255, 394);
    this.setGenderImage(this.barber.model.mySexVal);
    this.setRaceImage(this.barber.model.myRaceVal);
    canvas.EventManager.addEventListener(canvas.app.barber.Event.GENDER_CHANGE, null, this.genderChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.barber.Event.RACE_CHANGE, null, this.raceChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.humButton, this.barber.bb11Action, this.barber);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.magButton, this.barber.bb12Action, this.barber)
}
;
canvas.app.CanvasReg.prototype.genderChangeHandler = function(t) {
    this.setGenderImage(t.params)
}
;
canvas.app.CanvasReg.prototype.raceChangeHandler = function(t) {
    this.setRaceImage(t.params)
}
;
canvas.app.CanvasReg.prototype.setGenderImage = function(t) {
    this.genderImage.texture = canvas.ResourceLoader.getImage("ui", t == "1" ? "gender_m" : "gender_f")
}
;
canvas.app.CanvasReg.prototype.setRaceImage = function(t) {
    this.humImage.texture = canvas.ResourceLoader.getImage("ui", t == "1" ? "race_hum" : "race_hum_grey");
    this.magImage.texture = canvas.ResourceLoader.getImage("ui", t != "1" ? "race_mag" : "race_mag_grey");
    this.humButton.sprite.interactive = this.humButton.buttonMode = t != "1";
    this.magButton.sprite.interactive = this.magButton.buttonMode = t == "1";
    this.humButton.handlerOut();
    this.magButton.handlerOut();
    this.descriptionField.text = canvas.Translator.getText(t == "1" ? 3030 : 3031)
}
;
canvas.app.CanvasRightMenu = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0);
    e.style.overflow = "hidden"
}
;
canvas.app.CanvasRightMenu.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasRightMenu.prototype.init = function() {
    this.model = new canvas.app.rightMenu.Model(this.par);
    canvas.app.rightMenu.model = this.model;
    var t = [canvas.Const.FONT_ARIAL_9_BOLD_STROKE, canvas.Const.FONT_TAHOMA_9_STROKE];
    var e = [["ui", canvas.Config.ui + "main.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasRightMenu.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.rightMenu.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20;
    this.resize()
}
;
canvas.app.CanvasRightMenu.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasRightMenu.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasRightMenu.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.CanvasRightMenu.prototype.swfData = function(t) {}
;
canvas.app.CanvasRightMenu.prototype.blinkButton = function(t, e) {
    if (this.main) {
        this.main.blinkButton(t, e)
    }
}
;
canvas.app.rightMenu.log = function(t, e) {
    canvas.Log.add(canvas.Log.RIGHT_MENU, t, e)
}
;
canvas.app.CanvasTest = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e)
}
;
canvas.app.CanvasTest.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasTest.prototype.init = function() {
    var t = [["ui", canvas.Config.ui], canvas.Config.imgPath + "spells/spells.json", canvas.Config.imgPath + "spells/spells2.json"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
;
canvas.app.CanvasTest.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.fps = 30;
    var t = new canvas.px.MovieClip(canvas.Config.spellsPath + "_SP1164");
    t.frameEvent = "ENTER_FRAME_TEST";
    this.root.addChild(t);
    t.position.set(100, 100);
    canvas.EventManager.addEventListener(null, canvas.ResourceLoader.EVENT_PROGRESS, function(t) {})
}
;
canvas.app.CanvasTest.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent("ENTER_FRAME_TEST");
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasTest.prototype.completeHandler = function() {
    this.goFrame(2)
}
;
canvas.app.CanvasTest.prototype.SND = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "bots/" + this.mcName + "/" + arguments[1])
}
;
canvas.app.CanvasTest.prototype.goFrame = function(t) {
    this.mc.gotoAndStop(t);
    if (this.mc.mcChildsCache["mc" + t]) {
        this.mc.mcChildsCache["mc" + t].loop = true;
        this.mc.mcChildsCache["mc" + t].play();
        if (!this.mc.mcChildsCache["mc" + t].frameEvent) {
            this.mc.mcChildsCache["mc" + t].frameEvent = "ENTER_FRAME_TEST"
        }
    }
}
;
canvas.app.CanvasTopMenu = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, false, 0, 0);
    this.app.view.id = "top_mnu"
}
;
canvas.app.CanvasTopMenu.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasTopMenu.prototype.init = function() {
    this.model = new canvas.app.topMenu.Model(this.par);
    canvas.app.topMenu.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_11_BOLD_STROKE];
    var e = [["ui", canvas.Config.ui + "main.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    if (this.par.configXml)
        e.push(["configMenu", this.par.configXml]);
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasTopMenu.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.parseConfig(canvas.ResourceLoader.get("configMenu"));
    this.main = new canvas.app.topMenu.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20;
    this.resize()
}
;
canvas.app.CanvasTopMenu.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasTopMenu.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasTopMenu.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.CanvasTopMenu.prototype.blinkButton = function(t, e) {
    if (this.main) {
        this.main.blinkButton(parseInt(t), e)
    }
}
;
canvas.app.CanvasTopMenu.prototype.hideButton = function(t, e) {
    if (this.main) {
        this.main.hideButton(parseInt(t), e)
    }
}
;
canvas.app.CanvasTopMenu.prototype.executeMenuId = function(t) {
    this.main.executeMenuId(t)
}
;
canvas.app.topMenu.log = function(t, e) {
    canvas.Log.add(canvas.Log.TOP_MENU, t, e)
}
;
canvas.app.CanvasTreasure = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0, false, _top().window)
}
;
canvas.app.CanvasTreasure.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasTreasure.prototype.preInit = function() {
    if (this.par.ux_conf == undefined)
        this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
;
canvas.app.CanvasTreasure.prototype.init = function() {
    this.model = new canvas.app.treasure.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.treasure.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_14_STROKE, canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["treasure", canvas.Config.ui + "treasure.json"]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasTreasure.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui"))
        canvas.ResourceLoader.addSubAlias("treasure", "ui");
    this.main = new canvas.app.treasure.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30
}
;
canvas.app.CanvasTreasure.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.treasure.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null)
        this.fps = 0
}
;
canvas.app.CanvasTreasure.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
;
canvas.app.CanvasTreasure.prototype.destroy = function() {
    this.main.destroy();
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false)
}
;
canvas.app.treasure.log = function(t, e) {
    canvas.Log.add(canvas.Log.TREASURE, t, e)
}
;
canvas.app.CanvasUser = function(t, e, a, i) {
    canvas.app.CanvasApp.call(this, t, e, true, 0, 0, undefined, undefined, undefined, true);
    canvas.app.user.Const.TOP = a || 0;
    canvas.app.user.Const.LEFT = i || 0
}
;
canvas.app.CanvasUser.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasUser.prototype.init = function() {
    this.model = new canvas.app.user.Model(this.par);
    canvas.app.user.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_18_BOLD_STROKE, canvas.Const.FONT_RADA_18, canvas.Const.FONT_ARIAL_10_BOLD_STROKE, canvas.Const.FONT_ARIAL_11_BOLD_STROKE];
    var e = [["ui", canvas.Config.ui + "user.json"], ["user_mask", canvas.Config.ui + "user_mask.png"], canvas.Config.effects, canvas.Config.effectsPath + "hourglass.mci"];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasUser.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager;
    this.windowsManager = new canvas.utils.WindowsManager;
    this.main = new canvas.app.user.Main(this.model,this.hintManager,this.windowsManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.app.view.style.top = 34;
    this.createHtmlElements(this.par.parent);
    this.resize()
}
;
canvas.app.CanvasUser.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasUser.prototype.createHtmlElements = function(t) {
    var e = this.model.canputoff == "0";
    var a = document.createElement("video");
    t.style.minWidth = this.par.width;
    t.style.height = this.par.height;
    this.app.view.style.position = "absolute";
    if (e) {
        this.app.view.style.left = 0 + canvas.app.user.Const.LEFT;
        this.app.view.style.top = 54 + canvas.app.user.Const.TOP
    }
    var i = "border:none;background-color:transparent;position:absolute;top:108;left:78;outline:none;overflow:hidden;";
    if (e) {
        i += "z-index:-1;"
    }
    a.style = i;
    if (e) {
        a.style.left = 58 + canvas.app.user.Const.LEFT;
        a.style.top = 128 + canvas.app.user.Const.TOP
    }
    a.autoplay = "1";
    a.loop = "1";
    t.insertBefore(a, this.app.view);
    this.main.view.background.video = a;
    this.main.view.background.update();
    var s;
    for (var n = 0; n < this.model.SLOTS_COUNT; n++) {
        if (!this.main.view.slots[n])
            continue;
        s = document.createElement("img");
        s.style = "border: none;background-color: transparent; position:absolute;outline: none;overflow: hidden;";
        t.insertBefore(s, this.app.view);
        this.main.view.slots[n].img = s
    }
}
;
canvas.app.CanvasUser.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main)
        this.main.resize(this.width, this.height)
}
;
canvas.app.CanvasUser.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.CanvasUser.prototype.setBackground = function(t) {
    this.model.backImage = t;
    this.main.view.background.update()
}
;
canvas.app.user.log = function(t, e) {
    canvas.Log.add(canvas.Log.USER, t, e)
}
;
canvas.app.CanvasWheel = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e)
}
;
canvas.app.CanvasWheel.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasWheel.prototype.init = function() {
    this.model = new canvas.app.wheel.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.wheel.model = this.model;
    var t = [canvas.Const.FONT_CUPRUM_12_BOLD, canvas.Const.FONT_CUPRUM_16_BOLD, canvas.Const.FONT_CUPRUM_22_BOLD, canvas.Const.FONT_CUPRUM_22_BOLD_STROKE, canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN, canvas.Const.FONT_CUPRUM_34_BOLD_STROKE, canvas.Const.FONT_CUPRUM_40_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["wheel", canvas.Config.ui + "wheel.json"], canvas.Config.effectsPath + "wheel_bonus.mci"];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
;
canvas.app.CanvasWheel.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui"))
        canvas.ResourceLoader.addSubAlias("wheel", "ui");
    this.main = new canvas.app.wheel.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize()
}
;
canvas.app.CanvasWheel.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
;
canvas.app.CanvasWheel.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.CanvasWheel.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.width = this.width;
        this.model.height = this.height;
        if (this.main) {
            this.main.resize()
        }
    }
}
;
canvas.app.wheel.log = function(t, e) {
    canvas.Log.add(canvas.Log.WHEEL, t, e)
}
;
canvas.app.CanvasWorld = function(t, e, a) {
    if (a == undefined)
        a = false;
    this.isModule = a;
    if (a) {
        this.par = t;
        this.root = new canvas.px.Container;
        this.stage = e;
        this.stage.addChild(this.root);
        this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader");
        this.preloader.gotoAndStop(1);
        if (this.preloader.ready) {
            this.preloaderReady()
        } else {
            canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this)
        }
        canvas.app.world.Event.ENTER_FRAME = canvas.app.location.Event.ENTER_FRAME
    } else {
        canvas.app.CanvasApp.call(this, t, e, true, 0, 0)
    }
}
;
canvas.app.CanvasWorld.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasWorld.prototype.init = function() {
    this.model = new canvas.app.world.Model(this.par);
    this.model.initModule(this.isModule, this.stage);
    canvas.app.world.model = this.model;
    canvas.app.manor.model = new canvas.app.manor.Model({});
    canvas.app.manor.model.mapMode = true;
    var t = [canvas.Const.FONT_TAHOMA_10_BOLD_STROKE, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD];
    var e = [["world", canvas.Config.ui + "world.json"], ["ways", canvas.Config.ui + "ways.json"], ["config", this.model.CfgLink], ["navigate", this.model.NavLink]];
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    canvas.ResourceLoader.add(e);
    if (!this.isModule) {
        document.body.style.overflow = "hidden";
        canvas.ResourceLoader.addSubAlias("world", "ui")
    }
}
;
canvas.app.CanvasWorld.prototype.preReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    this.model.initConfig();
    canvas.app.CanvasApp.prototype.init.call(this, this.model.areas_xml)
}
;
canvas.app.CanvasWorld.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.initAreas();
    this.model.parse_compass_config(canvas.ResourceLoader.get("navigate").data);
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager;
    this.windowsManager = this.isModule ? null : new canvas.utils.WindowsManager;
    if (!this.isModule)
        canvas.app.manor.view.input = new canvas.ui.Input(this.par.parent,null,null,0,-3);
    this.main = new canvas.app.world.Main(this.model,this.hintManager,this.windowsManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize()
}
;
canvas.app.CanvasWorld.prototype.handlerEnterFrame = function() {
    if (!this.isModule) {
        canvas.EventManager.dispatchEvent(canvas.app.world.Event.ENTER_FRAME);
        canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
    }
}
;
canvas.app.CanvasWorld.prototype.resize = function() {
    if (this.isModule) {
        this.width = canvas.app.location.model.MAP_WIDTH;
        this.height = canvas.app.location.model.hh;
        if (this.preloader) {
            this.preloader.position.set(Math.round(this.width * .5), Math.round(this.height * .5))
        }
        if (this.model) {
            this.model.width = this.width;
            this.model.height = this.height
        }
    } else {
        canvas.app.CanvasApp.prototype.resize.call(this)
    }
    if (this.main)
        this.main.resize(this.width, this.height);
    if (this.model && canvas.app.manor.view.input)
        canvas.app.manor.view.input.stageHeight = this.model.height
}
;
canvas.app.CanvasWorld.prototype.handlerMouseDown = function(t) {
    if (t.target != canvas.app.manor.view.input) {
        canvas.app.CanvasApp.prototype.handlerMouseDown.call(this, t)
    }
}
;
canvas.app.CanvasWorld.prototype.refreshFlag = function() {
    if (this.main) {
        this.main.view.refresh_my_flag()
    }
}
;
canvas.app.CanvasWorld.prototype.zoomIn = function() {
    if (this.main) {
        this.main.view.zoom.zoomMode(2)
    }
}
;
canvas.app.CanvasWorld.prototype.zoomOut = function() {
    if (this.main) {
        this.main.view.zoom.zoomMode(1)
    }
}
;
canvas.app.CanvasWorld.prototype.fastUpdateFlag = function() {
    if (this.main) {
        this.main.fastUpdateFlag()
    }
}
;
canvas.app.CanvasWorld.prototype.swfObject = function(t) {
    if (this.main) {
        this.main.swfObject(t)
    }
}
;
canvas.app.world.log = function(t, e) {
    canvas.Log.add(canvas.Log.WORLD, t, e)
}
;
canvas.app.view.MappingHint = function(t, e, a, i) {
    canvas.px.Container.call(this);
    if (t == undefined)
        t = "No title";
    if (a == undefined)
        a = true;
    if (e == undefined)
        e = 6770493;
    if (i == undefined)
        i = false;
    this.color = e;
    if (i) {
        this.tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,e,1e3,16,"left","middle");
        this.tf.position.set(16, 8)
    } else {
        this.tf = new canvas.ui.Text(a ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,e,1e3,16,"left");
        this.tf.position.set(16, 11)
    }
    this.bg = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt"),33,0,33,0);
    this.addChild(this.bg);
    this.addChild(this.tf);
    this.update(t);
    this.interactiveChildren = false
}
;
canvas.app.view.MappingHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.MappingHint.prototype.update = function(t, e) {
    if (e == undefined)
        e = this.color;
    this.tf.text = t;
    this.tf.color = e;
    this.bg.width = Math.max(77, this.tf.textWidth + 35);
    this.tf.x = Math.round((this.bg.width - this.tf.textWidth) * .5)
}
;
canvas.app.view.PxHint = function(t) {
    this._text = "";
    Object.defineProperty(this, "text", {
        get: function() {
            return this._text
        },
        set: function(t) {
            this._text = t;
            this.visible = this._text != "";
            this.title.text = this._text;
            this.back.clear();
            this.back.beginFill(3237463432);
            this.back.lineStyle(1, 4289953873, 1);
            this.back.drawRect(0, 0, this.title.width + 2, this.title.height > 15 ? this.title.height + 2 : 12);
            this.back.endFill()
        }
    });
    canvas.px.Container.call(this);
    if (t == undefined)
        t = "";
    var e = canvas.Translator.getLang() == canvas.Const.LANG_RU;
    this.title = new canvas.ui.Text(e ? canvas.Const.FONT_IFLASH : canvas.Const.FONT_TAHOMA_9_STROKE);
    this.title.setSize(300, 20);
    this.title.position.set(2, e ? 2 : 0);
    this.back = new canvas.px.Graphics;
    this.addChild(this.back);
    this.addChild(this.title);
    this.text = t
}
;
canvas.app.view.PxHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.MainButton = function(t, e, a, i, s, n) {
    var e = canvas.ResourceLoader.getImage("ui", e == undefined ? "main_button" : e);
    var a = canvas.ResourceLoader.getImage("ui", a == undefined ? "main_button_over" : a);
    var i = canvas.ResourceLoader.getImage("ui", i == undefined ? "main_button_down" : i);
    var s = canvas.ResourceLoader.getImage("ui", s == undefined ? "main_button_disabled" : s);
    canvas.ui.Button.call(this, e, a, i, s, [33, 0, 33, 0]);
    if (n != undefined && n) {
        this.field = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,t == undefined ? 16375713 : t,100,20,"center")
    } else {
        this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,t == undefined ? 16375713 : t,100,20,"center")
    }
    this.field.interactive = false;
    this.field.position.set(25, 10);
    this.addChild(this.field);
    this.setSize(150, 35)
}
;
canvas.app.view.MainButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.view.MainButton.prototype.setSize = function(t, e) {
    canvas.ui.Button.prototype.setSize.apply(this, [t, e]);
    this.field.setSize(t - 50);
    this.sprite.hitArea = new canvas.px.Rectangle(25,6,t - 50,this._height - 12)
}
;
canvas.app.view.MainButton.prototype.setTitle = function(t) {
    this.field.text = t
}
;
canvas.app.view.MainButtonWhite = function(t) {
    canvas.app.view.MainButton.call(this, t == undefined ? 8278832 : t, "main_button_white", "main_button_white_over", "main_button_white", "main_button_white_disabled")
}
;
canvas.app.view.MainButtonWhite.prototype = Object.create(canvas.app.view.MainButton.prototype);
canvas.app.view.BigHint = function(t, e) {
    canvas.px.Container.call(this);
    if (t == undefined)
        t = "";
    if (e == undefined)
        e = "";
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt2"),14,24,14,4);
    this.addChild(this.back);
    this.back.width = 289;
    this.back.height = 80;
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,4010799,this.back.width,20,"center");
    this.headerField.position.set(0, 5);
    this.addChild(this.headerField);
    this.headerField.text = t;
    this.infoField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12,4010799,this.back.width - 45,1e3,"left");
    this.infoField.position.set(22, 32);
    this.addChild(this.infoField);
    this.update(e);
    this.interactiveChildren = false
}
;
canvas.app.view.BigHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.BigHint.prototype.update = function(t, e) {
    this.infoField.text = t;
    this.back.height = this.infoField.textHeight + 45;
    if (e != undefined) {
        this.headerField.text = e
    }
}
;
canvas.app.view.BigHint2 = function(t, e) {
    canvas.px.Container.call(this);
    if (e == undefined)
        e = "";
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt3"),12,12,12,12));
    this.back.width = t || 200;
    this.back.height = 80;
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,6770493,this.back.width - 45,1e3,"left"));
    this.infoField.position.set(22, 8);
    this.update(e);
    this.interactiveChildren = false
}
;
canvas.app.view.BigHint2.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.BigHint2.prototype.update = function(t) {
    this.infoField.text = t ? t : "";
    this.back.height = this.infoField.textHeight + 20
}
;
canvas.app.view.OldButton = function(t) {
    if (t == undefined)
        t = 12124160;
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "old_button"), [42, 0, 42, 0]);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,t,100,20,"center");
    this.field.position.set(25, 6);
    this.addChild(this.field);
    this.setSize(171, 25)
}
;
canvas.app.view.OldButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.view.OldButton.prototype.setSize = function(t, e) {
    canvas.ui.Button.prototype.setSize.apply(this, [t, e]);
    this.field.setSize(t - 50, 20);
    this.sprite.hitArea = new canvas.px.Rectangle(25,5,t - 50,e ? e - 10 : 15)
}
;
canvas.app.view.OldButton.prototype.setTitle = function(t) {
    this.field.text = t
}
;
canvas.app.view.Money = function(t, e, a, i, s, n, r, o, l, c, p) {
    this.multiColors = a == undefined ? false : a;
    this.iconSide = o == undefined ? true : o;
    this.displayGold = true;
    this.displaySilver = true;
    this.displayBronze = true;
    this.showIfZero = false;
    this._money = 0;
    Object.defineProperty(this, "money", {
        get: function() {
            return this._money
        },
        set: function(t) {
            this._money = t;
            this.update()
        }
    });
    Object.defineProperty(this, "gold", {
        get: function() {
            return Math.floor(this._money * 1e-4)
        },
        set: function(t) {
            this.money = t * 1e4
        }
    });
    this._gems = 0;
    Object.defineProperty(this, "gems", {
        get: function() {
            return this._gems
        },
        set: function(t) {
            this._gems = canvas.Functions.getGems(t);
            this.update()
        }
    });
    this._rubins = 0;
    Object.defineProperty(this, "rubins", {
        get: function() {
            return this._rubins
        },
        set: function(t) {
            this._rubins = canvas.Functions.getGems(t);
            this.update()
        }
    });
    this._color = 0;
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t;
            this.field.color = this._color;
            this.update()
        }
    });
    this._image = "";
    Object.defineProperty(this, "image", {
        get: function() {
            return this._image
        },
        set: function(t) {
            this._image = t;
            this.update()
        }
    });
    this._imageCount = 0;
    Object.defineProperty(this, "imageCount", {
        get: function() {
            return this._imageCount
        },
        set: function(t) {
            this._imageCount = t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    if (t == undefined)
        t = 7026733;
    this.field = new canvas.ui.HtmlText(e == undefined ? canvas.Const.FONT_TAHOMA_11 : e,e == undefined ? canvas.Const.FONT_TAHOMA_11_BOLD : e,t,i == undefined ? 300 : i,s == undefined ? 20 : s,n == undefined ? "left" : n,r == undefined ? "top" : r,l,c,p);
    this.addChild(this.field)
}
;
canvas.app.view.Money.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.Money.prototype.update = function() {
    var t = "";
    var e;
    var a = this.money;
    var i = Math.floor(a % 100);
    a = Math.floor(a * .01);
    var s = Math.floor(a % 100);
    a = Math.floor(a * .01);
    var n = Math.floor(a);
    if (n != 0 && this.displayGold) {
        if (this.iconSide) {
            t += (t == "" ? "" : " ") + "<img src='money_gold' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#fed200'>" + n + "</font>" : n)
        } else {
            t += (t == "" ? "" : " ") + (this.multiColors ? "<font color='#fed200'>" + n + "</font>" : n) + " <img src='money_gold' yOffset='2' atlas='ui'/>"
        }
    }
    if ((s != 0 || this.showIfZero && Math.abs(n) > 0) && this.displaySilver) {
        if (this.iconSide) {
            t += (t == "" ? "" : " ") + "<img src='money_silver' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#dadada'>" + s + "</font>" : s)
        } else {
            t += (t == "" ? "" : " ") + (this.multiColors ? "<font color='#dadada'>" + s + "</font>" : s) + " <img src='money_silver' yOffset='2' atlas='ui'/>"
        }
    }
    if ((i != 0 || this.showIfZero && Math.abs(this.money) >= 100) && this.displayBronze) {
        if (this.iconSide) {
            t += (t == "" ? "" : " ") + "<img src='money_bronze' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#f29f72'>" + i + "</font>" : i)
        } else {
            t += (t == "" ? "" : " ") + (this.multiColors ? "<font color='#f29f72'>" + i + "</font>" : i) + " <img src='money_bronze' yOffset='2' atlas='ui'/>"
        }
    }
    if (this.gems != 0) {
        a = this.showIfZero ? this.gems.toFixed(2) : this.gems;
        if (this.iconSide) {
            t += (t == "" ? "" : " ") + "<img src='money_crystal' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#72bdf2'>" + a + "</font>" : a)
        } else {
            t += (t == "" ? "" : " ") + (this.multiColors ? "<font color='#72bdf2'>" + a + "</font>" : a) + " <img src='money_crystal' yOffset='2' atlas='ui'/>"
        }
    }
    if (this.rubins != 0) {
        a = this.showIfZero ? this.rubins.toFixed(2) : this.rubins;
        if (this.iconSide) {
            t += (t == "" ? "" : " ") + "<img src='money_rubin' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#ef5b5b'>" + a + "</font>" : a)
        } else {
            t += (t == "" ? "" : " ") + (this.multiColors ? "<font color='#ef5b5b'>" + a + "</font>" : a) + " <img src='money_rubin' yOffset='2' atlas='ui'/>"
        }
    }
    if (this.image) {
        a = this.imageCount;
        if (this.iconSide) {
            t += (t == "" ? "" : " ") + "<img src='" + this.image + "' width='60' height='60' yOffset='1' scale='0.33'/> " + (this.multiColors ? "<font color='#ef5b5b'>" + a + "</font>" : a)
        } else {
            t += (t == "" ? "" : " ") + (this.multiColors ? "<font color='#ef5b5b'>" + a + "</font>" : a) + " <img src='" + this.image + "' width='60' height='60' yOffset='1' scale='0.33'/>"
        }
    }
    this.field.text = t
}
;
canvas.app.view.Money.prototype.animateToValue = function(t, e, a, i) {
    if (i == undefined)
        i = 10;
    if (this.timer)
        clearInterval(this.timer);
    this.targetMoney = t == undefined ? this.money : t;
    this.targetGems = e == undefined ? this.gems : canvas.Functions.getGems(e);
    this.targetRubins = a == undefined ? this.rubins : canvas.Functions.getGems(a);
    this.stepMoney = Math.max(Math.ceil(Math.abs(this.money - this.targetMoney) / i), .01);
    this.stepGems = Math.max(Math.abs(this.gems - this.targetGems) / i, .01);
    this.stepRubins = Math.max(Math.abs(this.rubins - this.targetRubins) / i, .01);
    this.timer = setInterval(this.timerHandler.bind(this), 50)
}
;
canvas.app.view.Money.prototype.timerHandler = function() {
    var t;
    if (this.targetMoney > this.money) {
        t = this.money + this.stepMoney;
        if (t >= this.targetMoney) {
            this.showIfZero = false;
            this.money = t = this.targetMoney
        } else {
            this.showIfZero = true;
            this.money = t
        }
        this._money = t
    } else if (this.targetMoney < this.money) {
        t = this.money - this.stepMoney;
        if (t <= this.targetMoney) {
            this.showIfZero = false;
            this.money = t = this.targetMoney
        } else {
            this.showIfZero = true;
            this.money = t
        }
        this._money = t
    } else if (this.targetGems > this.gems) {
        t = this.gems + this.stepGems;
        if (t >= this.targetGems) {
            this.showIfZero = false;
            this.gems = this.targetGems
        } else {
            this.showIfZero = true;
            this.gems = t
        }
    } else if (this.targetGems < this.gems) {
        t = this.gems - this.stepGems;
        if (t <= this.targetGems) {
            this.showIfZero = false;
            this.gems = this.targetGems
        } else {
            this.showIfZero = true;
            this.gems = t
        }
    } else if (this.targetRubins > this.rubins) {
        t = this.rubins + this.stepRubins;
        if (t >= this.targetRubins) {
            this.showIfZero = false;
            this.rubins = this.targetRubins
        } else {
            this.showIfZero = true;
            this.rubins = t
        }
    } else if (this.targetRubins < this.rubins) {
        t = this.rubins - this.stepRubins;
        if (t <= this.targetRubins) {
            this.showIfZero = false;
            this.rubins = this.targetRubins
        } else {
            this.showIfZero = true;
            this.rubins = t
        }
    } else {
        clearInterval(this.timer)
    }
}
;
canvas.app.view.Money.prototype.makeOneCoin = function(t) {
    if (t < 100) {
        return t
    } else if (t < 1e4) {
        return Math.floor(t * .01) * 100
    } else {
        return Math.floor(t * 1e-4) * 1e4
    }
}
;
canvas.app.view.Money.prototype.reset = function() {
    this.money = this.gems = this.rubins = 0;
    this.image = ""
}
;
canvas.app.view.SmallButton = function(t, e) {
    var a = canvas.ResourceLoader.getImage("ui", "small_button");
    var i = canvas.ResourceLoader.getImage("ui", "small_button_over");
    var s = canvas.ResourceLoader.getImage("ui", "small_button_down");
    var n = canvas.ResourceLoader.getImage("ui", "small_button_disabled");
    canvas.ui.Button.call(this, a, i, s, n, [8, 0, 8, 0]);
    if (e != undefined && e) {
        this.field = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD,canvas.Const.FONT_TAHOMA_10_BOLD,t == undefined ? 2954752 : t,100,20,"center")
    } else {
        this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,t == undefined ? 2954752 : t,100,20,"center")
    }
    this.field.interactive = false;
    this.field.position.set(8, 1);
    this.addChild(this.field);
    this.setSize(60, 15)
}
;
canvas.app.view.SmallButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.view.SmallButton.prototype.setSize = function(t, e) {
    canvas.ui.Button.prototype.setSize.apply(this, [t, e]);
    this.field.setSize(t - 16)
}
;
canvas.app.view.SmallButton.prototype.setTitle = function(t) {
    this.field.text = t
}
;
canvas.app.view.MacroHtmlText = function() {
    this.M_ARTIFACT = "ARTIFACT";
    canvas.ui.HtmlText.apply(this, arguments)
}
;
canvas.app.view.MacroHtmlText.prototype = Object.create(canvas.ui.HtmlText.prototype);
canvas.app.view.MacroHtmlText.prototype.make = function() {
    this.applyMacro();
    canvas.ui.HtmlText.prototype.make.call(this)
}
;
canvas.app.view.MacroHtmlText.prototype.applyMacro = function() {
    var t = this._text;
    var e = new RegExp(/#[A-Z_]+\[[^#\]]+\]#/gi);
    var a;
    var i;
    var s;
    var n;
    var r = false;
    var o;
    var l = "";
    var c = e.exec(t);
    while (c != null) {
        a = c[0].split("[");
        s = a[0].substr(1);
        n = a[1].substr(0, a[1].length - 2);
        switch (s) {
        case this.M_ARTIFACT:
            a = n.split(",");
            o = canvas.data.ItemPrototypeData.getItemPrototype(a[0]);
            if (!o)
                r = true;
            if (!r) {
                i = "<b><font color='#" + canvas.data.ItemPrototypeData.getColorByQuality(o.quality).toString(16) + "'><a href='artifact_info.php?artikul_id=" + o.id + "' target='_blank'>" + (a[1] ? a[1] : o.title) + "</a></font>" + (a[2] ? " <font color='#ba0000'>" + a[2] + " " + canvas.Translator.getText(2022) + "</font>" : "") + "</b>";
                e.lastIndex = c.index + i.length;
                t = t.substr(0, c.index) + i + t.substr(c.index + c[0].length)
            }
            break
        }
        c = e.exec(t)
    }
    if (r) {
        canvas.EventManager.addEventListener(canvas.data.ItemPrototypeData.EVENT_COMPLETE, null, this.completeProtoHandler, this)
    } else {
        this._text = t
    }
}
;
canvas.app.view.MacroHtmlText.prototype.completeProtoHandler = function() {
    canvas.EventManager.removeEventListener(canvas.data.ItemPrototypeData.EVENT_COMPLETE, null, this.completeProtoHandler, this);
    this.make()
}
;
canvas.app.view.MainWindow = function(t, e, a) {
    canvas.px.Window.call(this);
    this._baseHeight = 520;
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "main_window"),19,42,39,23));
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_S_15_BOLD,16118721,t - 40,20,"center","top",0);
    this.header.position.set(20, 4);
    this.header.text = a == undefined ? "" : a;
    this.header.interactive = true;
    this.sliceLeft = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_left"),18,20);
    this.sliceRight = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_right"),39,20);
    this.sliceTop = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_top"),20,41);
    this.sliceBot = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_bot"),20,24);
    this.addChild(this.sliceLeft);
    this.addChild(this.sliceRight);
    this.addChild(this.sliceTop);
    this.addChild(this.sliceBot);
    this.addChild(this.header);
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "main_window_close_base"),canvas.ResourceLoader.getImage("ui", "main_window_close_over"),canvas.ResourceLoader.getImage("ui", "main_window_close_down"),null));
    this.setSize(t, e)
}
;
canvas.app.view.MainWindow.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.view.MainWindow.prototype.setSize = function(t, e) {
    this.header.setSize(t - 40);
    this.closeButton.position.set(t - 32, 0);
    this.back.width = t;
    this.back.height = e;
    this.sliceLeft.position.set(0, 41);
    this.sliceLeft.height = e - 63;
    this.sliceRight.position.set(t - 38, 41);
    this.sliceRight.height = e - 63;
    this.sliceTop.position.set(18, 0);
    this.sliceTop.width = t - 56;
    this.sliceBot.position.set(18, e - 22);
    this.sliceBot.width = t - 56
}
;
canvas.app.view.MainWindow.prototype.open = function(t, e, a, i) {
    if (t == undefined)
        t = false;
    if (e == undefined)
        e = false;
    if (a == undefined)
        a = false;
    if (i == undefined)
        i = false;
    canvas.utils.WindowsManager.instance.openWindow(this, t, e, a, i)
}
;
canvas.app.view.MainWindow.prototype.close = function() {
    canvas.utils.WindowsManager.instance.closeWindow(this)
}
;
canvas.app.view.MainWindow.prototype.destroy = function() {
    this.close();
    canvas.px.Window.prototype.destroy.call(this)
}
;
canvas.app.view.window.ConfirmWindowOld = function() {
    canvas.px.Window.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "confirm_back")));
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0);
    this.header.y = -10;
    this.addChild(this.header);
    this.header.interactive = true;
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16577975,this.back.width,20,"center","top",0,0);
    this.headerField.y = -7;
    this.addChild(this.headerField);
    this.infoField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,5324857,this.back.width - 40,85,"center","middle");
    this.addChild(this.infoField);
    this.infoField.position.set(18, 20);
    this.yesButton = new canvas.app.view.MainButton;
    this.yesButton.setSize(190, 0);
    this.addChild(this.yesButton);
    this.yesButton.setTitle(canvas.Translator.getText(805));
    this.yesButton.position.set(Math.round((this.back.width - this.yesButton.width) * .5), this.back.height - 95);
    this.noButton = new canvas.app.view.MainButton;
    this.noButton.setSize(190, 0);
    this.addChild(this.noButton);
    this.noButton.setTitle(canvas.Translator.getText(806));
    this.noButton.position.set(this.yesButton.x, this.back.height - 60);
    this.closeButton = this.noButton
}
;
canvas.app.view.window.ConfirmWindowOld.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.view.window.ConfirmWindowOld.prototype.update = function(t, e, a, i, s, n, r) {
    this.headerField.text = t;
    this.header.width = this.headerField.textWidth + 80;
    this.header.x = Math.round((this.back.width - this.header.width) * .5);
    if (a != undefined)
        this.yesButton.setTitle(a);
    if (i != undefined)
        this.noButton.setTitle(i);
    this.infoField.text = e;
    this.yesButton.visible = a != "";
    this.actionFunc = s;
    this.actionFuncParams = n;
    this.context = r
}
;
canvas.app.view.window.ConfirmWindowOld.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t);
    if (canvas.Functions.findParent(this.yesButton, t.target)) {
        if (this.actionFunc != null)
            this.actionFunc.apply(this.context, this.actionFuncParams);
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
    }
}
;
canvas.app.battle.Main = function(t, e) {
    canvas.px.Container.call(this);
    this.model = t;
    canvas.app.battle.log("frameRate = " + this.model.fps);
    this.hintManager = e;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.view = new canvas.app.battle.View(this);
    this.view.x = 10;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.view.soundView.init(this.model.soundMute, this.model.soundVolume);
    this.players = {};
    this.playersQueue = [];
    this.skeletons = {};
    this.mFunc = new canvas.app.battle.engine.MFunc(this);
    this.mEve = new canvas.app.battle.engine.MEve(this);
    this.mCmd = new canvas.app.battle.engine.MCmd(this);
    this.conn = new canvas.app.battle.engine.Connection(this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.OPP_ID_CHANGE, null, this.handlerOppChange, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SKIP_TURN, null, this.handlerSkipTurn, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CENTER_VISIBLE, null, this.handlerCenterVisible, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SOUND_VOLUME_CHANGE, null, this.handlerVolumeChange, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SOUND_MUTE_CHANGE, null, this.handlerMuteChange, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EFFECT_AFTER_SPELL, null, this.handlerEffectAfterSpell, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.flagButton, this.handlerFlagClick, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ATTACK, null, this.handlerAttack, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.BLOCK_SWITCH, null, this.handlerBlockSwitch, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, this.handlerChangeCenterMode, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.RESET, null, this.handlerReset, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.TRY_RECONNECT, null, this.handlerTryReconnect, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.REPAIR, null, this.handlerRepair, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.OPEN_COMBO_LIST, null, this.handlerOpenComboList, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CHOOSE_COMBO, null, this.handlerChooseCombo, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_BOW_PANEL, null, this.handlerShowBowPanel, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.USE_EFFECT, null, this.handlerUseEffect, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_ERROR, null, this.handlerShowError, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_MESSAGE, null, this.handlerShowMessage, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CLEAR_SYNC_TIMEOUT, null, this.clearSyncTimeout, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ADD_EVENT, null, this.handlerAddEvent, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ADD_COMMAND, null, this.handlerAddCommand, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.UPDATE_PERS_HP_LVL, null, this.updPersHPLvl, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.UPDATE_PERS_MP_LVL, null, this.updPersMPLvl, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_EVE, null, this.handlerEvent, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_CMD, null, this.handlerCmd, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_CMD_ERROR, null, this.handlerCmdError, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_MY_FUNC, null, this.handlerMyFunc, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.persLevel.button, this.handlerPersLevelClick, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.oppLevel.button, this.handlerOppLevelClick, this);
    this.centerVisible(false);
    if (!canvas.Config.isLocal) {
        new canvas.utils.URLRequest(canvas.Config.domain + "/fight.php?sig=" + md5(canvas.app.battle.Const.MAX_ANIMATION_SIZE) + "&check=1").load()
    }
    setInterval(this.handlerTimer.bind(this), 1e3);
    this.handlerTimer();
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    var a = canvas.Functions.entryPointGetUrl(canvas.Const.ENTRY_POINT.OBJECT.USER, canvas.Const.ENTRY_POINT.ACTION.BOW_ORDER_GET);
    this.request.load(a)
}
;
canvas.app.battle.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.Main.prototype.resize = function(t, e) {
    this.hintManager.init(this.hintContainer, t, e);
    this.model.width = t;
    this.model.height = e
}
;
canvas.app.battle.Main.prototype.tryConnect = function() {
    if (!canvas.Config.isLocal)
        this.conn.tryConnect()
}
;
canvas.app.battle.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.battle.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.battle.Main.prototype.requestCompleteHandler = function() {
    var t = JSON.parse(this.request.request.responseText);
    var e;
    e = t[canvas.Functions.entryPointConcatObjectAction(canvas.Const.ENTRY_POINT.OBJECT.USER, canvas.Const.ENTRY_POINT.ACTION.BOW_ORDER_GET)];
    if (e && e.status == 100) {
        this.model.spellsBowOrder = e.bound_order
    }
    this.tryConnect()
}
;
canvas.app.battle.Main.prototype.requestErrorHandler = function() {
    this.tryConnect()
}
;
canvas.app.battle.Main.prototype.handlerPersLevelClick = function(t) {
    this.sendData("mem", "pers_focus@" + this.model.persId)
}
;
canvas.app.battle.Main.prototype.handlerOppLevelClick = function(t) {
    this.sendData("mem", "pers_focus@" + this.model.oppId)
}
;
canvas.app.battle.Main.prototype.handlerResetFocus = function(t) {
    this.sendData("mem", "pers_focus@0")
}
;
canvas.app.battle.Main.prototype.handlerKey = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    var e = t.params.globalKeyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    if (!this.model.isUseHotkeys && (e != canvas.Const.KEYS.L || !s))
        return;
    switch (e) {
    case canvas.Const.KEYS.L:
        if (s) {
            canvas.Log.show(canvas.Log.BATTLE)
        }
        break;
    case canvas.Const.KEYS.Q:
        if (this.view.centerView.visible) {
            if (this.isInAttackMode()) {
                this.handlerAttack({
                    params: canvas.app.battle.Const.TOP_ATTACK_ID
                })
            } else if (this.model.hasSpells) {
                var n = this.view.centerView.cSpells.slots[1];
                if (n)
                    n.handlerClick()
            }
        }
        break;
    case canvas.Const.KEYS.W:
        if (this.view.centerView.visible) {
            if (this.isInAttackMode()) {
                this.handlerAttack({
                    params: canvas.app.battle.Const.MIDDLE_ATTACK_ID
                })
            } else if (this.model.hasSpells) {
                var n = this.view.centerView.cSpells.slots[2];
                if (n)
                    n.handlerClick()
            }
        }
        break;
    case canvas.Const.KEYS.E:
        if (this.view.centerView.visible) {
            if (this.isInAttackMode()) {
                this.handlerAttack({
                    params: canvas.app.battle.Const.BOTTOM_ATTACK_ID
                })
            } else if (this.model.hasSpells) {
                var n = this.view.centerView.cSpells.slots[3];
                if (n)
                    n.handlerClick()
            }
        }
        break;
    case canvas.Const.KEYS.R:
        if (this.view.centerView.visible) {
            if (this.isInAttackMode()) {
                this.handlerBlockSwitch()
            } else if (this.model.hasSpells) {
                var n = this.view.centerView.cSpells.slots[4];
                if (n)
                    n.handlerClick()
            }
        }
        break;
    case canvas.Const.KEYS.A:
        if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
            var n = this.view.centerView.cSpells.slots[6];
            if (n)
                n.handlerClick()
        }
        break;
    case canvas.Const.KEYS.S:
        if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
            var n = this.view.centerView.cSpells.slots[7];
            if (n)
                n.handlerClick()
        }
        break;
    case canvas.Const.KEYS.D:
        if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
            var n = this.view.centerView.cSpells.slots[8];
            if (n)
                n.handlerClick()
        }
        break;
    case canvas.Const.KEYS.F:
        if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
            var n = this.view.centerView.cSpells.slots[9];
            if (n)
                n.handlerClick()
        }
        break;
    case canvas.Const.KEYS.G:
        if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
            var n = this.view.centerView.cSpells.slots[10];
            if (n)
                n.handlerClick()
        }
        break;
    case canvas.Const.KEYS.UP_ARROW:
        if (this.view.centerView.visible && this.isInAttackMode())
            this.handlerAttack({
                params: canvas.app.battle.Const.TOP_ATTACK_ID
            });
        break;
    case canvas.Const.KEYS.RIGHT_ARROW:
        if (this.view.centerView.visible && this.isInAttackMode())
            this.handlerAttack({
                params: canvas.app.battle.Const.MIDDLE_ATTACK_ID
            });
        break;
    case canvas.Const.KEYS.DOWN_ARROW:
        if (this.view.centerView.visible && this.isInAttackMode())
            this.handlerAttack({
                params: canvas.app.battle.Const.BOTTOM_ATTACK_ID
            });
        break;
    case canvas.Const.KEYS.LEFT_ARROW:
        if (this.view.centerView.visible && this.isInAttackMode())
            this.handlerBlockSwitch();
        break;
    case canvas.Const.KEYS.KEY_1:
    case canvas.Const.KEYS.NUM_1:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@1");
        break;
    case canvas.Const.KEYS.KEY_2:
    case canvas.Const.KEYS.NUM_2:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@2");
        break;
    case canvas.Const.KEYS.KEY_3:
    case canvas.Const.KEYS.NUM_3:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@3");
        break;
    case canvas.Const.KEYS.KEY_4:
    case canvas.Const.KEYS.NUM_4:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@4");
        break;
    case canvas.Const.KEYS.KEY_5:
    case canvas.Const.KEYS.NUM_5:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@5");
        break;
    case canvas.Const.KEYS.KEY_6:
    case canvas.Const.KEYS.NUM_6:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@6");
        break;
    case canvas.Const.KEYS.KEY_7:
    case canvas.Const.KEYS.NUM_7:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@7");
        break;
    case canvas.Const.KEYS.KEY_8:
    case canvas.Const.KEYS.NUM_8:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@8");
        break;
    case canvas.Const.KEYS.KEY_9:
    case canvas.Const.KEYS.NUM_9:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@9");
        break;
    case canvas.Const.KEYS.KEY_0:
    case canvas.Const.KEYS.NUM_0:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@10");
        break;
    case canvas.Const.KEYS.MINUS:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@11");
        break;
    case canvas.Const.KEYS.EQUAL:
        if (!s && this.mCmd.myEffectsGetted)
            this.sendData("items", "HotKey@12");
        break;
    case canvas.Const.KEYS.RIGHT_SQUARE_BRACKET:
        this.sendData("items", "NextPage@ ");
        break;
    case canvas.Const.KEYS.LEFT_SQUARE_BRACKET:
        this.sendData("items", "PrevPage@ ");
        break;
    case canvas.Const.KEYS.B:
        this.sendData("items_right", "OpenBag@ ");
        break;
    case canvas.Const.KEYS.M:
        this.sendData("items_right", "OpenMount@ ");
        break;
    case canvas.Const.KEYS.T:
        if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
            var n = this.view.centerView.cSpells.slots[5];
            if (n)
                n.handlerClick()
        } else {
            this.useAura(0)
        }
        break;
    case canvas.Const.KEYS.Y:
        this.useAura(1);
        break;
    case canvas.Const.KEYS.U:
        this.useAura(2);
        break;
    case canvas.Const.KEYS.I:
        this.useAura(3);
        break;
    case canvas.Const.KEYS.SPACEBAR:
        this.handlerSkipTurn();
        break;
    case canvas.Const.KEYS.Z:
        this.sendData("mem", "pers_focus@" + this.model.persId);
        break;
    case canvas.Const.KEYS.X:
        this.sendData("mem", "pers_focus@" + this.model.oppId);
        break;
    case canvas.Const.KEYS.ESC:
        this.sendData("mem", "pers_focus@0");
        this.persFocus(0);
        break;
    case canvas.Const.KEYS.POINT:
        this.handlerFlagClick();
        break;
    case canvas.Const.KEYS.TAB:
        t.params.preventDefault();
        if (this.view.centerView.cDot.btIsOn && this.model.hasSpells) {
            this.view.centerView.cDot.handlerBtnClick()
        }
        break
    }
    if (!a && !i && !s) {
        for (var r = 0; r < canvas.app.battle.Const.BOW_KEYS.length; r++) {
            if (e == canvas.app.battle.Const.BOW_KEYS[r]) {
                if (this.model.spellsBowOrder[r]) {
                    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.USE_EFFECT, null, this.model.spellsBowOrder[r])
                }
                break
            }
        }
    }
}
;
canvas.app.battle.Main.prototype.handlerMyFunc = function(t) {
    var e = t.params;
    var a = e.shift();
    switch (a) {
    case canvas.app.battle.Const.MY_FUNC_CHANGE_MODE:
        this.mFunc.changeMode.apply(this.mFunc, e);
        break;
    case canvas.app.battle.Const.MY_FUNC_USE_EFFECT:
        this.mFunc.useEffect.apply(this.mFunc, e);
        break;
    case canvas.app.battle.Const.MY_FUNC_UNSET_AURA:
        this.mFunc.unsetAura.apply(this.mFunc, e);
        break;
    case canvas.app.battle.Const.MY_FUNC_SEND_MESSAGE:
        this.mFunc.sendMsg.apply(this.mFunc, e);
        break;
    default:
        canvas.app.battle.log("handlerMyFunc error: unknown cmd type", 16711680)
    }
}
;
canvas.app.battle.Main.prototype.handlerTimer = function() {
    this.view.flagHint.text = this.model.flagTime > 0 ? canvas.Functions.formatDate(this.model.flagTime * 1e3, "00", 1, false, true) : "";
    if (this.model.flagTime > 0 && this.model.flagTimeCd != 0) {
        this.model.flagTime--;
        this.view.drawFlagCd(this.model.flagTime / this.model.flagTimeCd)
    }
    if (this.model.skipTurnTime > 0 && !this.model.skipTurnIsCooldown() && canvas.app.battle.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
        this.centerVisible(true);
        this.model.skipTurnTime = 0
    }
}
;
canvas.app.battle.Main.prototype.handlerOppChange = function(t) {
    this.sendData("mem", "opp_id@" + this.model.oppId);
    this.view.updateFocus()
}
;
canvas.app.battle.Main.prototype.handlerMuteChange = function(t) {
    this.model.soundMute = t.params
}
;
canvas.app.battle.Main.prototype.handlerVolumeChange = function(t) {
    this.model.soundVolume = t.params
}
;
canvas.app.battle.Main.prototype.handlerSkipTurn = function(t) {
    if (this.view.centerView.skipButton.visible && this.view.centerView.visible) {
        this.mFunc.skipTurn()
    }
}
;
canvas.app.battle.Main.prototype.handlerAttack = function(t) {
    var e = t.params;
    if (!this.checkIsCanAttack(e)) {
        return
    }
    this.mFunc.attack(e);
    this.centerVisible(false);
    canvas.app.battle.model.attackTime = Date.now()
}
;
canvas.app.battle.Main.prototype.checkIsCanAttack = function(t) {
    var e = true;
    var a = canvas.app.battle.model.oppMask;
    if (!this.isInAttackMode()) {
        e = false
    } else if (this.view.centerView.cAttack.isCooldown) {
        e = false
    } else {
        switch (t) {
        case canvas.app.battle.Const.TOP_ATTACK_ID:
            e = (a & 1) == 1 ? true : false;
            break;
        case canvas.app.battle.Const.MIDDLE_ATTACK_ID:
            e = (a & 2) >> 1 == 1 ? true : false;
            break;
        case canvas.app.battle.Const.BOTTOM_ATTACK_ID:
            e = (a & 4) >> 2 == 1 ? true : false;
            break
        }
    }
    return e
}
;
canvas.app.battle.Main.prototype.isInAttackMode = function() {
    return this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK
}
;
canvas.app.battle.Main.prototype.handlerBlockSwitch = function(t) {
    var e = canvas.app.battle.model;
    if (!this.isInAttackMode()) {
        return
    }
    var a = Date.now();
    if (a - e.blockTime < 5e3) {
        return
    }
    e.blockTime = a;
    var i = e.memDat[e.persId];
    var s = i.persFlags;
    if (!e.testFlag(s, canvas.app.battle.Const.FS_PF_STUNNED)) {
        if (e.testFlag(s, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            s &= 4294967039;
            this.view.centerView.activeBlock(false)
        } else {
            s |= canvas.app.battle.Const.FS_PF_DEFENDED;
            this.view.centerView.activeBlock(true)
        }
        this.mFunc.changeMode(e.testFlag(s, canvas.app.battle.Const.FS_PF_DEFENDED) ? 1 : 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED)
    }
}
;
canvas.app.battle.Main.prototype.handlerChangeCenterMode = function(t) {
    this.model.centerMode = t.params
}
;
canvas.app.battle.Main.prototype.handlerCenterVisible = function(t) {
    this.centerVisible(t.params)
}
;
canvas.app.battle.Main.prototype.handlerEffectAfterSpell = function(t) {
    this.model.animationLock = false;
    this.mCmd.paksReadyAndParse()
}
;
canvas.app.battle.Main.prototype.handlerEffectAfterDrink = function(t) {
    this.mCmd.paksReadyAndParse()
}
;
canvas.app.battle.Main.prototype.handlerFlagClick = function(t) {
    if (canvas.app.battle.model.flagTime <= 0) {
        this.mFunc.useEffect(canvas.app.battle.model.flagEffId);
        this.mCmd.paksReadyAndParse()
    }
}
;
canvas.app.battle.Main.prototype.handlerReset = function(t) {
    this.model.reset();
    this.view.topTimer.deactivate();
    this.centerVisible(false)
}
;
canvas.app.battle.Main.prototype.handlerTryReconnect = function(t) {
    this.conn.tryConnect()
}
;
canvas.app.battle.Main.prototype.handlerRepair = function(t) {
    this.view.mainPopup.deactivate();
    canvas.app.battle.model.repair();
    this.handlerTryReconnect()
}
;
canvas.app.battle.Main.prototype.handlerOpenComboList = function(t) {
    this.view.openComboList()
}
;
canvas.app.battle.Main.prototype.handlerChooseCombo = function(t) {
    this.view.comboView.chooseCombo(t.params)
}
;
canvas.app.battle.Main.prototype.handlerShowBowPanel = function(t) {
    this.view.showBowPanel(t.params)
}
;
canvas.app.battle.Main.prototype.handlerUseEffect = function(t) {
    this.view.centerView.useEffect(t.params)
}
;
canvas.app.battle.Main.prototype.handlerShowError = function(t) {
    this.view.showErrorPopup(t.params)
}
;
canvas.app.battle.Main.prototype.handlerShowMessage = function(t) {
    this.view.showMessagePopup(t.params.mode, t.params.headerLabel, t.params.bodyLabel, t.params.yesFunc, t.params.yesFuncParams, t.params.acceptLabel, t.params.banLabel, t.params.cancelLabel, t.params.num)
}
;
canvas.app.battle.Main.prototype.setSyncTimeout = function() {
    if (this.syncTimeout) {
        clearTimeout(this.syncTimeout)
    }
    this.syncTimeout = setTimeout(this.mFunc.persState.bind(this.mFunc), canvas.app.battle.Const.STATE_SYNC_INTERVAL, "SYNC")
}
;
canvas.app.battle.Main.prototype.clearSyncTimeout = function() {
    if (this.syncTimeout) {
        clearTimeout(this.syncTimeout);
        this.syncTimeout = 0
    }
    if (this.mCmd.myEffectsListIV != 0) {
        clearTimeout(this.mCmd.myEffectsListIV);
        this.mCmd.myEffectsListIV = 0
    }
    this.evMonClear();
    this.model.mlInterval = 1e3
}
;
canvas.app.battle.Main.prototype.evMonInit = function() {
    this.evMonClear();
    this.evMonInterval = setInterval(this.evMonApply.bind(this), 3e3)
}
;
canvas.app.battle.Main.prototype.evMonClear = function() {
    if (this.evMonInterval) {
        clearInterval(this.evMonInterval)
    }
}
;
canvas.app.battle.Main.prototype.evMonApply = function() {
    this.model.evActivity = Math.floor(this.model.evActivityTmp / 3);
    this.model.evActivityTmp = 0;
    if (this.model.evActivity < 10) {
        this.model.mlInterval = 1e3
    } else if (this.model.evActivity < 30) {
        this.model.mlInterval = 3e3
    } else if (this.model.evActivity < 60) {
        this.model.mlInterval = 5e3
    } else if (this.model.evActivity < 100) {
        this.model.mlInterval = 7e3
    } else if (this.model.evActivity < 150) {
        this.model.mlInterval = 1e4
    } else {
        this.model.mlInterval = 15e3
    }
}
;
canvas.app.battle.Main.prototype.mlRepInit = function() {
    if (this.mlRepInterval) {
        clearTimeout(this.mlRepInterval)
    }
    setTimeout(this.mlSend.bind(this), canvas.app.battle.model.mlInterval)
}
;
canvas.app.battle.Main.prototype.mlSend = function() {
    var t = canvas.app.battle.model;
    t.mlBuffer = "";
    for (var e = 0; e < t.mlBufferQueue.length; e++) {
        t.mlBuffer += (t.mlBuffer.length > 0 ? t.ch2 : "") + t.mlBufferHash[t.mlBufferQueue[e]]
    }
    if (t.mlBuffer.length > 0) {
        if (t.memStreamBool) {
            if (t.mlBuffer.length < 20 * 1024) {
                this.sendData("mem", "pak2@" + t.mlBuffer)
            } else {
                var a = t.mlBuffer;
                while (a.length > 0) {
                    this.sendData("mem", "pak2s@" + a.substr(0, 15 * 1024));
                    a = a.substr(15 * 1024)
                }
                this.sendData("mem", "pak1s@done")
            }
        }
        t.mlBuffer = "";
        t.mlBufferHash = {};
        t.mlBufferQueue = []
    }
    this.mlRepInit()
}
;
canvas.app.battle.Main.prototype.handlerAddEvent = function(t) {
    canvas.app.battle.model.addEvent(t.params.params, t.params.code)
}
;
canvas.app.battle.Main.prototype.handlerAddCommand = function(t) {
    canvas.app.battle.model.addCommand(t.params.params, t.params.code)
}
;
canvas.app.battle.Main.prototype.handlerEvent = function(e) {
    try {
        var t = e.params.rid;
        var a = e.params.code;
        var i = this.model.serverParser;
        switch (a) {
        case i.FS_PE_OPPWAIT:
            this.mEve.oppWait();
            break;
        case i.FS_PE_OPPNEW:
            this.mEve.oppNew();
            break;
        case i.FS_PE_FIGHTSTATE:
            this.mEve.fightState();
            break;
        case i.FS_PE_NEWPERS:
            this.mEve.newPers();
            break;
        case i.FS_PE_ATTACKWAIT:
            this.mEve.attackWait();
            break;
        case i.FS_PE_ATTACKNOW:
            this.mEve.attackNow();
            break;
        case i.FS_PE_ATTACK:
            this.mFunc.effectList(this.model.persId);
            this.mFunc.effectList(this.model.oppId);
            this.mEve.attack();
            break;
        case i.FS_PE_FIGHTLOG:
            this.mEve.fightLog();
            break;
        case i.FS_PE_ATTACKTIMEOUT:
            this.mEve.attackTimeout();
            break;
        case i.FS_PE_FIGHTOVER:
            this.mEve.fightOver();
            break;
        case i.FS_PE_SRVSHUTDOWN:
            this.mEve.srvShutdown();
            break;
        case i.FS_PE_EFFECTAPPLY:
            this.mEve.effectApply(t);
            break;
        case i.FS_PE_EFFECTUSE:
            this.mEve.effectUse();
            break;
        case i.FS_PE_DAMAGE:
            this.mEve.damage();
            break;
        case i.FS_PE_DEATH:
            this.mEve.death();
            break;
        case i.FS_PE_MYFIGHTRETURN:
            this.mEve.fightReturn();
            break;
        case i.FS_PE_MSG:
            this.mEve.msg();
            break;
        case i.FS_PE_MANNACONSUM:
            this.mEve.manaConsum();
            break;
        case i.FS_PE_ENERGYCONSUM:
            this.mEve.energyConsum();
            break;
        case i.FS_PE_ENERGYREGEN:
            this.mEve.energyRegen();
            break;
        case i.FS_PE_ARROWCONSUM:
            this.mEve.arrowConsum();
            break;
        case i.FS_PE_EFFUPDATE:
            this.mEve.updateItems();
            break;
        case i.FS_PE_EFFSWAP:
            this.mEve.effectSwap();
            break;
        case i.FS_PE_RESETCOMBO:
            this.mEve.resetCombo();
            break;
        case i.FS_PE_DEADCNT:
            this.mEve.deadCnt();
            break;
        case i.FS_PE_FIGHTLAUNCH:
            this.mEve.fightLaunch();
            break;
        case i.FS_PE_CDDEC:
            this.mEve.cdDec();
            break;
        case -1:
            this.mEve.socOnClose();
            break;
        default:
            if (!i.strEve[a]) {
                canvas.app.battle.log("WARN: unknown event code=" + String(a), 16711680)
            } else {
                canvas.app.battle.log("WARN: unhandled event " + i.strEve[a] + " code=" + String(a), 16711680)
            }
            this.mCmd.paksReadyAndParse();
            break
        }
    } catch (t) {
        canvas.app.battle.log("ERROR IN EVE EXECUTION: id=" + e.params.event[0] + ", params=" + JSON.stringify(e.params.event[1]) + ", rid=" + e.params.event[2], 16711680);
        canvas.app.battle.log(t.toString(), 16711680);
        this.mCmd.paksReadyAndParse()
    }
}
;
canvas.app.battle.Main.prototype.handlerCmd = function(e) {
    try {
        var t = e.params.code;
        var a = this.model.serverParser;
        canvas.app.battle.log("handlerCmd " + a.strCmd[t], 170);
        canvas.app.battle.log("   * code=" + t);
        canvas.app.battle.log("   * main_teration=" + this.model.mainStep);
        if (this.model.watchFight && this.model.wfCnt != this.model.wfGet && t != a.FS_SCCL_WATCH_FIGHT) {
            canvas.app.battle.log("   * handle command was skipped, because  new_pers_id was changed", 16711680);
            this.mCmd.paksReadyAndParse();
            return
        }
        switch (t) {
        case a.FS_SCCL_INIT:
            this.conn.inited = true;
            this.model.mainStep = canvas.app.battle.Const.MAIN_STEP_STATE;
            this.model.paksReady = true;
            this.mainIteration();
            break;
        case a.FS_SCCL_STATE:
            this.mCmd.state();
            break;
        case a.FS_SCCL_PERS_INFO:
            if (this.mFunc.defferedEffects[a.params[2].val]) {
                var i = this.mFunc.defferedEffects[a.params[2].val];
                delete this.mFunc.defferedEffects[a.params[2].val];
                this.mCmd.cmdAnyPersInfo();
                this.mFunc.useEffect(i.effId, i.tarId, i.tarTeam);
                this.mCmd.paksReadyAndParse()
            } else {
                this.mCmd.persInfo()
            }
            break;
        case a.FS_SCCL_PERS_PARTS:
            this.mCmd.persParts();
            break;
        case a.FS_SCCL_EFFECTS:
            this.mCmd.effects();
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_PERS_ACT_EFFECTS:
            this.mCmd.persActEffects();
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_ATTACK:
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_CHANGE_MODE:
            this.mCmd.changeMode();
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_FIGHT_STATE:
            this.mCmd.fightState();
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_PERS_SUBSCRIBE:
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_USE_EFFECT:
            this.mCmd.useEffect();
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_SEND_MSG:
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_WATCH_FIGHT:
            this.mCmd.watchFight();
            break;
        case a.FS_SCCL_EFFECT_SWAP_SUBSLOT:
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_DROP_EFFECT:
            this.mCmd.unsetAura();
            this.mCmd.paksReadyAndParse();
            break;
        case a.FS_SCCL_SKIP_TURN:
            this.mCmd.skipTurn();
            this.mCmd.paksReadyAndParse();
            break;
        default:
            canvas.app.battle.log("WARN: unknown cmd=" + String(t), 16711680)
        }
    } catch (t) {
        canvas.app.battle.log("ERROR IN CMD EXECUTION: id=" + e.params.command[0] + ", params=" + JSON.stringify(e.params.command[1]), 16711680);
        canvas.app.battle.log(t.toString(), 16711680);
        this.mCmd.paksReadyAndParse()
    }
}
;
canvas.app.battle.Main.prototype.handlerCmdError = function(t) {
    var e = t.params.code;
    var a = this.model.serverParser;
    this.model.fightStateExecuting = false;
    switch (e) {
    case a.FS_SCCL_INIT:
        canvas.app.battle.log("ERR: authorization failed", 16711680);
        if (a.params[1].val == a.FS_SS_WRONG_DATA) {
            this.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_AUTH_FAIL)
        } else {
            this.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_FIGHT_ENDED)
        }
        this.clearSyncTimeout();
        this.conn.stopTransfers();
        break;
    case a.FS_SCCL_USE_EFFECT:
        canvas.app.battle.log("WARN: cant use effect", 10027008);
        this.view.showErrorPopup(canvas.Translator.getText(19));
        if (this.model.oppId != 0) {
            this.view.centerView.cDot.switchDot(true)
        }
        var i = a.params.length > 4 ? a.params[4].val : 0;
        canvas.app.battle.log("usageStatus=" + i, 10027008);
        switch (i) {
        case -10:
            this.view.showErrorPopup(canvas.Translator.getText(21));
            break;
        case -20:
            this.view.showErrorPopup(canvas.Translator.getText(23));
            break;
        case -30:
            this.view.showErrorPopup(canvas.Translator.getText(25));
            break;
        case -35:
            this.view.showErrorPopup(canvas.Translator.getText(70));
            break;
        case -40:
            this.view.showErrorPopup(canvas.Translator.getText(24));
            break;
        case -44:
            this.view.showErrorPopup(canvas.Translator.getText(26));
            break;
        case -46:
            this.view.showErrorPopup(canvas.Translator.getText(27));
            break;
        case -45:
            this.view.showErrorPopup(canvas.Translator.getText(28));
            break;
        default:
            this.view.showErrorPopup(canvas.Translator.getText(19));
            break
        }
        this.view.centerView.spellsUnlockOnError(a.params[2].val);
        if (this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
            if (!this.view.centerView.visible) {
                this.centerVisible(true)
            }
        }
        if (this.model.oppId == 0)
            this.showSpellBookInWaitOpponent();
        this.mCmd.paksReadyAndParse();
        break;
    case a.FS_SCCL_ATTACK:
        canvas.app.battle.log("WARN: cant attack", 10027008);
        this.centerVisible(true);
        this.mCmd.paksReadyAndParse();
        break;
    case a.FS_SCCL_CHANGE_MODE:
        canvas.app.battle.log("WARN: cant change mode", 10027008);
        this.mCmd.paksReadyAndParse();
        break;
    case a.FS_SCCL_PERS_ACT_EFFECTS:
        canvas.app.battle.log("WARN: cant get act effects", 10027008);
        this.mCmd.paksReadyAndParse();
        break;
    default:
        canvas.app.battle.log("FATAL ERROR code=" + String(e), 16711680);
        var s = "Неизвестная ошибка\ncode=" + String(e) + " cmd=" + a.strCmd[e];
        this.view.showMainPopup(canvas.app.battle.Const.POP_ST_UNKNOWN, canvas.app.battle.Const.POP_ER_NO_CODE, canvas.Translator.getText(4), s);
        this.clearSyncTimeout();
        this.conn.stopTransfers();
        this.view.topTimer.deactivate();
        this.centerVisible(false)
    }
}
;
canvas.app.battle.Main.prototype.centerVisible = function(t) {
    var e = canvas.app.battle.model;
    if (e.skipTurnIsCooldown())
        return;
    if (t && !e.watchFight) {
        if (e.testFlag(e.memDat[e.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
            this.view.centerView.cDot.setIcon(canvas.app.battle.Const.MODE_SPELLS)
        }
        this.testCenterMode();
        this.view.centerView.setVisible(true);
        this.model.centerVisible = true;
        if (this.view.bowPanel)
            this.view.bowPanel.locked = false;
        this.view.centerView.cDot.switchDot(true);
        if (e.testFlag(e.memDat[e.persId].persFlags, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            this.view.centerView.activeBlock(true)
        }
    } else {
        this.view.centerView.setVisible(false);
        this.model.centerVisible = false;
        if (this.view.bowPanel)
            this.view.bowPanel.locked = true
    }
}
;
canvas.app.battle.Main.prototype.testCenterMode = function() {
    var t = canvas.app.battle.model;
    if (t.watchFight)
        return;
    if (this.view.centerView.mode == canvas.app.battle.Const.MODE_SPELLS && !t.testFlag(t.memDat[t.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
        canvas.Functions.destroyChildren(this.players[t.persId].magicStandBase);
        this.view.centerView.changeControlMode(true)
    } else if (this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK && t.testFlag(t.memDat[t.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
        this.view.centerView.changeControlMode(true)
    }
}
;
canvas.app.battle.Main.prototype.swfData = function(t, e) {
    canvas.Log.add(canvas.Log.BATTLE, "swf_transfer:swfData " + t + " " + e);
    var a = e.split("@");
    if (a.length != 2) {
        canvas.Log.add(canvas.Log.BATTLE, "WARN: invalid data", 16711680);
        return
    }
    switch (a[0]) {
    case "ping":
        break;
    case "useEffect":
        this.mFunc.useEffect(parseInt(a[1]));
        break;
    case "swapSubSlot":
        this.mFunc.swapSubSlot(parseInt(a[1]));
        break;
    case "FullReq":
        this.fullReq();
        break;
    case "persFocus":
        this.persFocus(parseInt(a[1]));
        break;
    case "showHPMP":
        this.showHpMp(a[1]);
        break;
    case "watchFightPID":
        this.watchFightStart(a[1]);
        break;
    case "persVisible":
        this.model.persVisible = a[1].split(",");
        break;
    default:
        canvas.app.battle.log('WARN: unhandled event "' + a[0] + '"', 16711680);
        break
    }
}
;
canvas.app.battle.Main.prototype.sendData = function(t, e) {
    canvas.Log.add(canvas.Log.BATTLE, "swf_transfer:sendData " + t + " " + e);
    if (typeof swfTransfer != "undefined")
        return swfTransfer("game", t, e)
}
;
canvas.app.battle.Main.prototype.setBowsInfo = function(t, e, a) {
    this.model.arrowsCount = t;
    this.model.bowEnergyValue = e;
    this.model.bowEnergyMax = a;
    this.view.bowPanel.setProgress(e, a)
}
;
canvas.app.battle.Main.prototype.updateAuras = function(t) {
    this.view.centerView.cAttack.auraControl.visible = this.model.auras.length > 0;
    if (t == this.model.persId)
        this.view.centerView.cAttack.auraControl.update();
    this.testAuraCircleAnim(t)
}
;
canvas.app.battle.Main.prototype.testAuraCircleAnim = function(t) {
    if (!this.players[t])
        return;
    var e = canvas.app.battle.model;
    var a = e.memDat[t];
    var i = a.persFlags;
    var s = t == e.persId ? e.currentAura != "" : e.currentAuraOpp != "";
    canvas.Functions.destroyChildren(this.players[t].magicStandBase);
    if (!e.testFlag(i, canvas.app.battle.Const.FS_PF_MAGIC) && s && e.memClsMage[t].cls != 0) {
        var n = "spell" + e.memClsMage[t].cls + "base_aura";
        var r = new canvas.px.MovieClip(canvas.Config.spellsPath + n);
        r.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        r.loop = true;
        this.players[t].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,true,r,true))
    }
}
;
canvas.app.battle.Main.prototype.mainIteration = function() {
    if (!this.model.online) {
        return
    }
    canvas.app.battle.log("mainIteration: " + this.model.mainStep);
    switch (this.model.mainStep) {
    case canvas.app.battle.Const.MAIN_STEP_INIT:
        this.mFunc.authorization();
        break;
    case canvas.app.battle.Const.MAIN_STEP_STATE:
        this.mFunc.persState();
        break;
    case canvas.app.battle.Const.MAIN_STEP_INFO:
        if (this.model.watchFight)
            this.mFunc.watchFight();
        this.mFunc.persInfo(this.model.newPersId);
        this.mFunc.persEffects();
        break;
    case canvas.app.battle.Const.MAIN_STEP_DONE:
        if (this.model.newPersId != this.model.persId) {
            this.mCmd.paksReadyAndParse();
            return
        }
        if (this.model.watchFight) {
            this.setupWatchFightBts(true);
            this.centerVisible(false);
            this.view.mainPopup.deactivate();
            if (this.model.myPersId == this.model.newPersId) {
                this.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT)
            }
            this.view.comboView.visible = false
        }
        if (this.model.oppId != 0) {
            this.mFunc.persInfo(this.model.oppId)
        } else {
            this.showSpellBookInWaitOpponent();
            this.mCmd.paksReadyAndParse()
        }
        try {
            if (!canvas.Config.isLocal) {
                new canvas.utils.URLRequest(canvas.Config.domain + "/fight.php?sig=" + md5(canvas.app.battle.Const.MAX_ANIMATION_SIZE) + "&check=1").load()
            }
        } catch (t) {
            canvas.app.battle.log("mainIteration: ERR: loading check 1", 16711680)
        }
        break;
    default:
        canvas.app.battle.log("mainIteration: WARN: unknown main_step = " + this.model.mainStep, 16711680)
    }
}
;
canvas.app.battle.Main.prototype.setupWatchFightBts = function(t, e) {
    if (typeof t == "undefined")
        t = false;
    if (typeof e == "undefined")
        e = false;
    if (e) {
        this.sendData("mem", "watchFightActive@" + t.toString() + this.model.ch1 + this.model.persTeam.toString() + this.model.ch1 + this.model.persId.toString())
    } else {
        this.sendData("mem", "watchFightActive@" + t.toString() + this.model.ch1 + this.model.persTeam.toString())
    }
}
;
canvas.app.battle.Main.prototype.showSpellBookInWaitOpponent = function() {
    var t = canvas.app.battle.model;
    if (t.watchFight) {
        canvas.app.battle.log("Main: showSpellBookInWaitOpponent: WATCH_FIGHT mode is true", 16711680);
        return
    }
    this.view.mainPopup.deactivate();
    if (t.hasSpells && t.persStatus != canvas.app.battle.Const.STATUS_DEAD && t.fightRunning) {
        canvas.app.battle.log("Main: showSpellBookInWaitOpponent: pers has spells && pers status != STATUS_DEAD, fight visible");
        this.view.centerView.setVisible(true);
        if (this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK) {
            canvas.app.battle.log("Main: showSpellBookInWaitOpponent: Fight mode is attack, change control mode");
            var e = true;
            this.view.centerView.changeControlMode(e);
            if (t.memClsMage[t.persId].cls != 0) {
                var a = "spell" + t.memClsMage[t.persId].cls + "base_stand";
                var i = new canvas.px.MovieClip(canvas.Config.spellsPath + a);
                i.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                i.loop = true;
                if (this.players[t.persId].magicStandBase.children.length == 0) {
                    this.players[t.persId].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,true,i,true))
                }
            }
        } else {
            this.view.centerView.cDot.setIcon(canvas.app.battle.Const.MODE_SPELLS, true)
        }
        var s = true;
        this.view.centerView.addSpellCoolDown(1, s);
        this.view.centerView.cDot.switchDot(false)
    } else if (t.persStatus != canvas.app.battle.Const.STATUS_DEAD) {
        canvas.app.battle.log("Main: showSpellBookInWaitOpponent: pers !has_spells || pers status == STATUS_DEAD, fight unvisible, top_popup set POP_ST_WAIT");
        this.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT);
        this.view.centerView.setVisible(false)
    } else if (t.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        this.view.centerView.setVisible(false)
    }
    this.updateKeyCallbacks()
}
;
canvas.app.battle.Main.prototype.updateKeyCallbacks = function() {
    if (this.view.centerView.visible) {
        this.view.centerView.turnOnKeyCallbacks()
    } else {
        this.view.centerView.turnOffKeyCallbacks()
    }
}
;
canvas.app.battle.Main.prototype.updPersHPLvl = function() {
    if (this.model.watchFight) {
        return
    }
    this.sendData("lvl", "updHP@" + this.model.persHp.toString() + "," + this.model.persHpMax.toString())
}
;
canvas.app.battle.Main.prototype.updPersMPLvl = function() {
    if (this.model.watchFight) {
        return
    }
    this.sendData("lvl", "updMP@" + this.model.persMp.toString() + "," + this.model.persMpMax.toString())
}
;
canvas.app.battle.Main.prototype.checkPlayersQueue = function(t) {
    this.playersQueue.push(t);
    if (this.playersQueue.length > canvas.app.battle.Const.PLAYERS_QUEUE_MAXLEN) {
        var e = this.playersQueue.shift();
        this.view.player2.removeChild(this.players[e]);
        this.players[e].destroy();
        this.players[e] = null
    }
}
;
canvas.app.battle.Main.prototype.loadPers = function(t) {
    canvas.app.battle.log("Main:loadPers(" + t + ")");
    var e;
    var a;
    var i;
    var s = true;
    if (!this.players[t]) {
        s = false;
        this.players[t] = new canvas.app.battle.view.Pers(this);
        if (t != this.model.persId) {
            this.checkPlayersQueue(t)
        }
    }
    if (t == this.model.persId) {
        if (this.model.persSk < canvas.app.battle.Const.BOTID1) {
            e = canvas.Config.skPath + this.model.persGender + "/sk" + canvas.Functions.setNumberLen(String(this.model.persSk), 2)
        } else {
            e = canvas.Config.botsPath + "img" + canvas.Functions.setNumberLen(String(this.model.persSk), 4) + "/img" + canvas.Functions.setNumberLen(String(this.model.persSk), 4)
        }
        a = this.model.persSk;
        i = this.model.persGender;
        this.view.player1.addChild(this.players[t])
    } else {
        if (this.model.oppSk < canvas.app.battle.Const.BOTID1) {
            e = canvas.Config.skPath + this.model.oppGender + "/sk" + canvas.Functions.setNumberLen(String(this.model.oppSk), 2)
        } else {
            e = canvas.Config.botsPath + "img" + canvas.Functions.setNumberLen(String(this.model.oppSk), 4) + "/img" + canvas.Functions.setNumberLen(String(this.model.oppSk), 4)
        }
        a = this.model.oppSk;
        i = this.model.oppGender;
        this.view.player2.addChild(this.players[t])
    }
    if (a < canvas.app.battle.Const.BOTID1 || a >= canvas.app.battle.Const.BOTID2) {
        this.players[t].scale.set(.8, .8)
    }
    this.players[t].addFuncShow = this.loadPersDone.bind(this);
    var n = this.model.memDat[t];
    var r = n.persFlags;
    var o = this.model.testFlag(r, canvas.app.battle.Const.FS_PF_PET);
    if (this.players[t].pet && (t == this.model.persId && this.model.persStatus == canvas.app.battle.Const.STATUS_DEAD || t == this.model.oppId && this.model.oppStatus == canvas.app.battle.Const.STATUS_DEAD)) {
        this.players[t].pet.dieFlag = true
    }
    this.players[t].showPet(o, n["petSrc"]);
    this.players[t].config({
        pers_id: t,
        pers_sk: a,
        pers_sk_link: e,
        pers_gender: i
    });
    this.players[t].loadBegin()
}
;
canvas.app.battle.Main.prototype.showLoadedPers = function() {
    this.loadPersDone({
        pers_id: this.model.persId
    })
}
;
canvas.app.battle.Main.prototype.eveOppNewNoSh = function() {
    if (this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
        this.view.topTimer.activate();
        this.centerVisible(true)
    }
    this.mCmd.paksReadyAndParse()
}
;
canvas.app.battle.Main.prototype.loadPersDone = function(t) {
    var e = t.pers_id;
    if (e == this.model.persId) {
        this.model.mainStep = canvas.app.battle.Const.MAIN_STEP_DONE;
        this.model.paksReady = true;
        this.mainIteration()
    } else {
        if (this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
            this.view.topTimer.activate();
            this.centerVisible(true)
        }
        this.mCmd.paksReadyAndParse()
    }
}
;
canvas.app.battle.Main.prototype.chekStatusForResurection = function() {
    var t = canvas.app.battle.model;
    if (t.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        t.persDown = false;
        this.players[t.persId].gotoAndPlay(this.getPostLabel(t.persId));
        this.view.mainPopup.deactivate()
    }
}
;
canvas.app.battle.Main.prototype.flagLoadPers = function(t) {
    if (!t || t == "0") {
        canvas.Functions.destroyChildren(this.view.flagPers);
        return
    }
    var e = new canvas.px.MovieClip(canvas.Config.flagsPath + "f" + t + "/f" + t);
    e.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    e.loop = true;
    this.view.flagPers.addChild(e);
    this.view.flagButton.visible = true;
    this.model.flagTime = this.model.flagTimeLeft;
    this.view.flagPers.visible = true
}
;
canvas.app.battle.Main.prototype.flagLoadOpp = function(t) {
    if (!t || t == "0") {
        return
    }
    var e = new canvas.px.MovieClip(canvas.Config.flagsPath + "f" + t + "/f" + t);
    e.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    e.loop = true;
    this.view.flagOpp.addChild(e);
    this.view.flagOpp.visible = true
}
;
canvas.app.battle.Main.prototype.getPostLabel = function(t) {
    var e = this.model;
    var a = e.memDat[t];
    var i = a.persFlags;
    var s = canvas.app.battle.Const.FS_PF_IDLE_STR;
    if (e.persStatus == canvas.app.battle.Const.STATUS_WAIT && e.hasSpells && this.view.centerView.mode == canvas.app.battle.Const.MODE_SPELLS && !e.testFlag(i, canvas.app.battle.Const.FS_PF_MAGIC)) {
        if (e.memClsMage[t].cls != 0) {
            var n = "spell" + e.memClsMage[t].cls + "base_stand";
            var r = new canvas.px.MovieClip(canvas.Config.spellsPath + n);
            r.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
            r.loop = true;
            if (this.players[t].magicStandBase.children.length == 0) {
                this.players[t].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,true,r,true))
            }
        }
        if (e.testFlag(i, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            return canvas.app.battle.Const.FS_PF_DEFENDED_STR
        }
    } else {
        this.testAuraCircleAnim(t);
        if (e.testFlag(i, canvas.app.battle.Const.FS_PF_STUNNED)) {
            s = canvas.app.battle.Const.FS_PF_STUNNED_STR
        } else if (e.testFlag(i, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            s = canvas.app.battle.Const.FS_PF_DEFENDED_STR
        } else if (e.testFlag(i, canvas.app.battle.Const.FS_PF_MAGIC)) {
            if (e.memClsMage[t].cls != 0) {
                var o = "spell" + e.memClsMage[t].cls + "base_stand";
                var l = new canvas.px.MovieClip(canvas.Config.spellsPath + o);
                l.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                l.loop = true;
                if (this.players[t].magicStandBase.children.length == 0) {
                    this.players[t].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,true,l,true))
                }
            }
        } else {
            return s
        }
    }
    if (!this.players[t].allLabels[s]) {
        return canvas.app.battle.Const.FS_PF_IDLE_STR
    }
    return s
}
;
canvas.app.battle.Main.prototype.persesHide = function() {
    var t = this.model;
    this.cntHided = 0;
    this.curCntHided = 0;
    var e = this.players[t.persId];
    if (e && e.visible) {
        this.cntHided++;
        e.addFuncHide = this.handlerHideOver.bind(this);
        e.hideBody()
    }
    if (t.oppId != 0) {
        var a = this.players[t.oppId];
        if (a && a.visible) {
            this.cntHided++;
            a.addFuncHide = this.handlerHideOver.bind(this);
            a.hideBody()
        }
    }
    if (this.cntHided == 0) {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PERSES_HIDED)
    }
}
;
canvas.app.battle.Main.prototype.handlerHideOver = function(t) {
    this.curCntHided++;
    if (this.curCntHided != this.cntHided)
        return;
    this.view.effectsP2.initEffects([]);
    this.view.oppNick.unshow();
    this.view.oppLevel.setLevel("");
    this.view.effectsP1.initEffects([]);
    this.view.persNick.unshow();
    this.view.persLevel.setLevel("");
    this.view.hpmp.setHpOpp(0, 0);
    this.view.hpmp.setMpOpp(0, 0);
    this.view.hpmp.setHpPers(0, 0);
    this.view.hpmp.setMpPers(0, 0);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PERSES_HIDED)
}
;
canvas.app.battle.Main.prototype.sndPlay = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "default/" + t + ".mp3")
}
;
canvas.app.battle.Main.prototype.sndPlayInternal = function(t, e) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "bots/img" + canvas.Functions.setNumberLen(e, 4) + "/" + t)
}
;
canvas.app.battle.Main.prototype.watchFightStart = function(t, e) {
    if (typeof e == "undefined")
        e = false;
    var a = canvas.app.battle.model;
    if (a.newPersId == t)
        return;
    while (a.paksEveCache[0]) {
        if (a.paksEveCache[0][1][1].val == a.serverParser.FS_PE_MYFIGHTRETURN) {
            this.setupWatchFightBts(false);
            return
        } else {
            a.paksEveCache.shift()
        }
    }
    a.newPersId = parseInt(t);
    a.wfCnt++;
    a.watchFight = true;
    this.view.comboView.visible = false;
    this.view.topTimer.deactivate();
    this.centerVisible(false);
    a.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO;
    this.mainIteration()
}
;
canvas.app.battle.Main.prototype.persFocus = function(t) {
    var e = canvas.app.battle.model;
    var a = Date.now();
    e.persInFocus = t;
    if (!e.persBafsTimes[t] || a - e.persBafsTimes[t] > e.persBafsCooldown) {
        e.persBafsFlag = true;
        e.persBafsTimes[t] = a;
        this.mFunc.effectList(t)
    } else {}
    this.view.updateFocus()
}
;
canvas.app.battle.Main.prototype.fullReq = function() {
    if (canvas.app.battle.model.mainStep == canvas.app.battle.Const.MAIN_STEP_DONE) {
        this.mFunc.fightState(0, 0);
        this.mlRepInit();
        this.evMonInit();
        this.sendData("mem", "stopReq@null")
    }
    this.persStateInterval = setInterval(this.mFunc.persStateRequest.bind(this.mFunc), canvas.app.battle.Const.PERS_STATE_INTERVAL);
    this.mFunc.persStateRequest()
}
;
canvas.app.battle.Main.prototype.showHpMp = function(t) {
    this.mFunc.changeMode(parseInt(t), 2);
    canvas.app.battle.model.updateHpMp = t == "1"
}
;
canvas.app.battle.Main.prototype.afterWound = function(t) {
    if (!this.model.animationLock) {
        this.players[this.model.persId].inMotion = false;
        if (this.players[this.model.oppId]) {
            this.players[this.model.oppId].inMotion = false
        }
        this.mCmd.paksReadyAndParse()
    }
}
;
canvas.app.battle.Main.prototype.persMotionDone = function(t) {
    var e = this.model;
    if (!(t == e.persId || t == e.oppId)) {
        canvas.app.battle.log("Main.persMotionDone WARN: this pers is not active", 16711680);
        return
    }
    this.players[t].inMotion = false;
    if (!this.players[e.persId].inMotion && (this.players[e.oppId] && !this.players[e.oppId].inMotion)) {
        if (e.oppHp == 0) {
            this.players[e.oppId].addFuncDie = this.persMotionDoneOnDead.bind(this);
            this.players[e.oppId].dieBody()
        } else {
            this.mCmd.paksReadyAndParse()
        }
    }
}
;
canvas.app.battle.Main.prototype.persMotionDoneOnDead = function() {
    this.view.effectsP2.initEffects([]);
    this.mCmd.paksReadyAndParse()
}
;
canvas.app.battle.Main.prototype.useAura = function(t) {
    if (!this.view.centerView.visible || this.view.centerView.mode != canvas.app.battle.Const.MODE_ATTACK)
        return;
    this.view.centerView.cAttack.auraControl.useAura(t)
}
;
canvas.app.battle.Model = function(t) {
    this.parser = new canvas.app.battle.Parser(this);
    this.serverParser = new canvas.app.battle.engine.ServerParser;
    this._soundVolume = 1;
    Object.defineProperty(this, "soundVolume", {
        get: function() {
            return this._soundVolume
        },
        set: function(t) {
            this._soundVolume = t;
            this.localStorage.set("soundVolume", t);
            canvas.SoundManager.volume = this._soundMute ? 0 : this._soundVolume;
            this.updateSoundVolume()
        }
    });
    this._soundMute = false;
    Object.defineProperty(this, "soundMute", {
        get: function() {
            return this._soundMute
        },
        set: function(t) {
            this._soundMute = t;
            this.localStorage.set("soundMute", t);
            this.updateSoundVolume()
        }
    });
    this._oppId = 0;
    Object.defineProperty(this, "oppId", {
        get: function() {
            return this._oppId
        },
        set: function(t) {
            this._oppId = t;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.OPP_ID_CHANGE)
        }
    });
    this._animationLockTimeout;
    this._animationLock = false;
    Object.defineProperty(this, "animationLock", {
        get: function() {
            return this._animationLock
        },
        set: function(t) {
            this._animationLock = t;
            clearTimeout(this._animationLockTimeout);
            if (this._animationLock) {
                this._animationLockTimeout = setTimeout(this.handlerAnimationLockTimeout.bind(this), canvas.app.battle.Const.MAX_ANIMATION_LOCK_DELAY)
            }
        }
    });
    this._paksReady = true;
    Object.defineProperty(this, "paksReady", {
        get: function() {
            return this._paksReady
        },
        set: function(t) {
            this._paksReady = t;
            canvas.app.battle.log("paksReady: " + this._paksReady)
        }
    });
    this._popupPos = null;
    Object.defineProperty(this, "popupPos", {
        get: function() {
            return this._popupPos
        },
        set: function(t) {
            this._popupPos = t;
            this.localStorage.set("popupPos", t.x + "," + t.y)
        }
    });
    this.width = t.width ? t.width : 464;
    this.height = t.height ? t.height : 464;
    this.codePage = false;
    this.bgLink = t.bg ? canvas.Config.wwwPath + t.bg : canvas.Config.wwwPath + "canvas/img/odelvays_town.jpg";
    this.effConfLink = t.eff_conf ? t.eff_conf : canvas.Config.dataPath + "effect/cache.ui";
    this.isBold = t.nobold ? t.nobold != 1 : true;
    this.isNub = t.nub ? t.nub == 1 : false;
    this.islp3 = t.lp3 ? t.lp3 == "1" : false;
    this.showComboRender = t.showcombos ? parseInt(t.showcombos) != 0 && !this.islp3 : true;
    this.defaultSoundOn = t.soundOn ? t.soundOn == "1" : true;
    this.frameRateKoeff = t.speedx ? parseFloat(t.speedx) : 1;
    this.invisibleInfoUrl = t.invisible_info_url ? t.invisible_info_url : "";
    this.host = t.host ? t.host : "192.168.1.6";
    this.port = t.port ? t.port : "5432";
    this.wsHost = t.wsHost ? t.wsHost : "";
    this.proxyHost = t.lproxyHost ? t.lproxyHost : this.host + ":5433";
    this.sid = t.sid ? t.sid : "";
    this.proxy = t.wsHost ? t.proxy ? t.proxy == "1" : false : true;
    this.akey = t.akey ? parseInt(t.akey) : 0;
    this.urlFinish = t.url_finish ? t.url_finish : "finish.htm";
    this.urlFinish2 = t.url_finish2 ? t.url_finish2 : "";
    this.urlFinish2Text = t.url_finish2_text ? t.url_finish2_text : "";
    this.urlError = t.url_error ? t.url_error : "error.htm";
    this.fightId = t.fight_id ? parseInt(t.fight_id) : 9999;
    this.allowBowPanel = false;
    this.fightRunning = false;
    this.resurect = false;
    this.online = false;
    this.persIsBotFlag = false;
    this.persId = t.pers_id ? parseInt(t.pers_id) : 100;
    this.persNick = "";
    this.persRace = 0;
    this.persStatus = 0;
    this.myPersId = this.persId;
    this.newPersId = this.persId;
    this.tempDead = false;
    this.oppStatus = 0;
    this.newOppId = 0;
    this.persTeam = 0;
    this.persHp = 0;
    this.persHpMax = 0;
    this.persMp = 0;
    this.persMpMax = 0;
    this.persSk = 0;
    this.persSkTime = 0;
    this.persGender = "M";
    this.persDown = false;
    this.oppHp = 0;
    this.oppHpMax = 0;
    this.oppMp = 0;
    this.oppMpMax = 0;
    this.oppSk = 0;
    this.oppSkTime = 0;
    this.oppMask = 0;
    this.oppGender = "M";
    this.persInFocus = 0;
    this.auras = [];
    this.currentAura = "";
    this.currentAuraOpp = "";
    this.fightStateExecuting = false;
    this.persDmgCnt = 0;
    this.oppDmgCnt = 0;
    this.dmgEve = [];
    this.persAnimFlag = false;
    this.oppAnimFlag = false;
    this.attackTime = 0;
    this.abilityTemp = "";
    this.mainStep = "";
    this.roundTimeBase = 3e4;
    this.roundTime = 3e4;
    this.effectsMinCooldown = 3;
    this.myAllDataArray = {};
    this.memDat = {};
    this.memGenders = {};
    this.memClsMage = {};
    this.fullMlLoaded = false;
    this.mlInterval = 1e3;
    this.evActivity = 0;
    this.evActivityTmp = 0;
    this.serverTimestamp = 0;
    this.clientTimestamp = 0;
    this.flagEffId = 0;
    this.flagTimeCd = 0;
    this.flagTimeLeft = 0;
    this.flagTime = 0;
    this.fightServerId = t.fight_server_id ? t.fight_server_id : "";
    this.team1ServerUrl = t.team1_server_url ? t.team1_server_url : "";
    this.team2ServerUrl = t.team2_server_url ? t.team2_server_url : "";
    this.abils = {};
    this.hasSpells = false;
    this.spells = {};
    this.spellsBow = {};
    this.spellsBowOrder = [];
    this.abilsFlags = {};
    this.updateHpMp = true;
    this.watchFight = false;
    this.wfCnt = 0;
    this.wfGet = 0;
    this.defaultCombo = 0;
    this.skipTurnTime = 0;
    this.clanFlag = t.clan_banner ? parseInt(t.clan_banner) : 0;
    this.arrowsCount = 0;
    this.bowEnergyValue = 0;
    this.bowEnergyMax = 0;
    this.persVisible = [];
    this.persVisiblePrev = [];
    this.persBafsFlag = false;
    this.persBafsTimes = {};
    this.persBafsCooldown = 0;
    this.isPvp = false;
    this.fightResult = 0;
    this.shadowSummonable = t.shadowSummonable ? t.shadowSummonable == "1" : false;
    this.shadowSummonUrl = t.shadowSummonUrl ? t.shadowSummonUrl : "";
    this.shadowAvailable = t.shadowAvailable ? t.shadowAvailable == "1" : false;
    this.fightFlags = t.fight_flags ? parseInt(t.fight_flags) : 0;
    this.fps = Math.round(canvas.app.battle.Const.BASE_FRAMERATE * this.frameRateKoeff);
    if (canvas.getClientVersion() >= 5)
        this.fps += canvas.app.battle.Const.ADD_FRAMERATE;
    this.isUseHotkeys = t.use_hotkeys ? t.use_hotkeys == 1 : true;
    this.answersWait = 0;
    this.totalDamage = 0;
    this.waitingDamageCnt = -1;
    this.centerVisible = false;
    this.canLeaveFight = t.can_leave_fight == "1";
    this.blockTime = 0;
    this.ch1 = String.fromCharCode(1);
    this.ch2 = String.fromCharCode(2);
    this.paksEveCache = [];
    this.paksCmdCache = [];
    this.mlBufferHash = {};
    this.mlBufferQueue = [];
    this.mlBuffer = "";
    this.combos = [];
    this.relevantCmdId = 0;
    this.relevantCmdHash = {};
    this.memStreamBool = true;
    this.delayedAttackData = null;
    this.fullReqLoaded = false;
    this.persLastEffectsUpdateIndex = 0;
    this.oppLastEffectsUpdateIndex = 0;
    this.centerMode = canvas.app.battle.Const.MODE_ATTACK;
    if (t.combos) {
        var e = (new DOMParser).parseFromString("<root>" + t.combos + "</root>", "text/xml");
        var a = e.getElementsByTagName("combo");
        for (var i = 0; i < a.length; i++) {
            this.combos.push(new canvas.data.battle.ComboData(parseInt(a[i].attributes.id.value),a[i].attributes.description.value,parseInt(a[i].attributes.level.value),a[i].attributes.seq.value,a[i].attributes.title.value))
        }
        if (this.combos.length > 0) {
            this.defaultCombo = t.by_default ? parseInt(t.by_default) : this.combos[0].id;
            this.activeComboId = this.combos[0].id
        }
    }
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.BATTLE);
    this._soundVolume = this.localStorage.get("soundVolume") ? parseFloat(this.localStorage.get("soundVolume")) : 1;
    this._soundMute = this.defaultSoundOn ? this.localStorage.get("soundMute") == "true" : true;
    this.updateSoundVolume();
    var s, n = this.localStorage.get("popupPos");
    if (n) {
        s = n.split(",");
        this._popupPos = new canvas.px.Point(parseInt(s[0]),parseInt(s[1]))
    }
    this.repair()
}
;
canvas.app.battle.Model.prototype.parseEffectsConf = function(t) {
    var e = t.split("\n");
    var a, i, s = e.length;
    this.effects = [];
    for (a = 0; a < s; a++) {
        if (!e[a])
            continue;
        i = e[a].split(";");
        if (i.length < 3)
            continue;
        this.effects.push(new canvas.data.battle.EffectData(i[0],i[1],i[2].split(",")))
    }
}
;
canvas.app.battle.Model.prototype.getEffectLogImage = function(t, e) {
    var a, i, s = this.effects.length;
    for (a = 0; a < s; a++) {
        i = this.effects[a];
        if (i.type == t && i.ids.indexOf(e.toString()) >= 0) {
            return i.image
        }
    }
}
;
canvas.app.battle.Model.prototype.repair = function() {
    this.paksEveId = 0;
    this.paksEveCache = [];
    this.paksEveTimes = {};
    this.paksCmdId = 0;
    this.paksCmdCache = [];
    this.answersWait = 0;
    this.paksReady = true;
    this.online = false;
    this.persStatus = canvas.app.battle.Const.STATUS_CREATED;
    this.oppId = 0;
    this.oppStatus = canvas.app.battle.Const.STATUS_CREATED;
    this.newOppId = 0;
    this.persTeam = 0;
    this.mainStep = canvas.app.battle.Const.MAIN_STEP_INIT
}
;
canvas.app.battle.Model.prototype.reset = function() {
    this.paksReady = true;
    this.paksEveId = 0;
    this.paksEveCache = [];
    this.paksEveTimes = {};
    this.paksCmdId = 0;
    this.paksCmdCache = [];
    this.answersWait = 0;
    this.mainStep = canvas.app.battle.Const.MAIN_STEP_INIT
}
;
canvas.app.battle.Model.prototype.testFlag = function(t, e) {
    return (t & e) == e
}
;
canvas.app.battle.Model.prototype.resetString = function(t) {
    var e = "";
    var a;
    var i;
    for (a = 0; a < t.length; a++) {
        i = t.charCodeAt(a);
        if (i >= 192 && i <= 255) {
            i += 848
        }
        if (i == 184)
            i = "е".charCodeAt(0);
        if (i == 168)
            i = "Е".charCodeAt(0);
        e += String.fromCharCode(i)
    }
    return e
}
;
canvas.app.battle.Model.prototype.parsePersStatus = function(t, e) {
    var a = canvas.app.battle.Const;
    switch (t) {
    case a.STATUS_CREATED:
    case a.STATUS_DEAD:
        return t;
    default:
        switch (e) {
        case a.FS_PLS_ACTIVE:
            return a.STATUS_ACTIVE;
        case a.FS_PLS_PASSIVE:
            return a.STATUS_PASSIVE;
        case a.FS_PLS_PENDING:
            return a.STATUS_WAIT
        }
    }
    return 0
}
;
canvas.app.battle.Model.prototype.testPvpStatus = function(t, e) {
    if (this.isPvp)
        return;
    if (t != this.persTeam && !e)
        this.isPvp = true
}
;
canvas.app.battle.Model.prototype.skipTurnIsCooldown = function() {
    return Date.now() < this.skipTurnTime
}
;
canvas.app.battle.Model.prototype.handlerAnimationLockTimeout = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EFFECT_AFTER_SPELL)
}
;
canvas.app.battle.Model.prototype.getHintTextWithHotkey = function(t, e) {
    if (this.isUseHotkeys && e) {
        return t + " (" + e + ")"
    } else {
        return t
    }
}
;
canvas.app.battle.Model.prototype.clearEventsCache = function() {
    this.paksEveCache = []
}
;
canvas.app.battle.Model.prototype.testCurrentAura = function(t, e, a) {
    if (typeof a == "undefined")
        a = false;
    var i;
    var s = e == this.persId ? this.currentAura : this.currentAuraOpp;
    var n = false;
    for (var r = 0; r < this.auras.length; r++) {
        i = this.auras[r];
        if (i.id == t.toString()) {
            s = a ? "" : i.id;
            n = true;
            break
        }
    }
    if (e == this.persId) {
        this.currentAura = s
    } else {
        this.currentAuraOpp = s
    }
    return n
}
;
canvas.app.battle.Model.prototype.useFlag = function(t) {
    if (t == this.flagEffId) {
        this.flagTime = this.flagTimeCd
    }
}
;
canvas.app.battle.Model.prototype.getLostTime = function() {
    var t;
    if (this.paksEveTimes[this.currentEveId]) {
        t = Date.now() - this.paksEveTimes[this.currentEveId]
    }
    return t
}
;
canvas.app.battle.Model.prototype.addEvent = function(t, e) {
    if (this.checkEffectEve(t)) {
        return
    }
    this.paksEveId++;
    this.paksEveCache.push([this.paksEveId, t, this.relevantCmdId]);
    canvas.app.battle.log("+EVE (id=" + this.paksEveId + ") " + this.serverParser.strEve[e] + "(" + e + ")", 153);
    this.relevantCmdId++;
    if (this.serverParser.FS_PE_CAPTURE_REAL_TIME[e]) {
        this.paksEveTimes[this.paksEveId] = Date.now()
    }
    this.parser.paksParse()
}
;
canvas.app.battle.Model.prototype.checkEffectEve = function(t) {
    if (t.length < 4) {
        return false
    }
    var e = t[1].val;
    if (e != canvas.app.battle.Const.FS_PE_EFFECTUSE) {
        return false
    }
    var a = t[2].val;
    var i = t[3].val;
    if (this.persId != a && this.oppId != a) {
        if (this.persId == i && this.persAnimFlag || this.oppId == i && this.oppAnimFlag) {
            canvas.app.battle.log("checkEffectEve: SKIP ANIMATIONS, pers_anim_flag = " + this.persAnimFlag + ", opp_anim_flag = " + this.oppAnimFlag);
            return true
        }
    }
    return false
}
;
canvas.app.battle.Model.prototype.addCommand = function(t, e) {
    this.paksCmdId++;
    this.paksCmdCache.push([this.paksCmdId, t]);
    canvas.app.battle.log("+CMD (id=" + this.paksCmdId + ") " + this.serverParser.strCmd[e] + "(" + e + ")", 153);
    this.relevantCmdHash[e] = this.relevantCmdId;
    this.relevantCmdId++;
    this.parser.paksParse()
}
;
canvas.app.battle.Model.prototype.updateSoundVolume = function() {
    canvas.SoundManager.volume = this.soundMute ? 0 : this.soundVolume
}
;
canvas.app.battle.Const = {
    ERROR_INITALIZE: "101",
    ERROR_SOCKET_DATA_HANDLER: "104",
    ERROR_PROXY_DATA_HANDLER: "105",
    ERROR_PARSE_DATA: "106",
    ERROR_EFFECT_USE: "107",
    ERROR_PERS_LOAD: "108",
    ERROR_PERS_NOT_DEFINITION: "109",
    ERROR_PERS_LOAD_PARTS: "110",
    ERROR_PERS_BUILD: "111",
    ERROR_PERS_SOUND: "112",
    ERROR_PAK_LOAD: "113",
    ERROR_EFFECTS_PERS: "114",
    ERROR_EFFECTS_PERS_LOAD: "115",
    ERROR_PAK_DATA: "116",
    BASE_FRAMERATE: 20,
    ADD_FRAMERATE: 5,
    SKIP_TURN_COOLDOWN: 2,
    MAIN_STEP_INIT: "init",
    MAIN_STEP_STATE: "state",
    MAIN_STEP_INFO: "info",
    MAIN_STEP_DONE: "done",
    BOTID1: 1e3,
    BOTID2: 2e3,
    STATUS_CREATED: 0,
    STATUS_FIGHTING: 1,
    STATUS_DEAD: 2,
    STATUS_WAIT: 3,
    STATUS_ACTIVE: 4,
    STATUS_PASSIVE: 5,
    FS_PLS_PENDING: 1,
    FS_PLS_ACTIVE: 2,
    FS_PLS_PASSIVE: 3,
    FS_PF_IDLE: 0,
    FS_PF_BOT: 64,
    FS_PF_STUNNED: 128,
    FS_PF_DEFENDED: 256,
    FS_PF_MAGIC: 1024,
    FS_PF_SKGHOST: 2048,
    FS_PF_PET: 16384,
    FS_PF_SILENT: 2097152,
    FS_PF_MOROC_LIGHT: 4194304,
    FS_PF_MOROC_DARK: 16777216,
    FS_PF_NO_AURAS: 268435456,
    FS_PF_NO_OPP_AUTO: 536870912,
    FS_PF_SHADOW: 1073741824,
    FS_PF_FLEE: 65536,
    FS_PF_INVISIBLE: 32768,
    FIGHT_FLAG_BLIND: 16,
    TO_FS_PF_DEFENDED: 0,
    TO_FS_PF_MAGIC: 1,
    FS_PF_IDLE_STR: "idle",
    FS_PF_STUNNED_STR: "stun",
    FS_PF_DEFENDED_STR: "protected",
    FS_PF_MAGIC_STR: "magic",
    PART_STR: ["combo", "kick_up", "kick_mid", "kick_bot"],
    KICK_STR: ["die", "dodge", "wound", "wound", "block"],
    STATE_SYNC_INTERVAL: 3e4,
    PERS_STATE_INTERVAL: 3e3,
    TIMEOUT_REFRESH_INTERVAL: 980,
    SK_LS_EMPTY: "empty",
    SK_LS_PROGRESS: "progress",
    SK_LS_READY: "ready",
    POP_ST_WAIT: 0,
    POP_ST_VISCORY: 1,
    POP_ST_DEFEAT: 2,
    POP_ST_KILLED: 3,
    POP_ST_ERROR: 4,
    POP_ST_UNKNOWN: 5,
    POP_ST_CONFIRM: 6,
    POP_ST_WAIT_BT: 7,
    POP_ST_WAIT_BT_CONFIRM: 8,
    POP_ER_NO_CODE: 0,
    POP_ER_SHUTDOWN: 1,
    POP_ER_SOC_CLOSE: 2,
    POP_ER_AUTH_FAIL: 3,
    POP_ER_FIGHT_ENDED: 4,
    POP_ER_PROXY_ERROR: 6,
    DMG_KICK_DODGE: 1,
    DMG_KICK_CRIT: 2,
    DMG_KICK_WOUND: 3,
    DMG_KICK_BLOCK: 4,
    DMG_KICK_CURE: 5,
    DMG_KICK_ABSORB: 6,
    DMG_KICK_RESIST: 7,
    DMG_KICK_IMMUNITY: 8,
    DMG_KICK_NOCHANCE: 9,
    DMG_KICK_FULLRES: 10,
    DMG_KICK_MANA: 11,
    MSG_CONFIRM_SHOW: 0,
    MSG_CONFIRM_ANSW: 1,
    FS_PEF_WEAPONEFFECT: 4,
    FS_PEF_SPELL: 8,
    FS_PEF_PASSTURN: 16,
    FS_PEF_NEEDTURN: 32,
    FS_PEF_TARGETSELF: 64,
    FS_PEF_TARGETOPP: 128,
    FS_PEF_TEAMSELF: 256,
    FS_PEF_TEAMOPP: 512,
    FS_PEF_CONFIRM: 8192,
    FS_PEF_USEDEAD: 2048,
    FS_PF_RACESELF: 8388608,
    FS_PEF_BOW: 536870912,
    FS_PEF_AURA: 2147483648,
    FS_PEF_INFINITE: 16777216,
    FS_PEF_DISABLED: 268435456,
    DEFAULT_SPELLS_COOLDOWN: 5e3,
    AEFF_ABSORB: "ABSORB",
    AEFF_SPELL: "SPELL",
    AEFF_SPW: "SPW",
    AEFF_SPD: "SPD",
    AEFF_CH: "101",
    MAX_ANIMATION_LOCK_DELAY: "5000",
    TOP_ATTACK_ID: 1,
    MIDDLE_ATTACK_ID: 2,
    BOTTOM_ATTACK_ID: 3,
    TRANSFER_DATA_SEPARATOR: "@",
    PLAYERS_QUEUE_MAXLEN: 5,
    MODE_SPELLS: "spells",
    MODE_ATTACK: "attack",
    SPELLS_CONT_WIDTH: 154,
    SPELLS_CONT_HEIGHT: 160,
    SPELLS_AR: {
        ICO: [null, "ICON_DirectDamage", "ICON_PlusHP", "ICON_Poison"],
        IN: [null, "raysIN_air", "raysIN_death", "raysIN_earth", "raysIN_fire", "raysIN_life", "raysIN_water"],
        OUT: [null, "raysOUT_air", "raysOUT_death", "raysOUT_earth", "raysOUT_fire", "raysOUT_life", "raysOUT_water"]
    },
    HAND_EFFECT_POSITION: {
        M: [90, 164],
        F: [90, 161]
    },
    BOW_SLOTS_COUNT: 5,
    MAX_ANIMATION_SIZE: "41775e02da98ddb63c980dee",
    SND_FULL_LIST: ["block_weapon_1", "block_weapon_2", "block_weapon_3", "body_fall", "charge_energy", "charge_vampir", "crit_weapon", "dodge", "drink", "fightover_defeat", "fightover_victory", "magic_earth", "magic_evil", "magic_fire", "magic_life", "magic_water", "magic_wind", "wound_punch_1", "wound_punch_2", "wound_punch_3", "orb", "deadGod", "fertilityGod", "dragonGod", "_SP1", "_SP2", "_SP3", "_SP4", "_SP5", "_SP6", "_SP7", "_SP8", "_SP9", "_SP10", "_SP11", "_SP12", "_SP13", "_SP14", "_SP15", "_SP16", "_SP17", "_SP18", "_SP21", "_SP25", "_SP31", "_SP32", "_SP33", "idolWater", "idolAir", "idolZarlog", "idolMaurin"],
    SND_GROUPS: {
        dodge: ["dodge"],
        crit: ["crit_weapon"],
        wound: ["wound_punch_1", "wound_punch_2", "wound_punch_3"],
        block: ["block_weapon_1", "block_weapon_2", "block_weapon_3"]
    },
    EFFECTS_LIST: [["effect_pumpkin", "effect_frog", "effect_orb", "effect_orb_old", "effect_snowball", "effect_starlet", "effect_saw", "effect_bottle"], ["effect_fertilityGod"], ["effect_deadGod"], ["effect_dragonGod"], ["effect_idolWater"], ["effect_idolAir"], ["effect_idolZarlog"], ["effect_idolMaurin"]],
    MY_FUNC_CHANGE_MODE: 1,
    MY_FUNC_USE_EFFECT: 2,
    MY_FUNC_UNSET_AURA: 3,
    MY_FUNC_SEND_MESSAGE: 4,
    EVE_FIGHT_OVER: 1,
    WAITING_BATTLE: 1,
    WAITING_OPPONENT: 2,
    CENTER_DOT_TIME_CD: 4e3,
    CENTER_SPELL_ITEMS_COUNT: 10,
    FIST_NONSCHOOL_EXTRA: 900,
    MV_PERS_SHOW: [-180, -137.8, -101.25, -70.3, -45, -25.3, -11.25, -2.8, 0],
    MV_PERS_HIDE: [0, -2.8, -11.25, -25.3, -60, -70.3, -101.25, -137.8, -180],
    PERS_POS_X: {
        pers: 92,
        opp: 352
    },
    EFFECT_TYPE_OWNER: "fight_pic_owner",
    EFFECT_TYPE_OTHER: "fight_pic_other",
    PROXY_POLL_MAX_TRY_COUNT: 1,
    PROXY_SEND_MAX_TRY_COUNT: 3,
    BOW_KEYS: [canvas.Const.KEYS.H, canvas.Const.KEYS.J, canvas.Const.KEYS.K, canvas.Const.KEYS.L, canvas.Const.KEYS.P],
    BOW_KEYS_TITLE: ["H", "J", "K", "L", "P"]
};
canvas.app.battle.Event = {
    HINT_ADD: "Battle.HINT_ADD",
    HINT_REMOVE: "Battle.HINT_REMOVE",
    OPP_ID_CHANGE: "Battle.OPP_ID_CHANGE",
    SOUND_VOLUME_CHANGE: "Battle.SOUND_VOLUME_CHANGE",
    SOUND_MUTE_CHANGE: "Battle.SOUND_MUTE_CHANGE",
    EFFECT_AFTER_SPELL: "Battle.EFFECT_AFTER_SPELL",
    SKIP_TURN: "Battle.SKIP_TURN",
    EVENT_MY_FUNC: "Battle.EVENT_MY_FUNC",
    EVENT_EVE: "Battle.EVENT_EVE",
    EVENT_CMD: "Battle.EVENT_CMD",
    EVENT_CMD_ERROR: "Battle.EVENT_CMD_ERROR",
    CENTER_VISIBLE: "Battle.CENTER_VISIBLE",
    ENTER_FRAME: "Battle.ENTER_FRAME",
    ATTACK: "Battle.ATTACK",
    BLOCK_SWITCH: "Battle.BLOCK_SWITCH",
    CENTER_CHANGE_MODE: "Battle.CENTER_CHANGE_MODE",
    START_AURA_COOLDOWN: "Battle.START_AURA_COOLDOWN",
    RESET: "Battle.RESET",
    TRY_RECONNECT: "Battle.TRY_RECONNECT",
    REPAIR: "Battle.REPAIR",
    OPEN_COMBO_LIST: "Battle.OPEN_COMBO_LIST",
    CHOOSE_COMBO: "Battle.CHOOSE_COMBO",
    SHOW_BOW_PANEL: "Battle.SHOW_BOW_PANEL",
    USE_EFFECT: "Battle.USE_EFFECT",
    SHOW_ERROR: "Battle.SHOW_ERROR",
    SHOW_MESSAGE: "Battle.SHOW_MESSAGE",
    CLEAR_SYNC_TIMEOUT: "Battle.CLEAR_SYNC_TIMEOUT",
    ADD_EVENT: "Battle.ADD_EVENT",
    ADD_COMMAND: "Battle.ADD_COMMAND",
    PERSES_HIDED: "Battle.PERSES_HIDED",
    UPDATE_PERS_HP_LVL: "Battle.UPDATE_PERS_HP_LVL",
    UPDATE_PERS_MP_LVL: "Battle.UPDATE_PERS_MP_LVL",
    PROXY_RECIEVE_DATA: "Battle.PROXY_RECIEVE_DATA",
    PROXY_CONNECT_ERROR: "Battle.PROXY_CONNECT_ERROR"
};
canvas.app.battle.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.battle.model;
    this.baseLnk = t;
    this.players = new canvas.px.Container;
    this.bgSpells = new canvas.px.Container;
    this.bgEffects = new canvas.px.Container;
    this.spells = new canvas.px.Container;
    this.effects = new canvas.px.Container;
    this.player1 = new canvas.px.Container;
    this.player2 = new canvas.px.Container;
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getTexture("bg"));
    this.addChild(a);
    a.position.set(4, 12);
    this.flagButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_flag"));
    this.flagButton.position.set(0, 50);
    this.flagCdGraphics = new canvas.px.Graphics;
    this.flagButton.addChild(this.flagCdGraphics);
    this.flagHint = new canvas.app.view.PxHint("");
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.flagButton,
        params: new canvas.utils.HintParams(this.flagHint)
    });
    this.flagPers = new canvas.px.Container;
    this.flagOpp = new canvas.px.Container;
    this.frontImage = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_contour"),49,49,49,49);
    this.frontImage.width = 464;
    this.frontImage.height = 359;
    this.frontImage2 = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_bow_contour"),46,46,46,121);
    this.frontImage2.width = 464;
    this.frontImage2.height = 458;
    this.frontImageElement = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_contour_element"));
    this.frontImageElement.position.set(190, 447);
    this.bowPanelBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_back"));
    this.bowPanelBack.position.set(4, 350);
    this.topImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_top"));
    this.damageText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,100,16,"center");
    this.damageText.text = canvas.Translator.getText(30);
    this.soundView = new canvas.app.battle.view.SoundView;
    this.centerView = new canvas.app.battle.view.CenterView(this);
    this.effectsP1 = new canvas.app.battle.view.PersEffects(42,69,true,this);
    this.effectsP2 = new canvas.app.battle.view.PersEffects(402,69,false,this);
    this.hpmp = new canvas.app.battle.view.HpMpView;
    this.persNick = new canvas.app.battle.view.NickView;
    this.oppNick = new canvas.app.battle.view.NickView;
    this.persLevel = new canvas.app.battle.view.LevelView;
    this.oppLevel = new canvas.app.battle.view.LevelView;
    this.totalDamage = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,70,17,"center");
    this.topTimer = new canvas.app.battle.view.TimerView;
    this.errorPopup = new canvas.app.battle.view.ErrorPopup;
    this.mainPopup = new canvas.app.battle.view.MainPopup(this.baseLnk);
    this.messagePopup = new canvas.app.battle.view.MessagePopup;
    this.comboView = new canvas.app.battle.view.ComboView;
    this.bowPanel = new canvas.app.battle.view.BowPanel;
    this.addChild(this.bgEffects);
    this.addChild(this.flagPers);
    this.addChild(this.flagOpp);
    this.flagPers.position.set(160, 210);
    this.flagOpp.position.set(310, 210);
    this.players.addChild(this.bgSpells);
    this.players.addChild(this.player1);
    this.players.addChild(this.player2);
    this.players.addChild(this.spells);
    this.player1.position.set(-15, 40);
    this.player2.position.set(463, 40);
    this.player2.scale.set(-1, 1);
    this.addChild(this.players);
    this.addChild(this.effects);
    this.effects.position.set(-1, 10);
    this.addChild(this.flagButton);
    this.flagButton.visible = false;
    this.addChild(this.frontImage);
    this.addChild(this.frontImage2);
    this.frontImage.x = -10;
    this.frontImage2.x = -10;
    this.frontImage2.visible = false;
    this.addChild(this.topImage);
    this.topImage.position.set(20, -4);
    this.addChild(this.damageText);
    this.damageText.position.set(172, 38);
    this.addChild(this.hpmp);
    this.addChild(this.soundView);
    this.soundView.position.set(8, 330);
    this.addChild(this.effectsP1);
    this.addChild(this.effectsP2);
    this.addChild(this.centerView);
    this.centerView.position.set(222, 226);
    this.addChild(this.persNick);
    this.persNick.position.set(133, 14);
    this.addChild(this.oppNick);
    this.oppNick.position.set(312, 14);
    this.addChild(this.persLevel);
    this.persLevel.position.set(36, 4);
    this.addChild(this.oppLevel);
    this.oppLevel.position.set(374, 4);
    this.addChild(this.totalDamage);
    this.totalDamage.position.set(188, 52);
    this.addChild(this.topTimer);
    this.topTimer.position.set(195, 68);
    this.errorPopup.position.set(0, 85);
    this.mainPopup.position.set(147, 110);
    this.messagePopup.position.set(e.popupPos ? e.popupPos.x : 82, e.popupPos ? e.popupPos.y : 110);
    if (canvas.app.battle.model.showComboRender)
        this.addChild(this.comboView);
    this.comboView.y = 324;
    this.bowPanel.position.set(10, 345);
    this.addChild(this.bowPanel);
    this.bowPanel.locked = true;
    this.showBowPanel(false);
    if (canvas.app.battle.model.shadowAvailable) {
        this.shadow = new canvas.app.battle.view.ShadowIcon;
        this.addChild(this.shadow);
        this.shadow.position.set(-3, 19)
    }
    this.updateTotalDamage();
    this.msk = new canvas.px.Mask(canvas.app.battle.model.width - 20,canvas.app.battle.model.height - 140);
    this.msk.y = 10;
    this.addChild(this.msk);
    this.players.mask = this.spells.mask = this.bgSpells.mask = this.effects.mask = this.bgEffects.mask = this.msk;
    this.mainPopupContainer = new canvas.px.Container;
    this.addChild(this.mainPopupContainer);
    this.messagePopup.mousedown = this.popupDownHandler.bind(this)
}
;
canvas.app.battle.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.View.prototype.popupDownHandler = function(t) {
    var e = canvas.app.battle.model;
    if (canvas.Functions.findParent(this.messagePopup.headLabel, t.target)) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.popupUpHandler, this);
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.popupUpHandler, this);
        this.messagePopup.startDrag(new canvas.px.Point(t.data.originalEvent.x - this.messagePopup.x - 10,t.data.originalEvent.y - this.messagePopup.y), new canvas.px.Rectangle(0,0,e.width - 300,e.height - 200), new canvas.px.Point(t.data.originalEvent.clientX,t.data.originalEvent.clientY))
    }
}
;
canvas.app.battle.View.prototype.popupUpHandler = function(t) {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.popupUpHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.popupUpHandler, this);
    var e = canvas.app.battle.model;
    this.messagePopup.stopDrag();
    e.popupPos = new canvas.px.Point(this.messagePopup.x,this.messagePopup.y)
}
;
canvas.app.battle.View.prototype.updateFocus = function() {
    var t = canvas.app.battle.model;
    this.persLevel.checked = t.persId == t.persInFocus;
    this.oppLevel.checked = t.oppId == t.persInFocus
}
;
canvas.app.battle.View.prototype.updateTotalDamage = function() {
    this.totalDamage.text = canvas.app.battle.model.totalDamage
}
;
canvas.app.battle.View.prototype.showErrorPopup = function(t) {
    this.addChild(this.errorPopup);
    this.errorPopup.activate(t)
}
;
canvas.app.battle.View.prototype.showMainPopup = function(t, e, a, i) {
    this.mainPopupContainer.addChild(this.mainPopup);
    this.mainPopup.activate(t, e, a, i)
}
;
canvas.app.battle.View.prototype.showMessagePopup = function(t, e, a, i, s, n, r, o, l) {
    this.addChild(this.messagePopup);
    this.messagePopup.activate(t, i, s);
    this.messagePopup.setHeader(e);
    this.messagePopup.setBody(a);
    if (typeof l != "undefined")
        this.messagePopup.num = l;
    if (typeof n != "undefined")
        this.messagePopup.buttonAccept.setLabel(n);
    if (typeof r != "undefined")
        this.messagePopup.buttonBan.setLabel(r);
    if (typeof o != "undefined")
        this.messagePopup.buttonCancel.setLabel(o)
}
;
canvas.app.battle.View.prototype.openComboList = function() {
    if (!this.comboList) {
        this.comboList = new canvas.app.battle.view.ComboList
    }
    if (this.comboList.parent != this) {
        this.addChild(this.comboList)
    }
}
;
canvas.app.battle.View.prototype.showBowPanel = function(t) {
    canvas.app.battle.model.allowBowPanel = t;
    if (t) {
        this.frontImage.visible = false;
        this.frontImage2.visible = true;
        if (!this.frontImageElement.parent)
            this.addChildAt(this.frontImageElement, 1);
        if (!this.bowPanelBack.parent)
            this.addChildAt(this.bowPanelBack, 0);
        this.bowPanel.hide()
    } else {
        this.frontImage.visible = true;
        this.frontImage2.visible = false;
        if (this.frontImageElement.parent == this)
            this.removeChild(this.frontImageElement);
        if (this.bowPanelBack.parent == this)
            this.removeChild(this.bowPanelBack);
        this.bowPanel.show()
    }
}
;
canvas.app.battle.View.prototype.playComboHit = function() {
    var t = new canvas.app.battle.view.ComboHint;
    this.addChild(t);
    t.position.set(222, 110)
}
;
canvas.app.battle.View.prototype.showMP = function(t) {
    for (var e = 0; e < t.length; e++) {
        this.addChild(new canvas.app.battle.view.DmgFly(t[e],e))
    }
}
;
canvas.app.battle.View.prototype.showDmg = function(t) {
    var e = canvas.app.battle.model;
    for (var a = 0; a < t.length; a++) {
        if (t[a].tar == "pers" && e.persDmgCnt < 30 || t[a].tar == "opp" && e.oppDmgCnt < 30 || t[a].kick != canvas.app.battle.Const.DMG_KICK_WOUND) {
            this.addChild(new canvas.app.battle.view.DmgFly(t[a],a))
        } else {
            canvas.app.battle.log("showDmg: temp skip dmg_fly")
        }
        if (t[a].new_tar_HP != null) {
            switch (t[a].tar) {
            case "pers":
                this.hpmp.setHpPers(e.persHp, e.persHpMax);
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.UPDATE_PERS_HP_LVL);
                break;
            case "opp":
                this.hpmp.setHpOpp(e.oppHp, e.oppHpMax);
                if (t[a].my_dmg) {
                    if (t[a].kick != canvas.app.battle.Const.DMG_KICK_RESIST) {
                        if (!e.watchFight && !t[a].dont_inc_totDMG) {
                            e.totalDamage -= t[a].val
                        }
                        canvas.app.battle.log("showDmg: <b>*** damage " + String(-t[a].val) + "  totDMG " + String(e.totalDamage) + "</b>");
                        this.updateTotalDamage()
                    }
                }
                break;
            default:
                canvas.app.battle.log("showDmg: WARN: unknown tar = " + String(t[a].tar), 16711680)
            }
        }
    }
}
;
canvas.app.battle.View.prototype.addEffect = function(t, e, a, i, s) {
    if (typeof s == "undefined")
        s = false;
    var n = new canvas.px.MovieClip(canvas.Config.spellsPath + t);
    n.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    n.SND = this.baseLnk.sndPlay;
    n.position.set(e, a);
    n.scale.x = i;
    n.autoDestroy = true;
    if (s) {
        this.bgEffects.addChild(n)
    } else {
        this.effects.addChild(n)
    }
}
;
canvas.app.battle.View.prototype.addSpellAnim = function(t, e) {
    var a;
    while (this.spells.children.length >= 3) {
        a = this.spells.getChildAt(0);
        a.destroy()
    }
    var i = new canvas.px.MovieClip(canvas.Config.spellsPath + e);
    i.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    i.SND = this.baseLnk.sndPlay;
    i.position.set(t, 155);
    i.autoDestroy = true;
    this.spells.addChild(i)
}
;
canvas.app.battle.View.prototype.drawFlagCd = function(t) {
    var e = 0;
    this.flagCdGraphics.clear();
    this.flagCdGraphics.beginFill(5579281, .5);
    this.flagCdGraphics.moveTo(27, 23);
    this.flagCdGraphics.lineTo(27, 0);
    t = t * (9.42 - 3.14);
    for (e = 3.14; e < t + 3.14; e = e + .01) {
        this.flagCdGraphics.lineTo(Math.sin(e) * 12 + 27, Math.cos(e) * 12 + 23)
    }
    this.flagCdGraphics.endFill()
}
;
canvas.app.battle.Parser = function(t) {
    this.model = t
}
;
canvas.app.battle.Parser.prototype.paksParse = function() {
    canvas.app.battle.log("parsePaks: paksEveCache.length=" + this.model.paksEveCache.length + ", oppId=" + this.model.oppId);
    if (this.model.paksReady == false) {
        canvas.app.battle.log("paksParse root skip", "#666666");
        return
    }
    if (this.model.paksCmdCache.length == 0) {
        if (this.model.answersWait > 0) {
            canvas.app.battle.log("paksParse event skip (by waiting cmd answ) " + this.model.answersWait, "#666666");
            return
        }
        if (this.model.paksEveCache.length == 0) {
            canvas.app.battle.log("events cache empty", "#666666");
            return
        }
        this.model.paksReady = false;
        this.parseEvePaks()
    } else {
        this.model.paksReady = false;
        this.parseCmdPaks()
    }
}
;
canvas.app.battle.Parser.prototype.parseEvePaks = function() {
    canvas.app.battle.log("parseEvePaks");
    var t = this.model.paksEveCache[0][0];
    var e = this.model.paksEveCache[0][1];
    var a = this.model.paksEveCache[0][2];
    var i = this.model.serverParser;
    this.model.currentEveId = parseInt(t);
    i.params = [].concat(e);
    var s = this.model.paksEveCache.shift();
    if (i.params.length > 0) {
        var n = i.params[1].val;
        canvas.app.battle.log("=EVE (id=" + String(t) + ") " + i.strEve[n] + "(" + String(n) + ")", 39168);
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_EVE, null, {
            rid: a,
            code: n,
            event: s
        })
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_EVE, null, {
            rid: 0,
            code: -1,
            event: s
        })
    }
}
;
canvas.app.battle.Parser.prototype.parseCmdPaks = function() {
    canvas.app.battle.log("parseCmdPaks");
    var t = this.model.paksCmdCache[0][0];
    var e = this.model.paksCmdCache[0][1];
    var a = this.model.serverParser;
    a.params = [].concat(e);
    var i = this.model.paksCmdCache.shift();
    this.model.answersWait--;
    var s = a.params[0].val;
    canvas.app.battle.log("=CMD (id=" + t + ") " + a.strCmd[s] + "(" + s + ")", 39168);
    var n = a.params[1].val;
    if (n != 0 && s != a.FS_SCCL_EFFECT_SWAP_SUBSLOT) {
        canvas.app.battle.log("<b>Err: " + a.strRet[n] + "(" + n + ") Cmd=" + s + "</b>", 16711680);
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_CMD_ERROR, null, {
            code: s,
            command: i
        })
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_CMD, null, {
            code: s,
            command: i
        })
    }
}
;
canvas.app.battle.Parser.prototype.parseAdditionalEffectsData = function(t, e) {
    var a = canvas.app.battle.Const;
    var i = e.split("&");
    var s;
    var n = [];
    for (var r = 0; r < i.length; r++) {
        var o = i[r].split("=");
        if (o.length != 2) {
            canvas.app.battle.log('parseAdditionalEffectsData ERR: invalid data format "' + i[r] + '"', 16711680);
            return []
        }
        s = o[0];
        if (t == s) {
            switch (s) {
            case a.AEFF_ABSORB:
                var l = o[1].split(",");
                for (var c = 0; c < l.length; c++) {
                    n.push("ABSORB_" + l[c].toString())
                }
                break;
            case a.AEFF_SPELL:
            case a.AEFF_SPW:
            case a.AEFF_SPD:
            case a.AEFF_CH:
                n.push(o[1]);
                break;
            default:
                canvas.app.battle.log('parseAdditionalEffectsData ERR: nuhandled eff_type "' + t + '"', 16711680);
                return [];
                break
            }
        }
    }
    return n
}
;
canvas.app.battle.Proxy = function(t) {
    this.model = t;
    this.pollTryCount = 0;
    this.sendTryCount = 0;
    this.sendUrl;
    this.sendQueue = [];
    this.proxyAddr = "https://" + t.proxyHost + "/";
    this.sid;
    this.pollStatus;
    this.sendStatus;
    this.active;
    this.xhrPoll = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.xhrPoll, this.pollCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.xhrPoll, this.pollErrorHandler, this);
    this.xhrSend = new canvas.utils.URLRequest(null,"POST");
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.xhrSend, this.sendCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.xhrSend, this.sendErrorHandler, this)
}
;
canvas.app.battle.Proxy.prototype.start = function() {
    this.active = true;
    this.doPoll()
}
;
canvas.app.battle.Proxy.prototype.stop = function() {
    this.active = false;
    this.sendQueue = [];
    this.sendUrl = null;
    this.sid = null
}
;
canvas.app.battle.Proxy.prototype.fsLoad = function(t) {
    canvas.app.battle.log("------\x3e pack:" + t);
    this.sendQueue.push(t);
    this.checkSendQueue()
}
;
canvas.app.battle.Proxy.prototype.doPoll = function() {
    if (!this.active)
        return;
    var t = this.proxyAddr + (this.sid ? this.sid : "");
    canvas.app.battle.log("------\x3e poll: " + t);
    this.pollTryCount++;
    this.pollStatus = 0;
    this.xhrPoll.load(t)
}
;
canvas.app.battle.Proxy.prototype.pollErrorHandler = function() {
    if (!this.active)
        return;
    this.pollStatus = this.xhrPoll.request.status;
    canvas.app.battle.log("pollErrorHandler status: " + this.pollStatus);
    if (this.pollStatus > 205) {
        this.pollError("Bad HTTPStatus: " + this.pollStatus)
    } else {
        this.pollError("proxyIOError")
    }
}
;
canvas.app.battle.Proxy.prototype.pollError = function(t) {
    if (this.pollTryCount < canvas.app.battle.Const.PROXY_POLL_MAX_TRY_COUNT) {
        setTimeout(this.doPoll.bind(this), 1e3);
        canvas.app.battle.log("------\x3e poll try:" + this.pollTryCount)
    } else {
        canvas.app.battle.log("Proxy Error: " + t, 16711680);
        this.stop();
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PROXY_CONNECT_ERROR, this)
    }
}
;
canvas.app.battle.Proxy.prototype.pollCompleteHandler = function() {
    if (!this.active)
        return;
    canvas.app.battle.log("pollCompleteHandler: " + this.xhrPoll.request.responseText);
    if (!this.xhrPoll.request.responseText) {
        this.pollError("Response data is empty.");
        return
    }
    this.model.traffic += this.xhrPoll.request.responseText.length;
    if (!this.sid) {
        this.sid = this.xhrPoll.request.responseText;
        this.checkSendQueue()
    } else {
        var t = JSON.parse(this.xhrPoll.request.responseText);
        canvas.app.battle.log(" data(len=" + t.length + ")[" + t + "] data=" + this.xhrPoll.request.responseText);
        if (!t) {
            this.pollError("Response json is invalid.");
            return
        }
        if (t.length > 0) {
            for (var e = 0; e < t.length; e++) {
                try {
                    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PROXY_RECIEVE_DATA, this, t[e])
                } catch (t) {
                    canvas.app.battle.log("error = " + t, 16711680)
                }
            }
        }
    }
    if (this.pollStatus == 205) {
        this.pollError("Server connection is closed.");
        return
    }
    this.pollTryCount = 0;
    setTimeout(this.doPoll.bind(this), 0)
}
;
canvas.app.battle.Proxy.prototype.checkSendQueue = function() {
    if (this.sid && this.sendQueue.length > 0 && !this.sendUrl) {
        this.sendTryCount = 0;
        this.sendUrl = JSON.stringify(this.sendQueue);
        var t = this.sendQueue.length;
        while (this.sendUrl.length > 3072 && t > 1) {
            t = Math.ceil(t / 2);
            this.sendUrl = JSON.stringify(this.sendQueue.slice(0, t))
        }
        this.sendQueue.splice(0, t);
        this.doSend()
    }
}
;
canvas.app.battle.Proxy.prototype.doSend = function() {
    if (!this.active)
        return;
    if (!this.sendUrl)
        return;
    canvas.app.battle.log("------\x3e send: " + this.sendUrl);
    this.sendTryCount++;
    this.sendStatus = 0;
    this.xhrSend.load(this.proxyAddr + this.sid, this.sendUrl)
}
;
canvas.app.battle.Proxy.prototype.sendErrorHandler = function() {
    if (!this.active)
        return;
    this.sendStatus = this.xhrSend.request.status;
    canvas.app.battle.log("sendErrorHandler status: " + this.sendStatus);
    this.sendError()
}
;
canvas.app.battle.Proxy.prototype.sendError = function() {
    if (this.sendTryCount < canvas.app.battle.Const.PROXY_SEND_MAX_TRY_COUNT) {
        canvas.app.battle.log("------\x3e send try:" + this.sendTryCount);
        setTimeout(this.doSend.bind(this), 300)
    } else {
        canvas.app.battle.log("Proxy Error: proxySendIOError", 16711680);
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PROXY_CONNECT_ERROR, this)
    }
}
;
canvas.app.battle.Proxy.prototype.sendCompleteHandler = function() {
    if (!this.active)
        return;
    canvas.app.battle.log("sendCompleteHandler");
    if (this.sendStatus != 205) {
        this.sendUrl = null;
        this.sendTryCount = 0;
        setTimeout(this.checkSendQueue.bind(this), 0)
    }
}
;
canvas.app.battle.engine.Connection = function(t) {
    this.baseLnk = t;
    this.inited = false;
    this.socPacketSize = 0;
    if (canvas.app.battle.model.proxy) {
        this.initProxy()
    }
}
;
canvas.app.battle.engine.Connection.prototype.tryConnect = function() {
    if (!canvas.app.battle.model.proxy) {
        this.ws = new WSProxy({
            onConnect: this.wsConnectHandler.bind(this),
            onMessage: this.wsMessageHandler.bind(this)
        });
        this.ws.connect({
            logEnabled: false,
            ws: {
                host: canvas.app.battle.model.wsHost
            },
            fs: {
                host: canvas.app.battle.model.host,
                port: canvas.app.battle.model.port
            }
        })
    } else {
        this.proxyReady = true;
        canvas.app.battle.model.online = true;
        this.baseLnk.mainIteration()
    }
}
;
canvas.app.battle.engine.Connection.prototype.initProxy = function() {
    this.proxy = new canvas.app.battle.Proxy(canvas.app.battle.model);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.PROXY_CONNECT_ERROR, this.proxy, this.proxyConnectErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.PROXY_RECIEVE_DATA, this.proxy, this.proxyRecieveDataHandler, this);
    this.startProxy()
}
;
canvas.app.battle.engine.Connection.prototype.startProxy = function() {
    this.proxy.start()
}
;
canvas.app.battle.engine.Connection.prototype.stopProxy = function() {
    this.proxy.stop()
}
;
canvas.app.battle.engine.Connection.prototype.proxySend = function() {
    if (this.proxyReady) {
        this.proxyReady = false;
        if (this.proxyQueue.length > 0) {
            this.lastProxyPack = this.proxyQueue.shift()
        } else {
            this.lastProxyPack = this.proxyAddr + "req" + Math.round(Math.random() * 9e4).toString() + "?" + canvas.app.battle.model.sid + "_" + canvas.app.battle.model.fightId
        }
        this.proxyLoader.load(this.lastProxyPack)
    }
}
;
canvas.app.battle.engine.Connection.prototype.proxyCompleteHandler = function() {
    this.proxyReady = true;
    var t = this.proxyLoader.request.responseText.split("|", 3);
    var e = t[1];
    canvas.app.battle.log("proxyCompleteHandler data(len=" + e.length + ")[" + e + "]");
    if (e.length > 0) {
        var a = e.split(":");
        for (var i = 0; i < a.length; i++) {
            this.recvData(a[i])
        }
        this.proxySend()
    } else if (!this.inited) {
        this.proxySend()
    }
}
;
canvas.app.battle.engine.Connection.prototype.recvData = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = e.unpack(t);
    var i = "";
    for (var s = 0; s < e.params.length; s++) {
        i += "|" + e.params[s].val
    }
    canvas.app.battle.log("conn:recvData (" + i + ")");
    if (a) {
        var n = e.params[0].val;
        if (n == e.FS_SC_NONE) {
            var r = e.params[1].val;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_EVENT, null, {
                params: e.params,
                code: r
            })
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_COMMAND, null, {
                params: e.params,
                code: n
            })
        }
    } else {
        canvas.app.battle.log("BAD PAKET (" + t + ")", 16711680)
    }
}
;
canvas.app.battle.engine.Connection.prototype.proxyConnectErrorHandler = function() {
    canvas.app.battle.model.online = false;
    this.baseLnk.clearSyncTimeout();
    this.stopTransfers();
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_EVENT, null, {
        params: ["soc.onClose()"],
        code: 0
    });
    this.baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_PROXY_ERROR)
}
;
canvas.app.battle.engine.Connection.prototype.proxyRecieveDataHandler = function(t) {
    this.recvData(t.params)
}
;
canvas.app.battle.engine.Connection.prototype.sendPak = function(t) {
    canvas.app.battle.log("conn: send [" + t + "]");
    canvas.app.battle.model.answersWait++;
    if (!canvas.app.battle.model.proxy) {
        if (canvas.app.battle.model.online) {
            this.ws.send(t)
        } else {
            this.baseLnk.answersWait--
        }
    } else {
        this.proxy.fsLoad(t)
    }
}
;
canvas.app.battle.engine.Connection.prototype.proxyErrorHandler = function() {
    canvas.app.battle.log("conn:proxyErrorHandler: url=" + this.lastProxyPack, 16711680);
    this.closing()
}
;
canvas.app.battle.engine.Connection.prototype.closing = function() {
    canvas.app.battle.model.online = false;
    this.stopTransfers();
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CLEAR_SYNC_TIMEOUT);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_EVENT, null, {
        params: [],
        code: 0
    })
}
;
canvas.app.battle.engine.Connection.prototype.stopTransfers = function() {
    canvas.app.battle.model.online = false;
    if (canvas.app.battle.model.proxy) {
        this.stopProxy()
    } else {
        this.ws.destroy()
    }
    canvas.app.battle.model.answersWait = 0
}
;
canvas.app.battle.engine.Connection.prototype.wsConnectHandler = function() {
    canvas.app.battle.model.online = true;
    this.baseLnk.mainIteration()
}
;
canvas.app.battle.engine.Connection.prototype.wsMessageHandler = function(t) {
    if (!canvas.app.battle.model.online)
        return;
    this.recvData(t)
}
;
canvas.app.battle.engine.ServerParser = function() {
    this.PT_INVALID = 0;
    this.PT_INT = 1;
    this.PT_FIXED = 2;
    this.PT_STRING = 3;
    this.PT_RAW = 4;
    this.PT_NINT = 5;
    this.PT_NFIXED = 6;
    this.PT_SHORTINT = 7;
    this.PT_NSHORTINT = 8;
    this.PT_BIGINT = 9;
    this.PT_NBIGINT = 10;
    this.FS_SC_NONE = 0;
    this.FS_SC_SYNC_TIME = 1;
    this.FS_SCCL_INIT = 101;
    this.FS_SCCL_STATE = 102;
    this.FS_SCCL_PERS_INFO = 103;
    this.FS_SCCL_PERS_PARTS = 104;
    this.FS_SCCL_ATTACK = 105;
    this.FS_SCCL_FIGHT_STATE = 106;
    this.FS_SCCL_EFFECTS = 107;
    this.FS_SCCL_USE_EFFECT = 108;
    this.FS_SCCL_CHANGE_MODE = 109;
    this.FS_SCCL_PERS_ACT_EFFECTS = 110;
    this.FS_SCCL_WATCH_FIGHT = 111;
    this.FS_SCCL_EFFECT_SWAP_SUBSLOT = 112;
    this.FS_SCCL_DROP_EFFECT = 113;
    this.FS_SCCL_SKIP_TURN = 114;
    this.FS_SCCL_SEND_MSG = 201;
    this.FS_SCCL_PERS_SUBSCRIBE = 202;
    this.FS_SS_OK = 0;
    this.FS_SS_WRONG_CMD = -1;
    this.FS_SS_WRONG_ARGS = -2;
    this.FS_SS_WRONG_DATA = -3;
    this.FS_SS_WRONG_STATE = -4;
    this.FS_SS_NO_AUTH = -5;
    this.FS_SS_INT_ERROR = -6;
    this.FS_PE_SRVSHUTDOWN = 1;
    this.FS_PE_OPPWAIT = 101;
    this.FS_PE_OPPNEW = 102;
    this.FS_PE_ATTACKNOW = 103;
    this.FS_PE_ATTACKWAIT = 104;
    this.FS_PE_ATTACK = 105;
    this.FS_PE_ATTACKTIMEOUT = 106;
    this.FS_PE_FIGHTLOG = 107;
    this.FS_PE_FIGHTOVER = 108;
    this.FS_PE_FIGHTSTATE = 109;
    this.FS_PE_EFFECTUSE = 110;
    this.FS_PE_EFFECTAPPLY = 111;
    this.FS_PE_DAMAGE = 112;
    this.FS_PE_DEATH = 113;
    this.FS_PE_MANNACONSUM = 114;
    this.FS_PE_MYFIGHTRETURN = 115;
    this.FS_PE_EFFUPDATE = 116;
    this.FS_PE_ENERGYCONSUM = 117;
    this.FS_PE_ENERGYREGEN = 118;
    this.FS_PE_ARROWCONSUM = 119;
    this.FS_PE_EFFSWAP = 120;
    this.FS_PE_RESETCOMBO = 121;
    this.FS_PE_NEWPERS = 122;
    this.FS_PE_DEADCNT = 123;
    this.FS_PE_FIGHTLAUNCH = 124;
    this.FS_PE_MSG = 201;
    this.FS_PE_CDDEC = 202;
    this.FS_PE_CAPTURE_REAL_TIME = {
        103: true,
        104: true
    };
    this.strEve = [];
    this.strCmd = [];
    this.strRet = [];
    this.strEve[this.FS_PE_SRVSHUTDOWN] = "FS_PE_SRVSHUTDOWN";
    this.strEve[this.FS_PE_OPPWAIT] = "FS_PE_OPPWAIT";
    this.strEve[this.FS_PE_OPPNEW] = "FS_PE_OPPNEW";
    this.strEve[this.FS_PE_ATTACKNOW] = "FS_PE_ATTACKNOW";
    this.strEve[this.FS_PE_ATTACKWAIT] = "FS_PE_ATTACKWAIT";
    this.strEve[this.FS_PE_ATTACK] = "FS_PE_ATTACK";
    this.strEve[this.FS_PE_ATTACKTIMEOUT] = "FS_PE_ATTACKTIMEOUT";
    this.strEve[this.FS_PE_FIGHTLOG] = "FS_PE_FIGHTLOG";
    this.strEve[this.FS_PE_FIGHTOVER] = "FS_PE_FIGHTOVER";
    this.strEve[this.FS_PE_FIGHTSTATE] = "FS_PE_FIGHTSTATE";
    this.strEve[this.FS_PE_EFFECTUSE] = "FS_PE_EFFECTUSE";
    this.strEve[this.FS_PE_EFFECTAPPLY] = "FS_PE_EFFECTAPPLY";
    this.strEve[this.FS_PE_DAMAGE] = "FS_PE_DAMAGE";
    this.strEve[this.FS_PE_DEATH] = "FS_PE_DEATH";
    this.strEve[this.FS_PE_MANNACONSUM] = "FS_PE_MANNACONSUM";
    this.strCmd[this.FS_PE_MYFIGHTRETURN] = "FS_PE_MYFIGHTRETURN";
    this.strEve[this.FS_PE_EFFUPDATE] = "FS_PE_EFFUPDATE";
    this.strEve[this.FS_PE_ENERGYCONSUM] = "FS_PE_ENERGYCONSUM";
    this.strEve[this.FS_PE_ENERGYREGEN] = "FS_PE_ENERGYREGEN";
    this.strEve[this.FS_PE_ARROWCONSUM] = "FS_PE_ARROWCONSUM";
    this.strEve[this.FS_PE_EFFSWAP] = "FS_PE_EFFSWAP";
    this.strEve[this.FS_PE_RESETCOMBO] = "FS_PE_RESETCOMBO";
    this.strEve[this.FS_PE_NEWPERS] = "FS_PE_NEWPERS";
    this.strEve[this.FS_PE_DEADCNT] = "FS_PE_DEADCNT";
    this.strEve[this.FS_PE_MSG] = "FS_PE_MSG";
    this.strEve[this.FS_PE_CDDEC] = "FS_PE_CDDEC";
    this.strCmd[this.FS_SCCL_INIT] = "FS_SCCL_INIT";
    this.strCmd[this.FS_SCCL_STATE] = "FS_SCCL_STATE";
    this.strCmd[this.FS_SCCL_PERS_INFO] = "FS_SCCL_PERS_INFO";
    this.strCmd[this.FS_SCCL_PERS_PARTS] = "FS_SCCL_PERS_PARTS";
    this.strCmd[this.FS_SC_SYNC_TIME] = "FS_SC_SYNC_TIME";
    this.strCmd[this.FS_SCCL_ATTACK] = "FS_SCCL_ATTACK";
    this.strCmd[this.FS_SCCL_FIGHT_STATE] = "FS_SCCL_FIGHT_STATE";
    this.strCmd[this.FS_SCCL_EFFECTS] = "FS_SCCL_EFFECTS";
    this.strCmd[this.FS_SCCL_USE_EFFECT] = "FS_SCCL_USE_EFFECT";
    this.strCmd[this.FS_SCCL_CHANGE_MODE] = "FS_SCCL_CHANGE_MODE";
    this.strCmd[this.FS_SCCL_PERS_ACT_EFFECTS] = "FS_SCCL_PERS_ACT_EFFECTS";
    this.strCmd[this.FS_SCCL_SEND_MSG] = "FS_SCCL_SEND_MSG";
    this.strCmd[this.FS_SCCL_WATCH_FIGHT] = "FS_SCCL_WATCH_FIGHT";
    this.strCmd[this.FS_SCCL_EFFECT_SWAP_SUBSLOT] = "FS_SCCL_EFFECT_SWAP_SUBSLOT";
    this.strCmd[this.FS_SCCL_DROP_EFFECT] = "FS_SCCL_DROP_EFFECT";
    this.strCmd[this.FS_SCCL_SKIP_TURN] = "FS_SCCL_SKIP_TURN";
    this.strCmd[this.FS_PE_MYFIGHTRETURN] = "FS_PE_MYFIGHTRETURN";
    this.strCmd[this.FS_SCCL_PERS_SUBSCRIBE] = "FS_SCCL_PERS_SUBSCRIBE";
    this.strRet[this.FS_SS_OK] = "FS_SS_OK";
    this.strRet[this.FS_SS_WRONG_CMD] = "FS_SS_WRONG_CMD";
    this.strRet[this.FS_SS_WRONG_ARGS] = "FS_SS_WRONG_ARGS";
    this.strRet[this.FS_SS_WRONG_DATA] = "FS_SS_WRONG_DATA";
    this.strRet[this.FS_SS_WRONG_STATE] = "FS_SS_WRONG_STATE";
    this.strRet[this.FS_SS_NO_AUTH] = "FS_SS_NO_AUTH";
    this.strRet[this.FS_SS_INT_ERROR] = "FS_SS_INT_ERROR";
    this.sprintfArr = ["", "", "", "", "0000", "000", "00", "0", "", "0000000", "000000", "00000", "0000", "000", "00", "0", "", "000000000000000", "00000000000000", "0000000000000", "000000000000", "00000000000", "0000000000", "000000000", "00000000", "0000000", "000000", "00000", "0000", "000", "00", "0", ""]
}
;
canvas.app.battle.engine.ServerParser.prototype.sprintf = function(t, e) {
    if (t == 4 || t == 8 || t == 16) {
        var a = e.toString(16);
        return this.sprintfArr[a.length + t] + a
    }
    return null
}
;
canvas.app.battle.engine.ServerParser.prototype.pack = function(t) {
    this.buf = "";
    for (var e = 0; e < t.length; e++) {
        var a = t[e];
        if (a.type == this.PT_INT && a.val < 0)
            a.type = this.PT_NINT;
        if (a.type == this.PT_BIGINT && a.val < 0)
            a.type = this.PT_NBIGINT;
        if (a.type == this.PT_FIXED && a.val < 0)
            a.type = this.PT_NFIXED;
        this.buf += this.sprintf(4, (a.id << 8) + (a.type & 255));
        switch (a.type) {
        case this.PT_INT:
        case this.PT_NINT:
            this.buf += this.sprintf(8, a.type == this.PT_NINT ? -a.val : a.val);
            break;
        case this.PT_BIGINT:
        case this.PT_NBIGINT:
            this.buf += this.sprintf(16, a.type == this.PT_NBIGINT ? -a.val : a.val);
            break;
        case this.PT_FIXED:
        case this.PT_NFIXED:
            this.buf += this.sprintf(8, (a.type == this.PT_NFIXED ? -a.val : a.val) * 1e4);
            break;
        case this.PT_STRING:
        case this.PT_RAW:
            this.buf += this.sprintf(4, a.val.length) + a.val;
            break;
        default:
            canvas.app.battle.log("serverParser::pack Invalid param type: " + a.type, 16711680);
            return false
        }
    }
    this.buf = this.sprintf(4, this.buf.length) + this.buf;
    return true
}
;
canvas.app.battle.engine.ServerParser.prototype.unpack = function(t) {
    this.params = [];
    t = t.substr(4);
    var e;
    var a;
    var i;
    var s;
    var n = canvas.app.battle.model.codePage ? t.length : this.byteLenght(t);
    var r = 0;
    var o;
    while (n > 0) {
        o = parseInt(t.substr(r, 4), 16);
        e = o >> 8;
        a = o & 255;
        r += 4;
        n -= 4;
        switch (a) {
        case this.PT_INT:
        case this.PT_NINT:
            s = parseInt(t.substr(r, 8), 16);
            if (a == this.PT_NINT)
                s = -s;
            r += 8;
            n -= 8;
            break;
        case this.PT_BIGINT:
        case this.PT_NBIGINT:
            s = parseInt(t.substr(r, 16), 16);
            if (a == this.PT_NBIGINT)
                s = -s;
            r += 16;
            n -= 16;
            break;
        case this.PT_SHORTINT:
        case this.PT_NSHORTINT:
            s = parseInt(t.substr(r, 4), 16);
            if (a == this.PT_NSHORTINT)
                s = -s;
            r += 4;
            n -= 4;
            break;
        case this.PT_FIXED:
        case this.PT_NFIXED:
            s = parseInt(t.substr(r, 8), 16) / 1e4;
            if (a == this.PT_NFIXED)
                s = -s;
            r += 8;
            n -= 8;
            break;
        case this.PT_STRING:
        case this.PT_RAW:
            i = parseInt(t.substr(r, 4), 16);
            r += 4;
            n -= 4;
            s = "";
            if (canvas.app.battle.model.codePage) {
                s = t.substr(r, i);
                r += i;
                n -= i
            } else {
                while (i > 0) {
                    var l = t.substr(r, 1);
                    var c = this.byteLenght(l);
                    i -= c;
                    r += 1;
                    n -= c;
                    s += l
                }
            }
            s = canvas.app.battle.model.codePage ? canvas.app.battle.model.resetString(s) : s;
            break;
        default:
            canvas.app.battle.log("serverParser: unpack Invalid param type: " + a + " (offset: " + (r - 4) + ", data: " + t + ")", 16711680);
            return false
        }
        this.params.push({
            id: e,
            type: a,
            val: s
        })
    }
    return true
}
;
canvas.app.battle.engine.ServerParser.prototype.byteLenght = function(t) {
    var e = t.length;
    for (var a = t.length - 1; a >= 0; a--) {
        var i = t.charCodeAt(a);
        if (i > 127 && i <= 2047)
            e++;
        else if (i > 2047 && i <= 65535)
            e += 2;
        if (i >= 56320 && i <= 57343)
            a--
    }
    return e
}
;
canvas.app.battle.engine.MFunc = function(t) {
    this.baseLnk = t;
    this.full_g2m_answ_str = "";
    this.full_g2m_srt_buff = 0;
    this.defferedEffects = {}
}
;
canvas.app.battle.engine.MFunc.prototype.authorization = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = this.baseLnk.conn;
    var a = canvas.app.battle.model;
    canvas.app.battle.log("mFunc authorization: persId=" + a.persId + ", fightId = " + a.fightId, 10027008);
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_INIT
    }, {
        id: 0,
        type: t.PT_INT,
        val: a.persId
    }, {
        id: 0,
        type: t.PT_BIGINT,
        val: a.fightId
    }, {
        id: 0,
        type: t.PT_INT,
        val: a.akey
    }]);
    e.sendPak(t.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.persState = function(t, e) {
    var a = canvas.app.battle.model.serverParser;
    var i = this.baseLnk.conn;
    var s = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persState: persId=" + e + ", par=" + t, 10027008);
    if (!e) {
        a.pack([{
            id: 0,
            type: a.PT_INT,
            val: a.FS_SCCL_STATE
        }])
    } else {
        a.pack([{
            id: 0,
            type: a.PT_INT,
            val: a.FS_SCCL_STATE
        }, {
            id: 0,
            type: a.PT_INT,
            val: e
        }])
    }
    i.sendPak(a.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.persInfo = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = this.baseLnk.conn;
    var i = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persInfo: persId=" + i.persId + ", reqId=" + t, 10027008);
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_INFO
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }]);
    a.sendPak(e.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.persEffects = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = this.baseLnk.conn;
    var a = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persEffects: ", 10027008);
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_EFFECTS
    }]);
    e.sendPak(t.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.effectList = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = this.baseLnk.conn;
    var i = canvas.app.battle.model;
    canvas.app.battle.log("mFunc effectList: persId=" + t, 10027008);
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_ACT_EFFECTS
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }]);
    a.sendPak(e.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.persParts = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = this.baseLnk.conn;
    var i = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persState: persId=" + i.persId + ", reqId=" + t, 10027008);
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_PARTS
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }]);
    a.sendPak(e.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.attack = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = this.baseLnk.conn;
    var i = canvas.app.battle.model;
    canvas.app.battle.log("mFunc attack: part=" + t, 10027008);
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_ATTACK
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }, {
        id: 0,
        type: e.PT_INT,
        val: 0
    }]);
    a.sendPak(e.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.fightState = function(t, e) {
    var a = canvas.app.battle.model.serverParser;
    var i = this.baseLnk.conn;
    var s = canvas.app.battle.model;
    if (t == 0 && e == 0 && s.fightStateExecuting) {
        canvas.app.battle.log("mFunc persState: already exetuting... exit");
        return
    }
    canvas.app.battle.log("mFunc fightState: persId=" + t + ", startIdx=" + e, 10027008);
    if (e == 0) {
        this.full_g2m_answ_str = "";
        this.full_g2m_srt_buff = 0
    }
    a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_FIGHT_STATE
    }, {
        id: 0,
        type: a.PT_INT,
        val: t
    }, {
        id: 0,
        type: a.PT_INT,
        val: e
    }]);
    i.sendPak(a.buf);
    s.fightStateExecuting = true
}
;
canvas.app.battle.engine.MFunc.prototype.persStateRequest = function(t) {
    if (typeof t == "undefined")
        t = 0;
    var e = canvas.app.battle.model.serverParser;
    var a = this.baseLnk.conn;
    var i = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persStateRequest: startIndex=" + t + ", ids=" + i.persVisible + ", idsPrev=" + i.persVisiblePrev, 10027008);
    if (!i.persVisible || i.persVisiblePrev && i.persVisible.sort().join(",") == i.persVisiblePrev.sort().join(","))
        return;
    if (!i.persVisible)
        return;
    i.persVisiblePrev = i.persVisible;
    if (t == 0) {
        this.small_g2m_answ_str1 = "";
        this.small_g2m_answ_str2 = "";
        this.small_g2m_srt_buff = 0
    }
    var s = [{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_SUBSCRIBE
    }, {
        id: 0,
        type: e.PT_INT,
        val: 0
    }];
    e.pack(s);
    a.sendPak(e.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.useEffect = function(t, e, a) {
    var i = canvas.app.battle.model.serverParser;
    var s = this.baseLnk.conn;
    var n = canvas.app.battle.model;
    if (typeof e == "undefined")
        e = -1;
    if (typeof a == "undefined")
        a = -1;
    var r;
    var o;
    var l;
    if (n.abilsFlags[t]) {
        l = n.abilsFlags[t];
        canvas.app.battle.log("mFunc useEffect: abil_flgs: " + l.toString(16) + "(16) " + l.toString(2) + "(2)", 10066329)
    } else {
        canvas.app.battle.log("mFunc useEffect: ERR: flags is null for this abil", 16711680);
        return
    }
    if (e != -1 && a != -1) {
        r = e;
        o = a;
        if (n.persRace != n.memDat[r].kind) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23));
            return
        }
    } else {
        if (n.persInFocus != 0) {
            r = n.persInFocus;
            if (n.memDat[r] != null) {
                o = n.memDat[r].team;
                if (n.testFlag(l, canvas.app.battle.Const.FS_PF_RACESELF)) {
                    if (n.memDat[r].hasOwnProperty("kind")) {
                        if (n.persRace != n.memDat[r].kind) {
                            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23));
                            return
                        }
                    } else {
                        this.defferedEffects[r] = {
                            tarId: r,
                            tarTeam: o,
                            effId: t
                        };
                        this.persInfo(r);
                        return
                    }
                }
            } else {
                canvas.app.battle.log("mFunc useEffect: ERR: have no data for targetId " + r, 16711680);
                return
            }
        } else {
            r = n.testFlag(l, canvas.app.battle.Const.FS_PEF_BOW) ? n.oppId : n.persId;
            o = n.persTeam
        }
    }
    if (n.memDat[r] && n.testFlag(l, canvas.app.battle.Const.FS_PEF_BOW) && n.memDat[r].status == canvas.app.battle.Const.STATUS_DEAD) {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(72));
        return
    }
    canvas.app.battle.log("mFunc useEffect: effId=" + t + ", persInFocus=" + n.persInFocus, 10027008);
    if (n.watchFight && n.persId != n.myPersId) {
        canvas.app.battle.log("mFunc useEffect: pers is under watch_fight mode.", 255);
        return
    }
    if (!n.testFlag(l, canvas.app.battle.Const.FS_PEF_USEDEAD) && n.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        canvas.app.battle.log("mFunc useEffect: pers dead command not be send.", 255);
        return
    }
    var c;
    if (n.testFlag(l, canvas.app.battle.Const.FS_PEF_CONFIRM)) {
        if (n.abils[t]) {
            c = n.abils[t]["title"]
        } else if (n.spells[t]) {
            c = n.spells[t]["title"]
        }
    }
    if (c) {
        var p;
        var h;
        var d = n.testFlag(l, canvas.app.battle.Const.FS_PEF_TEAMSELF);
        var v = n.testFlag(l, canvas.app.battle.Const.FS_PEF_TEAMOPP);
        if (d) {
            p = true
        } else {
            p = n.testFlag(l, canvas.app.battle.Const.FS_PEF_TARGETSELF)
        }
        if (v) {
            h = true
        } else {
            h = n.testFlag(l, canvas.app.battle.Const.FS_PEF_TARGETOPP)
        }
        canvas.app.battle.log("mFunc useEffect: self=" + p + " opp=" + h + " self_team=" + d + " opp_team=" + v, 10066329);
        var u;
        if (r == n.persId) {
            if (!p) {
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(20));
                u = true
            }
        } else {
            if (o == n.persTeam) {
                if (!d) {
                    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(21));
                    u = true
                }
            } else {
                if (r == n.oppId) {
                    if (!h) {
                        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(22));
                        u = true
                    }
                } else {
                    if (!v) {
                        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23));
                        u = true
                    }
                }
            }
        }
        if (u) {
            this.baseLnk.view.centerView.spellsUnlockOnError(t);
            return
        }
    }
    if (n.testFlag(l, canvas.app.battle.Const.FS_PEF_PASSTURN)) {
        canvas.app.battle.log("mFunc useEffect: PASSTURN");
        this.baseLnk.centerVisible(false);
        n.attackTime = Date.now()
    }
    i.pack([{
        id: 0,
        type: i.PT_INT,
        val: i.FS_SCCL_USE_EFFECT
    }, {
        id: 0,
        type: i.PT_BIGINT,
        val: t
    }, {
        id: 0,
        type: i.PT_INT,
        val: r
    }]);
    var m;
    if (n.memDat[r]) {
        m = n.testFlag(n.memDat[r].persFlags, canvas.app.battle.Const.FS_PF_BOT)
    } else {
        canvas.app.battle.log("mFunc useEffect: memDat for targetId is null", 10027008)
    }
    if (!c || r == n.persId || m) {
        s.sendPak(i.buf)
    } else {
        canvas.app.battle.log("mFunc useEffect: Request confirmation", 10027008);
        n.abilityTemp = i.buf;
        var f = n.persId.toString() + "[]" + Date.now().toString();
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_MESSAGE, null, {
            mode: 2,
            bodyLabel: canvas.Translator.getText(12) + ' "' + c.replace("__", " ") + '"\n' + canvas.Translator.getText(13),
            num: f
        });
        this.sendMsg(r, "1()" + f + "()" + n.memDat[n.persId].nick + "()" + c)
    }
}
;
canvas.app.battle.engine.MFunc.prototype.swapSubSlot = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = this.baseLnk.conn;
    var i = canvas.app.battle.model;
    canvas.app.battle.log("mFunc swapSubSlot: EffID=" + t, 10027008);
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_EFFECT_SWAP_SUBSLOT
    }, {
        id: 0,
        type: e.PT_BIGINT,
        val: t
    }]);
    a.sendPak(e.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.changeMode = function(t, e) {
    var a = canvas.app.battle.model.serverParser;
    var i = this.baseLnk.conn;
    var s = canvas.app.battle.model;
    canvas.app.battle.log("mFunc changeMode: switcher=" + t + ", flag=0x" + e.toString(16), 10027008);
    a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_CHANGE_MODE
    }, {
        id: 0,
        type: a.PT_INT,
        val: e
    }, {
        id: 0,
        type: a.PT_INT,
        val: t
    }]);
    i.sendPak(a.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.sendMsg = function(t, e) {
    var a = canvas.app.battle.model.serverParser;
    var i = this.baseLnk.conn;
    var s = canvas.app.battle.model;
    canvas.app.battle.log("mFunc sendMsg: persId=" + t + ", txt=" + e, 10027008);
    e = encodeURI(e);
    a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_SEND_MSG
    }, {
        id: 0,
        type: a.PT_INT,
        val: t
    }, {
        id: 0,
        type: a.PT_INT,
        val: 1
    }, {
        id: 0,
        type: a.PT_STRING,
        val: e
    }]);
    i.sendPak(a.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.watchFight = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = this.baseLnk.conn;
    var a = canvas.app.battle.model;
    canvas.app.battle.log("mFunc watchFight: ", 10027008);
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_WATCH_FIGHT
    }, {
        id: 0,
        type: t.PT_INT,
        val: a.newPersId
    }]);
    e.sendPak(t.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.unsetAura = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = this.baseLnk.conn;
    var i = canvas.app.battle.model;
    canvas.app.battle.log("mFunc unsetAura: EffId=" + t, 10027008);
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_DROP_EFFECT
    }, {
        id: 0,
        type: e.PT_BIGINT,
        val: t
    }]);
    a.sendPak(e.buf)
}
;
canvas.app.battle.engine.MFunc.prototype.skipTurn = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = this.baseLnk.conn;
    var a = canvas.app.battle.model;
    canvas.app.battle.log("mFunc skipTurn: ", 10027008);
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_SKIP_TURN
    }]);
    e.sendPak(t.buf);
    this.baseLnk.centerVisible(false);
    a.skipTurnTime = Date.now() + canvas.app.battle.Const.SKIP_TURN_COOLDOWN * 1500
}
;
canvas.app.battle.engine.MCmd = function(t) {
    this.baseLnk = t;
    this.myEffectsList = "";
    this.myEffectsListIV;
    this.myEffectsListDelayBegin = 1e3;
    this.myEffectsListDelayDelta = 100;
    this.myEffectsListDelayCurrent = 1e3;
    this.myEffectsListDelayMax = 5e3;
    this.myEffectsGetted = false;
    this.oppIdFromWFCmd = 0
}
;
canvas.app.battle.engine.MCmd.prototype.state = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd state: paramsCount= " + t.params.length);
    if (e.mainStep == canvas.app.battle.Const.MAIN_STEP_STATE) {
        e.clearEventsCache();
        var i = parseInt(t.params[2].val);
        var s = parseInt(t.params[3].val);
        var n = parseInt(t.params[4].val);
        var r = e.parsePersStatus(parseInt(t.params[5].val), parseInt(t.params[6].val));
        var o = parseInt(t.params[7].val);
        e.fightRunning = i == 0;
        e.roundTime = e.roundTimeBase = s * 1e3;
        if (i > 0) {
            e.roundTime = i * 1e3;
            a.view.topTimer.activate()
        }
        if (!e.memDat[n]) {
            e.memDat[n] = {}
        }
        e.memDat[n].persFlags = o;
        if (e.testFlag(e.memDat[e.persId].persFlags, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            a.view.centerView.activeBlock(true)
        }
        if (e.testFlag(e.memDat[e.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
            a.view.centerView.mode = canvas.app.battle.Const.MODE_SPELLS;
            a.view.centerView.cAttack.deactivate()
        }
        e.totalDamage = t.params[8].val;
        a.view.updateTotalDamage();
        a.setSyncTimeout();
        e.persHp = t.params[9].val;
        e.persHpMax = t.params[10].val;
        e.persMp = t.params[11].val;
        e.persMpMax = t.params[12].val;
        a.view.hpmp.setHpPers(e.persHp, e.persHpMax);
        a.view.hpmp.setMpPers(e.persMp, e.persMpMax);
        e.persStatus = r;
        e.oppId = t.params[13].val;
        e.effectsMinCooldown = t.params[14].val;
        if (e.serverTimestamp == 0) {
            e.serverTimestamp = parseInt(t.params[15].val);
            e.clientTimestamp = Math.floor(Date.now() / 1e3)
        }
        e.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO;
        e.paksReady = true;
        if (t.params[16] && t.params[16].val > 0) {
            e.wfCnt = 1;
            e.newPersId = parseInt(t.params[16].val);
            e.watchFight = true
        }
        a.setBowsInfo(t.params[17] ? parseInt(t.params[17].val) : 0, t.params[18] ? parseInt(t.params[18].val) : 0, t.params[19] ? parseInt(t.params[19].val) : 0);
        a.mainIteration();
        e.currentAura = t.params[20] ? t.params[20] > 0 ? t.params[20].toString() : "" : "";
        a.updateAuras(e.persId)
    } else {
        e.totalDamage = t.params[8].val;
        a.view.updateTotalDamage();
        a.setSyncTimeout();
        this.paksReadyAndParse()
    }
}
;
canvas.app.battle.engine.MCmd.prototype.anyPersInfo = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd anyPersInfo: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = t.params[3].val;
    var n = e.parsePersStatus(t.params[4].val, t.params[5].val);
    var r = t.params[6].val;
    var o = t.params[7].val;
    var l = t.params[8].val;
    var c = t.params[9].val;
    var p = t.params[10].val;
    var h = p == 1 ? "M" : "F";
    var d = t.params[11].val;
    var v = t.params[12].val;
    var u = t.params[13].val;
    var m = t.params[14].val;
    var f = t.params[15].val;
    var _ = t.params[16].val;
    var g = t.params[17].val;
    var w = t.params[18].val;
    var E = t.params[19].val;
    var b = t.params[20].val;
    var C = t.params[21].val;
    e.memDat[i] = {
        maxHP: w,
        maxMP: b,
        nick: o,
        level: c,
        persFlags: r,
        sk: u,
        team: _,
        mem_flag: true,
        kind: d,
        status: n
    }
}
;
canvas.app.battle.engine.MCmd.prototype.persInfo = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd persInfo: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = t.params[3].val;
    var n = e.parsePersStatus(t.params[4].val, t.params[5].val);
    var r = t.params[6].val;
    var o = t.params[7].val;
    var l = t.params[8].val;
    var c = t.params[9].val;
    var p = t.params[10].val;
    var h = p == 1 ? "M" : "F";
    var d = t.params[11].val;
    var v = t.params[12].val;
    var u = t.params[13].val;
    var m = t.params[14].val;
    var f = t.params[15].val;
    var _ = t.params[16].val;
    var g = t.params[17].val;
    var w = t.params[18].val;
    var E = t.params[19].val;
    var b = t.params[20].val;
    var C = t.params[21].val;
    if (i != e.persId && i != e.oppId) {
        canvas.app.battle.log("mCmd persInfo: ipersId is not =persId or oppId", 16711680);
        this.paksReadyAndParse();
        return
    }
    canvas.app.battle.log("\t* ipersId = " + i);
    canvas.app.battle.log("\t* ipersFlags  = " + r);
    canvas.app.battle.log("\t\tcheck = " + (r & 16384));
    canvas.app.battle.log("\t* ipersPetSrc = " + C);
    if (i == 100) {
        p = 1;
        h = p == 1 ? "M" : "F";
        u = 3
    }
    canvas.app.battle.log("\t* skeleton = " + u + " time=" + m, 170);
    canvas.app.battle.log("\t* gender   = " + h, 170);
    canvas.app.battle.log("\t* cls(hex) = " + v, 170);
    e.memDat[i] = {
        maxHP: w,
        maxMP: b,
        nick: o,
        level: c,
        gender: p,
        persFlags: r,
        sk: u,
        kind: d,
        team: _,
        mem_flag: true,
        petSrc: C,
        status: n
    };
    if (i == e.persId) {
        a.setBowsInfo(t.params[22] ? parseInt(t.params[22].val) : 0, t.params[23] ? parseInt(t.params[23].val) : 0, t.params[24] ? parseInt(t.params[24].val) : 0);
        a.updateAuras(e.persId)
    }
    e.memGenders[i] = {
        genders: h
    };
    v = v & 1 ? 1 : v & 2 ? 3 : v & 4 ? 5 : v & 8 ? 2 : v & 16 ? 4 : v & 32 ? 6 : 0;
    e.memClsMage[i] = {
        cls: v
    };
    canvas.app.battle.log("\t* cls(dec) = " + v, 170);
    if (i == e.persId) {
        canvas.app.battle.log("\t* PERS_INFO (MY_PERS)");
        canvas.app.battle.log("\t* status=" + String(n));
        a.view.persNick.update(o, i);
        e.persNick = o;
        e.persRace = d;
        if (e.tempDead) {
            e.persStatus = canvas.app.battle.Const.STATUS_DEAD;
            e.tempDead = false
        } else {
            e.persStatus = n
        }
        e.persHp = g;
        e.persHpMax = w;
        e.persMp = E;
        e.persMpMax = b;
        a.view.hpmp.setHpPers(g, w);
        a.view.hpmp.setMpPers(E, b);
        a.updPersHPLvl();
        a.updPersMPLvl();
        a.view.persLevel.setLevel(c);
        e.persSk = u;
        e.persSkTime = m;
        e.persGender = h;
        e.persTeam = _;
        if (!a.players[e.persId]) {
            if (u < canvas.app.battle.Const.BOTID1) {
                e.persIsBotFlag = false;
                a.mFunc.persParts(i);
                e.paksReady = true
            } else {
                a.loadPers(i);
                e.persIsBotFlag = true;
                a.mFunc.persParts(i);
                this.paksReadyAndParse()
            }
        } else {
            var y = a.players[e.persId];
            y.addFuncShow = a.showLoadedPers.bind(a);
            y.showBody()
        }
        e.mainStep = canvas.app.battle.Const.MAIN_STEP_DONE
    } else {
        canvas.app.battle.log("\t* PERS_INFO (MY_OPP)");
        canvas.app.battle.log("\t*  status=" + String(n));
        a.view.oppNick.update(o, i);
        e.oppStatus = n;
        e.oppHp = g;
        e.oppHpMax = w;
        e.oppMp = E;
        e.oppMpMax = b;
        a.view.hpmp.setHpOpp(g, w);
        a.view.hpmp.setMpOpp(E, b);
        a.view.oppLevel.setLevel(c);
        e.oppSk = u;
        e.oppSkTime = m;
        e.oppMask = f;
        e.oppGender = h;
        a.view.centerView.applyMask(e.oppMask);
        if (!a.players[e.oppId]) {
            if (u < canvas.app.battle.Const.BOTID1) {
                e.persIsBotFlag = false;
                a.mFunc.persParts(i);
                e.paksReady = true
            } else {
                a.loadPers(i);
                e.persIsBotFlag = true;
                a.mFunc.persParts(i);
                e.paksReady = true
            }
        } else {
            var T = a.players[e.oppId];
            T.addFuncShow = a.eveOppNewNoSh.bind(a);
            T.showBody()
        }
    }
}
;
canvas.app.battle.engine.MCmd.prototype.persParts = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd persParts: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    e.myAllDataArray[i] = t.params[3].val;
    var s = [];
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    l = t.params[3].val.split(",");
    c = l.length;
    for (n = 0; n < l.length; n++) {
        r = n * 5;
        o = l[n].split(";");
        p = parseInt(o[0]);
        s.push(p & 65535, p >> 16, o[1], o[2], o[3])
    }
    c = 295;
    if (i == e.persId) {
        a.flagLoadPers(s[c])
    } else {
        a.flagLoadOpp(s[c])
    }
    if (e.persIsBotFlag) {
        this.paksReadyAndParse();
        return
    }
    a.loadPers(i);
    a.players[i].mFlagId = s[c]
}
;
canvas.app.battle.engine.MCmd.prototype.sendEffectsList = function() {
    var t = this.baseLnk;
    if (!this.myEffectsGetted && this.myEffectsList != "") {
        this.myEffectsGetted = t.sendData("items", "EffList@" + this.myEffectsList)
    }
    if (this.myEffectsGetted) {
        return
    }
    if (this.myEffectsListDelayCurrent < this.myEffectsListDelayMax)
        this.myEffectsListDelayCurrent += this.myEffectsListDelayDelta;
    this.myEffectsListIV = setTimeout(this.sendEffectsList.bind(this), this.myEffectsListDelayCurrent)
}
;
canvas.app.battle.engine.MCmd.prototype.effects = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd effects: paramsCount= " + t.params.length);
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    var h;
    var d;
    var v;
    var u;
    var m;
    var f;
    var _;
    var g = 1e3;
    var w;
    var E;
    this.myEffectsList = "";
    e.abils = {};
    e.auras = new Array;
    for (var b = 2; b < t.params.length; b += 15) {
        i = t.params[b].val;
        s = t.params[b + 1].val;
        n = t.params[b + 2].val;
        r = t.params[b + 3].val;
        o = t.params[b + 4].val;
        l = t.params[b + 5].val;
        c = t.params[b + 6].val;
        p = t.params[b + 7].val;
        h = t.params[b + 8].val;
        m = t.params[b + 9].val;
        d = t.params[b + 10].val;
        v = t.params[b + 11].val;
        u = t.params[b + 12].val;
        _ = t.params[b + 13].val;
        f = t.params[b + 14].val;
        canvas.app.battle.log("     * effId=" + i + " cnt=" + s + " flags=0x" + n.toString(16) + " cdTime=" + o + " cdType=" + l + " ArtId=" + r + " cdGripId=" + c + " title=" + p + " pic=" + h + " slot=" + d + " mp=" + v + " cdLeft=" + u + " energy=" + _ + " curEffSubSlot=" + f, 6710886);
        e.abilsFlags[i] = n;
        canvas.app.battle.log("     *  PASSTURN   " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_PASSTURN), 10066329);
        canvas.app.battle.log("     *  TARGETSELF " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_TARGETSELF), 10066329);
        canvas.app.battle.log("     *  TARGETOPP  " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_TARGETOPP), 10066329);
        canvas.app.battle.log("     *  TEAMSELF   " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_TEAMSELF), 10066329);
        canvas.app.battle.log("     *  TEAMOPP    " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_TEAMOPP), 10066329);
        canvas.app.battle.log("     *  CONFIRM    " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_CONFIRM), 10066329);
        canvas.app.battle.log("     *  SPELL    " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_SPELL), 10066329);
        canvas.app.battle.log("     *  BOW    " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_BOW), 10066329);
        canvas.app.battle.log("     *  WEAPONEFFECT    " + e.testFlag(n, canvas.app.battle.Const.FS_PEF_WEAPONEFFECT), 10066329);
        canvas.app.battle.log("     *  AURA    " + (n & canvas.app.battle.Const.FS_PEF_AURA), 10066329);
        if (m == "BANNER") {
            e.flagEffId = i;
            e.flagTimeCd = o;
            e.flagTimeLeft = u
        }
        if (e.testFlag(n, canvas.app.battle.Const.FS_PEF_WEAPONEFFECT)) {} else {
            if (p.length > 0) {
                p = p.replace(/ /g, "__")
            }
            E = e.testFlag(n, canvas.app.battle.Const.FS_PEF_CONFIRM) ? p : "0";
            if (e.testFlag(n, canvas.app.battle.Const.FS_PEF_SPELL)) {
                e.spells[d] = {
                    effId: i,
                    cdTime: Math.max(Math.floor(canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN / 1e3), o),
                    cdGripId: c,
                    title: p,
                    picture: h,
                    mp: v,
                    confirm: E,
                    cdLeft: u
                };
                e.hasSpells = true
            } else if (e.testFlag(n, canvas.app.battle.Const.FS_PEF_BOW)) {
                w = e.spellsBowOrder.indexOf(i);
                e.spellsBow[i] = {
                    effId: i,
                    cdTime: Math.max(Math.floor(canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN / 1e3), o),
                    cdGripId: c,
                    title: p,
                    picture: h,
                    mp: v,
                    confirm: E,
                    cdLeft: u,
                    energy: _,
                    index: w < 0 ? g++ : w
                }
            } else if (n & canvas.app.battle.Const.FS_PEF_AURA) {
                e.auras.push(new canvas.data.battle.AuraData(i.toString(),p,canvas.Config.artifactsPath + h))
            } else {
                var C = e.testFlag(n, canvas.app.battle.Const.FS_PEF_DISABLED) ? "1" : "0";
                if (s > 0) {
                    this.myEffectsList += d + e.ch1 + i + e.ch1 + s + e.ch1 + h + e.ch1 + o + e.ch1 + c + e.ch1 + u + e.ch1 + C + e.ch1 + f + e.ch1 + l + e.ch2
                }
                e.abils[i] = {
                    title: p
                };
                canvas.app.battle.log("     *  ABIL: effId=" + i + " title=" + p + " flags=" + n.toString(2) + "(2)," + n.toString(16) + "(16)", 10066329)
            }
        }
    }
    a.view.centerView.buildSpells();
    a.view.bowPanel.buildSpells();
    a.updateAuras(e.persId);
    if (this.myEffectsList != "") {
        this.myEffectsList += "0";
        this.myEffectsListDelayCurrent = this.myEffectsListDelayBegin;
        this.sendEffectsList()
    }
}
;
canvas.app.battle.engine.MCmd.prototype.persActEffects = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd persActEffects: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    canvas.app.battle.log("     persId= " + i);
    var s = t.params.pop().val;
    if (i == e.persId) {
        e.persLastEffectsUpdateIndex = s
    } else if (i == e.oppId) {
        e.oppLastEffectsUpdateIndex = s
    }
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    var h;
    var d;
    var v = 7;
    if (e.persBafsFlag) {
        e.persBafsFlag = false;
        var u = "|";
        var m = ";";
        var f = e.serverTimestamp - e.clientTimestamp;
        var _ = i.toString() + u + f.toString() + u;
        for (d = 3; d < t.params.length; d += v) {
            n = t.params[d].val;
            r = canvas.Config.artifactsPath + t.params[d + 3].val;
            o = t.params[d + 1].val;
            l = t.params[d + 2].val;
            p = t.params[d + 5].val;
            h = t.params[d + 6].val;
            canvas.app.battle.log(" // curArtId  " + n, 10066329);
            canvas.app.battle.log(" // curPic    " + r, 10066329);
            canvas.app.battle.log(" // curCnt    " + o, 10066329);
            canvas.app.battle.log(" // curTitle  " + l, 10066329);
            canvas.app.battle.log(" // eetimeMax " + p, 10066329);
            _ += n.toString() + m + r + m + o.toString() + m + l + m + p.toString() + m + h.toString() + u
        }
        a.sendData("mem", "pers_bafs@" + _.substr(0))
    }
    var g = [];
    var w = {};
    var E = false;
    for (d = 3; d < t.params.length; d += v) {
        n = t.params[d].val;
        r = canvas.Config.artifactsPath + t.params[d + 3].val;
        o = t.params[d + 1].val;
        l = t.params[d + 2].val;
        c = t.params[d + 4].val;
        p = t.params[d + 5].val;
        h = t.params[d + 6].val;
        if (!E)
            E = e.testCurrentAura(n, i);
        canvas.app.battle.log("       id=" + n + " title=" + l + " pic=" + r + " cnt=" + o.toString() + " animData=" + c + " eetimeMax=" + p + " turnsLeft=" + h, 10066329);
        if (w[r] != undefined) {
            g[w[r]].cnt += o
        } else {
            var b = {};
            b.id = n;
            b.pic = r;
            b.title = l;
            b.cnt = o;
            b.lnk = null;
            b.animData = c;
            b.eetimeMax = p;
            b.turnsLeft = h;
            w[r] = g.push(b) - 1
        }
    }
    if (E) {
        a.updateAuras(i)
    }
    var C;
    if (i == e.persId) {
        C = a.view.effectsP1
    } else if (i == e.oppId) {
        C = a.view.effectsP2
    } else {
        canvas.app.battle.log("       WARN: pers_id=" + i.toString() + " not active", 16711680)
    }
    if (C) {
        C.initEffects(g);
        var y = a.players[i];
        if (y) {
            y.clearAdditionalEffects();
            var T;
            var M;
            for (var S = 0; S < g.length; S++) {
                T = g[S].animData.split("/");
                if (T.length > 2) {
                    if (T[2] != "null") {
                        M = T[2];
                        y.showAdditionalEffects(e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, M))
                    }
                }
            }
        } else {
            canvas.app.battle.log("       WARN: pers iPersId=" + i + " is null", 10027008)
        }
    }
}
;
canvas.app.battle.engine.MCmd.prototype.fightState = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd persActEffects: paramsCount= " + t.params.length + ", listSize=" + t.params[2].val.toString());
    var i = t.params[2].val;
    if (t.params.length < 12) {
        return
    }
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    var h;
    var d;
    var v;
    var u;
    var m;
    var f;
    var _;
    for (var g = 3; g < t.params.length; g += 12) {
        s = t.params[g + 0].val;
        n = e.parsePersStatus(t.params[g + 1].val, t.params[g + 2].val);
        r = t.params[g + 3].val;
        o = t.params[g + 4].val;
        l = t.params[g + 5].val;
        c = t.params[g + 6].val;
        p = t.params[g + 7].val;
        h = t.params[g + 8].val;
        d = t.params[g + 9].val;
        v = t.params[g + 10].val;
        u = t.params[g + 11].val;
        m = e.testFlag(r, canvas.app.battle.Const.FS_PF_BOT);
        f = e.testFlag(r, canvas.app.battle.Const.FS_PF_SHADOW);
        e.testPvpStatus(p, m);
        _ = 0;
        if (e.memDat[s]) {
            if (e.memDat[s].sk) {
                _ = e.memDat[s].sk
            }
        }
        e.memDat[s] = {
            maxHP: d,
            maxMP: u,
            nick: o,
            level: c,
            persFlags: r,
            sk: _,
            team: p,
            mem_flag: true,
            status: n
        };
        if (s == e.persId) {
            a.updateAuras(e.persId)
        }
        a.mFunc.full_g2m_answ_str += s.toString() + e.ch1 + o + e.ch1 + p.toString() + e.ch1 + n.toString() + e.ch1 + h.toString() + e.ch1 + d.toString() + e.ch1 + v.toString() + e.ch1 + u.toString() + e.ch1 + l + e.ch1 + c.toString() + e.ch1 + m.toString() + e.ch1 + r.toString() + e.ch1 + e.fightId.toString() + e.ch1 + f.toString() + e.ch2;
        a.mFunc.full_g2m_srt_buff++;
        canvas.app.battle.log("         ---------");
        canvas.app.battle.log("         isBot: " + m);
        canvas.app.battle.log("         curNick: " + o);
        canvas.app.battle.log("         curId: " + String(s));
        canvas.app.battle.log("         curStatus: " + String(n));
        canvas.app.battle.log("         curData: " + l);
        canvas.app.battle.log("         persFlags: " + r);
        canvas.app.battle.log("         --------")
    }
    if (i > a.mFunc.full_g2m_srt_buff && i != 0) {
        a.mFunc.fightState(0, a.mFunc.full_g2m_srt_buff)
    } else {
        a.mFunc.full_g2m_answ_str += String(e.myPersId);
        canvas.app.battle.log("      ToMEM: send PAK1 (len=" + a.mFunc.full_g2m_answ_str.length + ") buff=" + a.mFunc.full_g2m_srt_buff, 153);
        canvas.app.battle.log("      ToMEM: send PAK1: " + a.mFunc.full_g2m_answ_str, 153);
        if (a.mFunc.full_g2m_answ_str.length < 20 * 1024) {
            a.sendData("mem", "pak1@" + a.mFunc.full_g2m_answ_str)
        } else {
            var w = a.mFunc.full_g2m_answ_str;
            while (w.length > 0) {
                a.sendData("mem", "pak1s@" + w.substr(0, 15 * 1024));
                w = w.substr(15 * 1024)
            }
            a.sendData("mem", "pak1s@done")
        }
        if (e.watchFight || e.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
            a.setupWatchFightBts(true, e.persId);
            a.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT)
        }
        a.mFunc.full_g2m_answ_str = "";
        a.mFunc.full_g2m_srt_buff = 0;
        e.fullMlLoaded = true;
        e.fullReqLoaded = true;
        e.fightStateExecuting = false
    }
}
;
canvas.app.battle.engine.MCmd.prototype.useEffect = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd useEffect: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = t.params[3].val;
    var n = t.params[4].val;
    canvas.app.battle.log("        effId=" + String(i) + " targetId=" + String(s) + " usageStatus=" + String(n), 10066329);
    var r;
    var o = null;
    for (r in e.spells) {
        if (e.spells[r]["effId"] == i) {
            o = r;
            break
        }
    }
    if (!o) {
        if (!e.spellsBow[i]) {
            canvas.app.battle.log("        send sig to items_left.swf", 10066329);
            a.sendData("items", "update_cnt@" + String(i) + ",-1")
        } else {
            canvas.app.battle.log("        apply bow spells cooldown eff_id=" + i, 10066329);
            a.view.bowPanel.confirmUseEffect(i)
        }
    } else {
        canvas.app.battle.log("        apply spells cooldown slot_id=" + o, 10066329);
        a.view.centerView.useSlotConfirmed(o)
    }
    e.useFlag(i);
    a.updateAuras(e.persId)
}
;
canvas.app.battle.engine.MCmd.prototype.changeMode = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd changeMode: paramsCount= " + t.params.length);
    var i = e.persId;
    var s = t.params[2].val;
    var n = e.memDat[i].persFlags;
    e.memDat[i].persFlags = s;
    if (n != s) {
        var r = a.getPostLabel(i);
        canvas.app.battle.log("       post label = " + r);
        a.players[i].gotoAndPlay(r)
    }
}
;
canvas.app.battle.engine.MCmd.prototype.skipTurn = function() {
    var t = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mCmd skipTurn: paramsCount= " + t.params.length)
}
;
canvas.app.battle.engine.MCmd.prototype.unsetAura = function() {
    var t = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mCmd unsetAura: paramsCount= " + t.params.length)
}
;
canvas.app.battle.engine.MCmd.prototype.watchFight = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mCmd watchFight: paramsCount= " + t.params.length);
    e.wfGet++;
    this.oppIdFromWFCmd = t.params[10].val;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
    a.persesHide()
}
;
canvas.app.battle.engine.MCmd.prototype.handlerPersesHided = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
    canvas.app.battle.log("mCmd handlerPersesHided: newPersId= " + e.newPersId);
    if (e.wfCnt != e.wfGet) {
        canvas.app.battle.log("        - new_pers_id was changed, handle return", 16711680);
        this.paksReadyAndParse();
        return
    }
    e.oppId = this.oppIdFromWFCmd;
    e.persId = e.newPersId;
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MCmd.prototype.paksReadyAndParse = function() {
    canvas.app.battle.model.paksReady = true;
    canvas.app.battle.model.parser.paksParse()
}
;
canvas.app.battle.engine.MEve = function(t) {
    this.baseLnk = t;
    this.effectsList = "";
    this.myEffectsListIV;
    this.myEffectsListDelayBegin = 1e3;
    this.myEffectsListDelayDelta = 100;
    this.myEffectsListDelayCurrent = 1e3;
    this.myEffectsListDelayMax = 5e3;
    this.myEffectsGetted = false
}
;
canvas.app.battle.engine.MEve.prototype.oppWait = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve oppWait: paramsCount= " + t.params.length);
    a.view.topTimer.deactivate();
    a.centerVisible(false);
    if (e.oppId == 0) {
        canvas.app.battle.log("         no opponent, ignore oppWait event");
        a.showSpellBookInWaitOpponent();
        this.paksReadyAndParse();
        return
    } else {
        canvas.app.battle.log("         hide old opponent");
        var i = a.players[e.oppId];
        if (i) {
            i.addFuncHide = this.oppWaitHided.bind(this);
            i.hideBody()
        } else {
            canvas.app.battle.log("         ERR: opp pers class is null (opp_id=" + String(e.oppId) + ")", 16711680);
            return
        }
    }
}
;
canvas.app.battle.engine.MEve.prototype.oppWaitHided = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = canvas.app.battle.model;
    var i = this.baseLnk;
    canvas.app.battle.log("mEve oppWaitHided: persId=" + t.pers_id);
    a.oppId = 0;
    i.view.effectsP2.initEffects([]);
    i.view.oppNick.unshow();
    i.view.oppLevel.setLevel("");
    i.view.hpmp.setHpOpp(0, 0);
    i.view.hpmp.setMpOpp(0, 0);
    i.showSpellBookInWaitOpponent();
    if (!a.persDown && a.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        var s = i.players[a.persId];
        var n = s.sk.kick_array_all.kick_mid.a_mid_1.die;
        var r = n[Math.floor(n.length * Math.random())];
        a.persDown = true;
        s.gotoAndPlay(r);
        s.magicStandBase.visible = false
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.oppNew = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve oppNew: paramsCount= " + t.params.length);
    a.view.topTimer.deactivate();
    e.newOppId = t.params[2].val;
    canvas.app.battle.log("         new opp_id=" + e.newOppId);
    a.view.flagOpp.visible = false;
    var i = a.players[e.newOppId];
    if (i) {
        if (i.mFlagId != 0) {
            a.view.flagOpp.visible = true
        } else {
            a.view.flagOpp.visible = false
        }
    }
    if (e.oppId == e.newOppId) {
        this.paksReadyAndParse();
        return
    }
    if (e.oppId != 0) {
        var s = a.players[e.oppId];
        if (s) {
            s.addFuncHide = this.oppNewHided.bind(this);
            s.hideBody();
            a.view.flagOpp.visible = false;
            if (i && i.mFlagId != 0) {
                a.view.flagOpp.visible = true
            } else {
                a.view.flagOpp.visible = false
            }
        } else {
            canvas.app.battle.log("         Err01: opp pers class is null (opp_id=" + String(e.oppId) + ")", 16711680);
            return
        }
    } else {
        a.view.mainPopup.deactivate();
        e.oppId = e.newOppId;
        e.paksReady = true;
        a.mFunc.persInfo(e.oppId)
    }
    a.view.centerView.cSpells.restoreCooldowns()
}
;
canvas.app.battle.engine.MEve.prototype.oppNewHided = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = canvas.app.battle.model;
    var i = this.baseLnk;
    canvas.app.battle.log("mEve oppNewHided: persId=" + t.pers_id);
    i.view.mainPopup.deactivate();
    i.view.effectsP2.initEffects([]);
    i.view.oppNick.unshow();
    i.view.oppLevel.setLevel("");
    i.view.hpmp.setHpOpp(0, 0);
    i.view.hpmp.setMpOpp(0, 0);
    a.oppId = a.newOppId;
    a.paksReady = true;
    i.mFunc.persInfo(a.oppId)
}
;
canvas.app.battle.engine.MEve.prototype.fightState = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve fightState: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = e.parsePersStatus(t.params[3].val, t.params[4].val);
    var n = t.params[5].val;
    var r = t.params[6].val;
    var o = t.params[7].val;
    var l = t.params[8].val;
    var c = t.params[9].val;
    var p = i == e.persId || i == e.oppId ? true : false;
    canvas.app.battle.log("          pers_id=" + String(i) + " status=" + String(s) + " hp=" + String(r) + "/" + String(o) + " mp=" + String(l) + " flags=" + n.toString(2));
    if (i == e.myPersId && s != canvas.app.battle.Const.STATUS_DEAD)
        a.setupWatchFightBts(false);
    var h = true;
    if (e.memDat[i]) {
        e.memDat[i].maxHP = o;
        e.memDat[i].maxMP = c;
        e.memDat[i].status = s;
        var d = i + e.ch1 + s + e.ch1 + String(r) + e.ch1 + String(o) + e.ch1 + String(l) + e.ch1 + String(c) + e.ch1 + n;
        if (!e.mlBufferHash[i]) {
            e.mlBufferQueue.push(i)
        }
        e.mlBufferHash[i] = d;
        e.evActivityTmp++;
        var v = e.memDat[i].persFlags;
        e.memDat[i].persFlags = n;
        if (p) {
            var u;
            var m;
            if (s == canvas.app.battle.Const.STATUS_DEAD) {
                if (a.players[i]) {
                    a.players[i].clearAdditionalEffects();
                    a.players[i].magicStandBase.visible = false
                }
                if (i == e.oppId) {
                    canvas.app.battle.log("        opp die (apply <b>dieBody</b>)");
                    e.oppStatus = canvas.app.battle.Const.STATUS_DEAD;
                    h = false;
                    a.players[i].addFuncDie = this.fightStateDead.bind(this);
                    a.players[i].dieBody()
                } else {
                    canvas.app.battle.log("        pers die (apply <b>dieBody</b>)");
                    e.persStatus = canvas.app.battle.Const.STATUS_DEAD;
                    e.persHpMax = o;
                    e.persMpMax = c;
                    u = r - e.persHp;
                    if (u != 0) {
                        a.view.showDmg([{
                            tar: "pers",
                            kick: u < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
                            val: u
                        }])
                    }
                    e.persHp = r;
                    e.persMp = l;
                    a.view.hpmp.setHpPers(e.persHp, e.persHpMax);
                    a.view.hpmp.setMpPers(e.persMp, e.persMpMax);
                    h = false;
                    this.fightStateDead({
                        pers_id: e.persId
                    })
                }
            } else {
                if (a.players[i])
                    a.players[i].magicStandBase.visible = true;
                if (i == e.persId) {
                    a.chekStatusForResurection();
                    e.persStatus = s;
                    e.persHpMax = o;
                    e.persMpMax = c;
                    u = r - e.persHp;
                    if (u != 0) {
                        a.view.showDmg([{
                            tar: "pers",
                            kick: u < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
                            val: u
                        }])
                    }
                    m = l - e.persMp;
                    if (m != 0) {
                        a.view.showDmg([{
                            tar: "pers",
                            kick: m < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_MANA,
                            val: m
                        }])
                    }
                    e.persHp = r;
                    e.persMp = l;
                    a.view.hpmp.setHpPers(e.persHp, e.persHpMax);
                    a.view.hpmp.setMpPers(e.persMp, e.persMpMax);
                    a.updPersMPLvl()
                } else if (i == e.oppId) {
                    e.oppStatus = s;
                    e.oppHpMax = o;
                    e.oppMpMax = c;
                    e.oppHp = r;
                    e.oppMp = l;
                    a.view.hpmp.setHpOpp(e.oppHp, e.oppHpMax);
                    a.view.hpmp.setMpOpp(e.oppMp, e.oppMpMax)
                } else {
                    canvas.app.battle.log("          WARN: unknown iPersId=" + String(i) + " in fightState", 16711680)
                }
                if (v != n) {
                    var f = a.getPostLabel(i);
                    a.players[i].gotoAndPlay(f)
                }
            }
        }
        if (i == e.myPersId && e.oppId && a.view.centerView.cDot.btIsOn)
            a.testCenterMode();
        if (e.memDat[i].mem_flag != true) {
            e.memDat[i].mem_flag = true;
            a.mFunc.fightState(i, 0)
        }
    } else {
        if (e.fullMlLoaded) {
            a.mFunc.fightState(i, 0)
        } else {
            canvas.app.battle.log("          full MemberList not loaded yet", 153)
        }
    }
    if (h) {
        this.paksReadyAndParse()
    }
}
;
canvas.app.battle.engine.MEve.prototype.fightStateDead = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = canvas.app.battle.model;
    var i = this.baseLnk;
    canvas.app.battle.log("mEve fightStateDead: persId=" + t.pers_id);
    if (a.oppId == 0) {
        this.paksReadyAndParse()
    } else {
        i.players[a.oppId].addFuncHide = this.oppWaitHided.bind(this);
        i.players[a.oppId].hideBody()
    }
    i.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT)
}
;
canvas.app.battle.engine.MEve.prototype.newPers = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve newPers: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = e.parsePersStatus(t.params[3].val, t.params[4].val);
    var n = t.params[5].val;
    var r = t.params[6].val;
    var o = t.params[7].val;
    var l = t.params[8].val;
    var c = t.params[9].val;
    var p = t.params[10].val;
    var h = t.params[11].val;
    var d = t.params[12].val;
    var v = t.params[13].val;
    var u;
    var m;
    var f;
    u = e.testFlag(n, canvas.app.battle.Const.FS_PF_BOT);
    m = e.testFlag(n, canvas.app.battle.Const.FS_PF_SHADOW);
    e.testPvpStatus(c, u);
    f = 0;
    if (e.memDat[i]) {
        if (e.memDat[i].sk) {
            f = e.memDat[i].sk
        }
    }
    e.memDat[i] = {
        maxHP: h,
        maxMP: v,
        nick: r,
        level: l,
        persFlags: n,
        sk: f,
        team: c,
        mem_flag: true,
        status: s
    };
    a.mFunc.full_g2m_answ_str += String(i) + e.ch1 + r + e.ch1 + String(c) + e.ch1 + String(s) + e.ch1 + String(p) + e.ch1 + String(h) + e.ch1 + String(d) + e.ch1 + String(v) + e.ch1 + o + e.ch1 + String(l) + e.ch1 + String(u) + e.ch1 + String(n) + e.ch1 + String(e.fightId) + e.ch1 + String(m) + e.ch2;
    a.mFunc.full_g2m_srt_buff++;
    canvas.app.battle.log("           ---------");
    canvas.app.battle.log("           isBot: " + u);
    canvas.app.battle.log("           curNick: " + r);
    canvas.app.battle.log("           curId: " + String(i));
    canvas.app.battle.log("           curStatus: " + String(s));
    canvas.app.battle.log("           curData: " + o);
    canvas.app.battle.log("           persFlags: " + n);
    canvas.app.battle.log("           --------");
    a.mFunc.full_g2m_answ_str += String(e.myPersId);
    if (e.fullReqLoaded) {
        if (a.mFunc.full_g2m_answ_str.length < 20 * 1024) {
            a.sendData("mem", "pak1@" + a.mFunc.full_g2m_answ_str)
        } else {
            var _ = a.mFunc.full_g2m_answ_str;
            while (_.length > 0) {
                a.sendData("mem", "pak1s@" + _.substr(0, 15 * 1024));
                _ = _.substr(15 * 1024)
            }
            a.sendData("mem", "pak1s@done")
        }
    }
    if (canvas.app.battle.Const.WATCH_FIGHT || e.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        a.setupWatchFightBts(true, e.persId);
        a.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT)
    }
    a.mFunc.full_g2m_answ_str = "";
    a.mFunc.full_g2m_srt_buff = 0;
    e.fullMlLoaded = true;
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.attackWait = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve attackWait: paramsCount= " + t.params.length);
    a.chekStatusForResurection();
    e.persStatus = canvas.app.battle.Const.STATUS_PASSIVE;
    a.centerVisible(false);
    a.view.topTimer.activate(e.getLostTime());
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.attackNow = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve attackNow: paramsCount= " + t.params.length);
    var i;
    a.chekStatusForResurection();
    e.persStatus = canvas.app.battle.Const.STATUS_ACTIVE;
    a.centerVisible(true);
    a.view.centerView.checkSpells(t.params[2].val);
    a.view.centerView.coolDownStart(t.params[2].val);
    if (e.memDat[e.oppId]) {
        i = e.memDat[e.oppId].persFlags;
        e.memDat[e.oppId].persFlags = t.params[2].val;
        if (i != e.memDat[e.oppId].persFlags) {
            var s = a.getPostLabel(e.oppId);
            a.players[e.oppId].gotoAndPlay(s)
        }
    }
    a.view.topTimer.activate(e.getLostTime());
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.attack = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve attack: paramsCount= " + t.params.length + " pers_id=" + t.params[2].val + "; opp_id=" + t.params[3].val);
    if (e.oppId == 0) {
        canvas.app.battle.log("                 WARN: no opponent, attack incorrect", 16711680);
        this.paksReadyAndParse();
        return
    }
    e.waitingDamageCnt = 2;
    e.delayedAttackData = {
        persId: t.params[2].val,
        oppId: t.params[3].val,
        kick: t.params[4].val,
        part: t.params[5].val,
        rnd: t.params[6].val,
        animData: t.params[7].val
    };
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.applyAttack = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve applyAttack: paramsCount= " + t.params.length + " opp_id=" + e.oppId);
    if (!e.delayedAttackData) {
        canvas.app.battle.log("            ERR: delayed_attack_data is null", 16711680);
        return
    }
    a.view.topTimer.deactivate();
    e.blockTime = 0;
    var i = e.delayedAttackData.persId;
    var s = e.delayedAttackData.oppId;
    var n = e.delayedAttackData.kick;
    var r = e.delayedAttackData.part;
    var o = e.delayedAttackData.rnd;
    var l = (o & 255) / 255;
    var c = (o >> 8) / 255;
    var p = e.delayedAttackData.animData ? parseInt(e.delayedAttackData.animData) : 0;
    var h = e.delayedAttackData["data_" + String(i)];
    var d = e.delayedAttackData["data_" + String(s)];
    if (!h) {
        canvas.app.battle.log("            ERR: no data for pers_id=" + String(i), 16711680);
        this.paksReadyAndParse();
        return
    } else if (d == null) {
        canvas.app.battle.log("            ERR: no data for opp_id=" + String(s), 16711680);
        this.paksReadyAndParse();
        return
    }
    var v = n;
    var u = canvas.app.battle.Const.PART_STR[r];
    var m = canvas.app.battle.Const.KICK_STR[n];
    var f = m;
    var _;
    var g;
    var w = [];
    if (i == e.persId) {
        e.oppHp -= d.dmg;
        e.persHp -= h.dmg;
        a.view.comboView.newHit(r.toString(), p != 0);
        canvas.app.battle.log("            [PERSATTACK]  DMG[" + d.dmg + "], PART[" + r + "/" + u + "] kick[" + n + "/" + m + "]", 170);
        if (e.oppHp <= 0) {
            canvas.app.battle.log("            (!) opp DIE", 170);
            e.oppStatus = canvas.app.battle.Const.STATUS_DEAD;
            n = 0;
            f = canvas.app.battle.Const.KICK_STR[n];
            if (a.players[e.oppId]) {
                a.players[e.oppId].magicStandBase.visible = false
            }
        }
        _ = a.players[e.persId];
        g = a.players[e.oppId];
        if (a.view.players.getChildIndex(a.view.player1) < a.view.players.getChildIndex(a.view.player2)) {
            a.view.players.swapChildren(a.view.player1, a.view.player2)
        }
        if (d.absorb != 0) {
            w.push({
                tar: "opp",
                kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
                val: d.absorb
            })
        }
        if (d.resist != 0) {
            w.push({
                tar: "opp",
                kick: canvas.app.battle.Const.DMG_KICK_RESIST,
                val: d.resist
            })
        }
        if (d.dmg != 0) {
            w.push({
                tar: "opp",
                kick: v,
                crit: d.crit,
                val: -d.dmg,
                new_tar_HP: e.oppHp,
                my_dmg: true
            })
        }
        if (w.length == 0 && (v == canvas.app.battle.Const.DMG_KICK_DODGE || v == canvas.app.battle.Const.DMG_KICK_BLOCK)) {
            w.push({
                tar: "opp",
                kick: v,
                crit: 0,
                val: 0
            })
        }
        if (h.dmg != 0) {
            w.push({
                tar: "pers",
                kick: h.dmg < 0 ? canvas.app.battle.Const.DMG_KICK_CURE : canvas.app.battle.Const.DMG_KICK_WOUND,
                crit: 0,
                val: -h.dmg,
                new_tar_HP: e.persHp
            })
        }
        _.dmgConf = w
    } else {
        canvas.app.battle.log("            [OPPATTACK]  DMG[" + d.dmg + "], PART[" + r + "/" + u + "] kick[" + n + "/" + m + "]", 170);
        e.oppHp -= h.dmg;
        e.persHp -= d.dmg;
        if (e.persHp <= 0) {
            canvas.app.battle.log("            (!) pers DIE", 170);
            e.persStatus = canvas.app.battle.Const.STATUS_DEAD;
            e.persDown = true;
            n = 0;
            f = canvas.app.battle.Const.KICK_STR[n];
            if (a.players[e.persId]) {
                a.players[e.persId].magicStandBase.visible = false
            }
        }
        _ = a.players[e.oppId];
        g = a.players[e.persId];
        if (a.view.players.getChildIndex(a.view.player1) > a.view.players.getChildIndex(a.view.player2)) {
            a.view.players.swapChildren(a.view.player1, a.view.player2)
        }
        if (d.absorb != 0) {
            w.push({
                tar: "pers",
                kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
                val: d.absorb
            })
        }
        if (d.resist != 0) {
            w.push({
                tar: "pers",
                kick: canvas.app.battle.Const.DMG_KICK_RESIST,
                val: d.resist
            })
        }
        if (d.dmg != 0) {
            w.push({
                tar: "pers",
                kick: v,
                crit: d.crit,
                val: -d.dmg,
                new_tar_HP: e.oppHp
            })
        }
        if (w.length == 0 && (v == canvas.app.battle.Const.DMG_KICK_DODGE || v == canvas.app.battle.Const.DMG_KICK_BLOCK)) {
            w.push({
                tar: "pers",
                kick: v,
                crit: 0,
                val: 0
            })
        }
        if (h.dmg != 0) {
            w.push({
                tar: "opp",
                kick: h.dmg < 0 ? canvas.app.battle.Const.DMG_KICK_CURE : canvas.app.battle.Const.DMG_KICK_WOUND,
                crit: 0,
                val: -h.dmg,
                new_tar_HP: e.persHp,
                my_dmg: true,
                dont_inc_totDMG: true
            })
        }
        _.dmgConf = w
    }
    var E;
    if (p != 0) {
        if (i == e.persId) {
            a.view.comboView.comboComplete()
        }
        a.view.playComboHit();
        E = "combo_" + String(p);
        canvas.app.battle.log("            COMBO label=" + E);
        if (_.allLabels[E]) {
            r = 0;
            u = canvas.app.battle.Const.PART_STR[r]
        } else {
            canvas.app.battle.log('            WARN: this pers have no label "' + E + '"', 10027008);
            E = null
        }
    }
    if (!E) {
        var b = _.sk.action_array_all[u];
        E = b[Math.round(l * (b.length - 1))]
    }
    var C = g.sk.kick_array_all[u];
    var y = C[E];
    var T = y[f];
    var M = T[Math.round(c * (T.length - 1))];
    canvas.app.battle.log("            //action_label = " + E, 5570815);
    canvas.app.battle.log("            //sk = " + _, 5570815);
    canvas.app.battle.log("            //conf = " + _.sk.ActionConf[E], 5570815);
    canvas.app.battle.log("            //reaction_label = " + M, 5570815);
    canvas.app.battle.log("            //sk = " + g, 5570815);
    canvas.app.battle.log("            //conf = " + g.sk.ReactionConf[M], 5570815);
    canvas.app.battle.log("            attack point 1");
    var S;
    var x;
    if (m == "wound") {
        g.sndConf = null;
        S = _.sk.ActionSound[E];
        canvas.app.battle.log("            curSndConf=" + S);
        canvas.app.battle.log("            curSndConf.srd=" + S.std);
        if (S.std) {
            switch (n) {
            case 0:
            case 3:
                x = canvas.app.battle.Const.SND_GROUPS["wound"];
                break;
            case 2:
                x = canvas.app.battle.Const.SND_GROUPS["crit"];
                break;
            default:
                x = canvas.app.battle.Const.SND_GROUPS["wound"];
                canvas.app.battle.log("            WARN: 01 unknown kick = " + String(n), 16711680)
            }
            _.sndConf = {
                std: true,
                snd_name: x[Math.floor(Math.random() * x.length)]
            };
            canvas.app.battle.log("            standart sound : " + _.sndConf.snd_name)
        } else if (!S.std && S.self) {
            _.sndConf = {
                std: false,
                snd_name: S.self
            };
            canvas.app.battle.log("            internal sound : " + S.self)
        } else {
            canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680)
        }
    } else {
        _.sndConf = null;
        S = g.sk.ActionSound[M];
        if (S.std) {
            switch (n) {
            case 1:
                x = canvas.app.battle.Const.SND_GROUPS["dodge"];
                break;
            case 4:
                x = canvas.app.battle.Const.SND_GROUPS["block"];
                break;
            default:
                x = canvas.app.battle.Const.SND_GROUPS["block"];
                canvas.app.battle.log("            WARN: 02 unknown kick = " + String(n), 16711680)
            }
            g.sndConf = {
                std: true,
                snd_name: x[Math.floor(Math.random() * x.length)]
            };
            canvas.app.battle.log("            standart sound : " + g.sndConf.snd_name)
        } else if (!S.std && S.self) {
            g.sndConf = {
                std: false,
                snd_name: S.self
            };
            canvas.app.battle.log("            internal sound : " + S.self)
        } else {
            canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680)
        }
    }
    canvas.app.battle.log("            attack point 2");
    _.inMotion = true;
    _.gotoAndPlay(E);
    g.inMotion = true;
    g.setReaction({
        r_label: M,
        r_delay: _.sk.ActionConf[E] - g.sk.ReactionConf[M]
    })
}
;
canvas.app.battle.engine.MEve.prototype.fightLog = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve fightLog: paramsCount= " + t.params.length);
    var i = e.memDat[t.params[3].val];
    var s = e.memDat[t.params[4].val];
    if (t.params[4].val == 0) {
        s = {
            nick: "",
            level: 0
        }
    }
    if (!i || !s) {
        canvas.app.battle.log("           ERR: pers_id " + t.params[3].val + " or " + t.params[4].val + " is null in memDat (can not send fightlog)", 16711680)
    } else {
        if (!canvas.Config.isLocal) {
            if (t.params[5].val == 4) {
                t.params[8].val = e.getEffectLogImage(t.params[3].val == e.persId ? canvas.app.battle.Const.EFFECT_TYPE_OWNER : canvas.app.battle.Const.EFFECT_TYPE_OTHER, t.params[8].val)
            }
            fightUpdateLog(t.params[2].val, t.params[3].val, i.nick, i.level, t.params[4].val, s.nick, s.level, t.params[5].val, t.params[6].val, t.params[7].val, t.params[8].val, t.params[9].val)
        }
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.attackTimeout = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve attackTimeout: paramsCount= " + t.params.length);
    a.centerVisible(false);
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.fightOver = function(t) {
    if (t == undefined)
        t = true;
    var e = canvas.app.battle.model.serverParser;
    var a = canvas.app.battle.model;
    var i = this.baseLnk;
    canvas.app.battle.log("mEve fightOver: paramsCount= " + e.params.length + ", showResult=" + t);
    i.sendData("items", "Clean@");
    if (t) {
        canvas.app.battle.log("            winTeam=" + String(e.params[2].val), 10027008);
        if (e.params[2].val == a.persTeam) {
            i.sndPlay("fightover_victory");
            i.view.showMainPopup(canvas.app.battle.Const.POP_ST_VISCORY)
        } else {
            i.sndPlay("fightover_defeat");
            i.view.showMainPopup(canvas.app.battle.Const.POP_ST_DEFEAT)
        }
        a.fightResult = e.params[2].val
    }
    a.fightResult = e.params[2] ? e.params[2].val : 0;
    i.view.messagePopup.deactivate();
    i.clearSyncTimeout();
    i.conn.stopTransfers();
    i.view.topTimer.deactivate();
    i.centerVisible(false)
}
;
canvas.app.battle.engine.MEve.prototype.srvShutdown = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve srvShutdown: paramsCount= " + t.params.length);
    a.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_SHUTDOWN)
}
;
canvas.app.battle.engine.MEve.prototype.effectApply = function(t) {
    var e = canvas.app.battle.model.serverParser;
    var a = canvas.app.battle.model;
    var i = this.baseLnk;
    canvas.app.battle.log("mEve effectApply: paramsCount= " + e.params.length + ", rid=" + t);
    var s = e.params.pop().val;
    var n = e.params[2].val;
    var r = e.params[3].val;
    var o = e.params[4].val;
    var l = e.params[5].val;
    var c = e.params[6].val;
    var p = e.params[7].val;
    var h = e.params[8].val;
    var d = e.params[9].val;
    if (a.testCurrentAura(r, n, o < 0))
        i.updateAuras(n);
    if (n == a.persId || n == a.oppId) {
        var v = n == a.persId ? i.view.effectsP1 : i.view.effectsP2;
        if (n == a.persId && s > a.persLastEffectsUpdateIndex || n == a.oppId && s > a.oppLastEffectsUpdateIndex) {
            v.deltaItem(r, l, canvas.Config.artifactsPath + c, o, p, h, d)
        }
        var u = i.players[n];
        if (u) {
            var m = p.split("/");
            canvas.app.battle.log("          animData = " + m.join("|"));
            if (m.length > 2) {
                if (m[2] != "null") {
                    var f;
                    var _ = a.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, m[2]);
                    var g;
                    for (f = 0; f < _.length; f++) {
                        g = _[f];
                        if (u.additionalEffects[g]) {
                            if (!v.haveAnimData(g)) {
                                u.removeAdditionalEffect(g)
                            }
                        } else {
                            if (v.haveAnimData(g)) {
                                u.showAdditionalEffect(g)
                            }
                        }
                    }
                }
            }
        }
    } else {
        canvas.app.battle.log("          WARN: pers_id=" + String(n) + " not active")
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.updateItems = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve updateItems: paramsCount= " + t.params.length);
    this.effectsList = "";
    var i;
    var s;
    var n;
    var r;
    for (var o = 2; o < t.params.length; o += 4) {
        i = t.params[o].val;
        s = t.params[o + 1].val;
        n = t.params[o + 2].val;
        r = t.params[o + 3].val
    }
    canvas.app.battle.log("                 effId=" + i + " cnt=" + s + " flags=0x" + n.toString(16) + " cdLeft=" + r, 6710886);
    var l = e.testFlag(n, canvas.app.battle.Const.FS_PEF_DISABLED) ? "1" : "0";
    this.effectsList += i.toString() + e.ch1 + l + e.ch2;
    this.myEffectsListDelayCurrent = this.myEffectsListDelayBegin;
    this.sendDisEffectsList()
}
;
canvas.app.battle.engine.MEve.prototype.sendDisEffectsList = function() {
    if (!this.myEffectsGetted && this.effectsList != "") {
        this.myEffectsGetted = baseLnk.sendData("items", "Disabled@" + this.effectsList)
    }
    if (this.myEffectsGetted) {
        this.myEffectsGetted = false;
        this.paksReadyAndParse();
        return
    }
    if (this.myEffectsListDelayCurrent < this.myEffectsListDelayMax)
        this.myEffectsListDelayCurrent += this.myEffectsListDelayDelta;
    this.myEffectsListIV = setTimeout(this.sendDisEffectsList.bind(this), this.myEffectsListDelayCurrent)
}
;
canvas.app.battle.engine.MEve.prototype.manaConsum = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve manaConsum: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = -t.params[3].val;
    var n = [];
    if (i == e.persId) {
        if (s != 0) {
            e.persMp += s;
            n.push({
                tar: "pers",
                kick: canvas.app.battle.Const.DMG_KICK_MANA,
                val: s
            });
            if (e.persMp < 0)
                e.persMp = 0;
            a.view.hpmp.setMpPers(e.persMp, e.persMpMax);
            a.updPersMPLvl()
        }
        if (n.length > 0 && (s > 0 || s < 0 && e.persStatus == canvas.app.battle.Const.STATUS_PASSIVE)) {
            a.view.showMP(n)
        }
    } else if (i == e.oppId) {
        if (s != 0) {
            e.oppMp += s;
            n.push({
                tar: "opp",
                kick: canvas.app.battle.Const.DMG_KICK_MANA,
                val: s
            });
            if (e.oppMp < 0)
                e.oppMp = 0;
            a.view.hpmp.setMpOpp(e.oppMp, e.oppMpMax)
        }
        if (n.length > 0 && (s > 0 || s < 0 && e.oppStatus == canvas.app.battle.Const.STATUS_PASSIVE)) {
            a.view.showMP(n)
        }
    } else {
        canvas.app.battle.log("               WARN: pers_id=" + String(i) + " not active", 16711680)
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.energyConsum = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve energyConsum: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = -t.params[3].val;
    if (i == e.persId) {
        e.bowEnergyValue += s;
        a.view.bowPanel.setProgress(e.bowEnergyValue, e.bowEnergyMax)
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.energyRegen = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve energyRegen: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = t.params[3].val;
    if (i == e.persId) {
        e.bowEnergyValue += s;
        a.view.bowPanel.setProgress(e.bowEnergyValue, e.bowEnergyMax)
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.arrowConsum = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve effectUse: arrowConsum= " + t.params.length);
    var i = t.params[2].val;
    var s = -t.params[3].val;
    if (i == e.persId) {
        a.setBowsInfo(e.arrowsCount + s, e.bowEnergyValue, e.bowEnergyMax)
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.damage = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve damage: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = t.params[3].val;
    var n = t.params[4].val;
    var r = t.params[5].val;
    var o = t.params[6].val;
    var l = t.params[7].val;
    var c = t.params[8].val;
    if (e.waitingDamageCnt == -1) {
        canvas.app.battle.log("         <b>SIMPLE DAMAGE</b>");
        canvas.app.battle.log("         // e_persId  : " + String(i), 6710886);
        canvas.app.battle.log("         // e_dmg     : " + String(s), 6710886);
        canvas.app.battle.log("         // e_dmgType : " + String(n), 6710886);
        canvas.app.battle.log("         // e_crit    : " + String(r), 6710886);
        canvas.app.battle.log("         // e_absorb  : " + String(o), 6710886);
        canvas.app.battle.log("         // e_aid     : " + String(l), 6710886);
        canvas.app.battle.log("         // e_resist  : " + String(c), 6710886);
        var p = [];
        if (i == e.persId) {
            if (s != 0) {
                e.persHp -= s;
                p.push({
                    tar: "pers",
                    kick: r == 1 ? canvas.app.battle.Const.DMG_KICK_CRIT : s > 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
                    val: -s,
                    new_tar_HP: e.persHp,
                    my_dmg: false
                })
            }
            if (o != 0) {
                p.push({
                    tar: "pers",
                    kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
                    val: o,
                    new_tar_HP: e.persHp,
                    my_dmg: false
                })
            }
            if (c != 0) {
                p.push({
                    tar: "pers",
                    kick: canvas.app.battle.Const.DMG_KICK_RESIST,
                    val: c,
                    new_tar_HP: e.persHp,
                    my_dmg: false
                })
            }
            if (p.length > 0) {
                a.view.showDmg(p)
            }
            if (!e.persDown && e.persHp <= 0) {
                var h = a.players[e.persId];
                var d = h.sk.kick_array_all.kick_mid.a_mid_1.die;
                var v = d[Math.floor(d.length * Math.random())];
                canvas.app.battle.log("         pers body down, label=" + v);
                e.persStatus = canvas.app.battle.Const.STATUS_DEAD;
                e.persDown = true;
                h.gotoAndPlay(v);
                h.magicStandBase.visible = false
            }
        } else if (i == e.oppId) {
            if (s != 0) {
                e.oppHp -= s;
                p.push({
                    tar: "opp",
                    kick: r == 1 ? canvas.app.battle.Const.DMG_KICK_CRIT : s > 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
                    val: -s,
                    new_tar_HP: e.oppHp,
                    my_dmg: l == e.persId
                })
            }
            if (o != 0) {
                p.push({
                    tar: "opp",
                    kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
                    val: o,
                    new_tar_HP: e.oppHp,
                    my_dmg: l == e.persId
                })
            }
            if (c != 0) {
                p.push({
                    tar: "opp",
                    kick: canvas.app.battle.Const.DMG_KICK_RESIST,
                    val: c,
                    new_tar_HP: e.oppHp,
                    my_dmg: l == e.persId
                })
            }
            if (p.length > 0) {
                a.view.showDmg(p)
            }
        } else {
            canvas.app.battle.log("         WARN: pers_id=" + String(i) + " not active", 16711680)
        }
        this.paksReadyAndParse();
        return
    }
    if (e.waitingDamageCnt > 0) {
        if (e.delayedAttackData) {
            if (e.delayedAttackData.persId == i || e.delayedAttackData.oppId == i) {
                e.delayedAttackData["data_" + i] = {
                    dmg: s,
                    dmgType: n,
                    crit: r,
                    absorb: o,
                    resist: c
                }
            } else {
                canvas.app.battle.log("         ERR: not actual event, persId=" + String(i) + ", waitingIds=" + String(e.delayedAttackData.persId) + "," + String(e.delayedAttackData.oppId), 16711680)
            }
        } else {
            canvas.app.battle.log("         ERR: delayed_attack_data is null", 16711680)
        }
        e.waitingDamageCnt--;
        canvas.app.battle.log("         waiting_damage_cnt = " + String(e.waitingDamageCnt));
        if (e.waitingDamageCnt == 0) {
            e.waitingDamageCnt = -1;
            this.applyAttack()
        } else {
            this.paksReadyAndParse()
        }
    } else {
        canvas.app.battle.log("         ERR: waiting_damage_cnt = " + String(e.waitingDamageCnt), 16711680)
    }
}
;
canvas.app.battle.engine.MEve.prototype.death = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve death: paramsCount= " + t.params.length + ",  pers_id=" + t.params[2].val + ", myPersId=" + e.persId);
    var i = t.params[2].val;
    if (i == e.persId || i == e.oppId) {
        if (a.players[i]) {
            canvas.app.battle.log("                 die (apply <b>dieBody</b>)");
            if (i == e.oppId) {
                if (e.oppStatus != canvas.app.battle.Const.STATUS_DEAD) {
                    e.oppStatus = canvas.app.battle.Const.STATUS_DEAD
                } else {
                    canvas.app.battle.log("                 opp already dead");
                    this.paksReadyAndParse();
                    return
                }
            }
            if (i == e.persId) {
                if (i == e.myPersId) {
                    a.setupWatchFightBts(true)
                } else {
                    a.setupWatchFightBts(true, e.myPersId);
                    a.watchFightStart(e.myPersId)
                }
                if (e.persStatus != canvas.app.battle.Const.STATUS_DEAD) {
                    e.persStatus = canvas.app.battle.Const.STATUS_DEAD
                } else {
                    canvas.app.battle.log("                 pers already dead");
                    this.paksReadyAndParse();
                    return
                }
            }
            if (e.waitingDamageCnt == 2) {
                e.waitingDamageCnt = 1
            }
            if (i == e.oppId) {
                a.players[i].addFuncTurn = this.afterDeath1.bind(this)
            }
            if (i == e.persId) {
                a.players[i].addFuncTurn = this.afterDeath2.bind(this)
            }
            var s = a.players[i];
            var n = s.sk.kick_array_all.kick_mid.a_mid_1.die;
            var r = n[Math.floor(n.length * Math.random())];
            canvas.app.battle.log("                 pers_id = " + i + " body down, label=" + r);
            s.gotoAndPlay(r);
            s.magicStandBase.visible = false;
            return
        } else {
            canvas.app.battle.log('                 WARN: pers for "' + String(i) + '" is null', 10027008)
        }
    } else {
        canvas.app.battle.log("                 WARN: ignore event", 10027008)
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.afterDeath1 = function(t) {
    var e = this.baseLnk;
    canvas.app.battle.log("mEve afterDeath1: pers_id=" + String(t.pers_id));
    e.players[t.pers_id].addFuncDie = this.afterDeath2.bind(this);
    e.players[t.pers_id].dieBody()
}
;
canvas.app.battle.engine.MEve.prototype.afterDeath2 = function(t) {
    canvas.app.battle.log("mEve afterDeath2: pers_id=" + String(t.pers_id));
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.fightReturn = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve fightReturn: paramsCount= " + t.params.length);
    if (e.newPersId != e.persId) {
        canvas.app.battle.log("             WARN! conf.new_pers_id!=conf.persId", 16711680)
    }
    e.watchFight = false;
    a.setupWatchFightBts(false);
    a.view.comboView.visible = true;
    a.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT);
    if (e.newPersId != e.myPersId) {
        canvas.EventManager.addEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
        a.persesHide()
    } else {
        this.paksReadyAndParse()
    }
}
;
canvas.app.battle.engine.MEve.prototype.handlerPersesHided = function() {
    canvas.app.battle.log("mEve handlerPersesHided");
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
    conf.tempDead = true;
    conf.newPersId = conf.persId = conf.myPersId;
    conf.oppId = 0;
    conf.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO;
    baseLnk.mainIteration();
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.msg = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve msg: paramsCount= " + t.params.length);
    var i = t.params[2].val;
    var s = t.params[3].val;
    var n = t.params[4].val;
    n = decodeURI(n);
    canvas.app.battle.log("            persId=" + String(i) + " code=" + String(s) + " txt=" + n, 6710886);
    var r = n.split("()");
    var o = r[0];
    var l = r[1];
    if (o == "1") {
        if (r.length == 4) {
            if (canvas.app.battle.Const.WATCH_FIGHT || e.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
                var c = r[2];
                var p = r[3];
                a.view.messagePopup.targetPersId = i;
                a.view.showMessagePopup(1, "", canvas.Translator.getText(14) + ' "' + c + '" ' + canvas.Translator.getText(15) + ' "' + p.replace(new RegExp("__","g"), " ") + '"', undefined, undefined, undefined, undefined, undefined, l);
                var h = l.split("[]")[1]
            } else {
                canvas.app.battle.log("            WARN: can not resurrect alive", 10027008)
            }
        } else {
            canvas.app.battle.log("            WARN: wrong data format (len=" + String(r.length) + ")", 10027008)
        }
    } else if (o == "2") {
        if (r.length == 3) {
            if (a.view.messagePopup.num == l) {
                var d = r[2];
                if (d == "1") {
                    canvas.app.battle.log("            Apply requested ability");
                    if (e.abilityTemp) {
                        a.conn.sendPak(e.abilityTemp);
                        e.abilityTemp = null
                    }
                }
                a.view.messagePopup.deactivate()
            } else {
                canvas.app.battle.log("            TIP: data num not relavant", 10027008)
            }
        } else {
            canvas.app.battle.log("            WARN: wrong data format (len=" + String(r.length) + ")", 10027008)
        }
    } else {
        canvas.app.battle.log("            WARN: wrong data code [" + o + "]", 10027008)
    }
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.cdDec = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve cdDec: paramsCount= " + t.params.length + ", m_turns=" + t.params[2].val);
    var i = t.params[2].val;
    a.sendData("items", "cd_dec@" + String(i));
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.socOnClose = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve socOnClose: paramsCount= " + t.params.length);
    a.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_SOC_CLOSE);
    if (a.players[e.persId]) {
        a.players[e.persId].addFuncHide = null;
        a.players[e.persId].hideBody()
    }
    if (a.players[e.oppId]) {
        a.players[e.oppId].addFuncHide = null;
        a.players[e.oppId].hideBody()
    }
}
;
canvas.app.battle.engine.MEve.prototype.effectSwap = function() {
    var t = this.baseLnk;
    var e = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mEve effectSwap: paramsCount= " + e.params.length);
    t.sendData("items", "swap_slots@" + e.params[2].val + "," + e.params[3].val + "," + e.params[4].val + "," + e.params[5].val);
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.resetCombo = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve resetCombo: paramsCount= " + t.params.length);
    a.view.comboView.resetCombo();
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.deadCnt = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve deadCnt: paramsCount= " + t.params.length + ", team1=" + t.params[2].val + "; team2=" + t.params[3].val);
    a.sendData("mem", "dead_cnt@" + t.params[2].val + "," + t.params[3].val);
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.fightLaunch = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve fightLaunch: paramsCount= " + t.params.length);
    e.fightRunning = true;
    e.roundTime = e.roundTimeBase;
    this.paksReadyAndParse()
}
;
canvas.app.battle.engine.MEve.prototype.effectUse = function() {
    var t = canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model;
    var a = this.baseLnk;
    canvas.app.battle.log("mEve effectUse: paramsCount= " + t.params.length);
    var i = false;
    try {
        var s = t.params[2].val;
        var n = t.params[3].val;
        var H = t.params[4].val;
        var N = t.params[5].val;
        var r;
        var o;
        var l;
        canvas.app.battle.log("            persId     " + String(s));
        canvas.app.battle.log("            targetId   " + String(n));
        canvas.app.battle.log("            animData   " + t.params[4].val);
        canvas.app.battle.log("            usageStatus " + String(N));
        canvas.app.battle.log("            // pers_id=" + String(e.persId) + " opp_id=" + String(e.oppId));
        var c = H.split("/");
        if (c.length > 1) {
            if (c[1] != "null") {
                canvas.app.battle.log("            <b>sound label = " + c[1] + "</b>");
                a.sndPlay(c[1])
            }
        }
        var p;
        if (c.length > 2) {
            if (c[2] != "null") {
                p = c[2]
            }
        }
        var h = s == e.persId;
        var d = s == e.oppId;
        var v = n == e.persId;
        var u = n == e.oppId;
        canvas.app.battle.log("            bool_my_action  " + h, 10066329);
        canvas.app.battle.log("            bool_opp_action " + d, 10066329);
        canvas.app.battle.log("            bool_me_target  " + v, 10066329);
        canvas.app.battle.log("            bool_opp_target " + u, 10066329);
        if (h || v || d || u) {
            if (h || d) {
                r = a.players[s]
            }
            if (u || v) {
                o = a.players[n]
            }
            if (h && a.view.players.getChildIndex(a.view.player1) < a.view.players.getChildIndex(a.view.player2) || d && a.view.players.getChildIndex(a.view.player1) > a.view.players.getChildIndex(a.view.player2)) {
                a.view.players.swapChildren(a.view.player1, a.view.player2)
            }
            canvas.app.battle.log("            curPers   " + r);
            canvas.app.battle.log("            curTarget " + o);
            if (!r == null && !o) {
                canvas.app.battle.log("            <b>WARN: pers & target clips == null</b>", 16711680)
            } else {
                var m;
                var f;
                m = H.split("/")[0].split(";");
                canvas.app.battle.log("            // parts=" + m.join("|"));
                var _;
                var g;
                var F;
                var D;
                var w;
                var V;
                var E = false;
                var b = 0;
                var C = true;
                if (r && m[0]) {
                    canvas.app.battle.log("            0-10-20-30 ", 16711680);
                    canvas.app.battle.log("            usageStatus=" + String(N), 16711680);
                    var y = n == e.persId ? "opp" : "pers";
                    canvas.app.battle.log("            cur_tar=" + y, 10027008);
                    switch (N) {
                    case 0:
                        break;
                    case 10:
                        canvas.app.battle.log("            case 10 showDMG," + "tar:" + y, 10027008);
                        e.dmgEve.push({
                            tar: y,
                            kick: canvas.app.battle.Const.DMG_KICK_IMMUNITY
                        });
                        break;
                    case 20:
                        canvas.app.battle.log("            case 20 showDMG," + "tar:" + y, 10027008);
                        e.dmgEve.push({
                            tar: y,
                            kick: canvas.app.battle.Const.DMG_KICK_NOCHANCE
                        });
                        break;
                    case 30:
                        canvas.app.battle.log("            case 30 showDMG," + "tar:" + y, 10027008);
                        e.dmgEve.push({
                            tar: y,
                            kick: canvas.app.battle.Const.DMG_KICK_FULLRES
                        });
                        break;
                    default:
                        break
                    }
                    f = m[0].split(",");
                    _ = f[0];
                    g = f[1];
                    F = f[2];
                    var U = s == e.persId ? canvas.app.battle.Const.PERS_POS_X.pers : canvas.app.battle.Const.PERS_POS_X.opp;
                    canvas.app.battle.log("            // persAnim      = " + _, 39168);
                    canvas.app.battle.log("            // persSpellType = " + g, 39168);
                    canvas.app.battle.log("            // persSpellIcon = " + F, 39168)
                }
                var W = true;
                if (o && m[1]) {
                    f = m[1].split(",");
                    D = f[0];
                    w = f[1];
                    V = f[2];
                    var G = n == e.persId ? canvas.app.battle.Const.PERS_POS_X.pers : canvas.app.battle.Const.PERS_POS_X.opp;
                    canvas.app.battle.log("            // targetAnim      = " + D, 39168);
                    canvas.app.battle.log("            // targetSpellType = " + w, 39168);
                    canvas.app.battle.log("            // targetSpellIcon = " + V, 39168);
                    if (p) {
                        var j = s == e.persId || s == e.oppId;
                        o.showAdditionalEffects(e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, p));
                        W = false;
                        var K = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, p);
                        var z = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_CH, p);
                        var T;
                        var M;
                        var q;
                        var S;
                        var x;
                        var I = 0;
                        var A = false;
                        var Y;
                        var L;
                        var O;
                        for (var X = 0; X < K.length; X++) {
                            T = K[X];
                            canvas.app.battle.log("            // spell anim num=" + T);
                            if (!j && parseInt(T) >= 1 && parseInt(T) <= 6)
                                continue;
                            q = "_SP" + T;
                            if (parseInt(T) < 1e3) {
                                M = new canvas.px.MovieClip(canvas.Config.spellsPath + q);
                                M.frameEvent = canvas.app.battle.Event.ENTER_FRAME
                            } else {
                                M = new canvas.px.MovieClip(canvas.Config.spellsPath + q);
                                M.frameEvent = canvas.app.battle.Event.ENTER_FRAME
                            }
                            S = 0;
                            x = 0;
                            A = false;
                            if (T == "13" || T == "14" || T == "15" || T == "16" || T == "17" || T == "18" || T == "35") {
                                A = true
                            }
                            if (_ == "4" && e.memGenders[s] && e.memGenders[s].genders == "M" && A) {
                                S = 50
                            }
                            if (T == "7" || T == "8" || T == "9" || T == "10" || T == "11" || T == "12") {
                                x = 45
                            }
                            canvas.app.battle.log("            spell_delta_x = " + S, 16711680);
                            if (M) {
                                C = false;
                                a.sndPlay("_SP" + T);
                                var Q = "";
                                if (v) {
                                    e.persAnimFlag = true;
                                    Q = "pers";
                                    canvas.app.battle.log("            pers_anim_flag = true, because bool_my_action")
                                }
                                if (u) {
                                    e.oppAnimFlag = true;
                                    Q = "opp";
                                    canvas.app.battle.log("            opp_anim_flag = true, because bool_opp_action")
                                }
                                if (T == "901" || T == "902") {
                                    x = 120;
                                    I = 340;
                                    if (v) {
                                        if (a.players[e.persId])
                                            I -= a.players[e.persId].baseHeight * .6;
                                        L = new canvas.px.Point(T == "901" ? 222 + 70 : 222 + 0,T == "901" ? 160 : 0);
                                        O = new canvas.px.Point(222 - 120,I);
                                        a.view.spells.addChild(new canvas.app.battle.view.AddArrow(L,O,T == "901" ? .5 : 1,-1,T == "901" ? 0 : 45))
                                    } else {
                                        if (a.players[e.oppId])
                                            I -= a.players[e.oppId].baseHeight * .6;
                                        L = new canvas.px.Point(T == "901" ? 222 - 70 : 222 + 0,T == "901" ? 160 : 0);
                                        O = new canvas.px.Point(222 + 120,I);
                                        a.view.spells.addChild(new canvas.app.battle.view.AddArrow(L,O,T == "901" ? .5 : 1,1,T == "901" ? 0 : 45))
                                    }
                                    canvas.app.battle.log("            arrow fromPoint = " + L + "; toPoint = " + O)
                                }
                                Y = h ? true : d && A ? false : A ? v : u;
                                a.view.spells.addChild(new canvas.app.battle.view.AddSpell(a,222 + (Y ? S + x : -S - x),I == 0 ? e.memDat[s] && e.memDat[s].gender != 1 ? 203 : 203 - 20 : I,Y,M,false,Q,T,z.length == 1 && z[0] == "1"))
                            } else {
                                canvas.app.battle.log('            ERR: no spell "' + q + '" in spell pack', 16711680)
                            }
                        }
                        var Z = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPW, p);
                        if (Z.length == 1) {
                            if (Z[0] == "1") {
                                E = true;
                                var J = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPD, p);
                                if (J.length == 1) {
                                    b = Math.max(0, parseInt(J[0]))
                                }
                            }
                        }
                    }
                }
                var k;
                var R = {};
                var $ = [];
                var P = _.indexOf("effect_") > -1;
                if (!P) {
                    P = true;
                    var tt = _;
                    switch (_) {
                    case "16":
                        _ = "effect_frog#5";
                        break;
                    case "17":
                        _ = "effect_starlet#5";
                        break;
                    case "18":
                        _ = "effect_saw#5";
                        break;
                    case "19":
                        _ = "effect_orb_old#5";
                        break;
                    case "20":
                        _ = "effect_deadGod#4";
                        break;
                    case "21":
                        _ = "effect_fertilityGod#4";
                        break;
                    case "22":
                        _ = "effect_orb#4";
                        break;
                    case "23":
                        _ = "effect_dragonGod#4";
                        break;
                    case "33":
                        _ = "effect_idolWater#4";
                        break;
                    case "34":
                        _ = "effect_idolAir#5";
                        break;
                    case "35":
                        _ = "effect_bottle#5";
                        break;
                    case "36":
                        _ = "effect_idolZarlog#4";
                        break;
                    case "37":
                        _ = "effect_idolMaurin#4";
                        break;
                    default:
                        P = false
                    }
                    if (P) {
                        canvas.app.battle.log("            Old effect " + tt + " matched to " + _, 13209)
                    }
                }
                if (P) {
                    var et = _.split("#");
                    var at = et[0];
                    var it = et[1];
                    var B = "spell_1";
                    if (at == "effect_orb") {
                        k = "spell_1";
                        if (r.allLabels[k]) {
                            i = true;
                            if (!E) {
                                r.addFuncTurn = a.handlerEffectAfterSpell.bind(a)
                            } else {
                                if (o != null) {
                                    o.inMotion = true;
                                    o.addWoundEffect({
                                        delay: b
                                    })
                                }
                            }
                            r.addFuncTurn = a.handlerEffectAfterSpell.bind(a);
                            r.gotoAndPlay(k);
                            if (h || d) {
                                if (p) {
                                    if (h && a.players[e.persId]) {
                                        a.players[e.persId].magicStandBase.visible = false
                                    }
                                    if (d && a.players[e.oppId]) {
                                        a.players[e.oppId].magicStandBase.visible = false
                                    }
                                    canvas.app.battle.log("            spell base in anim 4", 16711680);
                                    canvas.app.battle.log("            Gender = " + String(e.memGenders[s].genders), 16711680);
                                    var st = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, p);
                                    for (var nt = 0; nt < st.length; nt++) {
                                        if (st[nt] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                            var rt = parseInt(st[nt] % 6) == 0 ? String(6) : String(parseInt(st[nt] % 6));
                                            var ot;
                                            var lt;
                                            var ct = e.memGenders[s].genders == "M" ? 50 : 0;
                                            lt = "spell" + rt + "base";
                                            ot = new canvas.px.MovieClip(canvas.Config.spellsPath + lt);
                                            ot.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                                            if (ot) {
                                                if (C) {
                                                    a.sndPlay("_SP" + rt)
                                                }
                                                a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,h ? 85 + ct : 370 - ct,330,h,ot))
                                            } else {
                                                canvas.app.battle.log('            ERR: no spell "' + lt + '" in spell pack', 16711680)
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            canvas.app.battle.log("            WARN: no `" + k + "` label in skel", 16711680)
                        }
                        r.addBgEffect({
                            delay: 10,
                            type: at
                        })
                    } else {
                        switch (it) {
                        case "4":
                            B = "spell_1";
                            if (E) {
                                o.addWoundEffect({
                                    delay: b
                                });
                                a.view.addEffect(at, u ? 7 : 445 - 7, 5, u ? 1 : -1)
                            } else {
                                a.view.addEffect(at, !u ? 7 : 445 - 7, 5, !u ? 1 : -1);
                                canvas.app.battle.log("            Without wound")
                            }
                            if (r.allLabels[B]) {
                                i = true;
                                r.gotoAndPlay(B)
                            } else {
                                canvas.app.battle.log("            WARN: no `" + B + "` label in character skeleton", 16711680)
                            }
                            break;
                        case "5":
                            B = "spell_2";
                            if (r.allLabels[B]) {
                                i = true;
                                r.gotoAndPlay(B);
                                r.addEffect({
                                    delay: 10,
                                    type: at
                                });
                                o.addWoundEffect({
                                    delay: b
                                })
                            } else {
                                canvas.app.battle.log("            WARN: no `" + B + "` label in character skeleton", 16711680)
                            }
                            break;
                        default:
                            canvas.app.battle.log("            ERROR: invalid character animation number received (" + it + "), only 4 and 5 are valid", 16711680);
                            break
                        }
                    }
                } else {
                    switch (_) {
                    case null:
                    case "0":
                        if (E) {
                            if (o) {
                                o.inMotion = true;
                                o.addWoundEffect({
                                    delay: b
                                })
                            }
                        }
                        if (h || d) {
                            if (p) {
                                if (h && a.players[e.persId]) {
                                    a.players[e.persId].magicStandBase.visible = false
                                }
                                if (d && a.players[e.oppId]) {
                                    a.players[e.oppId].magicStandBase.visible = false
                                }
                                canvas.app.battle.log("            spell base in anim 0", 16711680);
                                var pt = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, p);
                                for (var ht = 0; ht < pt.length; ht++) {
                                    if (pt[ht] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                        var dt = parseInt(pt[ht] % 6) == 0 ? String(6) : String(parseInt(pt[ht] % 6));
                                        var vt;
                                        var ut;
                                        ut = "spell" + dt + "base";
                                        vt = new canvas.px.MovieClip(canvas.Config.spellsPath + ut);
                                        vt.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                                        if (vt) {
                                            if (C) {
                                                a.sndPlay("_SP" + dt)
                                            }
                                            a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,h ? 85 : 370,330,h,vt))
                                        } else {
                                            canvas.app.battle.log('            ERR: no spell "' + ut + '" in spell pack', 16711680)
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "1":
                        if (r.allLabels["drink"]) {
                            i = true;
                            a.sndPlay("drink");
                            r.addFuncTurn = a.handlerEffectAfterDrink.bind(a);
                            r.gotoAndPlay("drink")
                        } else {
                            canvas.app.battle.log("            WARN: no `drink` label in skel", 16711680)
                        }
                        break;
                    case "2":
                        a.sndPlay("charge_energy");
                        r.addHandEffect("Eff_CHARGE");
                        break;
                    case "3":
                        a.sndPlay("charge_vampir");
                        r.addHandEffect("Eff_VAMPIRISM");
                        break;
                    case "4":
                    case "5":
                    case "24":
                    case "25":
                    case "26":
                    case "27":
                    case "28":
                    case "29":
                    case "30":
                        switch (_) {
                        case "4":
                            k = "spell_1";
                            break;
                        case "5":
                            k = "spell_2";
                            break;
                        case "24":
                            k = "a_bow_1";
                            break;
                        case "25":
                            k = "a_bow_2";
                            break;
                        case "26":
                            k = "dodge_1";
                            break;
                        case "27":
                            k = "combo_1";
                            break;
                        case "28":
                            k = "combo_2";
                            break;
                        case "29":
                            k = "combo_3";
                            break;
                        case "30":
                            k = "combo_4";
                            break
                        }
                        if (r.allLabels[k]) {
                            i = true;
                            if (!E) {
                                r.addFuncTurn = a.handlerEffectAfterSpell.bind(a)
                            } else {
                                if (o) {
                                    o.inMotion = true;
                                    o.addWoundEffect({
                                        delay: b
                                    })
                                }
                            }
                            if (o) {
                                o.sndConf = null
                            }
                            r.inMotion = true;
                            r.gotoAndPlay(k);
                            if (h || d) {
                                if (p) {
                                    if (h && a.players[e.persId]) {
                                        a.players[e.persId].magicStandBase.visible = false
                                    }
                                    if (d && a.players[e.oppId]) {
                                        a.players[e.oppId].magicStandBase.visible = false
                                    }
                                    canvas.app.battle.log("            spell base in anim 5", 16711680);
                                    var mt = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, p);
                                    for (var ft = 0; ft < mt.length; ft++) {
                                        if (mt[ft] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                            var _t = parseInt(mt[ft] % 6) == 0 ? String(6) : String(parseInt(mt[ft] % 6));
                                            var gt;
                                            var wt;
                                            wt = "spell" + _t + "base";
                                            gt = new canvas.px.MovieClip(canvas.Config.spellsPath + wt);
                                            gt.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                                            if (gt) {
                                                if (C) {
                                                    a.sndPlay("_SP" + _t)
                                                }
                                                a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,h ? 85 : 370,330,h,gt))
                                            } else {
                                                canvas.app.battle.log('            ERR: no spell "' + wt + '" in spell pack', 16711680)
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            canvas.app.battle.log("            WARN: no `" + k + "` label in skel", 16711680)
                        }
                        break;
                    case "8":
                        a.sndPlay("charge_energy");
                        r.addHandEffect("Eff_CHARGE_2");
                        break;
                    case "9":
                    case "10":
                    case "11":
                        if (_ == "9")
                            k = "a_bot_1";
                        if (_ == "10")
                            k = "a_mid_1";
                        if (_ == "11")
                            k = "a_up_1";
                        if (r.allLabels[k]) {
                            i = true;
                            if (!E) {
                                r.addFuncTurn = a.handlerEffectAfterSpell.bind(a)
                            } else {
                                if (o) {
                                    o.inMotion = true;
                                    o.addWoundEffect({
                                        delay: b
                                    })
                                }
                            }
                            if (o) {
                                o.sndConf = null
                            }
                            R = r.sk.ActionSound[k];
                            if (R.std) {
                                $ = canvas.app.battle.Const.SND_GROUPS["wound"];
                                r.sndConf = {
                                    std: true,
                                    snd_name: $[Math.floor(Math.random() * $.length)]
                                };
                                canvas.app.battle.log("            standart sound : " + r.sndConf.snd_name)
                            } else if (!R.std && R.self) {
                                r.sndConf = {
                                    std: false,
                                    snd_name: R.self
                                };
                                canvas.app.battle.log("            internal sound : " + R.self)
                            } else {
                                canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680)
                            }
                            r.inMotion = true;
                            r.gotoAndPlay(k);
                            if (h || d) {
                                if (p) {
                                    if (h && a.players[e.persId]) {
                                        a.players[e.persId].magicStandBase.visible = false
                                    }
                                    if (d && a.players[e.oppId]) {
                                        a.players[e.oppId].magicStandBase.visible = false
                                    }
                                    canvas.app.battle.log("            spell base in anim " + _, 16711680);
                                    var Et = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, p);
                                    for (var bt = 0; bt < Et.length; bt++) {
                                        if (Et[bt] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                            var Ct = parseInt(Et[bt] % 6) == 0 ? String(6) : String(parseInt(Et[bt] % 6));
                                            var yt;
                                            var Tt;
                                            Tt = "spell" + Ct + "base";
                                            yt = canvas.px.MovieClip(canvas.Config.spellsPath + Tt);
                                            if (yt) {
                                                if (C) {
                                                    a.sndPlay("_SP" + Ct)
                                                }
                                                a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,h ? 85 : 370,330,h,yt))
                                            } else {
                                                canvas.app.battle.log('            ERR: no spell "' + Tt + '" in spell pack', 16711680)
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            canvas.app.battle.log("            WARN: no `" + k + "` label in skel", 16711680)
                        }
                        break;
                    case "12":
                        if (E) {
                            if (o) {
                                o.inMotion = true;
                                o.addWoundEffect({
                                    delay: b
                                })
                            }
                        }
                        break;
                    case "13":
                    case "14":
                    case "15":
                    case "31":
                    case "32":
                        if (_ == "13")
                            k = "baf_1";
                        if (_ == "14")
                            k = "baf_2";
                        if (_ == "15")
                            k = "baf_3";
                        if (_ == "31")
                            k = "dodge";
                        if (_ == "32")
                            k = "block";
                        if (r.allLabels[k]) {
                            i = true;
                            if (!E) {
                                e.animationLock = true;
                                r.addFuncTurn = a.handlerEffectAfterSpell.bind(a)
                            } else {
                                if (o) {
                                    o.inMotion = true;
                                    o.addWoundEffect({
                                        delay: b
                                    })
                                }
                            }
                            r.inMotion = true;
                            r.gotoAndPlay(k)
                        } else {
                            canvas.app.battle.log("            WARN: no `" + k + "` label in skel", 16711680)
                        }
                        break;
                    case "100":
                    case "101":
                        var Mt = r.pet;
                        var St;
                        if (_ == "100")
                            St = 1;
                        else if (_ == "101")
                            St = 2;
                        if (Mt) {
                            i = false;
                            if (!E) {} else {
                                if (o) {
                                    o.inMotion = true;
                                    o.addWoundEffect({
                                        delay: b
                                    })
                                }
                            }
                            Mt.playBaff(St)
                        }
                        break;
                    default:
                        canvas.app.battle.log("            ERR: unknown persAnim = " + _, 16711680);
                        break
                    }
                }
                if (g) {
                    l = canvas.app.battle.Const.SPELLS_AR.OUT[g];
                    canvas.app.battle.log("            SpellId OUT =" + l, 16711680);
                    if (l) {
                        a.view.addSpellAnim(U, l)
                    } else {
                        canvas.app.battle.log("            WARN: SpellId is null for persSpellType " + g, 16711680)
                    }
                    l = canvas.app.battle.Const.SPELLS_AR.ICO[F];
                    if (l != "0") {
                        if (l) {
                            a.view.addSpellAnim(U, l)
                        } else {
                            canvas.app.battle.log("            WARN: SpellId is null for persSpellIcon " + F, 16711680)
                        }
                    }
                }
                if (n == e.oppId || n == e.persId) {
                    switch (D) {
                    case "0":
                    case null:
                        break;
                    case "7":
                        if (!E) {
                            o.addWoundEffect({
                                delay: 10
                            })
                        }
                        break;
                    default:
                        canvas.app.battle.log("            ERR: unknown targetAnim = " + D, 16711680)
                    }
                    if (w) {
                        l = canvas.app.battle.Const.SPELLS_AR.IN[w];
                        canvas.app.battle.log("            SpellId IN =" + l, 16711680);
                        if (l) {
                            a.view.addSpellAnim(G, l)
                        } else {
                            canvas.app.battle.log("            WARN: SpellId is null for targetSpellType " + w, 16711680)
                        }
                        l = canvas.app.battle.Const.SPELLS_AR.ICO[V];
                        if (l != "0") {
                            if (l) {
                                a.view.addSpellAnim(G, l)
                            } else {
                                canvas.app.battle.log("            WARN: SpellId is null for targetSpellIcon " + V, 16711680)
                            }
                        }
                    }
                }
            }
        }
    } catch (t) {
        canvas.app.battle.log("MEve effectuse Error: " + t, 16711680)
    }
    if (!i) {
        this.paksReadyAndParse()
    }
}
;
canvas.app.battle.engine.MEve.prototype.paksReadyAndParse = function() {
    canvas.app.battle.model.paksReady = true;
    canvas.app.battle.model.parser.paksParse()
}
;
canvas.app.battle.view.SoundView = function() {
    canvas.px.Container.call(this);
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_sound_bg"));
    this.addChild(this.back);
    this.back.interactive = true;
    this.back.buttonMode = true;
    this.back.hitArea = new canvas.px.Rectangle(0,0,20,20);
    this.back.mouseup = this.handlerClick.bind(this);
    this.soundOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_sound_off"));
    this.soundOff.position.set(2, 1);
    this.addChild(this.soundOff);
    this.progress = new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "battle_sound_fill"),[0, 0, 0, 0]);
    this.progress.position.set(22, 6);
    this.progress.setSize(48, 7);
    this.addChild(this.progress);
    this.progress.selectable = true;
    canvas.EventManager.addEventListener(canvas.ui.ProgressEvent.EVENT_PROGRESS, this.progress, this.handlerProgress, this)
}
;
canvas.app.battle.view.SoundView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.SoundView.prototype.init = function(t, e) {
    this.soundOff.visible = t;
    this.progress.progress = e
}
;
canvas.app.battle.view.SoundView.prototype.handlerClick = function(t) {
    this.soundOff.visible = !this.soundOff.visible;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SOUND_MUTE_CHANGE, null, this.soundOff.visible)
}
;
canvas.app.battle.view.SoundView.prototype.handlerProgress = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SOUND_VOLUME_CHANGE, null, this.progress.progress)
}
;
canvas.app.battle.view.CenterView = function() {
    this._mode;
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, t)
        }
    });
    canvas.px.Container.call(this);
    this.controls = new canvas.px.Container;
    this.addChild(this.controls);
    this.cDot = new canvas.app.battle.view.CenterDotView(this);
    this.addChild(this.cDot);
    this.cDot.setIcon(canvas.app.battle.Const.MODE_ATTACK);
    this.cAttack = new canvas.app.battle.view.CenterAttackView(this);
    this.cAttack.activate();
    this.hotkeyShowersCont = new canvas.px.Container;
    this.addChild(this.hotkeyShowersCont);
    this.hotkeyShowersCont.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.hotkeyShowersCont.visible = false;
    this.cSpells = new canvas.app.battle.view.CenterSpellsView(this,this.hotkeyShowersCont);
    this.mode = canvas.app.battle.Const.MODE_ATTACK;
    this.skipButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_btn_skip_turn"));
    this.addChild(this.skipButton);
    this.skipButton.visible = false;
    this.skipButton.position.set(-Math.round(this.skipButton.width * .5), -140);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.skipButton,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.Translator.getText(65)))
    });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.skipButton, this.handlerSkipButtonClick)
}
;
canvas.app.battle.view.CenterView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterView.prototype.handlerSkipButtonClick = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SKIP_TURN)
}
;
canvas.app.battle.view.CenterView.prototype.activeBlock = function(t) {
    canvas.app.battle.log("cCenter:active_block " + t);
    this.cAttack.activeBlock(t)
}
;
canvas.app.battle.view.CenterView.prototype.applyMask = function(t) {
    this.cAttack.applyMask(t)
}
;
canvas.app.battle.view.CenterView.prototype.changeControlMode = function(t) {
    if (typeof t == "undefined")
        t = false;
    switch (this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.mode = canvas.app.battle.Const.MODE_SPELLS;
        this.activeBlock(false);
        if (!t) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 1, canvas.app.battle.Const.TO_FS_PF_MAGIC])
        }
        this.cAttack.deactivate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.mode = canvas.app.battle.Const.MODE_ATTACK;
        if (!t) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_MAGIC]);
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED])
        }
        this.cSpells.deactivate();
        this.hotkeyShowersCont.visible = false;
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
        break
    }
    this.cDot.setIcon(this.mode, t)
}
;
canvas.app.battle.view.CenterView.prototype.controlDeactivated = function() {
    switch (this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.cAttack.activate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.cSpells.activate();
        this.hotkeyShowersCont.visible = true;
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
        break
    }
}
;
canvas.app.battle.view.CenterView.prototype.addControl = function(t) {
    if (t.parent != this.controls) {
        this.controls.addChild(t)
    } else {
        canvas.app.battle.log('WARN: "' + t + '" already contains in controls', 10027008)
    }
}
;
canvas.app.battle.view.CenterView.prototype.removeControl = function(t) {
    if (t.parent == this.controls) {
        this.controls.removeChild(t)
    } else {
        canvas.app.battle.log('WARN: "' + t + '" not contains in controls', 10027008)
    }
}
;
canvas.app.battle.view.CenterView.prototype.buildSpells = function(t) {
    canvas.app.battle.log("cCenter:build_spells ** ");
    this.cDot.check();
    this.cSpells.buildSpells()
}
;
canvas.app.battle.view.CenterView.prototype.turnOnKeyCallbacks = function() {
    this.cDot.turnOnKeyCallbacks()
}
;
canvas.app.battle.view.CenterView.prototype.turnOffKeyCallbacks = function() {
    this.cDot.turnOffKeyCallbacks()
}
;
canvas.app.battle.view.CenterView.prototype.useEffect = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, t]);
    var e = canvas.app.battle.model;
    if (e.memDat[e.oppId] != null) {
        var a = e.memDat[e.oppId];
        var i = a.persFlags;
        this.coolDownStart(i)
    }
}
;
canvas.app.battle.view.CenterView.prototype.useSlotConfirmed = function(t) {
    this.cSpells.useSlotConfirmed(t)
}
;
canvas.app.battle.view.CenterView.prototype.setDefCooldown = function() {
    this.cSpells.setDefCooldown()
}
;
canvas.app.battle.view.CenterView.prototype.spellsUnlockOnError = function(t) {
    this.cSpells.spellsUnlockOnError(t);
    this.cAttack.auraControl.spellsUnlockOnError(t)
}
;
canvas.app.battle.view.CenterView.prototype.coolDownStart = function(t) {
    if (canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED)) {
        this.cAttack.coolDownStart()
    }
}
;
canvas.app.battle.view.CenterView.prototype.checkSpells = function(t) {
    this.cSpells.checkSpells(t)
}
;
canvas.app.battle.view.CenterView.prototype.addSpellCoolDown = function(t, e) {
    if (typeof e == "undefined")
        e = false;
    this.cSpells.addSpellCoolDown(t, e)
}
;
canvas.app.battle.view.CenterView.prototype.turnBowPanel = function(t) {}
;
canvas.app.battle.view.CenterView.prototype.setVisible = function(t) {
    this.visible = t;
    if (!this.visible) {
        this.cDot.externalMouseOut()
    } else {
        this.updateSkipButton()
    }
}
;
canvas.app.battle.view.CenterView.prototype.updateSkipButton = function() {
    var t = canvas.app.battle.model;
    if (this.cAttack.isCooldown) {
        this.skipButton.visible = false
    } else {
        if (t.isPvp && t.memDat[t.oppId] && t.fightResult == 0) {
            var e = t.memDat[t.oppId];
            var a = e.persFlags;
            this.skipButton.visible = !t.testFlag(a, canvas.app.battle.Const.FS_PF_NO_OPP_AUTO)
        } else {
            this.skipButton.visible = false
        }
    }
}
;
canvas.app.battle.view.CenterView.prototype.attackFunc = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ATTACK, null, t)
}
;
canvas.app.battle.view.CenterView.prototype.blockSwitch = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.BLOCK_SWITCH)
}
;
canvas.app.battle.view.CenterDotView = function(t) {
    canvas.px.Container.call(this);
    this.rt = t;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.position.set(-Math.round(this.bg.width / 2), -Math.round(this.bg.height / 2));
    this.bgTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_top"));
    this.bgTop.position.set(-Math.round(this.bgTop.width / 2), -Math.round(this.bgTop.height / 2));
    this.icon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bt = new canvas.px.Graphics;
    this.bt.beginFill(0, 0);
    this.bt.drawCircle(0, 0, 34);
    this.bt.endFill();
    this.bt.interactive = true;
    this.bt.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.bt,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey("", canvas.Translator.getText(64))))
    });
    this.dotClickTime = 0;
    this.light = new canvas.px.Graphics;
    this.light.beginFill(16777215, .3);
    this.light.drawCircle(0, 0, 25);
    this.light.endFill();
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.addChild(this.bg);
    this.addChild(this.icon);
    this.addChild(this.bt);
    this.rad = Math.round(this.bg.width / 2 - 6);
    this.msk = new canvas.px.Graphics;
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, this.rad - 1);
    this.msk.endFill();
    this.har = [[this.rad, -this.rad], [this.rad, this.rad], [-this.rad, this.rad], [-this.rad, -this.rad], [0, -this.rad]];
    this.shp = new canvas.px.Graphics;
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk);
    this.addChild(this.bgTop)
}
;
canvas.app.battle.view.CenterDotView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterDotView.prototype.check = function() {
    canvas.app.battle.log("CenterDot: check, hasSpells=" + canvas.app.battle.model.hasSpells);
    if (canvas.app.battle.model.hasSpells) {
        if (!this.btActivated) {
            this.btActivated = true;
            this.bt.interactive = true;
            this.btIsOn = true;
            this.bt.mouseover = this.handlerBtnOver.bind(this);
            this.bt.mouseout = this.handlerBtnOut.bind(this);
            this.bt.mouseup = this.handlerBtnClick.bind(this)
        }
    } else {
        if (this.btActivated) {
            this.btActivated = false;
            this.bt.interactive = false;
            this.bt.mouseover = null;
            this.bt.mouseout = null;
            this.bt.mouseup = null
        }
        if (canvas.app.battle.view.CenterView.filter1) {
            this.icon.filters = [canvas.app.battle.view.CenterView.filter1]
        } else {
            var t = new canvas.px.ColorMatrixFilter;
            t.matrix = [.3086000084877014, .6093999743461609, .0820000022649765, 0, 0, .3086000084877014, .6093999743461609, .0820000022649765, 0, 0, .3086000084877014, .6093999743461609, .0820000022649765, 0, 0, 0, 0, 0, 1, 0];
            canvas.app.battle.view.CenterView.filter1 = t;
            this.icon.filters = [t]
        }
    }
}
;
canvas.app.battle.view.CenterDotView.prototype.checkDot = function() {
    var t = Date.now();
    return t >= this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD && canvas.app.battle.model.oppId != 0
}
;
canvas.app.battle.view.CenterDotView.prototype.switchDot = function(t) {
    canvas.app.battle.log("CenterDot: switch, fl=" + t);
    if (canvas.app.battle.model.hasSpells) {
        if (t) {
            if (!this.btIsOn) {
                this.btIsOn = true;
                this.bt.interactive = true;
                this.bt.mouseover = this.handlerBtnOver.bind(this);
                this.bt.mouseout = this.handlerBtnOut.bind(this);
                this.bt.mouseup = this.handlerBtnClick.bind(this)
            }
        } else {
            if (this.btIsOn && !this.checkDot()) {
                this.btIsOn = false;
                this.bt.interactive = false;
                this.bt.mouseover = null;
                this.bt.mouseout = null;
                this.bt.mouseup = null
            }
        }
    }
}
;
canvas.app.battle.view.CenterDotView.prototype.handlerBtnOver = function() {
    if (this.light.parent != this) {
        this.addChild(this.light)
    }
}
;
canvas.app.battle.view.CenterDotView.prototype.handlerBtnOut = function() {
    if (this.light.parent == this) {
        this.removeChild(this.light)
    }
}
;
canvas.app.battle.view.CenterDotView.prototype.handlerBtnClick = function() {
    this.handlerBtnOut();
    var t = Date.now();
    if (t - this.dotClickTime < canvas.app.battle.Const.CENTER_DOT_TIME_CD) {
        return
    }
    this.dotClickTime = t;
    this.rt.changeControlMode();
    this.switchDot(false);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
;
canvas.app.battle.view.CenterDotView.prototype.externalMouseOut = function() {
    this.handlerBtnOut()
}
;
canvas.app.battle.view.CenterDotView.prototype.handlerFrame = function() {
    var t = Date.now();
    if (t < this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD) {
        var e = (t - this.dotClickTime) / canvas.app.battle.Const.CENTER_DOT_TIME_CD * 100;
        this.shp.clear();
        this.shp.beginFill(0, .4);
        this.shp.moveTo(0, 0);
        var a = e * (360 / 100 / 57.2958) - 1.57;
        var i = this.rad * Math.cos(a);
        var s = this.rad * Math.sin(a);
        this.shp.lineTo(i, s);
        var n = Math.round(e % 100 / 25);
        while (n < this.har.length) {
            this.shp.lineTo(this.har[n][0], this.har[n][1]);
            n++
        }
        this.shp.endFill()
    } else {
        this.switchDot(true);
        this.shp.clear();
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
    }
}
;
canvas.app.battle.view.CenterDotView.prototype.setIcon = function(t, e) {
    switch (t) {
    case canvas.app.battle.Const.MODE_ATTACK:
    case canvas.app.battle.Const.MODE_SPELLS:
        this.icon.texture = canvas.ResourceLoader.getImage("ui", "battle_center_icon_" + (t == canvas.app.battle.Const.MODE_ATTACK ? "1" : !e ? "2" : "3"));
        this.icon.x = -Math.round(this.icon.width / 2);
        this.icon.y = -Math.round(this.icon.height / 2);
        break;
    default:
        canvas.app.battle.log('WARN: unknown mode "' + t + '"', 10027008);
        break
    }
}
;
canvas.app.battle.view.CenterDotView.prototype.turnOnKeyCallbacks = function() {
    this.initKeyCallbacks(true)
}
;
canvas.app.battle.view.CenterDotView.prototype.turnOffKeyCallbacks = function() {
    this.initKeyCallbacks(false)
}
;
canvas.app.battle.view.CenterDotView.prototype.initKeyCallbacks = function(t) {
    if (t && canvas.app.battle.model.hasSpells) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
    } else {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
    }
}
;
canvas.app.battle.view.CenterDotView.prototype.handlerKey = function(t) {
    if (t.params.globalKeyCode == canvas.Const.TAB && canvas.app.battle.model.centerVisible && canvas.app.battle.model.hasSpells) {
        this.handlerBtnClick()
    }
}
;
canvas.app.battle.view.CenterClsView = function() {
    canvas.px.Container.call(this);
    this.showVals = [.47, .67, 1];
    this.hideVals = [.67, .47, .4]
}
;
canvas.app.battle.view.CenterClsView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterClsView.prototype.activate = function() {
    this.rt.addControl(this);
    this.scale.set(.4, .4);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerShow, this)
}
;
canvas.app.battle.view.CenterClsView.prototype.deactivate = function() {
    this.scale.set(1, 1);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerHide, this)
}
;
canvas.app.battle.view.CenterClsView.prototype.handlerShow = function() {
    this.scale.set(this.showVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerShow, this)
    }
}
;
canvas.app.battle.view.CenterClsView.prototype.handlerHide = function() {
    this.scale.set(this.hideVals[this.frameIndex], this.hideVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerHide, this);
        this.rt.removeControl(this);
        this.rt.controlDeactivated()
    }
}
;
canvas.app.battle.view.CenterAttackView = function(t) {
    canvas.app.battle.view.CenterClsView.call(this);
    this.isCooldown = false;
    this.rt = t;
    this.rad1 = 42;
    this.rad2 = 70;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center"));
    this.bgGrey = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_grey"));
    this.bg.x = this.bgGrey.x = -Math.round(this.bg.width / 2);
    this.bg.y = this.bgGrey.y = -Math.round(this.bg.height / 2);
    this.bgMask = new canvas.px.Graphics;
    this.setBgMask(this.rad2);
    this.bg.mask = this.bgMask;
    this.bladeUp = new canvas.app.battle.view.CenterBladeView(this.rt,9,-41,-55);
    this.bladeMid = new canvas.app.battle.view.CenterBladeView(this.rt,39,-11,0);
    this.bladeBot = new canvas.app.battle.view.CenterBladeView(this.rt,31,28,55);
    this.sectorUp = new canvas.app.battle.view.CenterSectorView(0,0,-60,canvas.app.battle.Const.TOP_ATTACK_ID,this.bladeUp,this.rt.attackFunc,canvas.Translator.getText(33),canvas.Translator.getText(60));
    this.sectorMid = new canvas.app.battle.view.CenterSectorView(0,0,0,canvas.app.battle.Const.MIDDLE_ATTACK_ID,this.bladeMid,this.rt.attackFunc,canvas.Translator.getText(34),canvas.Translator.getText(61));
    this.sectorBot = new canvas.app.battle.view.CenterSectorView(0,0,60,canvas.app.battle.Const.BOTTOM_ATTACK_ID,this.bladeBot,this.rt.attackFunc,canvas.Translator.getText(35),canvas.Translator.getText(62));
    this.blockOn = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block1"));
    this.blockOn.position.set(-62, -22);
    this.blockOn.visible = false;
    this.blockOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block2"));
    this.blockOff.position.set(-62, -22);
    this.blockBtn = new canvas.px.Graphics;
    this.blockBtn.position.set(-62, -22);
    this.blockBtn.beginFill(0, 0);
    this.blockBtn.drawRect(0, 0, 18, 44);
    this.blockBtn.endFill();
    this.blockBtn.interactive = true;
    this.blockBtn.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.blockBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(canvas.Translator.getText(36), canvas.Translator.getText(63))))
    });
    this.blockBtn.click = this.handlerBlockClick.bind(this);
    this.addChild(this.bgGrey);
    this.addChild(this.bg);
    this.addChild(this.bgMask);
    this.addChild(this.bladeUp);
    this.addChild(this.bladeMid);
    this.addChild(this.bladeBot);
    this.addChild(this.sectorUp);
    this.addChild(this.sectorMid);
    this.addChild(this.sectorBot);
    this.addChild(this.blockOn);
    this.addChild(this.blockOff);
    this.addChild(this.blockBtn);
    this.auraControl = new canvas.app.battle.view.AuraControlView(this.rt);
    this.addChild(this.auraControl);
    this.auraControl.visible = false
}
;
canvas.app.battle.view.CenterAttackView.prototype = Object.create(canvas.app.battle.view.CenterClsView.prototype);
canvas.app.battle.view.CenterAttackView.prototype.handlerBlockClick = function() {
    this.rt.blockSwitch()
}
;
canvas.app.battle.view.CenterAttackView.prototype.activeBlock = function(t) {
    this.blockOn.visible = t;
    this.blockOff.visible = !t
}
;
canvas.app.battle.view.CenterAttackView.prototype.applyMask = function(t) {
    var e = (t & 1) == 1;
    var a = (t & 2) >> 1 == 1;
    var i = (t & 4) >> 2 == 1;
    this.sectorUp.visible = e;
    this.bladeUp.visible = e;
    this.sectorMid.visible = a;
    this.bladeMid.visible = a;
    this.sectorBot.visible = i;
    this.bladeBot.visible = i
}
;
canvas.app.battle.view.CenterAttackView.prototype.setBgMask = function(t) {
    this.bgMask.clear();
    this.bgMask.beginFill(255, 1);
    this.bgMask.drawCircle(0, 0, t);
    this.bgMask.endFill()
}
;
canvas.app.battle.view.CenterAttackView.prototype.coolDownStart = function() {
    this.sTime = 2050 - (Date.now() - canvas.app.battle.model.attackTime);
    this.vTime = Date.now();
    this.setBgMask(this.rad1);
    if (this.sTime > 0) {
        this.mInterval = setInterval(this.refreshBgMask.bind(this), 100);
        this.setBgMask(this.rad2);
        this.sectorUp.visible = this.bladeUp.visible = false;
        this.sectorMid.visible = this.bladeMid.visible = false;
        this.sectorBot.visible = this.bladeBot.visible = false;
        this.rt.cDot.switchDot(false);
        this.setCooldown(true);
        this.rt.turnBowPanel(false)
    } else {
        this.setCooldown(false)
    }
}
;
canvas.app.battle.view.CenterAttackView.prototype.setCooldown = function(t) {
    this.isCooldown = t;
    this.rt.updateSkipButton()
}
;
canvas.app.battle.view.CenterAttackView.prototype.refreshBgMask = function() {
    if (Date.now() - canvas.app.battle.model.attackTime > 2050) {
        this.setBgMask(this.rad2);
        this.sectorUp.visible = this.bladeUp.visible = true;
        this.sectorMid.visible = this.bladeMid.visible = true;
        this.sectorBot.visible = this.bladeBot.visible = true;
        this.applyMask(canvas.app.battle.model.oppMask);
        if (this.rt.mode == canvas.app.battle.Const.MODE_ATTACK) {
            this.rt.cDot.switchDot(true)
        }
        if (this.mInterval) {
            clearInterval(this.mInterval);
            this.setCooldown(false)
        }
        this.rt.turnBowPanel(true)
    } else {
        var t = this.rad1 + (this.rad2 - this.rad1) * (Date.now() - this.vTime) / this.sTime;
        this.setBgMask(t)
    }
}
;
canvas.app.battle.view.CenterBladeView = function(t, e, a, i) {
    canvas.px.Container.call(this);
    this.mv = [0, 2.7, 4.8, 6.3, 7.2, 7.5, 7.2, 6.3, 4.8, 2.7];
    this.mvLen = 10;
    this.rt = t;
    this.position.set(e, a);
    this.rotation = canvas.Functions.degToRad(i);
    this.bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_blade"));
    this.addChild(this.bmp)
}
;
canvas.app.battle.view.CenterBladeView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterBladeView.prototype.handlerFrame = function() {
    this.mvIndex++;
    if (this.mvIndex == this.mvLen) {
        this.mvIndex = 0
    }
    this.bmp.x = this.mv[this.mvIndex]
}
;
canvas.app.battle.view.CenterBladeView.prototype.over = function() {
    this.mvIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
;
canvas.app.battle.view.CenterBladeView.prototype.out = function() {
    this.bmp.x = 0;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
;
canvas.app.battle.view.CenterSectorView = function(t, e, a, i, s, n, r, o) {
    canvas.px.Graphics.call(this);
    this.position.set(t, e);
    this.rotation = canvas.Functions.degToRad(a);
    this.r1 = 28;
    this.r2 = 76;
    this.ang = Math.PI / 3;
    this.shape = new canvas.px.Graphics;
    this.shape.interactive = true;
    this.addChild(this.shape);
    this.drawSector();
    this.bladeId = i;
    this.bladeLnk = s;
    this.attackFunc = n;
    this.interactive = true;
    this.buttonMode = true;
    this.mouseover = this.handlerOver.bind(this);
    this.mouseup = this.handlerClick.bind(this);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.shape,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(r, o)))
    })
}
;
canvas.app.battle.view.CenterSectorView.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.battle.view.CenterSectorView.prototype.drawSector = function() {
    this.shape.moveTo(this.r1 * Math.sin(this.ang), this.r1 * Math.cos(this.ang));
    this.shape.beginFill(0, 0);
    this.shape.lineTo(this.r2 * Math.sin(this.ang), this.r2 * Math.cos(this.ang));
    this.shape.lineTo(this.r2 * Math.sin(this.ang * 3 / 2), this.r2 * Math.cos(this.ang * 3 / 2));
    this.shape.lineTo(this.r2 * Math.sin(this.ang * 2), this.r2 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin(this.ang * 2), this.r1 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin(this.ang * 3 / 2), this.r1 * Math.cos(this.ang * 3 / 2));
    this.endFill()
}
;
canvas.app.battle.view.CenterSectorView.prototype.handlerOver = function() {
    this.bladeLnk.over();
    this.mouseout = this.handlerOut.bind(this)
}
;
canvas.app.battle.view.CenterSectorView.prototype.handlerOut = function() {
    this.bladeLnk.out();
    this.mouseout = null
}
;
canvas.app.battle.view.CenterSectorView.prototype.handlerClick = function() {
    if (this.attackFunc) {
        this.attackFunc(this.bladeId)
    }
}
;
canvas.app.battle.view.CenterSpellsView = function(t, e) {
    canvas.app.battle.view.CenterClsView.call(this);
    this.rt = t;
    this.hotkeyShowersCont = e;
    this.hotkeysPoints = [new canvas.px.Point(69,38), new canvas.px.Point(91,45), new canvas.px.Point(104,62), new canvas.px.Point(104,84), new canvas.px.Point(90,101), new canvas.px.Point(69,109), new canvas.px.Point(48,102), new canvas.px.Point(35,85), new canvas.px.Point(34,62), new canvas.px.Point(47,45)];
    this.slotsPos = [[-18, -78], [17, -67], [38, -36], [39, 0], [17, 29], [-18, 41], [-53, 29], [-75, 0], [-75, -36], [-53, -66]];
    this.spellsCont = new canvas.px.Container;
    this.tgBmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spells"));
    this.tgBmp.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.addChild(this.spellsCont);
    this.addChild(this.tgBmp);
    this.slots = {}
}
;
canvas.app.battle.view.CenterSpellsView.prototype = Object.create(canvas.app.battle.view.CenterClsView.prototype);
canvas.app.battle.view.CenterSpellsView.prototype.buildSpells = function() {
    canvas.Functions.destroyChildren(this.spellsCont);
    this.removeAllSpellHotkeyShowers();
    canvas.Functions.destroyChildren(this.tgBmp);
    var t;
    var e;
    var a;
    for (t in canvas.app.battle.model.spells) {
        e = canvas.app.battle.model.spells[t];
        a = this.slotsPos[parseInt(t) - 1];
        if (a) {
            if (this.slots[t]) {
                this.slots[t].remove();
                delete this.slots[t]
            }
            this.slots[t] = new canvas.app.battle.view.CenterSpellItemRenderer(this,t,a,e)
        } else {
            canvas.app.battle.log("ERR: positions for slotId=" + t + " is null", 16711680)
        }
    }
    for (var i = 0; i < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; i++) {
        if (!this.slots[i + 1]) {
            a = this.slotsPos[i];
            var s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spell_empty"));
            this.tgBmp.addChild(s);
            s.position.set(a[0] + Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2) - 1, a[1] + Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2) - 1)
        }
    }
    this.createSpellHotkeyShowers()
}
;
canvas.app.battle.view.CenterSpellsView.prototype.useSpellItem = function(t) {
    var e = canvas.app.battle.model.spells[t];
    if (!e) {
        canvas.app.battle.log("ERR: spell for this slot is null", 16711680);
        return
    }
    if (this.locked) {
        canvas.app.battle.log("TIP: spells blocked, witing answer for use spell", 153);
        return
    }
    this.locked = true;
    this.rt.useEffect(canvas.app.battle.model.spells[t]["effId"])
}
;
canvas.app.battle.view.CenterSpellsView.prototype.useSlotConfirmed = function(t) {
    var e = canvas.app.battle.model.spells[t];
    var a = Date.now();
    var i = canvas.app.battle.model.spells[t]["cdTime"] * 1e3 + a;
    for (var s in this.slots) {
        if (canvas.app.battle.model.spells[s]["cdGripId"] == e["cdGripId"]) {
            this.slots[s].cooldownStart(a, i)
        } else {
            this.slots[s].cooldownStart(a, a + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN)
        }
    }
    this.unlock()
}
;
canvas.app.battle.view.CenterSpellsView.prototype.setDefCooldown = function() {
    var t = Date.now();
    var e = t + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN;
    for (var a in this.slots) {
        this.slots[a].cooldownStart(t, e)
    }
}
;
canvas.app.battle.view.CenterSpellsView.prototype.spellsUnlockOnError = function(t) {
    canvas.app.battle.log("CenterSpellsView: spellsUnlockOnError " + t);
    for (var e in canvas.app.battle.model.spells) {
        if (canvas.app.battle.model.spells[e]["effId"] == t) {
            canvas.app.battle.log("spells unlocked on error");
            this.unlock();
            break
        }
    }
}
;
canvas.app.battle.view.CenterSpellsView.prototype.restoreCooldowns = function() {
    for (var t in this.slots)
        this.slots[t].restoreCooldown()
}
;
canvas.app.battle.view.CenterSpellsView.prototype.switchDot = function(t) {
    this.rt.cDot.switchDot(t)
}
;
canvas.app.battle.view.CenterSpellsView.prototype.checkSpells = function(t) {
    for (var e in this.slots) {
        this.slots[e].checkSpells(t)
    }
}
;
canvas.app.battle.view.CenterSpellsView.prototype.addSpellCoolDown = function(t, e) {
    if (typeof e == "undefined")
        e = false;
    for (var a in this.slots) {
        this.slots[a].addSpellCoolDown(t, true, e)
    }
}
;
canvas.app.battle.view.CenterSpellsView.prototype.unlock = function() {
    this.locked = false
}
;
canvas.app.battle.view.CenterSpellsView.prototype.createSpellHotkeyShowers = function() {
    var t;
    var e;
    var a;
    var i;
    for (var s = 0; s < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; s++) {
        a = "";
        i = this.slots[s + 1];
        if (i) {
            a = i.getHotkeyText()
        }
        e = this.hotkeysPoints[s];
        t = new canvas.app.battle.view.CenterSpellHotkeyRenderer(a);
        this.hotkeyShowersCont.addChild(t);
        t.x = e.x;
        t.y = e.y
    }
}
;
canvas.app.battle.view.CenterSpellsView.prototype.removeSpellHotkeyShower = function(t) {
    var e = this.hotkeyShowersCont.children.length;
    for (var a = 0; a < e; a++) {
        if (this.hotkeyShowersCont.getChildAt(a) == t) {
            this.hotkeyShowersCont.removeChildAt(a);
            break
        }
    }
}
;
canvas.app.battle.view.CenterSpellsView.prototype.removeAllSpellHotkeyShowers = function() {
    canvas.Functions.destroyChildren(this.hotkeyShowersCont)
}
;
canvas.app.battle.view.CenterSpellHotkeyRenderer = function(t) {
    canvas.px.Container.call(this);
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.width = 16;
    this.bg.height = 16;
    this.addChild(this.bg);
    this.textTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16509576,this.bg.width,this.bg.height,"center");
    this.addChild(this.textTF);
    this.textTF.position.set(0, 2);
    this.textTF.text = t
}
;
canvas.app.battle.view.CenterSpellHotkeyRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterSpellItemRenderer = function(t, e, a, i) {
    canvas.px.Container.call(this);
    this.spellsHotkeys = ["Q", "W", "E", "R", "T", "A", "S", "D", "F", "G"];
    this.spellsHotkeyCodes = [canvas.Const.KEYS.Q, canvas.Const.KEYS.W, canvas.Const.KEYS.E, canvas.Const.KEYS.R, canvas.Const.KEYS.T, canvas.Const.KEYS.A, canvas.Const.KEYS.S, canvas.Const.KEYS.D, canvas.Const.KEYS.F, canvas.Const.KEYS.G];
    this.rt = t;
    this.slotId = e;
    this.obj = i;
    this.position.set(a[0] - 1, a[1] - 1);
    var s = 19;
    this.bmpMsk = new canvas.px.Graphics;
    this.bmpMsk.beginFill(0, 0);
    this.bmpMsk.drawCircle(s, s, s);
    this.bmpMsk.endFill();
    this.bmp = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bmp.mask = this.bmpMsk;
    this.bmp.scale.set(38 / 60, 38 / 60);
    this.light = new canvas.px.Graphics;
    this.light.beginFill(16777215, .3);
    this.light.drawCircle(s, s, s);
    this.light.endFill();
    this.light.visible = false;
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.btn = new canvas.px.Graphics;
    this.btn.beginFill(0, 0);
    this.btn.drawCircle(s, s, s);
    this.btn.endFill();
    this.btn.buttonMode = true;
    this.btn.interactive = true;
    this.btn.mouseover = this.handlerOver.bind(this);
    this.btn.click = this.handlerClick.bind(this);
    this.cooldown = new canvas.app.battle.view.CenterSpellItemCdRenderer(this);
    this.addChild(this.bmp);
    this.addChild(this.bmpMsk);
    this.addChild(this.light);
    this.addChild(this.btn);
    this.rt.spellsCont.addChild(this);
    this.addChild(this.cooldown);
    if (i["cdTime"] > 0) {
        if (i["cdLeft"] > 0) {
            var n = Date.now();
            this.cooldown.activate(n - (i["cdTime"] - i["cdLeft"]), 1e3 * i["cdLeft"] + n)
        }
    }
    this.initKeyCallbacks();
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
    canvas.ResourceLoader.add([canvas.Config.artifactsPath + this.obj.picture]);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(this.obj["title"] + "\n" + canvas.Translator.getText(49) + " " + this.obj["mp"], this.getHotkeyText())))
    });
    this.interactive = true
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
    this.bmp.texture = canvas.ResourceLoader.getTexture(canvas.Config.artifactsPath + this.obj.picture)
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerClick = function() {
    if (this.cooldown.active()) {
        return
    }
    this.rt.useSpellItem(this.slotId);
    this.cooldown.showTxt()
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerOver = function() {
    this.btn.mouseout = this.handlerOut.bind(this);
    this.light.visible = true;
    if (this.cooldown.active()) {
        this.cooldown.showTxt()
    }
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerOut = function() {
    this.light.visible = false;
    this.btn.mouseout = null;
    if (this.cooldown.active()) {
        this.cooldown.hideTxt()
    }
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.cooldownStart = function(t, e) {
    if (this.cooldown.parent != this) {
        this.addChild(this.cooldown)
    }
    this.cooldown.activate(t, e)
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.restoreCooldown = function() {
    this.cooldown.restore()
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.cooldownCancel = function() {
    if (this.cooldown.parent == this) {
        this.removeChild(this.cooldown)
    }
    if (canvas.app.battle.model.oppId != 0) {
        this.rt.switchDot(true)
    }
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.remove = function() {
    if (this.parent == this.rt.spellsCont) {
        this.rt.spellsCont.removeChild(this)
    } else {
        canvas.app.battle.log("ERR: this slot is not contains", 16711680)
    }
    this.rt = null
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.checkSpells = function(t) {
    if (this.cooldown.forStep()) {
        this.cooldown.cooldownDone();
        if (canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED)) {
            this.addSpellCoolDown(3050)
        }
    }
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.addSpellCoolDown = function(t, e, a) {
    if (typeof e == "undefined")
        e = false;
    if (typeof a == "undefined")
        a = false;
    var i = Date.now();
    if (!e) {
        if (i - canvas.app.battle.model.attackTime < t) {
            this.cooldownStart(i, canvas.app.battle.model.attackTime + t)
        }
    } else {
        var s = canvas.app.battle.model.abilsFlags[canvas.app.battle.model.spells[this.slotId].effId];
        if (a && canvas.app.battle.model.testFlag(s, canvas.app.battle.Const.FS_PEF_PASSTURN))
            t = 12e5;
        this.cooldownStart(i, i + t)
    }
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.initKeyCallbacks = function() {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerKey = function(t) {
    if (canvas.app.battle.model.centerMode == canvas.app.battle.Const.MODE_ATTACK)
        return;
    if (t.params.globalKeyCode == this.getHotkeyCode()) {
        this.handlerClick()
    }
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.getHotkeyCode = function() {
    return this.spellsHotkeyCodes[this.slotId - 1]
}
;
canvas.app.battle.view.CenterSpellItemRenderer.prototype.getHotkeyText = function() {
    return this.spellsHotkeys[this.slotId - 1]
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer = function(t) {
    canvas.px.Container.call(this);
    this.rt = t;
    this.realFT = -1;
    this.realST = -1;
    this.forStepFl = false;
    this.rad = 19;
    var e = this.rad;
    this.har = [[e, -e], [e, e], [-e, e], [-e, -e], [0, -e]];
    this.shp = new canvas.px.Graphics;
    this.shp.position.set(e, e);
    this.msk = new canvas.px.Graphics;
    this.msk.position.set(e, e);
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, e - 1);
    this.msk.endFill();
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,24,16,"center");
    this.tf.position.set(e - 12, e - 8);
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk)
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.restore = function() {
    if (this.realFT > 0) {
        this.activate(0, 0)
    }
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.activate = function(t, e) {
    if (e - t >= 12e5) {
        this.realFT = this.ftime;
        this.realST = this.stime
    } else if (this.realFT > 0) {
        t = this.realST;
        e = this.realFT;
        this.realFT = -1;
        this.activated = false
    }
    if (this.activated) {
        var a = this.ftime - t;
        var i = e - t;
        if (a < i) {
            this.stime = t;
            this.ftime = e
        }
    } else {
        this.forStepFl = e - t == canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN || e - t > 1e6;
        this.activated = true;
        this.stime = t;
        this.ftime = e;
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
    }
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.handlerFrame = function() {
    try {
        var t = Date.now();
        if (this.har && t < this.ftime) {
            var e;
            if (this.ftime - this.stime > 1e6) {
                e = 100;
                this.ftime = t + 12e5;
                this.tf.text = ""
            } else {
                this.tf.text = Math.round((this.ftime - t) / 1e3);
                e = (t - this.stime) / (this.ftime - this.stime) * 100
            }
            this.shp.clear();
            this.shp.beginFill(0, .6);
            this.shp.moveTo(0, 0);
            var a = e * (360 / 100 / 57.2958) - 1.57;
            var i = this.rad * Math.cos(a);
            var s = this.rad * Math.sin(a);
            this.shp.lineTo(i, s);
            var n = Math.round(e % 100 / 25);
            while (n < this.har.length) {
                this.shp.lineTo(this.har[n][0], this.har[n][1]);
                n++
            }
            this.shp.endFill()
        } else {
            this.cooldownDone()
        }
    } catch (t) {}
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.cooldownDone = function() {
    this.activated = this.forStepFl = false;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
    this.hideTxt();
    this.rt.cooldownCancel()
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.showTxt = function() {
    if (this.tf.parent != this) {
        this.addChild(this.tf)
    }
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.hideTxt = function() {
    if (this.tf.parent == this) {
        this.removeChild(this.tf)
    }
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.active = function() {
    return this.activated
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.setActive = function(t) {
    this.activated = t
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.forStep = function() {
    return this.forStepFl
}
;
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.setForStep = function(t) {
    this.forStepFl = t
}
;
canvas.app.battle.view.AuraControlView = function(t) {
    canvas.px.Container.call(this);
    this.items = [];
    var e = [[-33, -68], [-55, -55], [-55, 23], [-33, 37]];
    for (var a = 0; a < 4; a++) {
        var i = new canvas.app.battle.view.AuraItemView(canvas.app.battle.model.auras[a],t);
        this.addChild(i);
        this.items.push(i);
        i.position.set(e[a][0], e[a][1])
    }
    canvas.EventManager.addEventListener(canvas.app.battle.Event.START_AURA_COOLDOWN, null, this.cooldownHandler, this)
}
;
canvas.app.battle.view.AuraControlView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AuraControlView.prototype.update = function() {
    for (var t = 0; t < 4; t++) {
        var e = canvas.app.battle.model.auras[t];
        this.items[t].data = e;
        this.items[t].selected = e && e.id == canvas.app.battle.model.currentAura
    }
}
;
canvas.app.battle.view.AuraControlView.prototype.useAura = function(t) {
    var e = this.items[t];
    if (this.interactiveChildren && e) {
        e.action()
    }
}
;
canvas.app.battle.view.AuraControlView.prototype.spellsUnlockOnError = function(t) {
    for (var e = 0; e < 4; e++) {
        var a = canvas.app.battle.model.auras[e];
        if (a && parseInt(a.id) == t) {
            this.timerComplete();
            return
        }
    }
}
;
canvas.app.battle.view.AuraControlView.prototype.cooldownHandler = function() {
    this.interactiveChildren = false;
    if (this.timer)
        clearTimeout(this.timer);
    this.timer = setTimeout(this.timerComplete.bind(this), 3e3)
}
;
canvas.app.battle.view.AuraControlView.prototype.timerComplete = function() {
    this.interactiveChildren = true
}
;
canvas.app.battle.view.AuraItemView = function(t, e) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            if (t) {
                this.locked = false;
                if (t.image != "" && (this._data == null || this._data.image != t.image)) {
                    canvas.Functions.destroyChildren(this.imageContainer);
                    var e = new canvas.ui.Image(t.image);
                    this.imageContainer.addChild(e);
                    this.hint.text = t.title;
                    e.scale.set(.5, .5)
                }
                var a = canvas.app.battle.model.memDat[canvas.app.battle.model.persId];
                if (a && canvas.app.battle.model.testFlag(a.persFlags, canvas.app.battle.Const.FS_PF_NO_AURAS))
                    this.locked = true
            } else {
                this.locked = true
            }
            this._data = t
        }
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = t;
            this.locker.visible = this._locked;
            this.buttonMode = !this._locked;
            if (this._locked)
                this.selected = false
        }
    });
    this._selected = null;
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            this.selector.visible = this._selected
        }
    });
    canvas.px.Container.call(this);
    this.rt = e;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_circle")));
    this.imageContainer = new canvas.px.Container;
    this.imageContainer.interactive = true;
    this.addChild(this.imageContainer);
    this.hint = new canvas.app.view.PxHint("title");
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.imageContainer,
        params: new canvas.utils.HintParams(this.hint)
    });
    var a = new canvas.px.Graphics;
    a.beginFill(16711935, 1);
    a.drawCircle(0, 0, 10);
    a.endFill();
    this.addChild(a);
    a.position.set(15, 15);
    this.imageContainer.mask = a;
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_selector"));
    this.addChild(this.selector);
    this.locker = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_lock"));
    this.addChild(this.locker);
    this.locker.position.set(8, 7);
    this.light = new canvas.px.Graphics;
    this.light.beginFill(16777215, .3);
    this.light.drawCircle(15, 15, 15);
    this.light.endFill();
    this.light.visible = false;
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.addChild(this.light);
    this.buttonMode = true;
    this.interactive = true;
    this.locked = false;
    this.selected = false;
    this.data = t;
    this.hitArea = new canvas.px.Circle(15,15,12);
    this.mouseover = this.overHandler;
    this.mouseout = this.outHandler;
    this.mouseup = this.clickHandler
}
;
canvas.app.battle.view.AuraItemView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AuraItemView.prototype.clickHandler = function() {
    this.action()
}
;
canvas.app.battle.view.AuraItemView.prototype.outHandler = function() {
    this.light.visible = false
}
;
canvas.app.battle.view.AuraItemView.prototype.overHandler = function() {
    if (this.data) {
        this.light.visible = true
    }
}
;
canvas.app.battle.view.AuraItemView.prototype.action = function() {
    if (this.data) {
        if (this.data.id == canvas.app.battle.model.currentAura) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_UNSET_AURA, parseInt(this.data.id)])
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, parseInt(this.data.id)])
        }
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.START_AURA_COOLDOWN, this)
    }
}
;
canvas.app.battle.view.PersEffects = function(t, e, a, i) {
    canvas.px.Container.call(this);
    this.position.set(t, e);
    this.baseLnk = i;
    this.effList = [];
    this.items = {};
    if (a) {
        this.deltaX = 28;
        this.startX = 0
    } else {
        this.deltaX = -28;
        this.startX = -28
    }
}
;
canvas.app.battle.view.PersEffects.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.PersEffects.prototype.initEffects = function(t) {
    this.clearItems();
    this.effList = t;
    this.updateItems(true)
}
;
canvas.app.battle.view.PersEffects.prototype.clearItems = function() {
    this.effList = [];
    this.removeChildren()
}
;
canvas.app.battle.view.PersEffects.prototype.updateItems = function(t) {
    if (t == undefined)
        t = false;
    if (t) {
        for (var e in this.items) {
            if (this.items[e] != null)
                this.items[e].destroy()
        }
        this.items = {}
    }
    var a = false;
    var i;
    var s;
    var n;
    for (n = 0; n < this.effList.length; n++) {
        i = this.effList[n];
        if (!i.lnk) {
            i.lnk = new canvas.app.battle.view.PersEffectItem(i,this.baseLnk);
            this.addChild(i.lnk);
            a = true
        }
        s = i.lnk;
        if (i.cnt <= 0) {
            this.removeChild(s);
            this.effList.splice(n, 1);
            s.destroy();
            this.items[i.pic] = null;
            a = true
        } else {
            s.setCount(i.cnt);
            this.items[i.pic] = s
        }
    }
    if (a) {
        this.repositItems()
    }
}
;
canvas.app.battle.view.PersEffects.prototype.repositItems = function() {
    var t = 0;
    var e = this.startX;
    var a = 0;
    for (var i = 0; i < this.children.length; i++) {
        var s = this.getChildAt(i);
        s.position.set(e, a);
        t++;
        if (t <= 4) {
            e += this.deltaX
        } else {
            t = 0;
            e = this.startX;
            a += 18
        }
    }
}
;
canvas.app.battle.view.PersEffects.prototype.deltaItem = function(t, e, a, i, s, n, r) {
    var o = false;
    for (var l = 0; l < this.effList.length; l++) {
        var c = this.effList[l];
        if (c.pic == a) {
            o = true;
            c.cnt += i;
            c.animData = s;
            c.eetimeMax = Math.max(n, c.eetimeMax);
            break
        }
    }
    if (!o && i > 0) {
        var p = {};
        p.id = t;
        p.title = e;
        p.pic = a;
        p.cnt = i;
        p.lnk = null;
        p.animData = s;
        p.eetimeMax = n;
        p.turnsLeft = r;
        this.effList.push(p)
    }
    this.updateItems()
}
;
canvas.app.battle.view.PersEffects.prototype.haveAnimData = function(t) {
    for (var e = 0; e < this.effList.length; e++) {
        var a = this.effList[e].animData.split("/");
        if (a.length > 2) {
            if (a[2]) {
                var i = canvas.app.battle.model.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, a[2]);
                for (var s = 0; s < i.length; s++) {
                    if (i[s] == t) {
                        return true
                    }
                }
            }
        }
    }
    return false
}
;
canvas.app.battle.view.PersEffectItem = function(t, e) {
    canvas.px.Container.call(this);
    this.baseLnk = e;
    this.data = t;
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,19,19,"right");
    this.tf.position.set(-4, 1);
    this.bmp = new canvas.ui.Image(this.data.pic);
    this.bmp.position.set(16, 4);
    this.bmp.scale.set(.25, .25);
    this.bmp.interactive = true;
    this.hint = new canvas.app.view.PxHint("");
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.bmp,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.updateHintText();
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.clickHandler;
    this.mouseout = this.outHandler;
    this.mouseover = this.overHandler;
    this.addChild(this.tf);
    this.addChild(this.bmp)
}
;
canvas.app.battle.view.PersEffectItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.PersEffectItem.prototype.setCount = function(t) {
    this.tf.text = Math.max(0, t)
}
;
canvas.app.battle.view.PersEffectItem.prototype.clickHandler = function() {
    showArtifactInfo(false, this.data.id)
}
;
canvas.app.battle.view.PersEffectItem.prototype.outHandler = function() {
    if (this.timer)
        clearInterval(this.timer)
}
;
canvas.app.battle.view.PersEffectItem.prototype.overHandler = function() {
    this.updateHintText()
}
;
canvas.app.battle.view.PersEffectItem.prototype.timerHandler = function() {
    this.updateHintText()
}
;
canvas.app.battle.view.PersEffectItem.prototype.updateHintText = function() {
    var t = this.data;
    var e = false;
    var a = t.title;
    var i = Math.floor(t.eetimeMax - Date.now() / 1e3 - (canvas.app.battle.model.serverTimestamp - canvas.app.battle.model.clientTimestamp));
    var s = Math.max(0, 1 + i).toString();
    var n = "";
    var r = "";
    var o = "\n";
    if (i < 3600) {
        e = true;
        switch (canvas.Config.lng) {
        case "ru":
        case "turk":
        case "de":
        case "cn":
            if (t.turnsLeft == 1)
                a += o + canvas.Translator.getText(44) + " ";
            else
                a += o + canvas.Translator.getText(43) + " ";
            n += s + " " + canvas.Translator.getText(2003);
            break;
        case "en":
            a += o + " ";
            r += canvas.Translator.getText(43);
            n += s + " " + canvas.Translator.getText(2003);
            break;
        default:
            a += o + s;
            break
        }
        if (this.timer)
            clearInterval(this.timer);
        this.timer = setInterval(this.timerHandler.bind(this), 1e3)
    }
    if (!e) {
        if (t.turnsLeft == 1)
            a += o + canvas.Translator.getText(44) + " ";
        else
            a += o + canvas.Translator.getText(43) + " "
    }
    if (t.turnsLeft > 0 && t.turnsLeft < 3600) {
        var l = 0;
        l = t.turnsLeft;
        if (l >= 10) {
            l = l % 10
        }
        if (l == 1) {
            if (e) {
                a += t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft) + r + canvas.Translator.getText(53) + " "
            } else {
                a += t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft)
            }
        }
        if (l > 1 || l == 0) {
            if (e) {
                a += t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft) + r + canvas.Translator.getText(53) + " "
            } else {
                a += t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft)
            }
        }
    }
    if (!e && (t.turnsLeft <= 0 || t.turnsLeft >= 3600)) {
        a = t.title
    } else
        a += n;
    this.hint.text = a
}
;
canvas.app.battle.view.PersEffectItem.prototype.getRightPhraseForTurns = function(t) {
    if (this.isPhraseManyTurns(t))
        return " " + canvas.Translator.getText(52);
    if (this.isPhraseTurn(t))
        return " " + canvas.Translator.getText(50);
    if (this.isPhraseOneTurn(t))
        return " " + canvas.Translator.getText(51);
    return "--:--"
}
;
canvas.app.battle.view.PersEffectItem.prototype.isPhraseManyTurns = function(t) {
    var e = t % 100;
    if (e >= 11 && e <= 20)
        return true;
    e = t % 10;
    if (e >= 5 && e <= 9)
        return true;
    if (e == 0)
        return true;
    return false
}
;
canvas.app.battle.view.PersEffectItem.prototype.isPhraseTurn = function(t) {
    var e = t % 10;
    if (e >= 2 && e <= 4)
        return true;
    return false
}
;
canvas.app.battle.view.PersEffectItem.prototype.isPhraseOneTurn = function(t) {
    var e = t % 10;
    if (e == 1)
        return true;
    return false
}
;
canvas.app.battle.view.PersEffectItem.prototype.destroy = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_REMOVE, null, {
        target: this.bmp
    });
    this.baseLnk = null;
    this.data = null;
    this.tf = null;
    this.bmp = null;
    if (this.timer) {
        clearInterval(this.timer);
        this.timer = null
    }
    this.hint = null;
    this.mouseup = null;
    this.mouseout = null;
    this.mouseover = null;
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.battle.view.HpMpView = function() {
    canvas.px.Container.call(this);
    this.hpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpPers = new canvas.px.Graphics;
    this.hpPers.beginFill(0, 1);
    this.hpPers.lineStyle(0, 0, 0);
    this.hpPers.drawRect(0, 0, this.hpPersFill.width, this.hpPersFill.height);
    this.hpPers.endFill();
    this.addChild(this.hpPersFill);
    this.addChild(this.hpPers);
    this.hpPersFill.mask = this.hpPers;
    this.hpPersFill.position.set(42, 38);
    this.hpPers.position.set(42, 38);
    this.hpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpOpp = new canvas.px.Graphics;
    this.hpOpp.beginFill(0, 1);
    this.hpOpp.lineStyle(0, 0, 0);
    this.hpOpp.drawRect(0, 0, this.hpOppFill.width, this.hpOppFill.height);
    this.hpOpp.endFill();
    this.addChild(this.hpOppFill);
    this.addChild(this.hpOpp);
    this.hpOppFill.mask = this.hpOpp;
    this.hpOppFill.scale.x = -1;
    this.hpOppFill.position.set(403, 38);
    this.hpOpp.position.set(403, 38);
    this.mpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpPers = new canvas.px.Graphics;
    this.mpPers.beginFill(0, 1);
    this.mpPers.lineStyle(0, 0, 0);
    this.mpPers.drawRect(0, 0, this.mpPersFill.width, this.mpPersFill.height);
    this.mpPers.endFill();
    this.addChild(this.mpPersFill);
    this.addChild(this.mpPers);
    this.mpPersFill.mask = this.mpPers;
    this.mpPersFill.position.set(42, 52);
    this.mpPers.position.set(42, 52);
    this.mpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpOpp = new canvas.px.Graphics;
    this.mpOpp.beginFill(0, 1);
    this.mpOpp.lineStyle(0, 0, 0);
    this.mpOpp.drawRect(0, 0, this.mpOppFill.width, this.mpOppFill.height);
    this.mpOpp.endFill();
    this.addChild(this.mpOppFill);
    this.addChild(this.mpOpp);
    this.mpOppFill.mask = this.mpOpp;
    this.mpOppFill.position.set(275, 52);
    this.mpOpp.position.set(403, 52);
    this.hpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.hpPersText.position.set(42, 38);
    this.addChild(this.hpPersText);
    this.mpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.mpPersText.position.set(42, 52);
    this.addChild(this.mpPersText);
    this.hpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.hpOppText.position.set(275, 38);
    this.addChild(this.hpOppText);
    this.mpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.mpOppText.position.set(275, 52);
    this.addChild(this.mpOppText);
    this.setHpPers(0, 0);
    this.setMpPers(0, 0);
    this.setHpOpp(0, 0);
    this.setMpOpp(0, 0)
}
;
canvas.app.battle.view.HpMpView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.HpMpView.prototype.setHpPers = function(t, e) {
    this.setValue(this.hpPersText, this.hpPers, t, e, 1)
}
;
canvas.app.battle.view.HpMpView.prototype.setMpPers = function(t, e) {
    this.setValue(this.mpPersText, this.mpPers, t, e, 1)
}
;
canvas.app.battle.view.HpMpView.prototype.setHpOpp = function(t, e) {
    this.setValue(this.hpOppText, this.hpOpp, t, e, -1)
}
;
canvas.app.battle.view.HpMpView.prototype.setMpOpp = function(t, e) {
    this.setValue(this.mpOppText, this.mpOpp, t, e, -1)
}
;
canvas.app.battle.view.HpMpView.prototype.setValue = function(t, e, a, i, s) {
    i = i < 0 ? 0 : i;
    a = a > i ? i : a < 0 ? 0 : a;
    if (i != 0) {
        t.text = a + "/" + i;
        e.scale.x = a / i * s
    } else {
        t.text = "0/0";
        e.scale.x = 0
    }
}
;
canvas.app.battle.view.NickView = function() {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,16697738,120,10,"left");
    this.addChild(this.field);
    this.field.y = 2;
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_info_icon"));
    this.addChild(this.infoButton);
    this.visible = false;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.clickHandler, this)
}
;
canvas.app.battle.view.NickView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.NickView.prototype.clickHandler = function() {
    var t = canvas.app.battle.model;
    var e = this.id;
    if (t.memDat[e] == null)
        return;
    var a = t.memDat[e].persFlags;
    var i = t.memDat[e].team;
    var s = (a & canvas.app.battle.Const.FS_PF_BOT) == canvas.app.battle.Const.FS_PF_BOT;
    var n = (a & canvas.app.battle.Const.FS_PF_SHADOW) == canvas.app.battle.Const.FS_PF_SHADOW;
    var r = (a & canvas.app.battle.Const.FS_PF_INVISIBLE) == canvas.app.battle.Const.FS_PF_INVISIBLE;
    if (((t.fightFlags & canvas.app.battle.Const.FIGHT_FLAG_BLIND) == canvas.app.battle.Const.FIGHT_FLAG_BLIND || r) && t.invisibleInfoUrl)
        canvas.Functions.navigateToURL(t.invisibleInfoUrl, "_blank");
    else if (n)
        showShadowInfo(false, e.toString(), false, t.fightId, t.fightServerId ? t.fightServerId : false);
    else if (s)
        showBotInfo(e.toString(), "0", t.fightId, t.fightServerId ? t.fightServerId : false);
    else
        showUserInfo(this.nick, t["team" + i + "serverUrl"] ? t["team" + i + "serverUrl"] : false)
}
;
canvas.app.battle.view.NickView.prototype.update = function(t, e) {
    this.nick = t;
    this.id = e;
    if (this.nick.length <= 14) {
        this.field.text = this.nick
    } else {
        this.field.text = this.nick.substr(0, 12) + "..."
    }
    this.field.x = -Math.round(this.field.width / 2) - 5;
    this.infoButton.x = -this.field.x - 12;
    this.visible = true
}
;
canvas.app.battle.view.NickView.prototype.unshow = function() {
    this.nick = "";
    this.id = 0;
    this.field.text = "";
    this.visible = false
}
;
canvas.app.battle.view.LevelView = function() {
    this._checked = false;
    Object.defineProperty(this, "checked", {
        get: function() {
            return this._checked
        },
        set: function(t) {
            this._checked = t;
            this.button.checked = this._checked;
            this.button.enabled = !this._checked
        }
    });
    canvas.px.Container.call(this);
    this.button = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_lvl_base"),canvas.ResourceLoader.getImage("ui", "battle_button_lvl_over"),null,null,null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_button_lvl_down")));
    this.addChild(this.button);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,3616041,25,18,"center");
    this.addChild(this.field);
    this.field.position.set(5, 13);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
;
canvas.app.battle.view.LevelView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.LevelView.prototype.clickHandler = function() {
    this.checked = true
}
;
canvas.app.battle.view.LevelView.prototype.setLevel = function(t) {
    this.field.text = t
}
;
canvas.app.battle.view.TimerView = function() {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL,16777184,55,25,"center");
    this.addChild(this.field);
    this.field.text = "00:00";
    this.visible = false
}
;
canvas.app.battle.view.TimerView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.TimerView.prototype.timerFunc = function() {
    var t = this.timeEnd - Date.now();
    if (t < 0) {
        this.deactivate()
    } else {
        t = Math.round(t / 1e3);
        var e = Math.floor(t / 60);
        var a = t - e * 60;
        this.field.text = (e < 10 ? "0" + e.toString() : e.toString()) + ":" + (a < 10 ? "0" + a.toString() : a.toString())
    }
}
;
canvas.app.battle.view.TimerView.prototype.activate = function(t) {
    if (typeof t == "undefined")
        t = 0;
    if (this.timerIv) {
        clearInterval(this.timerIv)
    }
    this.timeEnd = Date.now() + canvas.app.battle.model.roundTime - t;
    this.timerIv = setInterval(this.timerFunc.bind(this), canvas.app.battle.Const.TIMEOUT_REFRESH_INTERVAL);
    this.timerFunc();
    this.visible = true
}
;
canvas.app.battle.view.TimerView.prototype.deactivate = function() {
    if (this.timerIv) {
        clearInterval(this.timerIv);
        this.timerIv = 0
    }
    this.visible = false
}
;
canvas.app.battle.view.ErrorPopup = function() {
    canvas.px.Container.call(this);
    this.interactive = false;
    this.interactiveChildren = false;
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE,-1,444,20,"center");
    this.addChild(this.field)
}
;
canvas.app.battle.view.ErrorPopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ErrorPopup.prototype.activate = function(t) {
    this.field.text = t;
    this.alpha = 1;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.battle.view.ErrorPopup.prototype.frameHandler = function() {
    this.alpha -= .01;
    if (this.alpha <= 0) {
        if (this.parent) {
            this.parent.removeChild(this)
        }
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.battle.view.MainPopup = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.bgBlank = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_blank"));
    this.bgVictory = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_victory"));
    this.bgDefeat = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_defeat"));
    this.midVictory = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_victory"));
    this.midDefeat = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_defeat"));
    this.midKilled = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_killed"));
    this.borTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_top"));
    this.borBottom = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_bottom"));
    this.borLeft = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_left"));
    this.borRight = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_right"));
    this.addChild(this.bgBlank);
    this.addChild(this.bgVictory);
    this.addChild(this.bgDefeat);
    this.addChild(this.borTop);
    this.addChild(this.borBottom);
    this.addChild(this.borLeft);
    this.addChild(this.borRight);
    this.borBottom.y = 111;
    this.borLeft.y = 29;
    this.borLeft.height = 82;
    this.borRight.position.set(268, 29);
    this.borRight.height = 82;
    this.closeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_popup_btn"));
    this.addChild(this.closeButton);
    this.closeButton.position.set(83, 116);
    this.midVictory.position.set(43, 35);
    this.midDefeat.position.set(12, 42);
    this.midKilled.position.set(20, 47);
    this.addChild(this.midVictory);
    this.addChild(this.midDefeat);
    this.addChild(this.midKilled);
    this.headLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,104,23,"center");
    this.headLabel.position.set(86, 3);
    this.addChild(this.headLabel);
    this.middleLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_ARIAL_11_BOLD : canvas.Const.FONT_ARIAL_11,7693391,230,90,"center","middle");
    this.middleLabel.position.set(23, 26);
    this.addChild(this.middleLabel);
    this.bottomLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10,16769466,73,18,"center");
    this.bottomLabel.position.set(102, 117);
    this.addChild(this.bottomLabel);
    this.clearList = [this.bgBlank, this.bgVictory, this.bgDefeat, this.midVictory, this.midDefeat, this.midKilled, this.headLabel, this.middleLabel, this.bottomLabel, this.closeButton];
    this.waitingPopup = new canvas.app.battle.view.WaitingPopup;
    this.setClear();
    this.interactive = true
}
;
canvas.app.battle.view.MainPopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.MainPopup.prototype.deactivate = function() {
    if (this.parent) {
        this.parent.removeChild(this)
    }
}
;
canvas.app.battle.view.MainPopup.prototype.setClear = function() {
    for (var t = 0; t < this.clearList.length; t++) {
        this.clearList[t].visible = false
    }
    if (this.waitingPopup.parent == this) {
        this.removeChild(this.waitingPopup);
        this.waitingPopup.removedHandler()
    }
    this.setBackVisible(true)
}
;
canvas.app.battle.view.MainPopup.prototype.setBackVisible = function(t) {
    this.borBottom.visible = t;
    this.borLeft.visible = t;
    this.borRight.visible = t;
    this.borTop.visible = t
}
;
canvas.app.battle.view.MainPopup.prototype.showLabel = function(t, e) {
    t.visible = true;
    t.text = e
}
;
canvas.app.battle.view.MainPopup.prototype.updateWait = function() {
    if (this.currentState == canvas.app.battle.Const.POP_ST_WAIT) {
        this.setBackVisible(false);
        this.waitingPopup.setState(canvas.app.battle.model.fightRunning ? canvas.app.battle.Const.WAITING_OPPONENT : canvas.app.battle.Const.WAITING_BATTLE);
        this.addChild(this.waitingPopup);
        this.waitingPopup.addedHandler()
    }
}
;
canvas.app.battle.view.MainPopup.prototype.finishClickHandlerBT = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandlerBT, this);
    this.baseLnk.mEve.fightOver(false);
    canvas.Functions.navigateToURL("fight.php?flee=1", "_self")
}
;
canvas.app.battle.view.MainPopup.prototype.finishClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this);
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlFinish2 == "" ? canvas.app.battle.model.urlFinish : canvas.app.battle.model.urlFinish2, "_self")
}
;
canvas.app.battle.view.MainPopup.prototype.error1ClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error1ClickHandler, this);
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlError, "_self")
}
;
canvas.app.battle.view.MainPopup.prototype.error2ClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error2ClickHandler, this);
    this.deactivate();
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.TRY_RECONNECT, this)
}
;
canvas.app.battle.view.MainPopup.prototype.error3ClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this);
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlFinish, "_self")
}
;
canvas.app.battle.view.MainPopup.prototype.error5ClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error5ClickHandler, this);
    document.location.reload()
}
;
canvas.app.battle.view.MainPopup.prototype.unknownErrorClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.unknownErrorClickHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.REPAIR, this)
}
;
canvas.app.battle.view.MainPopup.prototype.activate = function(t, e, a, i) {
    if (typeof e == "undefined")
        e = 0;
    if (typeof a == "undefined")
        a = "";
    if (typeof i == "undefined")
        i = "";
    var s = canvas.app.battle.model;
    canvas.app.battle.log("MainPopup:setState " + t + " error_code " + e);
    this.currentState = t;
    this.setClear();
    switch (t) {
    case canvas.app.battle.Const.POP_ST_WAIT_BT:
        if ((!s.watchFight || s.persId == s.myPersId) && s.canLeaveFight) {
            this.bgBlank.visible = true;
            this.middleLabel.visible = true;
            this.middleLabel.text = canvas.Translator.getText(40);
            this.showLabel(this.headLabel, canvas.Translator.getText(39));
            this.closeButton.visible = true;
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandlerBT, this)
        } else {
            this.deactivate();
            return
        }
        break;
    case canvas.app.battle.Const.POP_ST_WAIT:
        this.updateWait();
        break;
    case canvas.app.battle.Const.POP_ST_VISCORY:
        this.showLabel(this.headLabel, canvas.Translator.getText(1));
        this.closeButton.visible = true;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this);
        if (s.urlFinish2 != "") {
            this.bgBlank.visible = true;
            this.middleLabel.visible = true;
            this.middleLabel.text = s.urlFinish2Text;
            this.showLabel(this.bottomLabel, canvas.Translator.getText(48))
        } else {
            this.bgVictory.visible = true;
            this.midVictory.visible = true;
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2))
        }
        break;
    case canvas.app.battle.Const.POP_ST_DEFEAT:
        this.showLabel(this.headLabel, canvas.Translator.getText(1));
        this.closeButton.visible = true;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this);
        if (s.urlFinish2 != "") {
            this.bgBlank.visible = true;
            this.middleLabel.visible = true;
            this.middleLabel.text = s.urlFinish2Text;
            this.showLabel(this.bottomLabel, canvas.Translator.getText(48))
        } else {
            this.bgDefeat.visible = true;
            this.midDefeat.visible = true;
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2))
        }
        break;
    case canvas.app.battle.Const.POP_ST_KILLED:
        this.bgBlank.visible = true;
        this.midKilled.visible = true;
        this.showLabel(this.headLabel, canvas.Translator.getText(0));
        break;
    case canvas.app.battle.Const.POP_ST_ERROR:
        this.bgBlank.visible = true;
        this.showLabel(this.headLabel, canvas.Translator.getText(4));
        this.closeButton.visible = true;
        this.middleLabel.visible = true;
        switch (e) {
        case canvas.app.battle.Const.POP_ER_SHUTDOWN:
            this.middleLabel.text = canvas.Translator.getText(59);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error1ClickHandler, this);
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            break;
        case canvas.app.battle.Const.POP_ER_SOC_CLOSE:
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.RESET, this);
            this.middleLabel.text = canvas.Translator.getText(5);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error2ClickHandler, this);
            this.showLabel(this.bottomLabel, canvas.Translator.getText(37));
            break;
        case canvas.app.battle.Const.POP_ER_AUTH_FAIL:
            this.middleLabel.text = canvas.Translator.getText(3);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this);
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            break;
        case canvas.app.battle.Const.POP_ER_FIGHT_ENDED:
            this.middleLabel.text = canvas.Translator.getText(6);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this);
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            break;
        case canvas.app.battle.Const.POP_ER_PROXY_ERROR:
            this.middleLabel.text = canvas.Translator.getText(6);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error5ClickHandler, this);
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            break;
        default:
            canvas.app.battle.log("MainPopup WARN: unknown error_code = " + e, 16711680)
        }
        break;
    case canvas.app.battle.Const.POP_ST_UNKNOWN:
        this.bgBlank.visible = true;
        this.showLabel(this.headLabel, a);
        this.middleLabel.visible = true;
        this.middleLabel.text = i;
        this.closeButton.visible = true;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.unknownErrorClickHandler, this);
        this.showLabel(this.bottomLabel, canvas.Translator.getText(7));
        break;
    default:
        canvas.app.battle.log("MainPopup ERR: unknown popup state_id = " + t, 16711680)
    }
}
;
canvas.app.battle.view.WaitingPopup = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_waiting_popup_back")));
    this.waiter = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_waiter"));
    this.addChild(this.waiter);
    this.waiter.pivot = new canvas.px.Point(Math.round(this.waiter.width * .5),Math.round(this.waiter.height * .5));
    this.waiter.position.set(53, 63);
    this.container = new canvas.px.Sprite;
    this.addChild(this.container)
}
;
canvas.app.battle.view.WaitingPopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.WaitingPopup.prototype.setState = function(t) {
    canvas.Functions.destroyChildren(this.container);
    var e;
    switch (t) {
    case canvas.app.battle.Const.WAITING_BATTLE:
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_icon_wait_battle"));
        this.container.addChild(e);
        e.position.set(41, 51);
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_wait2"));
        this.container.addChild(e);
        e.position.set(87, 43);
        break;
    case canvas.app.battle.Const.WAITING_OPPONENT:
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_icon_wait_opponent"));
        this.container.addChild(e);
        e.position.set(41, 47);
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_wait"));
        this.container.addChild(e);
        e.position.set(87, 43);
        break
    }
}
;
canvas.app.battle.view.WaitingPopup.prototype.addedHandler = function() {
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.updateHandler, this)
}
;
canvas.app.battle.view.WaitingPopup.prototype.updateHandler = function() {
    this.waiter.rotation += .17
}
;
canvas.app.battle.view.WaitingPopup.prototype.removedHandler = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.updateHandler, this)
}
;
canvas.app.battle.view.MessagePopup = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_blank")));
    var t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_top"));
    var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_bottom"));
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_left"));
    var i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_right"));
    this.addChild(t);
    this.addChild(e);
    this.addChild(a);
    this.addChild(i);
    this.interactive = true;
    e.y = 111;
    a.y = 29;
    a.height = 82;
    i.position.set(268, 29);
    i.height = 82;
    this.headLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,104,23,"center");
    this.headLabel.position.set(86, 3);
    this.addChild(this.headLabel);
    this.headLabel.interactive = true;
    this.middleLabel = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11,7693391,230,60,"center","middle");
    this.middleLabel.position.set(23, 28);
    this.addChild(this.middleLabel);
    this.buttonAccept = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(9));
    this.buttonBan = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(10));
    this.buttonCancel = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(11));
    this.buttonAccept.position.set(28, 94);
    this.buttonBan.position.set(139, 94);
    this.buttonCancel.position.set(82, 94);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonAccept, this.acceptHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonBan, this.banHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonCancel, this.cancelHandler, this)
}
;
canvas.app.battle.view.MessagePopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.MessagePopup.prototype.acceptHandler = function() {
    if (this.yesFunc) {
        this.yesFunc.apply(null, this.yesFuncParams)
    } else {
        this.sendAnswer("1")
    }
    this.deactivate()
}
;
canvas.app.battle.view.MessagePopup.prototype.banHandler = function() {
    if (!this.yesFunc) {
        this.sendAnswer("0")
    }
    this.deactivate()
}
;
canvas.app.battle.view.MessagePopup.prototype.cancelHandler = function() {
    this.deactivate()
}
;
canvas.app.battle.view.MessagePopup.prototype.setAcceptLabel = function(t) {
    this.acceptButton.setLabel(t)
}
;
canvas.app.battle.view.MessagePopup.prototype.setBanLabel = function(t) {
    this.banButton.setLabel(t)
}
;
canvas.app.battle.view.MessagePopup.prototype.setCancelLabel = function(t) {
    this.cancelButton.setLabel(t)
}
;
canvas.app.battle.view.MessagePopup.prototype.setHeader = function(t) {
    this.headLabel.text = t ? t : ""
}
;
canvas.app.battle.view.MessagePopup.prototype.setBody = function(t) {
    this.middleLabel.text = t
}
;
canvas.app.battle.view.MessagePopup.prototype.activate = function(t, e, a) {
    this.yesFunc = e;
    this.yesFuncParams = a;
    switch (t) {
    case 1:
        if (this.buttonAccept.parent != this)
            this.addChild(this.buttonAccept);
        if (this.buttonBan.parent != this)
            this.addChild(this.buttonBan);
        if (this.buttonCancel.parent == this)
            this.removeChild(this.buttonCancel);
        break;
    case 2:
        if (this.buttonAccept.parent == this)
            this.removeChild(this.buttonAccept);
        if (this.buttonBan.parent == this)
            this.removeChild(this.buttonBan);
        if (this.buttonCancel.parent != this)
            this.addChild(this.buttonCancel);
        break
    }
}
;
canvas.app.battle.view.MessagePopup.prototype.sendAnswer = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_SEND_MESSAGE, this.targetPersId, "2()" + this.num + "()" + t])
}
;
canvas.app.battle.view.MessagePopup.prototype.deactivate = function() {
    this.yesFunc = null;
    this.yesFuncParams = null;
    this.num = null;
    this.targetPersId = 0;
    this.headLabel.text = canvas.Translator.getText(0);
    this.buttonAccept.setLabel(canvas.Translator.getText(9));
    this.buttonBan.setLabel(canvas.Translator.getText(10));
    this.buttonCancel.setLabel(canvas.Translator.getText(11));
    if (this.parent) {
        this.parent.removeChild(this)
    }
}
;
canvas.app.battle.view.ComboView = function() {
    canvas.px.Container.call(this);
    this.padding = 5;
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.clickHandler;
    this.chooseDefaultCombo();
    this.align();
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
;
canvas.app.battle.view.ComboView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ComboView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.OPEN_COMBO_LIST)
}
;
canvas.app.battle.view.ComboView.prototype.resetCombo = function(t) {
    if (typeof t == "undefined")
        t = 0;
    if (canvas.app.battle.model.combos.length == 0)
        return;
    this.setStep(t)
}
;
canvas.app.battle.view.ComboView.prototype.newHit = function(t, e) {
    if (canvas.app.battle.model.combos.length == 0)
        return;
    var a = this.comboStep >= this.activeCombo.size - 1;
    var i;
    if (t != this.activeCombo.seq.charAt(this.comboStep)) {
        i = this.findSubComboIndex(this.activeCombo.seq.substr(0, this.comboStep).concat(t));
        if (i > 0) {
            this.setStep(i)
        } else {
            this.resetCombo()
        }
    } else {
        if (a) {
            if (!e) {
                i = this.findSubComboIndex(this.activeCombo.seq.substr(1, this.comboStep));
                if (i > 0) {
                    this.setStep(i)
                } else {
                    this.resetCombo()
                }
            } else {
                this.resetCombo()
            }
        } else {
            this.setStep(this.comboStep + 1)
        }
    }
}
;
canvas.app.battle.view.ComboView.prototype.findSubComboIndex = function(t) {
    var e = t.length;
    for (var a = 0; a < e; a++) {
        if (this.activeCombo.seq.substr(0, e - a) == t.substr(a, e - a)) {
            return e - a
        }
    }
    return 0
}
;
canvas.app.battle.view.ComboView.prototype.setStep = function(t) {
    this.comboStep = t;
    this.drawCombo();
    canvas.app.battle.model.localStorage.set("comboStep", parseInt(this.comboStep))
}
;
canvas.app.battle.view.ComboView.prototype.comboComplete = function() {
    this.resetCombo()
}
;
canvas.app.battle.view.ComboView.prototype.drawCombo = function() {
    if (canvas.app.battle.model.combos.length == 0)
        return;
    canvas.Functions.destroyChildren(this);
    this.cursorIcon = null;
    for (var t = 0; t < canvas.app.battle.model.combos.length; t++) {
        if (this.activeComboId == canvas.app.battle.model.combos[t].id) {
            this.activeCombo = canvas.app.battle.model.combos[t];
            break
        }
    }
    var e;
    for (var t = 0; t < this.activeCombo.size; t++) {
        var a = this.chooseStrike(this.activeCombo.seq.charAt(t));
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_" + a + (this.activeCombo.level > 15 ? "_aura" : "")));
        this.iconSide = e.width;
        e.x = (e.width + this.padding) * t;
        var i;
        if (t < this.comboStep) {
            i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_border_green"))
        } else {
            i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_border_yellow"))
        }
        this.addChild(e);
        e.addChild(i);
        i.position.set(-1, -1)
    }
    if (!this.cursorIcon) {
        this.cursorIcon = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_cursor"));
        this.cursorIcon.interactive = false
    }
    this.cursorIcon.y = -this.cursorIcon.height;
    this.cursorDirection = true;
    this.cursorIcon.x = Math.round((this.iconSide + this.padding) * this.comboStep - this.cursorIcon.width / 2 + this.iconSide / 2);
    this.addChild(this.cursorIcon);
    this.align()
}
;
canvas.app.battle.view.ComboView.prototype.handlerFrame = function() {
    if (!this.cursorIcon)
        return;
    if (this.cursorDirection) {
        this.cursorIcon.y -= 1;
        if (this.cursorIcon.y <= -this.cursorIcon.height - 10) {
            this.cursorDirection = !this.cursorDirection
        }
    } else {
        this.cursorIcon.y += 1;
        if (this.cursorIcon.y >= -this.cursorIcon.height) {
            this.cursorDirection = !this.cursorDirection
        }
    }
}
;
canvas.app.battle.view.ComboView.prototype.chooseStrike = function(t) {
    var e;
    switch (t) {
    case "2":
        e = "combo_middle";
        break;
    case "3":
        e = "combo_down";
        break;
    case "1":
        e = "combo_up";
        break;
    case "0":
        e = "combo_none"
    }
    return e
}
;
canvas.app.battle.view.ComboView.prototype.align = function() {
    this.x = Math.round((canvas.app.battle.model.width - this.width) / 2)
}
;
canvas.app.battle.view.ComboView.prototype.chooseCombo = function(t, e) {
    if (typeof e == "undefined")
        e = 0;
    canvas.app.battle.model.localStorage.set("activeID", t);
    canvas.app.battle.model.localStorage.set("fightId", canvas.app.battle.model.fightId);
    this.activeComboId = canvas.app.battle.model.activeComboId = t;
    this.resetCombo(e)
}
;
canvas.app.battle.view.ComboView.prototype.chooseDefaultCombo = function() {
    var t;
    var e = -1;
    var a = canvas.app.battle.model.localStorage.get("activeID");
    var i = canvas.app.battle.model.localStorage.get("fightId");
    var s = parseInt(canvas.app.battle.model.localStorage.get("comboStep"));
    if (a && i == canvas.app.battle.model.fightId)
        e = a;
    else
        e = canvas.app.battle.model.defaultCombo;
    if (e && e >= 0) {
        for (var n = 0; n < canvas.app.battle.model.combos.length; n++) {
            if (canvas.app.battle.model.combos[n].id == e) {
                t = e;
                break
            }
        }
        if (s && i == canvas.app.battle.model.fightId)
            this.comboStep = s;
        if (n == canvas.app.battle.model.combos.length)
            t = this.getLongestCombo()
    } else
        t = this.getLongestCombo();
    if (t > 0)
        this.chooseCombo(t, this.comboStep)
}
;
canvas.app.battle.view.ComboView.prototype.getLongestCombo = function() {
    var t = canvas.app.battle.model;
    if (!t.combos || t.combos.length < 1)
        return 0;
    var e = 0;
    for (var a = 1; a < t.combos.length; a++)
        if (t.combos[a].size >= t.combos[e].size)
            e = a;
    return t.combos[e].id
}
;
canvas.app.battle.view.ComboList = function() {
    canvas.px.Container.call(this);
    this.curWidth = 320;
    this.curElevation = 1;
    this.padding = 5;
    this.container = new canvas.px.Container;
    this.drawCarcase();
    this.drawAllCombos();
    this.x = Math.round((canvas.app.battle.model.width - this.width) / 2);
    this.y = 360 - this.height
}
;
canvas.app.battle.view.ComboList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ComboList.prototype.drawCarcase = function() {
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_combo_list_back"),0,9,0,11);
    this.back.interactive = true;
    this.back.height = 100;
    this.back.x = -3;
    this.back.y = -10;
    this.addChild(this.back);
    this.addChild(this.container);
    this.closeButton = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(32));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.handlerClose, this);
    this.closeButton.x = Math.round((this.curWidth - this.closeButton.width) / 2);
    this.addChild(this.closeButton);
    this.selectCursor = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_select_cursor"));
    this.selectCursor.x = 2
}
;
canvas.app.battle.view.ComboList.prototype.drawAllCombos = function() {
    for (var t = 0; t < canvas.app.battle.model.combos.length; t++) {
        this.drawCombo(canvas.app.battle.model.combos[t])
    }
    if (this.curElevation + 20 > 280) {
        this.back.height = 280;
        var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_scroll_back"));
        var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_arrow"));
        var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_arrow"));
        i.scale.y = -1;
        i.y = -i.height;
        var s = new canvas.px.Container;
        s.addChild(i);
        var n = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_drag"));
        this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,a,s,e,n,this);
        this.addChild(this.scroll);
        this.scroll.padding = 10;
        this.scroll.setSize(17, 248);
        this.scroll.x = this.back.width - this.scroll.width - 8;
        this.scroll.step = 10;
        this.scrollMask = new canvas.px.Mask(320,250);
        this.addChild(this.scrollMask);
        this.container.mask = this.scrollMask;
        this.scroll.max = this.container.height - this.scrollMask.height;
        canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this)
    } else {
        this.back.height = this.curElevation + 20
    }
    this.closeButton.y = this.back.height - 20
}
;
canvas.app.battle.view.ComboList.prototype.scrollHandler = function() {
    this.container.y = -this.scroll.current
}
;
canvas.app.battle.view.ComboList.prototype.drawCombo = function(t) {
    var e = new canvas.px.Container;
    e.combo = t;
    e.buttonMode = true;
    e.interactive = true;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: e,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(t.description))
    });
    if (t.seq.charAt(0) != "0") {
        e.click = this.handlerClick.bind(this)
    }
    var a;
    var i;
    var s = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,3355443,300,20);
    s.text = t.title;
    s.x = 20;
    s.y = 2;
    e.addChild(s);
    var n = this.curWidth - t.size * (16 + this.padding);
    for (var r = 0; r < t.size; r++) {
        a = canvas.app.battle.view.ComboView.prototype.chooseStrike(t.seq.charAt(r));
        i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_" + a + (t.level > 15 ? "_aura" : "")));
        i.x = (i.width + this.padding) * r + n;
        e.addChild(i)
    }
    e.y = this.curElevation;
    this.container.addChild(e);
    if (canvas.app.battle.model.activeComboId == t.id)
        this.placeSelectCursor(e);
    this.curElevation += e.height + this.padding
}
;
canvas.app.battle.view.ComboList.prototype.placeSelectCursor = function(t) {
    if (this.selectCursor.parent != this.container)
        this.container.addChild(this.selectCursor);
    this.selectCursor.y = t.y + 3
}
;
canvas.app.battle.view.ComboList.prototype.handlerClick = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CHOOSE_COMBO, null, t.currentTarget.combo.id);
    this.placeSelectCursor(t.currentTarget)
}
;
canvas.app.battle.view.ComboList.prototype.handlerClose = function() {
    if (this.parent) {
        this.parent.removeChild(this)
    }
}
;
canvas.app.battle.view.BowPanel = function() {
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = this.numSpells > 0 ? t : true;
            this.container.alpha = this._locked ? .5 : 1
        }
    });
    canvas.px.Container.call(this);
    this.items = new Array;
    this.container = new canvas.px.Container;
    this.container.position.set(10, 2);
    this.addChild(this.container);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_panel")));
    this.leftArrow = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press"));
    this.rightArrow = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press"));
    this.rightArrow.scale.x = -1;
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,this.leftArrow,this.rightArrow);
    this.scroll.setSize(400, 42);
    this.scroll.position.set(-16, 24);
    this.container.addChild(this.scroll);
    this.leftArrow.visible = false;
    this.rightArrow.visible = false;
    this.progress = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_bow_progress"),18,0,18,0);
    this.container.addChild(this.progress);
    this.progress.width = 157;
    this.progress.position.set(200, 74);
    this.progressMask = new canvas.px.Mask(154,11);
    this.container.addChild(this.progressMask);
    this.progressMask.position.set(202, 75);
    this.progress.mask = this.progressMask;
    this.progressMask.scale.x = 0;
    this.progressField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16770533,154,16,"center");
    this.container.addChild(this.progressField);
    this.progressField.position.set(201, 75);
    this.arrowsField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16770533,30,16,"center");
    this.container.addChild(this.arrowsField);
    this.arrowsField.position.set(42, 75);
    this.itemsContainer = new canvas.px.Container;
    this.container.addChild(this.itemsContainer);
    this.itemsContainer.position.set(22, -1);
    this.itemsMask = new canvas.px.Mask(365,100);
    this.itemsMask.position.set(32, -1);
    this.addChild(this.itemsMask);
    this.itemsContainer.mask = this.itemsMask;
    this.hideButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press"));
    this.hide();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.handlerHideClick, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.handlerScroll, this)
}
;
canvas.app.battle.view.BowPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.BowPanel.prototype.handlerHideClick = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_BOW_PANEL, null, !this.container.parent)
}
;
canvas.app.battle.view.BowPanel.prototype.handlerScroll = function() {
    this.itemsContainer.x = 22 - 75 * this.scroll.current;
    this.leftArrow.visible = true;
    this.rightArrow.visible = true;
    if (this.scroll.current == 0) {
        this.leftArrow.visible = false
    } else if (this.scroll.current == this.scroll.max) {
        this.rightArrow.visible = false
    }
}
;
canvas.app.battle.view.BowPanel.prototype.setProgress = function(t, e) {
    if (e == 0) {
        this.progressMask.scale.x = 0;
        this.progressField.text = ""
    } else {
        this.progressField.text = t.toString() + "/" + e.toString();
        this.progressMask.scale.x = t / e
    }
    this.arrowsField.text = canvas.app.battle.model.arrowsCount.toString()
}
;
canvas.app.battle.view.BowPanel.prototype.buildSpells = function() {
    var t;
    var e;
    var a = 0;
    var i = new Array;
    for (var s in canvas.app.battle.model.spellsBow)
        i.push(canvas.app.battle.model.spellsBow[s]);
    i.sort(function(t, e) {
        return t.index - e.index
    });
    for (var n = 0; n < i.length; n++) {
        t = i[n];
        e = new canvas.app.battle.view.elements.BowItem;
        this.itemsContainer.addChild(e);
        e.x = a;
        e.y = 10;
        a += 75;
        this.items.push(e);
        e.effectID = parseInt(t.effId);
        e.image = canvas.Config.artifactsPath + t.picture;
        e.count = t.energy;
        e.coolDown = t.cdTime;
        e.coolDownLeft = t.cdLeft;
        e.title = t.title;
        e.hotkeyTitle = canvas.app.battle.Const.BOW_KEYS_TITLE[n]
    }
    this.numSpells = i.length;
    if (this.numSpells > canvas.app.battle.Const.BOW_SLOTS_COUNT) {
        this.scroll.max = this.numSpells - canvas.app.battle.Const.BOW_SLOTS_COUNT;
        this.handlerScroll()
    }
    if (this.numSpells > 0) {
        this.addChild(this.hideButton);
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_BOW_PANEL, null, true)
    }
}
;
canvas.app.battle.view.BowPanel.prototype.confirmUseEffect = function(t) {
    for (var e = 0; e < this.items.length; e++) {
        var a = this.items[e];
        if (a.effectID == t) {
            a.coolDownLeft = a.coolDown;
            break
        }
    }
}
;
canvas.app.battle.view.BowPanel.prototype.show = function() {
    this.hideButton.x = 191;
    this.hideButton.y = 38;
    this.hideButton.rotation = -canvas.Functions.degToRad(90);
    if (this.container.parent == this)
        this.removeChild(this.container)
}
;
canvas.app.battle.view.BowPanel.prototype.hide = function() {
    this.hideButton.y = 92;
    this.hideButton.rotation = canvas.Functions.degToRad(90);
    this.hideButton.x = 232;
    if (this.container.parent != this)
        this.addChild(this.container)
}
;
canvas.app.battle.view.ShadowIcon = function() {
    canvas.px.Container.call(this);
    this.shadowButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_shadow_nrm"),canvas.ResourceLoader.getImage("ui", "battle_button_shadow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_shadow_down"),canvas.ResourceLoader.getImage("ui", "battle_button_shadow_disbld"));
    this.addChild(this.shadowButton);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.shadowButton, this.clickHandler, this);
    this.loader = new canvas.utils.URLRequest(canvas.app.battle.model.shadowSummonUrl + "&json_mode_on=1");
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.loader, this.completeHandler, this);
    this.update()
}
;
canvas.app.battle.view.ShadowIcon.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ShadowIcon.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_MESSAGE, null, {
        mode: 1,
        headerLabel: canvas.Translator.getText(67),
        bodyLabel: canvas.Translator.getText(66),
        yesFunc: this.loadShadow.bind(this),
        acceptLabel: canvas.Translator.getText(68),
        banLabel: canvas.Translator.getText(69)
    })
}
;
canvas.app.battle.view.ShadowIcon.prototype.loadShadow = function() {
    this.loader.load()
}
;
canvas.app.battle.view.ShadowIcon.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.loader, this.completeHandler, this);
    var t = JSON.parse(this.loader.request.responseText);
    if (t["common|action"].redirect_error) {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, t["common|action"].redirect_error)
    } else {
        canvas.app.battle.model.shadowSummonable = false;
        this.update()
    }
}
;
canvas.app.battle.view.ShadowIcon.prototype.update = function() {
    this.shadowButton.enabled = canvas.app.battle.model.shadowSummonable
}
;
canvas.app.battle.view.Pers = function(t) {
    this._addFuncTurn = null;
    Object.defineProperty(this, "addFuncTurn", {
        get: function() {
            return this._addFuncTurn
        },
        set: function(t) {
            this.isFuncTurn = t != null;
            this._addFuncTurn = t
        }
    });
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.isFuncTurn = false;
    this.addFuncShow = null;
    this.addFuncDie = null;
    this.mFlagId = 0;
    this.magicStandBase = new canvas.px.Container;
    this.magicStandBaseAura = new canvas.px.Container;
    this.dmgConf = null;
    this.sndConf = null;
    this.pet = null;
    this.inMotion = false;
    this.baseHeight = 0;
    this.allLabels = {};
    this.deadFrame = 0;
    this.mvIndexShow = 0;
    this.deadFlag = false;
    this.inMV = false;
    this.additionalEffects = {};
    this.skContainer = new canvas.px.Container;
    this.petContainer = new canvas.px.Container;
    this.addEffCont = new canvas.px.Container;
    this.skContainer.y = -10;
    this.petContainer.y = 20;
    this.magicStandBase.scale.set(.75, .75);
    this.magicStandBaseAura.scale.set(.75, .75);
    this.visible = false;
    this.addChild(this.magicStandBase);
    this.addChild(this.magicStandBaseAura);
    this.addChild(this.skContainer);
    this.addChild(this.petContainer);
    this.addChild(this.addEffCont)
}
;
canvas.app.battle.view.Pers.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.Pers.prototype.config = function(t) {
    var e = canvas.app.battle.model;
    this.persId = t.pers_id;
    this.persSk = t.pers_sk;
    this.persSkLink = t.pers_sk_link;
    this.persGender = t.pers_gender;
    this.persKind = e.memDat[this.persId].kind;
    if (this.persKind != 2) {
        this.dieColors = canvas.Const.SK_DIE_COLORS_HUMAN
    } else {
        this.dieColors = canvas.Const.SK_DIE_COLORS_MAGMAR
    }
    this.hePos = canvas.app.battle.Const.HAND_EFFECT_POSITION[this.persGender];
    if (!this.hePos) {
        this.hePos = e.HAND_EFFECT_POSITION.M
    }
}
;
canvas.app.battle.view.Pers.prototype.loadBegin = function() {
    if (this.persSk < canvas.app.battle.Const.BOTID1) {
        this.sk = new canvas.animation.Skeleton(this.persSkLink,new canvas.px.Point(70,180),this.parent);
        this.sk.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        this.sk.skeletonData = new canvas.data.battle.SkeletonData(canvas.app.battle.model.myAllDataArray[this.persId],this.persGender)
    } else {
        this.sk = new canvas.animation.Bot(this.persSkLink,new canvas.px.Point(70,180),this.parent);
        this.sk.frameEvent = canvas.app.battle.Event.ENTER_FRAME
    }
    var t = canvas.app.battle.model.memDat[this.persId].persFlags;
    if (canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_SKGHOST)) {
        this.sk.filters = [canvas.Functions.getGlow(10, 3, 0, 16777215, .1), canvas.Functions.getAlpha(.4)]
    } else if (canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_MOROC_LIGHT)) {
        this.sk.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 6737100, .1)]
    } else if (canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_MOROC_DARK)) {
        this.sk.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 10066176, .1)]
    }
    this.skContainer.addChild(this.sk);
    this.sk.stop();
    if (this.sk.ready) {
        this.skReady()
    } else {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.sk, this.skReady, this)
    }
}
;
canvas.app.battle.view.Pers.prototype.skReady = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.sk, this.skReady, this);
    for (var t in this.sk.labels) {
        this.allLabels[t] = true
    }
    this.sk.DMG = this.DMG.bind(this);
    this.sk.MV = this.MV.bind(this);
    this.sk.AFX = this.AFX.bind(this);
    this.sk.TURN = this.TURN.bind(this);
    this.sk.POST = this.POST.bind(this);
    this.sk.SND = this.SND.bind(this);
    this.updateSkelPost();
    this.showBody()
}
;
canvas.app.battle.view.Pers.prototype.showBody = function() {
    this.baseLnk.mFunc.effectList(this.persId);
    this.setChildIndex(this.addEffCont, this.children.length - 1);
    this.visible = true;
    this.sk.visible = true;
    this.baseHeight = this.height;
    this.mvIndexShow = 0;
    this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId));
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.showBodyHandler, this);
    this.showBodyHandler();
    if (!this.sk.parent)
        this.skContainer.addChild(this.sk)
}
;
canvas.app.battle.view.Pers.prototype.updateSkelPost = function() {
    if (this.persId == canvas.app.battle.model.persId && canvas.app.battle.model.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        if (this.allLabels["dead"]) {
            this.sk.gotoAndStop("dead")
        } else if (this.deadFrame) {
            this.sk.gotoAndStop(this.deadFrame)
        } else {
            this._addFuncTurn = this.emptyFunction;
            this.sk.gotoAndPlay("die")
        }
    } else {
        this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId))
    }
}
;
canvas.app.battle.view.Pers.prototype.gotoAndPlay = function(t) {
    this.sk.gotoAndPlay(t);
    if (t.indexOf("die") != -1) {
        if (this.pet)
            this.pet.die()
    }
    if (t.indexOf("idle") != -1) {
        if (this.pet)
            this.pet.idle()
    }
}
;
canvas.app.battle.view.Pers.prototype.emptyFunction = function() {}
;
canvas.app.battle.view.Pers.prototype.showBodyHandler = function() {
    this.mvIndexShow++;
    if (this.mvIndexShow < canvas.app.battle.Const.MV_PERS_SHOW.length) {
        this.sk.x = canvas.app.battle.Const.MV_PERS_SHOW[this.mvIndexShow]
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.showBodyHandler, this);
        if (this.addFuncShow) {
            this.addFuncShow({
                pers_id: this.persId
            })
        }
    }
}
;
canvas.app.battle.view.Pers.prototype.clearAdditionalEffects = function() {
    for (var t in this.additionalEffects) {
        this.removeAdditionalEffect(this.additionalEffects[t])
    }
}
;
canvas.app.battle.view.Pers.prototype.showAdditionalEffects = function(t) {
    for (var e = 0; e < t.length; e++) {
        this.showAdditionalEffect(t[e])
    }
    if (canvas.app.battle.model.dmgEve.length > 0) {
        setTimeout(this.showDmgEve.bind(this), 1100)
    }
}
;
canvas.app.battle.view.Pers.prototype.showDmgEve = function() {
    this.baseLnk.view.showDmg(canvas.app.battle.model.dmgEve);
    canvas.app.battle.model.dmgEve = []
}
;
canvas.app.battle.view.Pers.prototype.showAdditionalEffect = function(t) {
    var e = this.additionalEffects[t];
    if (!e) {
        e = new canvas.px.MovieClip(canvas.Config.spellsPath + t);
        e.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        this.additionalEffects[t] = e;
        e.position.set(120, 210);
        this.addEffCont.addChild(e)
    }
}
;
canvas.app.battle.view.Pers.prototype.removeAdditionalEffect = function(t) {
    var e = this.additionalEffects[t];
    if (e) {
        if (e.parent == this.addEffCont) {
            this.addEffCont.removeChild(e)
        }
        e.destroy({
            children: true
        });
        delete this.additionalEffects[t]
    }
}
;
canvas.app.battle.view.Pers.prototype.hideBody = function() {
    if (!this.deadFlag) {
        this.mvIndexHide = 0;
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.hideBodyHandler, this);
        this.hideBodyHandler()
    } else {
        this.comleteHiding()
    }
}
;
canvas.app.battle.view.Pers.prototype.hideBodyHandler = function() {
    this.mvIndexHide++;
    if (this.mvIndexHide < canvas.app.battle.Const.MV_PERS_HIDE.length) {
        if (this.sk)
            this.sk.x = canvas.app.battle.Const.MV_PERS_HIDE[this.mvIndexHide]
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.hideBodyHandler, this);
        this.comleteHiding()
    }
}
;
canvas.app.battle.view.Pers.prototype.comleteHiding = function() {
    this.visible = false;
    if (this.addFuncHide) {
        if (this.sk) {
            if (this.sk.parent == this.skContainer) {
                this.skContainer.removeChild(this.sk)
            }
            this.sk.gotoAndStop(1)
        }
        this.clearAdditionalEffects();
        this.addFuncHide({
            pers_id: this.persId
        });
        this.addFuncHide = null
    }
}
;
canvas.app.battle.view.Pers.prototype.dieBody = function() {
    this.deadFlag = true;
    if (this.persSk < canvas.app.battle.Const.BOTID1) {
        this.ctIndexDie = 0;
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieBodyHandler, this);
        this.dieBodyHandler()
    } else {
        if (this.sk["flags"]) {
            if (canvas.app.battle.model.testFlag(this.sk["flags"], 1)) {
                if (this.addFuncDie) {
                    this.addFuncDie({
                        pers_id: this.persId
                    });
                    this.addFuncDie = null
                }
                return
            }
        }
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieAlphaBodyHandler, this);
        this.dieAlphaBodyHandler()
    }
}
;
canvas.app.battle.view.Pers.prototype.dieBodyHandler = function() {
    if (this.ctIndexDie < this.dieColors.length) {
        var t = this.dieColors[this.ctIndexDie];
        this.sk.filters = [canvas.Functions.getColorMatrixFilter(t[0], t[1], t[2], 1, t[3], t[4], t[5], 0)]
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieBodyHandler, this);
        this.sk.filters = [];
        this.sk.visible = false;
        this.dieSoul()
    }
    this.ctIndexDie++
}
;
canvas.app.battle.view.Pers.prototype.dieSoul = function() {
    if (this.persKind != 2) {
        this.dieAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + "spirit_hum")
    } else {
        this.dieAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + "spirit_mag")
    }
    this.dieAnim.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    this.dieAnim.autoDestroy = true;
    this.dieAnim.position.set(100, 280);
    this.addChild(this.dieAnim);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.dieAnim, this.dieAnimCheckHandler, this)
}
;
canvas.app.battle.view.Pers.prototype.dieAnimCheckHandler = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.dieAnim, this.dieAnimCheckHandler, this);
    if (this.addFuncDie) {
        this.addFuncDie({
            pers_id: this.persId
        });
        this.addFuncDie = null
    }
}
;
canvas.app.battle.view.Pers.prototype.dieAlphaBodyHandler = function() {
    this.sk.alpha -= .1;
    if (this.sk.alpha <= 0) {
        this.sk.visible = false;
        this.sk.alpha = 1;
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieAlphaBodyHandler, this);
        if (this.addFuncDie != null) {
            this.addFuncDie({
                pers_id: this.persId
            });
            this.addFuncDie = null
        }
    }
}
;
canvas.app.battle.view.Pers.prototype.setReaction = function(t) {
    this.reactionLabel = t.r_label;
    this.reactionDelay = t.r_delay;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.delayedReactionHandler, this)
}
;
canvas.app.battle.view.Pers.prototype.delayedReactionHandler = function() {
    this.reactionDelay--;
    if (this.reactionDelay <= 0) {
        this.gotoAndPlay(this.reactionLabel);
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.delayedReactionHandler, this)
    }
}
;
canvas.app.battle.view.Pers.prototype.addWoundEffect = function(t) {
    this.woundFrameRest = t.delay;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.woundFrameHandler, this)
}
;
canvas.app.battle.view.Pers.prototype.woundFrameHandler = function() {
    if (this.woundFrameRest > 0) {
        this.woundFrameRest--
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.woundFrameHandler, this);
        this.woundBegin()
    }
}
;
canvas.app.battle.view.Pers.prototype.woundBegin = function() {
    var t = this.sk.kick_array_all.kick_mid.a_mid_1.wound;
    var e = t[Math.floor(t.length * Math.random())];
    this.addFuncTurn = this.baseLnk.afterWound.bind(this.baseLnk);
    this.gotoAndPlay(e)
}
;
canvas.app.battle.view.Pers.prototype.addBgEffect = function(t) {
    this.bgEffect = true;
    this.addEffect(t)
}
;
canvas.app.battle.view.Pers.prototype.addEffect = function(t) {
    this.bgEffect = false;
    this.effectFrameRest = t.delay;
    this.effectType = t.type;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.effectFramehandler, this)
}
;
canvas.app.battle.view.Pers.prototype.effectFramehandler = function() {
    if (this.effectFrameRest > 0) {
        this.effectFrameRest--
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.effectFramehandler, this);
        var t = new canvas.px.Point(this.hePos[0],this.hePos[1]);
        t = this.sk.getChildByName("HAND13").toGlobal(t);
        this.baseLnk.view.addEffect(this.effectType, t.x, t.y, this.parent.scale.x, this.bgEffect)
    }
}
;
canvas.app.battle.view.Pers.prototype.addHandEffect = function(t) {
    this.handAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + t);
    this.handAnim.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handFrameHandler, this);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.handAnim, this.handCompleteHandler, this);
    this.addChild(this.handAnim);
    this.handAnim.autoDestroy = true
}
;
canvas.app.battle.view.Pers.prototype.handFrameHandler = function() {
    var t = new canvas.px.Point(this.hePos[0],this.hePos[1]);
    var e = this.sk.getChildByName("HAND13");
    if (e && this.handAnim) {
        t = e.toGlobal(t);
        t = this.toLocal(t);
        this.handAnim.position.set(t.x, t.y)
    }
}
;
canvas.app.battle.view.Pers.prototype.handCompleteHandler = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handFrameHandler, this);
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.handAnim, this.handCompleteHandler, this);
    this.handAnim = null
}
;
canvas.app.battle.view.Pers.prototype.showPet = function(t, e) {
    if (!this.pet)
        this.pet = new canvas.app.battle.view.Pet;
    if (this.scale.x == 1) {
        this.pet.scale.x = this.pet.scale.y = .8
    }
    if (e)
        t = true;
    if (!t && this.pet.parent == this.petContainer) {
        this.petContainer.removeChild(this.pet)
    }
    if (t) {
        this.petContainer.addChild(this.pet);
        this.pet.load(e)
    }
}
;
canvas.app.battle.view.Pers.prototype.DMG = function() {
    if (this.dmgConf) {
        this.baseLnk.view.showDmg(this.dmgConf);
        this.dmgConf = null
    }
}
;
canvas.app.battle.view.Pers.prototype.MV = function(t, e) {
    this.mvCurIter = t;
    this.mvCurDelta = e;
    if (this.inMV) {
        this.skMoveClear()
    }
    this.inMV = true;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.skMoveHandler, this)
}
;
canvas.app.battle.view.Pers.prototype.skMoveHandler = function() {
    this.mvCurIter--;
    if (this.mvCurIter > 0) {
        this.sk.x += this.mvCurDelta
    } else {
        this.skMoveClear()
    }
}
;
canvas.app.battle.view.Pers.prototype.skMoveClear = function() {
    this.inMV = false;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.skMoveHandler, this)
}
;
canvas.app.battle.view.Pers.prototype.AFX = function() {}
;
canvas.app.battle.view.Pers.prototype.TURN = function() {
    var t = canvas.app.battle.model;
    if (this.sk.currentLabel == "die") {
        this.deadFrame = this.sk.currentFrame - 1
    }
    if (!this.isFuncTurn) {
        this.baseLnk.persMotionDone(this.persId)
    } else {
        this.isFuncTurn = false;
        this._addFuncTurn({
            pers_id: this.persId
        })
    }
    if (this.baseLnk.players[t.persId]) {
        this.baseLnk.players[t.persId].magicStandBase.visible = this.baseLnk.players[t.persId].magicStandBaseAura.visible = true
    }
    if (this.baseLnk.players[t.oppId]) {
        this.baseLnk.players[t.oppId].magicStandBase.visible = this.baseLnk.players[t.oppId].magicStandBaseAura.visible = true
    }
}
;
canvas.app.battle.view.Pers.prototype.POST = function() {
    this.sk.x = 0;
    this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId))
}
;
canvas.app.battle.view.Pers.prototype.SND = function(e, a, i) {
    if (typeof e == "undefined")
        e = true;
    if (typeof a == "undefined")
        a = "";
    if (typeof i == "undefined")
        i = false;
    if (canvas.app.battle.model.islp3)
        return;
    if (arguments.length == 0) {
        var t = this.sk.data.properties.ActionSound[this.sk.currentLabel];
        if (t && !t.std) {
            a = t.self;
            this.baseLnk.sndPlayInternal(a, this.persSk);
            return
        }
    }
    try {
        if (e) {
            if (!this.sndConf) {
                return
            }
            if (this.sndConf.std) {
                this.baseLnk.sndPlay(this.sndConf.snd_name)
            } else {
                this.baseLnk.sndPlayInternal(this.sndConf.snd_name, this.persSk)
            }
        } else {
            if (i) {
                this.baseLnk.sndPlayInternal(a, this.persSk)
            } else {
                this.baseLnk.sndPlay(a)
            }
        }
    } catch (t) {
        canvas.app.battle.log("Pers.SND ERROR: " + t + "; url=" + this.persSkLink + ", soundID=" + a + ", normal=" + e + ", internal=" + i)
    }
}
;
canvas.app.battle.view.Pers.prototype.destroy = function() {
    this.sk.destroy({
        children: true
    });
    this.clearAdditionalEffects();
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.battle.view.AddArrow = function(t, e, a, i, s) {
    canvas.px.Container.call(this);
    if (typeof a == "undefined")
        a = 0;
    if (typeof i == "undefined")
        i = 1;
    if (typeof s == "undefined")
        s = 0;
    this.fromPoint = t;
    this.toPoint = e;
    this.speedX = Math.abs(t.x - e.x) / 10;
    this.speedY = Math.abs(t.y - e.y) / 10;
    this.arrow = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_arrow"));
    this.arrow.anchor.set(.5, .5);
    this.arrow.scale.set(i * 1.6, i * 1.6);
    this.arrow.rotation = canvas.Functions.degToRad(s);
    if (a > 0) {
        setTimeout(this.timerHandler.bind(this), a * 1e3)
    } else {
        this.timerHandler()
    }
}
;
canvas.app.battle.view.AddArrow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AddArrow.prototype.timerHandler = function() {
    this.arrow.position.set(this.fromPoint.x, this.fromPoint.y);
    this.addChild(this.arrow);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.battle.view.AddArrow.prototype.frameHandler = function() {
    if (this.arrow.x < this.toPoint.x) {
        this.arrow.x += this.speedX;
        if (this.arrow.x > this.toPoint.x)
            this.arrow.x = this.toPoint.x
    } else if (this.arrow.x > this.toPoint.x) {
        this.arrow.x -= this.speedX;
        if (this.arrow.x < this.toPoint.x)
            this.arrow.x = this.toPoint.x
    }
    if (this.arrow.y < this.toPoint.y) {
        this.arrow.y += this.speedY;
        if (this.arrow.y > this.toPoint.y)
            this.arrow.y = this.toPoint.y
    } else if (this.arrow.y > this.toPoint.y) {
        this.arrow.y -= this.speedY;
        if (this.arrow.y < this.toPoint.y)
            this.arrow.y = this.toPoint.y
    }
    if (this.arrow.x == this.toPoint.x && this.arrow.y == this.toPoint.y) {
        this.destroy()
    }
}
;
canvas.app.battle.view.AddArrow.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (this.parent)
        this.parent.removeChild(this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.battle.view.AddSpell = function(t, e, a, i, s, n, r, o, l) {
    canvas.px.Container.call(this);
    if (typeof n == "undefined")
        n = false;
    if (typeof r == "undefined")
        r = "";
    if (typeof o == "undefined")
        o = "";
    if (typeof l == "undefined")
        l = false;
    this.baseLnk = t;
    this.centerHide = this.baseLnk.view.centerView.visible ? l : false;
    this.whoseAnimFlag = r;
    this.position.set(e, a);
    if (!i) {
        if (o == "31" || o == "32" || o == "33" || o == "34" || o == "35" || o == "36") {} else {
            this.scale.x = -1
        }
    }
    this.splMc = s;
    if (!n) {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.splMc, this.destroy, this)
    }
    if (this.centerHide)
        this.baseLnk.centerVisible(false);
    this.addChild(this.splMc)
}
;
canvas.app.battle.view.AddSpell.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AddSpell.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.splMc, this.destroy, this);
    if (this.parent)
        this.parent.removeChild(this);
    this.splMc.stop();
    this.removeChild(this.splMc);
    this.splMc = null;
    if (this.parent != this.baseLnk.view.bgSpells) {
        if (this.whoseAnimFlag == "pers") {
            canvas.app.battle.model.persAnimFlag = false
        } else if (this.whoseAnimFlag == "opp") {
            canvas.app.battle.model.oppAnimFlag = false
        }
    }
    if (this.parent)
        this.parent.removeChild(this);
    if (this.centerHide)
        this.baseLnk.centerVisible(true);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.battle.view.Pet = function() {
    canvas.px.Container.call(this);
    this.dieFlag = false;
    this.deadFrame = 0;
    this.persId = 0
}
;
canvas.app.battle.view.Pet.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.Pet.prototype.load = function(t) {
    this.srcPet = t;
    var e = this.srcPet.split("/");
    this.petName = e[e.length - 1].split(".")[0];
    this.srcPet = canvas.Config.petsPath + this.petName + "/" + this.petName;
    this.animation = new canvas.animation.Bot(this.srcPet);
    this.animation.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    if (this.animation.ready) {
        this.loadComplete()
    } else {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.animation, this.loadComplete, this)
    }
}
;
canvas.app.battle.view.Pet.prototype.loadComplete = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.animation, this.loadComplete, this);
    this.animation.x = 20;
    this.addChild(this.animation);
    this.animation.TURN = this.TURN.bind(this);
    this.animation.SND = this.SND.bind(this);
    if (this.dieFlag && this.deadFrame) {
        this.animation.gotoAndStop(this.deadFrame)
    } else if (this.dieFlag) {
        this.animation.gotoAndPlay("die")
    } else {
        this.animation.gotoAndPlay("idle")
    }
}
;
canvas.app.battle.view.Pet.prototype.TURN = function() {
    if (this.animation.currentLabel == "die") {
        this.deadFrame = this.animation.currentFrame
    }
    if (!this.dieFlag) {
        this.animation.gotoAndPlay("idle")
    }
    this.intervalHandler()
}
;
canvas.app.battle.view.Pet.prototype.SND = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "pets/" + this.petName + "/" + t + ".mp3")
}
;
canvas.app.battle.view.Pet.prototype.playBaff = function(t) {
    var e;
    if (!this.animation)
        return;
    switch (t) {
    case 1:
        e = "baf_1";
        break;
    case 2:
        e = "baf_2";
        break;
    default:
        break
    }
    if (this.animation.labels[e]) {
        this.animation.gotoAndPlay(e)
    } else {
        if (this.idInterval)
            clearTimeout(this.idInterval);
        this.idInterval = setTimeout(this.intervalHandler.bind(this), 1e3)
    }
}
;
canvas.app.battle.view.Pet.prototype.intervalHandler = function() {
    if (this.addFuncTurn)
        this.addFuncTurn({
            pers_id: this.persId
        })
}
;
canvas.app.battle.view.Pet.prototype.die = function() {
    if (this.dieFlag || !this.animation) {
        return
    }
    this.dieFlag = true;
    this.animation.gotoAndPlay("die")
}
;
canvas.app.battle.view.Pet.prototype.idle = function() {
    if (!this.dieFlag)
        return;
    this.dieFlag = false;
    if (this.animation) {
        this.animation.gotoAndPlay("idle")
    }
}
;
canvas.app.battle.view.DmgFly = function(t, e) {
    canvas.px.Container.call(this);
    this.ARR_Y = [70, 61.3, 54.55, 49.7, 46.8, 45.85, 45.85, 45.7, 45.6, 45.35, 44.95, 44.65, 44.15, 43.6, 43, 42.3, 41.6, 40.8, 39.85, 38.95, 37.9, 36.8, 35.65, 34.45, 33.1, 31.75, 30.3, 28.75, 27.2, 25.45, 23.75, 21.95, 20.1, 18.1, 16.15, 14.05, 11.85, 9.6, 7.3, 4.95, 2.5, 0];
    this.ARR_A = [0, .36, .64, .84, .96, 1, 1, 1, .99, .99, .98, .97, .96, .95, .94, .92, .91, .89, .87, .85, .83, .8, .78, .75, .72, .69, .66, .63, .59, .55, .52, .48, .44, .39, .35, .3, .26, .21, .16, .11, .05, 0];
    var a = canvas.app.battle.model;
    if (canvas.app.battle.Const.PERS_POS_X[t.tar]) {
        this.x = canvas.app.battle.Const.PERS_POS_X[t.tar];
        this.dX = this.x + Math.floor(Math.random() * 90 - 25) * (t.tar == "pers" ? a.persDmgCnt > 0 ? 1 : 0 : a.oppDmgCnt > 0 ? -1 : 0);
        this.dX_mir = this.x + Math.floor(Math.random() * 40 + 25) * (t.tar == "pers" ? a.persDmgCnt > 0 ? -1 : 0 : a.oppDmgCnt > 0 ? 1 : 0);
        this.whose_dmg = t.tar
    } else {
        canvas.app.battle.log("DmgFly WARN: dmg_fly, unknown target = " + t.tar, 16711680);
        this.dX = this.x
    }
    this.y = 20 * e + 60;
    this.yy = this.y;
    this.dV = Math.random() * .7 + .65;
    this.dVx = .065;
    if (this.whose_dmg == "pers") {
        a.persDmgCnt++;
        if (a.persDmgCnt > 8) {
            this.dV *= 1.6
        }
    } else if (this.whose_dmg == "opp") {
        a.oppDmgCnt++;
        if (a.oppDmgCnt > 8) {
            this.dV *= 1.6
        }
    }
    var i;
    var s;
    if (t.crit == 1) {
        t.kick = canvas.app.battle.Const.DMG_KICK_CRIT
    }
    switch (t.kick) {
    case canvas.app.battle.Const.DMG_KICK_DODGE:
        i = 39168;
        s = canvas.Translator.getText(16);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_WOUND:
        i = 16777215;
        s = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_CRIT:
        i = 16711680;
        s = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_BLOCK:
        i = 170;
        s = canvas.Translator.getText(31);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_CURE:
        i = 39168;
        s = this.val2str(t.val);
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_MANA:
        i = 4605695;
        s = this.val2str(t.val);
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_ABSORB:
        i = 16776960;
        s = canvas.Translator.getText(17) + " " + String(t.val);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_RESIST:
        i = 16711935;
        s = canvas.Translator.getText(18) + " " + String(t.val) + "%";
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_IMMUNITY:
        i = 65535;
        s = canvas.Translator.getText(46);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_NOCHANCE:
        i = 65535;
        s = canvas.Translator.getText(47);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_FULLRES:
        i = 65535;
        s = canvas.Translator.getText(18);
        this.dX = this.x;
        break;
    default:
        canvas.app.battle.log("DmgFly WARN: showDMG unknown kick = " + t.kick, 16711680)
    }
    var n = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_20_BOLD_STROKE,i,30,20,"center");
    n.text = s;
    this.addChild(n);
    this.dmg_fly_index = 0;
    this.updatePos();
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.battle.view.DmgFly.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.DmgFly.prototype.val2str = function(t) {
    if (t > 0) {
        return "+" + String(t)
    }
    return String(t)
}
;
canvas.app.battle.view.DmgFly.prototype.frameHandler = function() {
    var t = canvas.app.battle.model;
    this.dmg_fly_index++;
    if (this.dmg_fly_index < this.ARR_A.length) {
        this.updatePos()
    } else {
        if (this.whose_dmg == "pers") {
            t.persDmgCnt--;
            if (t.persDmgCnt < 0) {
                t.persDmgCnt = 0
            }
        } else if (this.whose_dmg == "opp") {
            t.oppDmgCnt--;
            if (t.oppDmgCnt < 0) {
                t.oppDmgCnt = 0
            }
        }
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.parent.removeChild(this);
        this.destroy({
            children: true
        })
    }
}
;
canvas.app.battle.view.DmgFly.prototype.updatePos = function() {
    this.y = this.yy + this.ARR_Y[this.dmg_fly_index] * this.dV;
    this.alpha = this.ARR_A[this.dmg_fly_index] * this.dV;
    if (Math.abs(this.x - this.dX) > 1) {
        this.x -= (this.x - this.dX) * this.dVx
    }
}
;
canvas.app.battle.view.ComboHint = function() {
    canvas.px.Container.call(this);
    this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_combo_hint"));
    this.image.scale.set(0, 0);
    this.image.anchor.set(.5, .5);
    this.addChild(this.image);
    this.state = false;
    this.delayIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.battle.view.ComboHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ComboHint.prototype.frameHandler = function() {
    if (this.state) {
        if (this.delayIndex > 15) {
            if (this.image.alpha <= 0) {
                this.finish()
            } else {
                this.image.y += 4;
                this.image.alpha -= .15
            }
        } else {
            this.delayIndex++
        }
    } else {
        if (this.image.scale.x >= 1) {
            this.state = true;
            this.image.scale.set(1, 1)
        } else {
            var t = this.image.scale.x + .1;
            t = t > 1 ? 1 : t;
            this.image.scale.set(t, t)
        }
    }
}
;
canvas.app.battle.view.ComboHint.prototype.finish = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.parent.removeChild(this);
    this.destroy({
        children: true
    })
}
;
canvas.app.battle.view.elements.PopupButton = function(t) {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "battle_popup_btn"));
    this.field = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10,16769466,73,18,"center");
    this.addChild(this.field);
    this.field.position.set(18, 1);
    this.setLabel(t);
    this.sprite.hitArea = new canvas.px.Rectangle(14,0,this.width - 28,18)
}
;
canvas.app.battle.view.elements.PopupButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.battle.view.elements.PopupButton.prototype.setLabel = function(t) {
    this.field.text = t
}
;
canvas.app.battle.view.elements.BowItem = function() {
    this._image = false;
    Object.defineProperty(this, "image", {
        get: function() {
            return this._image
        },
        set: function(t) {
            this._image = t;
            if (this._image != "") {
                if (!this.imageView) {
                    this.imageView = new canvas.ui.Image(this._image);
                    this.container.addChildAt(this.imageView, 0)
                } else {
                    this.imageView.setImage(this._image)
                }
                this.count = this._count;
                this.buttonMode = true;
                this.gradient.visible = true;
                this.countBack.visible = true;
                this.countField.visible = true
            } else {
                this.locked = false;
                this.selected = false;
                this.buttonMode = false;
                this.gradient.visible = false;
                this.countBack.visible = false;
                this.countField.visible = false
            }
        }
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = t;
            this.buttonMode = !this._locked;
            this.wallLock.visible = this._locked
        }
    });
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            this.selection.visible = this._selected
        }
    });
    this._count = false;
    Object.defineProperty(this, "count", {
        get: function() {
            return this._count
        },
        set: function(t) {
            this._count = t;
            this.countField.text = this._count.toString()
        }
    });
    this._coolDownLeft = false;
    Object.defineProperty(this, "coolDownLeft", {
        get: function() {
            return this._coolDownLeft
        },
        set: function(t) {
            this._coolDownLeft = t;
            if (this._coolDownLeft > 0) {
                this.timeout = setTimeout(this.timerHandler.bind(this), this._coolDownLeft * 1e3);
                this.locked = true
            }
        }
    });
    this._hotkeyTitle = "";
    Object.defineProperty(this, "hotkeyTitle", {
        get: function() {
            return this._hotkeyTitle
        },
        set: function(t) {
            this._hotkeyTitle = t;
            if (t) {
                this.hotkeyTitleField.text = t;
                this.hotkeyTitleBack.visible = true;
                this.hotkeyTitleField.visible = true
            }
        }
    });
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.gradient = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_gradient"));
    this.container.addChild(this.gradient);
    this.countBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_count_back"));
    this.container.addChild(this.countBack);
    this.countBack.x = 36;
    this.countBack.y = 45;
    this.countField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16770533,25,16,"center");
    this.countField.x = 35;
    this.countField.y = 45;
    this.container.addChild(this.countField);
    this.selection = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_selector"));
    this.container.addChild(this.selection);
    this.selection.x = -1;
    this.selection.y = -1;
    this.wallLock = new canvas.px.Graphics;
    this.wallLock.beginFill(0, .6);
    this.wallLock.drawRect(0, 0, 60, 60);
    this.wallLock.endFill();
    this.container.addChild(this.wallLock);
    this.wallLock.x = -1;
    this.wallLock.y = -1;
    this.lock = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_lock"));
    this.wallLock.addChild(this.lock);
    this.lock.x = 2;
    this.lock.y = 1;
    this.hotkeyTitleBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spell_empty"));
    this.container.addChild(this.hotkeyTitleBack);
    this.hotkeyTitleBack.scale.x = this.hotkeyTitleBack.scale.y = .5;
    this.hotkeyTitleField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,16770533,20,16,"center");
    this.hotkeyTitleField.x = 0;
    this.hotkeyTitleField.y = 3;
    this.container.addChild(this.hotkeyTitleField);
    this.wallLock.visible = false;
    this.selection.visible = false;
    this.countField.visible = false;
    this.countBack.visible = false;
    this.gradient.visible = false;
    this.hotkeyTitleBack.visible = false;
    this.hotkeyTitleField.visible = false;
    this.buttonMode = false;
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.battle.view.elements.BowItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.elements.BowItem.prototype.timerHandler = function() {
    this.locked = false
}
;
canvas.app.battle.view.elements.BowItem.prototype.overHandler = function() {
    if (this.image && typeof artifactAltSimple != "undefined") {
        artifactAltSimple("aa" + this.effectID.toString(), 2)
    }
}
;
canvas.app.battle.view.elements.BowItem.prototype.outHandler = function() {
    if (typeof artifactAltSimple != "undefined") {
        artifactAltSimple("aa" + this.effectID.toString(), 0)
    }
}
;
canvas.app.battle.view.elements.BowItem.prototype.clickHandler = function() {
    if (this.buttonMode) {
        if (this._locked)
            return;
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.USE_EFFECT, null, this.effectID)
    }
}
;
canvas.app.location.Main = function(t, e, a) {
    canvas.px.Container.call(this);
    this.model = t;
    this.model.init();
    this.hintManager = e;
    this.windowsManager = a;
    canvas.EventManager.addEventListener(canvas.app.location.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.RESIZE, null, this.resizeHandler, this);
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.windowsContainer = new canvas.px.Container;
    this.view = new canvas.app.location.View(this);
    this.addChild(this.view);
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, this.windowsManager, this.windowOpenHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, this.windowsManager, this.windowCloseHandler, this);
    setInterval(this.timerHandler.bind(this), 1e3);
    setInterval(this.timer60Handler.bind(this), 6e4)
}
;
canvas.app.location.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.Main.prototype.resizeHandler = function() {
    this.resize(this.model.width, this.model.height)
}
;
canvas.app.location.Main.prototype.resize = function(t, e) {
    var a = t;
    var i = e;
    this.hintManager.init(this.hintContainer, a, i);
    this.model.width = a;
    this.model.height = i;
    this.view.resize(a, i)
}
;
canvas.app.location.Main.prototype.handlerKey = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    var e = t.params.globalKeyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    case canvas.Const.KEYS.L:
        if (s) {
            canvas.Log.show(canvas.Log.LOCATION)
        }
        break
    }
}
;
canvas.app.location.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        canvas.app.location.log("swfObjectHandler", 65280);
        for (e in t) {
            a = t[e];
            canvas.app.location.log("DATA[" + e + "] :: " + t[e]);
            if (!canvas.Functions.testStatus(a)) {
                continue
            }
            switch (e) {
            case "common|area_conf":
                if (!this.model.isInst) {
                    this.model.parser.unpackTownConfObject(a["area_conf"]);
                    this.view.buildAll()
                }
                break;
            case "instance|conf":
                if (this.model.isInst) {
                    this.model.parser.unpackTownConfObject(this.model.parser.instanceToLocation(a, t.server_time));
                    this.view.buildAll()
                }
                break;
            case "common|event_conf":
                this.model.parser.unpackEventConfObject(a["event_conf"]);
                this.view.buildEvent();
                break;
            case "common|resurrection_modes":
                this.model.parseResurrectData(a["buttons"]);
                this.view.buildResurect();
                break;
            case "fight|count":
                this.model.NUM_BIG_FIGHT = a.fight_count;
                this.view.buildFight();
                break;
            case "front|conf":
                this.model.parseFronts(t);
                this.view.updateFronts();
                break;
            case "front|locations":
                this.view.mapSide.miniMap.swfObject(t);
                break;
            case "user|view":
                this.model.USER_GHOST = a.dead;
                break;
            case "magic_mirror|end_time":
                this.model.magicMirrorEndTime = a.magicMirrorEndTime;
                this.view.updateMagicMirror();
                break;
            case "common|action_complete":
                this.model.inWaitingAnswer = false;
                break
            }
        }
    }
}
;
canvas.app.location.Main.prototype.sendData = function(t, e) {
    canvas.app.location.log("swf_transfer:sendData " + t + " " + e);
    if (typeof swfTransfer != "undefined")
        swfTransfer("game", t, e)
}
;
canvas.app.location.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.location.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.location.Main.prototype.windowOpenHandler = function(t) {
    this.view.locSide.location_cont.filters = [canvas.Functions.getGreyScale()]
}
;
canvas.app.location.Main.prototype.windowCloseHandler = function(t) {
    switch (this.windowsManager.currentWindow) {
    case this.view.resurrectWindow:
        this.view.resurrectWindow = null;
        break;
    default:
        if (!canvas.app.location.model.USER_GHOST)
            this.view.locSide.location_cont.filters = []
    }
}
;
canvas.app.location.Main.prototype.timerHandler = function() {
    if (this.model.fronts.frontsPanelEnabled) {
        this.view.frontsPanel.updateTimer()
    }
    if (this.model.fronts.frontsEnabled) {
        this.view.frontsIcon.updateTimer()
    }
    if (this.view.campaignInfo && this.view.campaignInfo.data) {
        if (this.view.campaignInfo.data.finishTime > this.model.serverTime.getTime()) {
            this.view.campaignInfo.updateTime()
        } else {
            this.view.campaignInfo.destroy();
            this.view.campaignInfo = null
        }
    }
    if (this.view.popupWheelFortune) {
        if (this.view.popupWheelFortune.parent) {
            this.view.popupWheelFortune.updateTime()
        } else {
            this.view.popupWheelFortune = null
        }
    }
}
;
canvas.app.location.Main.prototype.timer60Handler = function() {
    this.loadFrontsData()
}
;
canvas.app.location.Main.prototype.loadFrontsData = function(t, e) {
    if (t == undefined)
        t = "conf";
    if (e == undefined)
        e = "";
    this.model.frontsAction = t;
    if (!this.model.fronts.frontsEnabled) {
        this.view.updateFronts();
        return
    }
    switch (t) {
    case canvas.app.location.Const.ACTION_CONF:
        this.model.resetFrontsCooldown();
        front_conf();
        break;
    case canvas.app.location.Const.ACTION_FIGHT_JOIN:
        confirm_front(e);
        break;
    case canvas.app.location.Const.ACTION_FIGHT_START:
        front_fight_start();
        break
    }
}
;
canvas.app.location.Main.prototype.joinFrontsBattle = function(t) {
    this.loadFrontsData(canvas.app.location.Const.ACTION_FIGHT_JOIN, t)
}
;
canvas.app.location.Main.prototype.startFrontsBattle = function(t) {
    this.loadFrontsData(canvas.app.location.Const.ACTION_FIGHT_START)
}
;
canvas.app.location.Model = function(t) {
    this.par = t;
    this.serverTime = new canvas.utils.ServerTime(parseInt(t["current_time"]));
    this.parser = new canvas.app.location.Parser;
    this.finder = new canvas.app.location.Finder;
    this.RACE_HUM = "hum";
    this.RACE_MAG = "mag";
    this.firstResize = true;
    this.CfgArea = t.area_conf_json != undefined ? JSON.parse(t.area_conf_json) : t.instance_conf != undefined ? this.parser.instanceToLocation(JSON.parse(t.instance_conf), t.server_time) : {};
    this.isInst = t.instance_conf != undefined;
    this.CfgEvent = t.event_conf_json != undefined ? JSON.parse(t.event_conf_json) : {};
    this.CfgFight = t.fight_count;
    this.CfgNav = t.CfgLink != undefined ? t.CfgLink : "images/locale/ru/compass_conf.xml";
    this.CasinoLink = t.casino_link != undefined ? t.casino_link : "";
    this.mRace = t.race != undefined ? t.race == 1 ? this.RACE_HUM : this.RACE_MAG : this.RACE_HUM;
    this.noUserValue = t["no_user_value"] == "1";
    this.FinishLocation = "";
    this.FinishType = "";
    this.FlagLocation = "";
    this.TRANSITION_POSSIBLE = false;
    this.WITH_MAP = true;
    this.IsBold = t.nobold != undefined ? t.nobold == 1 ? false : true : true;
    this.USER_NUB = t.nub != undefined ? t.nub == 1 ? true : false : false;
    this.USER_GHOST = t.ghost != undefined ? t.ghost == 1 ? true : false : false;
    this.OBJ_NUB_LOC_ITEMS = {
        "human-city.swf": 5,
        "nubi_village.swf": 2,
        "magm-city.swf": 7,
        "nubi_village_mag.swf": 4
    };
    this.STRINGS_ARR = {};
    this.OBJ_WORLD = {
        locs: {},
        conf: {}
    };
    this.OBJ_TOWN = {};
    this.OBJ_EVENT = {
        tasks: {}
    };
    this.OBJ_LOCVERGE = {};
    this.NUM_LOCATIONS = 0;
    this.ARR_LOCATIONS = [];
    this.NUM_BIG_FIGHT = 0;
    this.MapCfgLink = t.MapCfgLink != undefined ? t.MapCfgLink : "images/locale/ru/world_conf.xml";
    this.MapUpdLink = t.MapUpdLink != undefined ? t.MapUpdLink : "images/swf/dod_world/my_flag.xml";
    this.MapNavLink = this.CfgNav;
    this.World1_Path = t.World1_Path != undefined ? t.World1_Path : "images/swf/world_res/world1/";
    this.World2_Path = t.World2_Path != undefined ? t.World2_Path : "images/swf/world_res/world2/";
    this.Areas_Path = t.Areas_Path != undefined ? t.Areas_Path : "images/swf/world_res/areas/";
    this.AreasXML_Path = t.AreasXML_Path != undefined ? t.AreasXML_Path : "images/locale/ru/world_xml/";
    this.MORNING_TIME = new Date(null,null,null,6,30);
    this.EVENING_TIME = new Date(null,null,null,20,30);
    this.MAIN_HIDDEN = "main_hidden";
    this.WITHOUT_FARM = "$WithoutFarm";
    this.MODE_AREA = "mode_area";
    this.MODE_NPC = "mode_npc";
    this.MODE_HOUSE = "mode_house";
    this.TYPE_AREA = "type_area";
    this.TYPE_NPC = "type_npc";
    this.TYPE_BOT = "type_bot";
    this.TYPE_ACTION = "type_action";
    this.TYPE_INSTATNS = "type_instance";
    this.MIN_STAGE_WIDTH = 831;
    this.MIN_STAGE_HEIGHT = 290;
    this.MAX_STAGE_WIDTH = 10600;
    this.MAX_STAGE_HEIGHT = 660;
    this.MAP_WIDTH = 300;
    this.MAP_HEIGHT = 610;
    this.S_TIME_TRANSITION = "S_TIME_TRANSITION";
    this.S_TRANSITION_POSSIBLE = "S_TRANSITION_POSSIBLE";
    this.S_ARE_YOU_ASSURED = "S_ARE_YOU_ASSURED";
    this.S_YES = "S_YES";
    this.S_CANCEL = "S_CANCEL";
    this.S_CONFIRMATION = "S_CONFIRMATION";
    this.S_LOCATIONS = "S_LOCATIONS";
    this.S_OBJECTS = "S_OBJECTS";
    this.S_NPCs = "S_NPCs";
    this.S_OPEN_MAP = "S_OPEN_MAP";
    this.S_CLOSE_MAP = "S_CLOSE_MAP";
    this.S_OPEN_LIST = "S_OPEN_LIST";
    this.S_CLOSE_LIST = "S_CLOSE_LIST";
    this.S_MAP = "S_MAP";
    this.S_ACTION_IN_PROCESS = "S_ACTION_IN_PROCESS";
    this.S_OPEN_WORLD_MAP = "S_OPEN_WORLD_MAP";
    this.S_REFRESH_MAP = "S_REFRESH_MAP";
    this.S_ZOOM_IN = "S_ZOOM_IN";
    this.S_ZOOM_OUT = "S_ZOOM_OUT";
    this.S_SHOW_EVENT = "S_SHOW_EVENT";
    this.S_GREAT_FIGHT = "S_GREAT_FIGHT";
    this.S_TO_YOU = "S_TO_YOU";
    this.S_TO_ALL = "S_TO_ALL";
    this.S_RESURECT = "S_RESURECT";
    this.S_RESURECT_WILL = "S_RESURECT_WILL";
    this.S_TO_BATTLE = "S_TO_BATTLE";
    this.S_CASINO = "S_CASINO";
    this.S_RESURRECT_MONEY = "S_RESURRECT_MONEY";
    this.S_RESURRECT_CAPITAL = "S_RESURRECT_CAPITAL";
    this.S_DONT_RESURRECT = "S_DONT_RESURRECT";
    this.S_MONTH_JAN = "S_MONTH_JAN";
    this.S_MONTH_FEB = "S_MONTH_FEB";
    this.S_MONTH_MAR = "S_MONTH_MAR";
    this.S_MONTH_APR = "S_MONTH_APR";
    this.S_MONTH_MAY = "S_MONTH_MAY";
    this.S_MONTH_JUN = "S_MONTH_JUN";
    this.S_MONTH_JUL = "S_MONTH_JUL";
    this.S_MONTH_AUG = "S_MONTH_AUG";
    this.S_MONTH_SEP = "S_MONTH_SEP";
    this.S_MONTH_OCT = "S_MONTH_OCT";
    this.S_MONTH_NOV = "S_MONTH_NOV";
    this.S_MONTH_DEC = "S_MONTH_DEC";
    this.blinkIds = [];
    this.tech_works_start = parseInt(t["tech_works_start"]) * 1e3;
    this.tech_current_time = parseInt(t["current_time"]) * 1e3;
    this.tech_works_stop = parseInt(t["tech_works_stop"]) * 1e3;
    this.tech_works_name = t["tech_works_name"];
    this.tech_works_description = t["tech_works_description"];
    this.info_start = parseInt(t["info_start"]) * 1e3;
    this.info_current_time = parseInt(t["current_time"]) * 1e3;
    this.info_stop = parseInt(t["info_stop"]) * 1e3;
    this.info_name = t["info_name"];
    this.info_description = t["info_description"];
    this.serverTimeZoneOffset = t.time_zone == undefined ? 240 : parseInt(t.time_zone);
    this.NPCEvents = [];
    this.ww = 0;
    this.hh = 0;
    this.diceGameEnabled = t.dice_game_enabled;
    this.translatePath = "";
    this.frontsURL = t.frontsURL != undefined ? t.frontsURL : "";
    this.fronts = new canvas.data.location.DFronts;
    this.activityURL = t.activity_url;
    this.castPeriodFinish = 0;
    this.resurrectData = null;
    this.magicMirrorEndTime = t.magicMirrorEndTime == undefined ? 0 : parseInt(t.magicMirrorEndTime);
    this.actionConfirms = true;
    this.campaignData = null;
    this.transitionLnk = "";
    this.waitRefresh = false;
    this.inWaitingAnswer = false;
    this.reqTime = 0;
    this.m_awardUrl = t.bannerurl;
    this.award_msg = t.bannermsg;
    this.brilliant_msg = t.br_msg;
    this.brilliant_link = t.br_link;
    this.frontsAction = "";
    this.canvasMinigamesFlag = parseInt(t.canvasMinigamesFlag) > 0;
    this.manorAutoTurn = false;
    this.wfEnabled = t.wheel_fortune == "1";
    this.wfUrl = t.wf_url;
    this.wfMsg = t.wf_msg;
    this.wfExpireTime = t.wf_expire_time;
    var e;
    var a;
    var i;
    var s;
    var n;
    if (t.blink != undefined) {
        a = t.blink.split("|");
        i = a.length;
        for (e = 0; e < i; e++) {
            s = parseInt(a[e]);
            if (this.blinkIds.indexOf(s) < 0)
                this.blinkIds.push(s)
        }
    }
    if (t.resurrect_buttons != undefined)
        this.parseResurrectData(JSON.parse(t.resurrect_buttons));
    if (this.ok(t.user_campaign)) {
        n = JSON.parse(t.user_campaign);
        this.campaignData = new canvas.data.location.DCampaign;
        this.campaignData.title = n.title;
        this.campaignData.picture = n.picture;
        this.campaignData.finishTime = n.time_expire;
        if (this.campaignData.finishTime <= this.serverTime.getTime())
            this.campaignData = null
    }
    var r;
    if (t.labels != undefined) {
        r = t.labels.split("|")
    } else {
        r = ["время до перехода", "переход возможен", "Подтверждение", "Вы уверены?", "да", "отмена", "локации", "объекты", "персонажи", "Открыть миникарту", "Закрыть миникарту", "Карта", "Выполняется действие", "Карта мира", "Обновить", "Уменьшить", "Увеличить", "великие битвы", "Вами", "Всего", "Воскреснуть", "Желаете воскреснуть?", "В бой!", "Однорукий бандит", "Здесь за", "В столице", "Не воскрешаться", "Января", "Февраля", "Марта", "Апреля", "Мая", "Июня", "Июля", "Августа", "Сентября", "Октября", "Ноября", "Декабря"]
    }
    this.STRINGS_ARR[this.S_TIME_TRANSITION] = r[0];
    this.STRINGS_ARR[this.S_TRANSITION_POSSIBLE] = r[1];
    this.STRINGS_ARR[this.S_CONFIRMATION] = r[2];
    this.STRINGS_ARR[this.S_ARE_YOU_ASSURED] = r[3];
    this.STRINGS_ARR[this.S_YES] = r[4];
    this.STRINGS_ARR[this.S_CANCEL] = r[5];
    this.STRINGS_ARR[this.S_LOCATIONS] = r[6];
    this.STRINGS_ARR[this.S_OBJECTS] = r[7];
    this.STRINGS_ARR[this.S_NPCs] = r[8];
    this.STRINGS_ARR[this.S_OPEN_MAP] = r[9];
    this.STRINGS_ARR[this.S_CLOSE_MAP] = r[10];
    this.STRINGS_ARR[this.S_MAP] = r[11];
    this.STRINGS_ARR[this.S_ACTION_IN_PROCESS] = r[12];
    this.STRINGS_ARR[this.S_OPEN_WORLD_MAP] = r[13];
    this.STRINGS_ARR[this.S_REFRESH_MAP] = r[14];
    this.STRINGS_ARR[this.S_ZOOM_OUT] = r[15];
    this.STRINGS_ARR[this.S_ZOOM_IN] = r[16];
    this.STRINGS_ARR[this.S_GREAT_FIGHT] = r[17];
    this.STRINGS_ARR[this.S_TO_YOU] = r[18] != undefined ? r[18] : "Вами";
    this.STRINGS_ARR[this.S_TO_ALL] = r[19] != undefined ? r[19] : "Всего";
    this.STRINGS_ARR[this.S_RESURECT] = r[20] != undefined ? r[20] : "Воскреснуть";
    this.STRINGS_ARR[this.S_RESURECT_WILL] = r[21] != undefined ? r[21] : "Желаете воскреснуть?";
    this.STRINGS_ARR[this.S_TO_BATTLE] = r[22] != undefined ? r[22] : "В бой!";
    this.STRINGS_ARR[this.S_CASINO] = r[23] != undefined ? r[23] : "Однорукий бандит";
    this.STRINGS_ARR[this.S_RESURRECT_MONEY] = r[24] != undefined ? r[24] : "Здесь за";
    this.STRINGS_ARR[this.S_RESURRECT_CAPITAL] = r[25] != undefined ? r[25] : "В столице";
    this.STRINGS_ARR[this.S_DONT_RESURRECT] = r[26] != undefined ? r[26] : "Не воскрешаться";
    this.STRINGS_ARR[this.S_MONTH_JAN] = r[27] != undefined ? r[27] : "Января";
    this.STRINGS_ARR[this.S_MONTH_FEB] = r[28] != undefined ? r[28] : "Февраля";
    this.STRINGS_ARR[this.S_MONTH_MAR] = r[29] != undefined ? r[29] : "Марта";
    this.STRINGS_ARR[this.S_MONTH_APR] = r[30] != undefined ? r[30] : "Апреля";
    this.STRINGS_ARR[this.S_MONTH_MAY] = r[31] != undefined ? r[31] : "Мая";
    this.STRINGS_ARR[this.S_MONTH_JUN] = r[32] != undefined ? r[32] : "Июня";
    this.STRINGS_ARR[this.S_MONTH_JUL] = r[33] != undefined ? r[33] : "Июля";
    this.STRINGS_ARR[this.S_MONTH_AUG] = r[34] != undefined ? r[34] : "Августа";
    this.STRINGS_ARR[this.S_MONTH_SEP] = r[35] != undefined ? r[35] : "Сентября";
    this.STRINGS_ARR[this.S_MONTH_OCT] = r[36] != undefined ? r[36] : "Октября";
    this.STRINGS_ARR[this.S_MONTH_NOV] = r[37] != undefined ? r[37] : "Ноября";
    this.STRINGS_ARR[this.S_MONTH_DEC] = r[38] != undefined ? r[38] : "Декабря";
    this.months = [this.STRINGS_ARR[this.S_MONTH_JAN], this.STRINGS_ARR[this.S_MONTH_FEB], this.STRINGS_ARR[this.S_MONTH_MAR], this.STRINGS_ARR[this.S_MONTH_APR], this.STRINGS_ARR[this.S_MONTH_MAY], this.STRINGS_ARR[this.S_MONTH_JUN], this.STRINGS_ARR[this.S_MONTH_JUL], this.STRINGS_ARR[this.S_MONTH_AUG], this.STRINGS_ARR[this.S_MONTH_SEP], this.STRINGS_ARR[this.S_MONTH_OCT], this.STRINGS_ARR[this.S_MONTH_NOV], this.STRINGS_ARR[this.S_MONTH_DEC]];
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.LOCATION)
}
;
canvas.app.location.Model.prototype.init = function() {
    this.parser.unpackTownConfObject(this.CfgArea);
    this.parser.unpackEventConfObject(this.CfgEvent);
    this.NUM_BIG_FIGHT = parseInt(this.CfgFight);
    this.parser.unpackNavConf(canvas.ResourceLoader.get("navigate").data)
}
;
canvas.app.location.Model.prototype.getCoordinates = function() {
    var t = null;
    var e = canvas.Functions.getSessTarget();
    t = e.target;
    this.autoPenalty = e.autoPenalty;
    if (t) {
        var a = t.split("|");
        this.FinishLocation = a[0];
        this.FinishType = a[1];
        if (this.FinishType == null) {
            this.FinishType = "location"
        }
    } else {
        this.FinishLocation = t;
        this.FinishType = null
    }
    if (this.FlagLocation == this.FinishLocation && this.FinishType == "location") {
        if (e.manor) {
            this.manorAutoEnter = true
        } else {
            this.finishSessTarget()
        }
    }
}
;
canvas.app.location.Model.prototype.finishSessTarget = function() {
    canvas.Functions.deleteSessTarget();
    this.FinishLocation = null
}
;
canvas.app.location.Model.prototype.parseFronts = function(t) {
    var e = new Date;
    var a;
    var i;
    var s;
    var n;
    var r;
    if (!t) {
        this.fronts.currentLocationData = new canvas.data.location.DFrontsLoc;
        this.fronts.currentLocationData.owner = 1;
        this.fronts.currentLocationData.status = 2;
        this.fronts.currentLocationData.cooldown = e.getTime() + 36e5;
        this.fronts.currentLocationData.cooldownStart = e.getTime();
        this.fronts.frontsEnabled = true;
        this.fronts.frontsPanelEnabled = true;
        this.fronts.frontTitle = "Front title";
        this.fronts.humLocs = 10;
        this.fronts.locationsData = [new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc];
        this.fronts.magLocs = 60
    } else {
        a = t["front|conf"];
        i = t["state"];
        this.fronts.frontTitle = a.frontTitle;
        this.fronts.humLocs = a.humLocs;
        this.fronts.magLocs = a.magLocs;
        this.fronts.locationsData = new Array;
        for (n in a.locationsData) {
            s = a.locationsData[n];
            r = new canvas.data.location.DFrontsLoc;
            r.id = n;
            if (s.image != "")
                r.image = s.image;
            r.title = s.title;
            r.status = s.status;
            r.owner = this.parseRace(s.owner);
            r.description = s.description;
            r.cooldown = e.getTime() + (s.nextEvent <= 0 ? 10 : s.nextEvent) * 1e3;
            r.cooldownStart = e.getTime();
            r.fightAvail = parseInt(s.fightAvail) == 1;
            r.fightID = s.fight_id;
            r.weight = s.weight;
            this.fronts.locationsData.push(r);
            if (a.currentLocationId == n)
                this.fronts.currentLocationData = r;
            if (a.availableLocationId == n)
                this.fronts.availableLocationData = r
        }
        this.fronts.locationsData.sort(function(t, e) {
            return t.weight - e.weight
        })
    }
}
;
canvas.app.location.Model.prototype.resetFrontsCooldown = function() {
    var t = this.fronts.locationsData.length;
    var e;
    for (var a = 0; a < t; a++) {
        e = this.fronts.locationsData[a];
        e.cooldownStart = Date.now();
        e.cooldown = e.cooldownStart + 7e4
    }
}
;
canvas.app.location.Model.prototype.parseRace = function(t) {
    return t > 1 ? -1 : t
}
;
canvas.app.location.Model.prototype.parseResurrectData = function(t) {
    this.resurrectData = null;
    var e;
    var a;
    for (var i in t) {
        e = t[i];
        if (!e.id)
            continue;
        if (this.resurrectData == null)
            this.resurrectData = new Array;
        a = new canvas.data.location.DResurrect;
        a.id = parseInt(e.id);
        a.title = e.title;
        a.enabled = e.state;
        a.error = e.error;
        a.picture = e.picture;
        this.resurrectData.push(a)
    }
}
;
canvas.app.location.Model.prototype.ok = function(t) {
    return t != undefined && t != null && t != "null" && t != "undefined"
}
;
canvas.app.location.Const = {
    ACTION_CONF: "conf",
    ACTION_FIGHT_START: "fight_start",
    ACTION_FIGHT_JOIN: "fight_join",
    BRILLIANT_IMAGE_PATH: "images/m_dmd.gif",
    POPUP_ZERO_LEVEL: "POPUP_ZERO_LEVEL",
    POPUP_ACTIVITY: "POPUP_ACTIVITY",
    POPUP_WHEEL: "POPUP_WHEEL",
    LOC_SMALL_WIDTH: 986,
    LOC_MID_WIDTH: 1986,
    LOC_SMALL_HEIGHT: 326,
    LOC_MID_HEIGHT: 600
};
canvas.app.location.Event = {
    ENTER_FRAME: "Location.ENTER_FRAME",
    HINT_ADD: "Location.HINT_ADD",
    HINT_REMOVE: "Location.HINT_REMOVE",
    POPUP_WIN_CLICK_OK: "Location.POPUP_WIN_CLICK_OK",
    POPUP_WIN_CLICK_CANCEL: "Location.POPUP_WIN_CLICK_CANCEL",
    ITEM_OVER: "Location.ITEM_OVER",
    ITEM_OUT: "Location.ITEM_OUT",
    ITEM_CLICK: "Location.ITEM_CLICK",
    ANIM_OVER: "Location.ANIM_OVER",
    ANIM_OUT: "Location.ANIM_OUT",
    ANIM_CLICK: "Location.ANIM_CLICK",
    MOVE_TO_ANIM: "Location.MOVE_TO_ANIM",
    WAY_OVER: "Location.WAY_OVER",
    WAY_OUT: "Location.WAY_OUT",
    WAY_CLICK: "Location.WAY_CLICK",
    ZOOM_IN: "Location.ZOOM_IN",
    ZOOM_OUT: "Location.ZOOM_OUT",
    REFRESH_MAP: "Location.REFRESH_MAP",
    TIMER_DONE: "Location.TIMER_DONE",
    COMPLETE: "Location.COMPLETE",
    UPDATE_NPC_EVENTS: "UPDATE_NPC_EVENTS",
    RESIZE: "Location.RESIZE",
    SNOWBALL_KILL: "Location.SNOWBALL_KILL",
    SNOWBALL_DRAW: "Location.SNOWBALL_DRAW",
    PROGRESS_CANCEL: "Location.PROGRESS_CANCEL",
    PROGRESS_DONE: "Location.PROGRESS_DONE",
    LOCATION_READY: "Location.LOCATION_READY",
    AUTO_TURN: "Location.AUTO_TURN"
};
canvas.app.location.View = function(t) {
    this._enableContent = true;
    Object.defineProperty(this, "enableContent", {
        get: function() {
            return this._enableContent
        },
        set: function(t) {
            this._enableContent = t;
            this.listSide.interactiveChildren = this.locSide.interactiveChildren = this.mapSide.interactiveChildren = t
        }
    });
    canvas.px.Container.call(this);
    var e = canvas.app.location.model;
    this.main = t;
    this.windowsContainer = t.windowsContainer;
    this.locsToRemove = [];
    this.popupWin = null;
    this.progressWin = null;
    this.skyAll = {};
    this.snow = null;
    this.x_start = 200;
    this.y_start = 20;
    this.clocks = new canvas.app.location.view.elements.Clocks;
    this.clocks.y = 30;
    this.clocks.visible = false;
    this.popupsContainer = new canvas.app.location.view.popups.Popups(canvas.app.location.Event);
    this.frontsIcon = new canvas.app.location.view.fronts.FrontsIcon(this);
    this.frontsPanel = new canvas.app.location.view.fronts.FrontsPanel(this);
    this.m_brContainer = new canvas.px.Container;
    this.popupsExtContainer = new canvas.px.Container;
    this.resurrectWindow = new canvas.app.location.view.ResurrectWindow;
    this.buildAll();
    this.buildResurect();
    this.m_awardTf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16705718,200,20,"center");
    this.m_awardCnt = new canvas.px.Graphics;
    if (e.award_msg) {
        this.x_start = 200;
        this.m_awardTf.text = e.award_msg;
        this.x_start = (this.locSide._width - (this.m_awardTf.textWidth + 20)) / 2 + 16;
        this.m_awardTf.position.set(8, 2);
        this.m_awardCnt.beginFill(1118481, .5);
        this.m_awardCnt.drawRoundedRect(0, 0, this.m_awardTf.width + 20, this.m_awardTf.height + 2, 10);
        this.m_awardCnt.addChild(this.m_awardTf);
        this.m_awardCnt.endFill();
        this.m_awardCnt.buttonMode = true;
        this.m_awardCnt.interactive = true;
        this.locSide.addChild(this.m_awardCnt);
        this.m_awardCnt.click = this.awardClick.bind(this)
    }
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frame, this);
    this.m_timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.blinkTimer = setInterval(this.blinkTimerHandler.bind(this), 2e3);
    this.m_brilliantTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,16705718,300,20,"left","top");
    this.m_brilliantTf.interactive = false;
    if (e.brilliant_msg != null) {
        this.unlinkBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_ico"));
        this.m_brilliantTf.text = e.brilliant_msg + " <img src='" + canvas.app.location.Const.BRILLIANT_IMAGE_PATH + "' yOffset='6'/>";
        this.x_start = (this.locSide._width - (this.m_brilliantTf.textWidth + 20)) / 2;
        this.m_brilliantTf.position.set(8, -3);
        this.unlinkBtn.position.set(this.m_brilliantTf.textWidth + 2, 3);
        this.m_brBg = new canvas.px.Graphics;
        this.m_brBg.beginFill(1118481, .5);
        this.m_brBg.drawRoundedRect(0, 0, this.m_brilliantTf.textWidth + 20, 18, 7);
        this.m_brContainer.addChildAt(this.m_brBg, 0);
        this.m_brBg.buttonMode = true;
        this.m_brBg.interactive = true;
        this.m_brContainer.addChild(this.m_brilliantTf);
        this.m_brContainer.addChild(this.unlinkBtn);
        this.m_brContainer.position.set(this.x_start, 19);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this)
    }
    if (e.par.time_bonus_online != undefined) {
        this.popupsContainer.init(canvas.app.location.Const.POPUP_ZERO_LEVEL, e.par)
    }
    if (this.popupsContainer.children.length < 1 && e.activityURL) {
        this.popupsContainer.init(canvas.app.location.Const.POPUP_ACTIVITY, e.activityURL)
    }
    if (e.campaignData) {
        this.campaignInfo = new canvas.app.location.view.elements.CampaignInfo;
        this.campaignInfo.data = e.campaignData;
        this.addChild(this.campaignInfo);
        this.campaignInfo.y = 28
    }
    if (this.popupsContainer.children.length < 1 && e.wfEnabled) {
        this.popupWheelFortune = this.popupsContainer.init(canvas.app.location.Const.POPUP_WHEEL, {
            message: e.wfMsg,
            expireTime: e.wfExpireTime,
            url: e.wfUrl
        })
    }
    if (e.localStorage.get("MapSide") == "1" && e.WITH_MAP) {
        this.miniMapBtnDownHandler()
    }
    this.frontsPanel.y = e.brilliant_msg || this.award_msg ? 40 : 20;
    this.checkGreatBattleConfirm();
    this.addListeners()
}
;
canvas.app.location.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.View.prototype.resize = function() {
    if (this.resizeStarted) {
        return
    }
    this.resizeStarted = true;
    var t = canvas.app.location.model;
    var e;
    this.get_ww();
    this.get_hh();
    this.locSide._width = this.ww - this.listSide._width - (this.mapSide.visible ? this.mapSide._width - 25 : 0) + 25;
    this.locSide._height = this.hh;
    this.locSide.x = this.mapSide.visible ? this.mapSide.x + this.mapSide._width - 25 : 0;
    this.mapSide._height = this.hh;
    this.listSide._height = this.hh;
    e = this.locSide.x + this.locSide._width;
    if (this.eventBtn)
        e = this.eventBtn.x = Math.round(this.locSide.x + this.locSide._width - this.eventBtn.width - 7);
    if (this.eventPanel && this.eventPanel.parent) {
        e = this.eventPanel.x = Math.round(this.locSide.x + this.locSide._width - this.eventPanel.width - 7)
    }
    if (this.clocks.visible) {
        e = this.clocks.x = Math.round(this.locSide.x + this.locSide._width - this.clocks.width - 25)
    }
    if (this.campaignInfo)
        this.campaignInfo.x = Math.round(e - this.campaignInfo.width - 20);
    this.listSide.x = this.locSide.x + this.locSide._width - 25;
    if (this.popupWin)
        this.popupWin.x = this.locSide.x + Math.round((this.locSide._width - this.popupWin.width) / 2);
    if (this.progressWin)
        this.progressWin.x = Math.round((this.locSide._width - this.progressWin.width) / 2);
    this.miniMapBtn.scale.x = this.mapSide.visible ? 1 : -1;
    this.miniMapBtn.position.set(this.mapSide.visible ? this.mapSide.width - 30 : 30, Math.round((this.hh - this.miniMapBtn.height) / 2));
    if (this.fightBtn)
        this.fightBtn.x = this.mapSide.visible ? this.mapSide._width - 16 : 8;
    this.x = Math.abs(Math.round((t.width - ((this.mapSide.visible ? this.mapSide._width - 25 : 0) + this.locSide._width + this.listSide._width - 25)) / 2));
    if (this.frontsIcon != null) {
        this.frontsIcon.position.set(this.locSide.x + 15 + (t.CasinoLink ? 90 : 0), this.locSide._height - 65)
    }
    if (this.frontsPanel) {
        this.frontsPanel.x = Math.round((this.locSide._width - this.frontsPanel.back.width) * .5) + (this.mapSide.visible ? this.mapSide._width : 0)
    }
    this.main.windowsManager.init(this.windowsContainer, this.ww - (this.mapSide.visible ? 480 : 210), this.hh, this);
    this.windowsContainer.x = this.x + this.locSide.x;
    this.main.windowsManager.resizeWindows();
    this.m_brContainer.x = this.locSide.x + Math.round((this.locSide._width - this.m_brContainer.width) * .5);
    this.popupsExtContainer.position.set(this.locSide.x + Math.round((this.locSide._width - this.popupsExtContainer.width) * .5), 19);
    if (this.m_awardCnt)
        this.m_awardCnt.position.set(Math.round((this.locSide._width - (this.m_awardTf.width + 20)) / 2), 15);
    this.popupsContainer.position.set((this.fightBtn ? 62 : 25) + (this.mapSide.visible ? this.mapSide._width - 25 : 0), 28);
    this.resizeStarted = false
}
;
canvas.app.location.View.prototype.get_ww = function() {
    var t = canvas.app.location.model;
    this.ww = t.width;
    var e = t.OBJ_TOWN.bg_mid == "" ? this.listSide._width + canvas.app.location.Const.LOC_SMALL_WIDTH : this.listSide._width + canvas.app.location.Const.LOC_MID_WIDTH;
    if (this.ww < t.MIN_STAGE_WIDTH) {
        this.ww = t.MIN_STAGE_WIDTH
    } else if (this.ww > e) {
        this.ww = e
    }
    t.ww = this.ww
}
;
canvas.app.location.View.prototype.get_hh = function() {
    var t = canvas.app.location.model;
    var e;
    if (t.OBJ_TOWN.bg_mid != "" && this.ww - this.listSide._width + 25 > canvas.app.location.Const.LOC_SMALL_WIDTH) {
        e = canvas.app.location.Const.LOC_MID_HEIGHT
    } else {
        e = canvas.app.location.Const.LOC_SMALL_HEIGHT
    }
    if (e > t.height - 10) {
        e = t.height - 10
    }
    this.hh = t.hh = e
}
;
canvas.app.location.View.prototype.buildAll = function() {
    var t = canvas.app.location.model;
    if (this.popupWin) {
        if (this.popupWin.parent == this.windowsContainer)
            this.windowsContainer.removeChild(this.popupWin)
    }
    if (this.listSide) {
        if (this.listSide.parent)
            this.removeChild(this.listSide);
        this.listSide.destroy()
    }
    t.TRANSITION_POSSIBLE = false;
    t.FinishLocation = null;
    if (!this.mapSide) {
        this.mapSide = new canvas.app.location.view.MapSide;
        canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OVER, this.mapSide, this.wayOverHandler, this);
        canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OUT, this.mapSide, this.wayOutHandler, this);
        canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_CLICK, this.mapSide, this.wayClickHandler, this);
        this.mapSide._width = t.MAP_WIDTH;
        this.mapSide.visible = false;
        this.mapSide.y = 6;
        this.addChild(this.mapSide)
    }
    this.listSide = new canvas.app.location.view.ListSide;
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_CLICK, null, this.pointClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OVER, null, this.itemOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OUT, null, this.itemOutHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.TIMER_DONE, null, this.timerDoneHandler, this);
    this.listSide.timerStart();
    this.listSide.y = 6;
    this.addChild(this.listSide);
    if (this.locSide) {
        if (this.locSide.areaID != t.OBJ_TOWN.area_id) {
            this.locsToRemove.push(this.locSide);
            this.interactiveChildren = false;
            if (t.OBJ_WORLD.locs[t.OBJ_TOWN.area_id] != null) {
                this.locSide = t.OBJ_WORLD.locs[t.OBJ_TOWN.area_id];
                this.locSide.resetHorizontalScrollPos();
                this.mapSide.updateFlag();
                this.removeLocs()
            } else {
                this.locSide = new canvas.app.location.view.LocSide;
                this.setLocSideListeners()
            }
            this.addChild(this.locSide)
        }
    } else {
        this.locSide = new canvas.app.location.view.LocSide;
        this.setLocSideListeners();
        this.addChild(this.locSide)
    }
    this.locSide.start();
    if (!this.skyAll[t.OBJ_TOWN.sky_type])
        this.skyAll[t.OBJ_TOWN.sky_type] = new canvas.app.location.view.elements.Sky(t.OBJ_TOWN.sky_type);
    for (var e in this.skyAll) {
        if (e == t.OBJ_TOWN.sky_type) {
            this.skyAll[t.OBJ_TOWN.sky_type].start()
        } else {
            this.skyAll[t.OBJ_TOWN.sky_type].stop()
        }
    }
    this.locSide.setSky(this.skyAll[t.OBJ_TOWN.sky_type]);
    this.locSide.y = 6;
    if (t.OBJ_TOWN.weather == "1") {
        if (!this.snow) {
            this.snow = new canvas.app.location.view.elements.Snow;
            this.snow.init(2e3, t.MAX_STAGE_HEIGHT)
        }
        this.locSide.setSnow(this.snow)
    }
    if (!this.miniMapBtn) {
        this.miniMapBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "mini_map_btn"));
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.miniMapBtn, this.miniMapBtnDownHandler, this);
        this.miniMapBtn.y = Math.round((t.MIN_STAGE_HEIGHT - this.miniMapBtn.height) / 2);
        var a = new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_OPEN_MAP]);
        this.miniMapHint = new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_OPEN_MAP]);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: this.miniMapBtn,
            params: new canvas.utils.HintParams(this.miniMapHint)
        });
        this.addChild(this.miniMapBtn)
    }
    this.miniMapBtn.interactiveChildren = t.WITH_MAP;
    this.miniMapBtn.filters = t.WITH_MAP ? [] : [canvas.Functions.getGreyScale(.5)];
    if (this.miniMapBtn.parent) {
        if (this.getChildIndex(this.listSide) > this.getChildIndex(this.miniMapBtn))
            this.swapChildren(this.miniMapBtn, this.listSide);
        if (this.getChildIndex(this.locSide) > this.getChildIndex(this.miniMapBtn))
            this.swapChildren(this.miniMapBtn, this.locSide)
    }
    if (this.getChildIndex(this.listSide) > this.getChildIndex(this.locSide))
        this.swapChildren(this.locSide, this.listSide);
    this.buildEvent();
    this.buildFight();
    t.inWaitingAnswer = false;
    for (var i in t.OBJ_TOWN.items) {
        var s = t.OBJ_TOWN.items[i].dtime;
        var n = t.OBJ_TOWN.items[i].ltime;
        var r = t.OBJ_TOWN.curtime;
        var o = t.OBJ_TOWN.items[i].href;
        var l = parseInt(t.OBJ_TOWN.items[i].refresh) == 1 ? true : false;
        if (s != 0 && n != 0) {
            t.transitionLnk = o;
            t.waitRefresh = l;
            this.startFarming(r * 1e3, s * 1e3, (s - n) * 1e3, t.STRINGS_ARR[t.S_ACTION_IN_PROCESS])
        }
    }
    this.addChild(this.m_brContainer);
    this.addChild(this.popupsExtContainer);
    this.addChild(this.popupsContainer);
    this.addChild(this.clocks);
    if (this.campaignInfo)
        this.addChild(this.campaignInfo);
    if (t.fronts.frontsEnabled)
        this.main.loadFrontsData();
    this.resize();
    this.main.hintManager.hide()
}
;
canvas.app.location.View.prototype.buildEvent = function() {
    var t = canvas.app.location.model;
    if (this.eventBtn) {
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.eventBtn, this.refreshEventHandler, this);
        this.eventBtn.destroy();
        this.eventBtn = null
    }
    if (this.eventPanel) {
        if (this.eventPanel.parent)
            this.removeChild(this.eventPanel)
    }
    if (t.OBJ_EVENT.id > 0) {
        this.eventPanel = new canvas.app.location.view.elements.EventPanel;
        this.eventPanel.y = 20;
        this.addChild(this.eventPanel);
        this.eventBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "event_btn"));
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.eventBtn, this.refreshEventHandler, this);
        this.eventBtn.y = 12;
        this.addChild(this.eventBtn);
        this.resize()
    }
}
;
canvas.app.location.View.prototype.buildFight = function() {
    var t = canvas.app.location.model;
    if (this.fightBtn) {
        this.fightBtn.destroy();
        this.fightBtn = null
    }
    if (t.NUM_BIG_FIGHT > 0) {
        this.fightBtn = new canvas.app.location.view.elements.FightButton(t.NUM_BIG_FIGHT);
        this.fightBtn.y = 12;
        this.addChild(this.fightBtn)
    }
}
;
canvas.app.location.View.prototype.buildResurect = function() {
    var t = canvas.app.location.model;
    if (this.main.windowsManager.windowIsActive(this.resurrectWindow)) {
        this.windowsManager.closeWindow(this.resurrectWindow);
        this.locSide.grayscaleLoc(false)
    }
    if (t.USER_GHOST) {
        this.locSide.grayscaleLoc(true);
        if (t.resurrectData && this.resurrectWindow) {
            this.resurrectWindow.itemsCount = t.resurrectData.length;
            this.resurrectWindow.update();
            this.main.windowsManager.openWindow(this.resurrectWindow, false, false)
        }
    }
}
;
canvas.app.location.View.prototype.refreshEventHandler = function() {
    refreshEvent(canvas.app.location.model.OBJ_EVENT.id)
}
;
canvas.app.location.View.prototype.wayOverHandler = function(t) {
    if (t.params.areaWaypoints) {
        this.findLocation(t.params.areaWaypoints)
    } else {
        this.findLocation(t.params.arr)
    }
}
;
canvas.app.location.View.prototype.wayOutHandler = function(t) {
    this.itemOutHandler(t)
}
;
canvas.app.location.View.prototype.wayClickHandler = function(t) {
    var e = canvas.app.location.model;
    if (!e.TRANSITION_POSSIBLE)
        return;
    if (t.params.areaWaypoints) {
        this.findClickButton(t.params.areaWaypoints)
    } else {
        this.findClickButton(t.params.arr)
    }
}
;
canvas.app.location.View.prototype.startFarming = function(t, e, a, i) {
    var s = canvas.app.location.model;
    if (this.progressWin) {
        this.progressWin.destroy();
        this.progressWin = null
    }
    if (this.popupWin && this.popupWin.parent) {
        this.windowsContainer.removeChild(this.popupWin)
    }
    this.progressWin = new canvas.app.location.view.ProgressWin(t,e,a,i);
    canvas.EventManager.addEventListener(canvas.app.location.Event.PROGRESS_CANCEL, null, this.cancelFarming, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.PROGRESS_DONE, null, this.doneFarming, this);
    this.progressWin.position.set(Math.round((this.locSide._width - this.progressWin.width) / 2), Math.round((this.locSide._height - this.progressWin.height) / 2));
    this.windowsContainer.addChild(this.progressWin);
    if (s.localStorage.get("MapSide") == "1") {
        this.miniMapBtnDownHandler()
    }
    this.miniMapBtn.enabled = false;
    this.enableContent = this.listSide.active = this.locSide.active = false;
    this.progressWin.startProgress()
}
;
canvas.app.location.View.prototype.doneFarming = function() {
    this.closeFarming();
    this.navigateToUrl();
    this.resize()
}
;
canvas.app.location.View.prototype.cancelFarming = function() {
    this.closeFarming();
    stopAction();
    canvas.app.location.model.inWaitingAnswer = true
}
;
canvas.app.location.View.prototype.closeFarming = function() {
    if (this.progressWin) {
        this.progressWin.destroy();
        this.progressWin = null
    }
    this.enableContent = this.locSide.active = true;
    if (canvas.app.location.model.TRANSITION_POSSIBLE)
        this.listSide.active = true;
    this.miniMapBtn.enabled = true
}
;
canvas.app.location.View.prototype.itemOverHandler = function(t) {
    this.locSide.showOverOnAnim = t.params
}
;
canvas.app.location.View.prototype.itemOutHandler = function(t) {
    this.locSide.showOutOnAnim = t.params
}
;
canvas.app.location.View.prototype.timerDoneHandler = function() {
    if (this.progressWin && this.progressWin.parent == this.windowsContainer) {
        return
    }
    this.listSide.active = true
}
;
canvas.app.location.View.prototype.updateFronts = function() {
    var t = canvas.app.location.model;
    if (t.fronts.frontsEnabled) {
        this.addChild(this.frontsIcon);
        this.frontsIcon.update()
    } else if (this.frontsIcon.parent == this)
        this.removeChild(this.frontsIcon);
    if (t.fronts.frontsPanelEnabled) {
        this.addChild(this.frontsPanel);
        this.frontsPanel.update()
    } else if (this.frontsPanel.parent == this)
        this.removeChild(this.frontsPanel)
}
;
canvas.app.location.View.prototype.setLocSideListeners = function() {
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_CLICK, null, this.pointClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_OVER, null, this.animOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_OUT, null, this.animOutHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.COMPLETE, null, this.completeLocHandler, this)
}
;
canvas.app.location.View.prototype.animOverHandler = function(t) {
    this.listSide.showOverOnItem = t.params
}
;
canvas.app.location.View.prototype.animOutHandler = function(t) {
    this.listSide.showOverOnItem = null
}
;
canvas.app.location.View.prototype.completeLocHandler = function(t) {
    var e = canvas.app.location.model;
    this.mapSide.updateFlag();
    e.OBJ_WORLD.locs[e.OBJ_TOWN.area_id] = t.params;
    this.removeLocs()
}
;
canvas.app.location.View.prototype.removeLocs = function() {
    var t = this.locsToRemove.length;
    if (t > 0) {
        for (var e = 0; e < t; e++) {
            this.removeIfExist(this.locsToRemove[e]);
            this.locsToRemove[e].stop()
        }
        this.locsToRemove = []
    }
    this.interactiveChildren = true
}
;
canvas.app.location.View.prototype.pointClickHandler = function(t) {
    var e = "";
    var a, i;
    var s = null;
    var n = canvas.app.location.model;
    var r = n.blinkIds.indexOf(t.params.id);
    if (r >= 0) {
        n.blinkIds.splice(r, 1);
        this.listSide.list.update()
    }
    for (var o in n.OBJ_TOWN.items) {
        a = n.OBJ_TOWN.items[o].id;
        i = n.OBJ_TOWN.items[o].href;
        e = n.OBJ_TOWN.items[o].type;
        if (a == t.params.id && (!t.params.href || i == t.params.href)) {
            s = n.OBJ_TOWN.items[o];
            break
        }
    }
    if (s) {
        if (n.TRANSITION_POSSIBLE || s.mode == n.MODE_NPC || s.hide) {
            this.clickFunction(s, e)
        }
    } else {
        this.clickFunction(s, "")
    }
}
;
canvas.app.location.View.prototype.clickFunction = function(t, e) {
    if (!t)
        return;
    if (this.locSide.scroll && this.locSide.scroll.wasDragged)
        return;
    var a = canvas.app.location.model;
    if (a.inWaitingAnswer)
        return;
    a.transitionLnk = t.href;
    a.waitRefresh = parseInt(t.refresh);
    if (t.confirm && a.actionConfirms) {
        if (this.popupWin == null || !this.popupWin.parent) {
            if (this.popupWin) {
                canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL);
                canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK);
                this.popupWin.destroy()
            }
            this.popupWin = new canvas.app.location.view.PopupWin(t.confirm_text,null,null,e,canvas.Translator.getText(2026),canvas.Translator.getText(2027));
            canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this.popupWin, this.popupWinClickCancelHandler, this);
            canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this.popupWin, this.popupWinClickOkHandler, this);
            this.popupWin.position.set(this.locSide.x + Math.round((this.locSide.width - this.popupWin.width) / 2), Math.round((this.locSide.height - this.popupWin.height) / 2));
            this.windowsContainer.addChild(this.popupWin);
            this.enableContent = this.listSide.active = this.locSide.active = this.mapSide.active = false
        }
    } else {
        this.navigateToUrl()
    }
}
;
canvas.app.location.View.prototype.popupWinClickOkHandler = function() {
    var t = canvas.app.location.model;
    this.popupWinClickCancelHandler();
    this.navigateToUrl();
    if (this.popupWin.checkBox)
        t.actionConfirms = !this.popupWin.checkBox.checked
}
;
canvas.app.location.View.prototype.navigateToUrl = function() {
    var t = Date.now();
    var e = canvas.app.location.model;
    if (t - e.reqTime > 1e4 || !e.inWaitingAnswer) {
        var a = e.waitRefresh ? e.MAIN_HIDDEN : "_self";
        if (!e.waitRefresh) {
            canvas.Functions.navigateToURL(e.transitionLnk, a)
        } else {
            (new canvas.utils.URLRequest).load(e.transitionLnk)
        }
        this.main.hintManager.hide();
        e.reqTime = Date.now();
        e.inWaitingAnswer = true
    }
}
;
canvas.app.location.View.prototype.miniMapBtnDownHandler = function() {
    var t = canvas.app.location.model;
    this.mapSide.isVisible = !this.mapSide.visible;
    this.mapSide.build();
    this.miniMapHint.update(this.mapSide.visible ? t.STRINGS_ARR[t.S_CLOSE_MAP] : t.STRINGS_ARR[t.S_OPEN_MAP]);
    this.resize()
}
;
canvas.app.location.View.prototype.awardClick = function() {
    var t = canvas.app.location.model;
    if (t.m_awardUrl) {
        canvas.Functions.navigateToURL(t.m_awardUrl, "_blank")
    }
}
;
canvas.app.location.View.prototype.frame = function() {
    var t = canvas.app.location.model
}
;
canvas.app.location.View.prototype.timerHandler = function() {
    var t = canvas.app.location.model;
    var e = t.castPeriodFinish - Math.round(Date.now() * .001);
    var a = e > 0;
    var i = a != this.clocks.visible;
    this.clocks.visible = a;
    if (this.clocks.visible)
        this.clocks.update(e);
    if (i)
        this.resize()
}
;
canvas.app.location.View.prototype.blinkTimerHandler = function() {
    var t = canvas.app.location.model;
    var e = null;
    try {
        e = getCookie("sess_location_blink")
    } catch (t) {}
    if (e == null || e == "")
        return;
    t.blinkIds = new Array;
    var a = e.split("|");
    for (var i = 0; i < a.length; i++) {
        if (t.blinkIds.indexOf(parseInt(a[i])) < 0)
            t.blinkIds.push(parseInt(a[i]))
    }
    this.locSide.location.update();
    this.listSide.list.update();
    deleteCookie("sess_location_blink")
}
;
canvas.app.location.View.prototype.onCloseBrillContainer = function() {
    this.removeChild(this.m_brContainer)
}
;
canvas.app.location.View.prototype.checkGreatBattleConfirm = function() {
    var t = canvas.app.location.model;
    if (t.par["fight_confirm"] == "1") {
        var e = t.par["fight_confirm_msg"];
        var a = t.par["fight_url"];
        if (this.popupWin) {
            canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL);
            canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK);
            this.popupWin.destroy()
        }
        this.popupWin = new canvas.app.location.view.PopupWin(null,e,t.STRINGS_ARR[t.S_TO_BATTLE],"");
        canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this.popupWin, this.popupWinClickOk2Handler, this);
        canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this.popupWin, this.popupWinClickCancelHandler, this);
        this.popupWin.position.set(this.locSide.x + Math.round((this.locSide._width - this.popupWin.width) / 2), Math.round((this.locSide._height - this.popupWin.height) / 2));
        this.windowsContainer.addChild(this.popupWin);
        this.enableContent = this.listSide.active = this.locSide.active = this.mapSide.active = false
    }
}
;
canvas.app.location.View.prototype.popupWinClickOk2Handler = function() {
    var t = canvas.app.location.model;
    this.popupWinClickCancelHandler();
    canvas.Functions.navigateToURL(t.par["fight_url"], "_self")
}
;
canvas.app.location.View.prototype.popupWinClickCancelHandler = function() {
    var t = canvas.app.location.model;
    if (this.popupWin.parent) {
        this.windowsContainer.removeChild(this.popupWin);
        this.enableContent = this.locSide.active = this.listSide.partActive = this.mapSide.active = true;
        if (t.TRANSITION_POSSIBLE)
            this.listSide.active = true
    }
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL);
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK)
}
;
canvas.app.location.View.prototype.addListeners = function() {
    if (this.m_brBg) {
        this.m_brBg.click = this.onBrilliantBgClick.bind(this)
    }
}
;
canvas.app.location.View.prototype.removeListeners = function() {
    if (this.m_brBg) {
        this.m_brBg.click = null
    }
}
;
canvas.app.location.View.prototype.onBrilliantBgClick = function() {
    var t = canvas.app.location.model;
    canvas.Functions.navigateToURL(t.brilliant_link, "_blank")
}
;
canvas.app.location.View.prototype.blinkButton = function(t, e) {
    var a = canvas.app.location.model;
    if (e) {
        if (a.blinkIds.indexOf(t) < 0)
            a.blinkIds.push(t)
    } else {
        if (a.blinkIds.indexOf(t) >= 0)
            a.blinkIds.splice(a.blinkIds.indexOf(t), 1)
    }
    this.locSide.location.update();
    this.listSide.list.update()
}
;
canvas.app.location.View.prototype.updateMagicMirror = function() {
    var t = canvas.app.location.model;
    this.locSide.magicMirrorButton.visible = t.magicMirrorEndTime > t.serverTime.getTime()
}
;
canvas.app.location.View.prototype.findLocation = function(t) {
    var e = canvas.app.location.model;
    var a;
    var i = false;
    for (var s = 0; s < t.length; s++) {
        if (i)
            return;
        for (var n in e.OBJ_TOWN.items) {
            a = e.OBJ_TOWN.items[n].anim;
            if (a != null) {
                if (parseInt(t[s]) == parseInt(e.OBJ_TOWN.items[n].loc_id)) {
                    a.light = true;
                    i = true;
                    this.locSide.moveToAnim = a
                } else {
                    a.light = false
                }
            }
        }
    }
}
;
canvas.app.location.View.prototype.findClickButton = function(t) {
    var e = canvas.app.location.model;
    var a = null;
    var i = null;
    var s = "";
    t: for (var n = 0; n < t.length; n++) {
        for (var r in e.OBJ_TOWN.items) {
            a = e.OBJ_TOWN.items[r].btn;
            s = e.OBJ_TOWN.items[r].type;
            if (a != null) {
                if (parseInt(t[n]) == e.OBJ_TOWN.items[r].loc_id) {
                    i = e.OBJ_TOWN.items[r];
                    break t
                }
            }
            a = null
        }
    }
    if (i != null) {
        this.clickFunction(i, s)
    }
}
;
canvas.app.location.View.prototype.showConfirm = function(t, e, a, i, s, n, r) {
    if (!this.confirmWindow) {
        this.confirmWindow = new canvas.app.view.window.ConfirmWindowOld
    }
    this.confirmWindow.update(t, e, a, i, s, n, r);
    this.main.windowsManager.openWindow(this.confirmWindow);
    this.main.hintManager.hide()
}
;
canvas.app.location.View.prototype.showEnterBattleConfirm = function(t, e, a) {
    var i = new Date(a);
    this.showConfirm(canvas.Translator.getText(714), canvas.Translator.getText(715) + " <b><font color='#990000'>" + t + "</font></b>?<br/><br/>" + canvas.Translator.getText(716) + ": <b><font color='#990000'>" + canvas.Functions.setNumberLen(i.getHours()) + ":" + canvas.Functions.setNumberLen(i.getMinutes()) + ":" + canvas.Functions.setNumberLen(i.getSeconds()) + "</font></b>.", canvas.Translator.getText(712), canvas.Translator.getText(2019), this.main.joinFrontsBattle, [e], this.main)
}
;
canvas.app.location.View.prototype.showStartBattleConfirm = function(t, e, a) {
    var i = new Date(a);
    this.showConfirm(canvas.Translator.getText(714), canvas.Translator.getText(720) + " <b><font color='#990000'>" + t + "</font></b>?<br/><br/>" + canvas.Translator.getText(716) + ": <b><font color='#990000'>" + canvas.Functions.setNumberLen(i.getHours()) + ":" + canvas.Functions.setNumberLen(i.getMinutes()) + ":" + canvas.Functions.setNumberLen(i.getSeconds()) + "</font></b>.", canvas.Translator.getText(707), canvas.Translator.getText(2019), this.main.startFrontsBattle, null, this.main)
}
;
canvas.app.location.Parser = function() {}
;
canvas.app.location.Parser.prototype.extractBg = function(t) {
    if (!t)
        return "";
    var e = t.split(".")[0].split("/");
    return e[e.length - 1]
}
;
canvas.app.location.Parser.prototype.unpackTownConfObject = function(t) {
    var e = canvas.app.location.model;
    var a;
    var i;
    var s;
    var n;
    var r = {};
    var o = false;
    var l;
    var c;
    var p;
    var h;
    var d;
    for (c in t) {
        h = t[c];
        switch (c) {
        case "town":
            if (h.bg && h.title) {
                var v = String(h.bg).split("/");
                var u = String(v[v.length - 1]).split("?")
            }
            if (e.OBJ_WORLD.conf[h.area_id] != null) {
                e.OBJ_TOWN = e.OBJ_WORLD.conf[h.area_id]
            } else {
                e.OBJ_TOWN = {
                    items: {}
                };
                o = true
            }
            if (e.OBJ_TOWN.area_id != h.area_id)
                e.actionConfirms = true;
            e.OBJ_TOWN.area_id = e.FlagLocation = h.area_id;
            e.OBJ_TOWN.bg = this.extractBg(h.bg);
            e.OBJ_TOWN.bg_mid = h.bg_mid == undefined ? "" : this.extractBg(h.bg_mid);
            e.OBJ_TOWN.swf_file = String(u[0]);
            e.OBJ_TOWN.title = h.title != null ? h.title : "---";
            e.OBJ_TOWN.sky_type = h.sky_type != null ? this.extractBg(h.sky_type) : "";
            e.OBJ_TOWN.ftime = h.ftime != null ? h.ftime : "0";
            e.OBJ_TOWN.ftime_max = h.ftime_max != null ? parseInt(h.ftime_max) : "0";
            e.OBJ_TOWN.weather = h.weather != null ? h.weather : "0";
            e.OBJ_TOWN.curtime = h.curtime != null ? h.curtime : Math.round(Date.now() / 1e3);
            e.OBJ_TOWN.dy = h.dy != null ? parseInt(h.dy) : 0;
            e.WITH_MAP = h.show_minimap;
            e.castPeriodFinish = h.chaotic_fight_time != null ? Math.round(Date.now() * .001) + parseInt(h.chaotic_fight_time) : 0;
            if (h.fronts != null) {
                l = parseInt(h.fronts);
                switch (l) {
                case 1:
                    e.fronts.frontsEnabled = true;
                    e.fronts.frontsPanelEnabled = false;
                    break;
                case 2:
                    e.fronts.frontsEnabled = true;
                    e.fronts.frontsPanelEnabled = true;
                    break;
                default:
                    e.fronts.frontsEnabled = false;
                    e.fronts.frontsPanelEnabled = false
                }
            } else {
                e.fronts.frontsEnabled = false;
                e.fronts.frontsPanelEnabled = false
            }
            var m = 0;
            var f;
            if (h.items)
                for (p in h.items) {
                    if (h.items[p].id != null) {
                        if (o) {
                            f = h.items[p].name != null ? h.items[p].name : "";
                            e.OBJ_TOWN.items[m] = {
                                id: h.items[p].id != null ? h.items[p].id : "---",
                                name: f,
                                confirm: h.items[p].confirm != null ? String(h.items[p].confirm) : h.items[p].confirm_text != null ? 1 : 0,
                                confirm_text: h.items[p].confirm_text != null ? String(h.items[p].confirm_text) : null,
                                mode: h.items[p].mode != null ? "mode_" + h.items[p].mode : e.MODE_AREA,
                                href: h.items[p].link_href ? h.items[p].link_href : h.items[p].href ? h.items[p].href : "",
                                loc_id: h.items[p].loc_id != null ? h.items[p].loc_id : "-100",
                                type: h.items[p].type != null ? h.items[p].type : e.TYPE_AREA,
                                farm: h.items[p].farm != null ? h.items[p].farm : e.WITHOUT_FARM,
                                refresh: h.items[p].hidden != null ? h.items[p].hidden : "0",
                                ltime: h.items[p].ltime != null ? h.items[p].ltime : 0,
                                dtime: h.items[p].dtime != null ? h.items[p].dtime : 0,
                                anim_x: 0,
                                anim_y: 0,
                                hide: f == "" ? true : h.items[p].hide != null && h.items[p].hide == "1"
                            }
                        } else {
                            e.OBJ_TOWN.items[m].ltime = h.items[p].ltime != null ? h.items[p].ltime : 0;
                            e.OBJ_TOWN.items[m].dtime = h.items[p].dtime != null ? h.items[p].dtime : 0
                        }
                        m++
                    }
                }
            break;
        case "add":
            i = h;
            if (i)
                for (n = 0; n < i.length; n++) {
                    if (i[n].id != null && i[n].type != null && i[n].x != null && i[n].y != null && i[n].text != null) {
                        r[i[n].id] = {
                            type: i[n].type,
                            x: i[n].x,
                            y: i[n].y,
                            text: i[n].text
                        }
                    }
                }
            break
        }
    }
    e.OBJ_WORLD.conf[e.OBJ_TOWN.area_id] = e.OBJ_TOWN
}
;
canvas.app.location.Parser.prototype.unpackNavConf = function(t) {
    var e = canvas.app.location.model;
    var a;
    var i;
    var s;
    var n;
    a = t.childNodes;
    for (s = 0; s < a.length; s++) {
        if (a[s].nodeName == "locations") {
            i = a[s].childNodes;
            for (n = 0; n < i.length; n++) {
                if (i[n].nodeName == "loc") {
                    if (i[n].attributes.id != null && i[n].attributes.verges != null) {
                        var r = true;
                        if (i[n].attributes.race != null) {
                            if (i[n].attributes.race.value != e.mRace) {
                                r = false
                            }
                        }
                        if (r) {
                            var o = [];
                            var l = i[n].attributes.verges.value.split("|");
                            var c = [];
                            for (var p = 0; p < l.length; p++) {
                                c = l[p].split(",");
                                if (c.length == 2) {
                                    o[p] = [c[0], c[1]]
                                }
                            }
                            e.OBJ_LOCVERGE[i[n].attributes.id.value] = o;
                            e.NUM_LOCATIONS++
                        }
                    }
                }
            }
        }
    }
}
;
canvas.app.location.Parser.prototype.unpackEventConf = function(t) {
    var e = canvas.app.location.model;
    var a = (new DOMParser).parseFromString(t, "text/xml");
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c = new Date;
    e.OBJ_EVENT = {
        tasks: {}
    };
    i = a.childNodes;
    for (n = 0; n < i.length; n++) {
        if (i[n].nodeName == "event") {
            if (i[n].attributes.id != null && i[n].attributes.title != null && i[n].attributes.point_title != null) {
                e.OBJ_EVENT = {
                    tasks: {}
                };
                e.OBJ_EVENT.id = i[n].attributes.id;
                e.OBJ_EVENT.title = i[n].attributes.title;
                e.OBJ_EVENT.point_title = i[n].attributes.point_title
            }
            s = i[n].childNodes;
            var p = 0;
            for (r = 0; r < s.length; r++) {
                if (s[r].nodeName == "task") {
                    e.OBJ_EVENT.tasks[p] = {
                        title: s[r].attributes.title != null ? s[r].attributes.title : "---",
                        max_value: s[r].attributes.max_value != null ? s[r].attributes.max_value : 0,
                        max_user_value: s[r].attributes.max_user_value != null ? s[r].attributes.max_user_value : 0,
                        user_value: s[r].attributes.user_value != null ? s[r].attributes.user_value : 0,
                        value: s[r].attributes.value != null ? s[r].attributes.value : 0,
                        noUserValue: s[r].attributes.no_user_value == "1"
                    };
                    p++
                }
            }
        }
        if (i[n].nodeName == "global_npcs") {
            e.NPCEvents = new Array;
            var h = i[n].childNodes.length;
            for (var d = 0; d < h; d++) {
                o = i[n].childNodes[d];
                if (o.nodeName == "npc") {
                    l = new canvas.data.location.DEvent;
                    l.description = o.firstChild.nodeValue;
                    l.picture = o.attributes["picture"];
                    l.title = o.attributes["title"];
                    l.url = o.attributes["url"];
                    l.finishTime = Math.round(c.getTime() * .001) + parseInt(o.attributes["time_left"]);
                    e.NPCEvents.push(l)
                }
            }
        }
    }
}
;
canvas.app.location.Parser.prototype.unpackEventConfObject = function(t) {
    var e = canvas.app.location.model;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l = new Date;
    var c;
    var p;
    var h;
    e.OBJ_EVENT = {
        tasks: {}
    };
    for (c in t) {
        if (c == "event") {
            if (t[c].id != null && t[c].title != null && t[c].point_title != null) {
                e.OBJ_EVENT = {
                    tasks: {}
                };
                e.OBJ_EVENT.id = t[c].id;
                e.OBJ_EVENT.title = t[c].title;
                e.OBJ_EVENT.point_title = t[c].point_title
            }
            var d = 0;
            if (t[c].task) {
                for (h in t[c].task) {
                    r = t[c].task[h];
                    e.OBJ_EVENT.tasks[d] = {
                        title: r.title != null ? r.title : "---",
                        max_value: r.max_value != null ? r.max_value : 0,
                        max_user_value: r.max_user_value != null ? r.max_user_value : 0,
                        user_value: r.user_value != null ? r.user_value : 0,
                        value: r.value != null ? r.value : 0,
                        noUserValue: r.no_user_value == "1"
                    };
                    d++
                }
            }
        }
        if (c == "global_npcs") {
            e.NPCEvents = new Array;
            for (h in t[c]) {
                r = t[c][h];
                o = new canvas.data.location.DEvent;
                o.description = r.description;
                o.picture = r.picture;
                o.title = r.title;
                o.url = r.url;
                o.finishTime = Math.round(l.getTime() * .001) + parseInt(r.time_left);
                e.NPCEvents.push(o)
            }
        }
    }
}
;
canvas.app.location.Parser.prototype.unpackFightConf = function(t) {
    var e = canvas.app.location.model;
    var a = (new DOMParser).parseFromString(t, "text/xml");
    var i;
    var s;
    var n;
    var r;
    i = a.childNodes;
    e.NUM_BIG_FIGHT = 0;
    for (n = 0; n < i.length; n++) {
        if (i[n].nodeName == "fight") {
            if (i[n].attributes.in_process != null)
                e.NUM_BIG_FIGHT = i[n].attributes.in_process
        }
    }
}
;
canvas.app.location.Parser.prototype.instanceToLocation = function(t, e) {
    var a = t;
    var i = new Object;
    var s;
    i.area_id = a.location.area_id;
    i.title = a.location.title;
    i.sky_type = a.location.sky_type;
    i.bg = a.location.swf;
    i.bg_mid = a.location.swf_mid;
    i.ftime = a.area.ftime;
    i.ftime_max = a.area.ftime_max;
    i.weather = "0";
    i.show_minimap = false;
    i.fronts = 0;
    i.dy = "0";
    i.is_copy_location_id = "0";
    i.code = a.location.code;
    i.curtime = e;
    i.items = new Object;
    for (var n in a.items) {
        s = a.items[n];
        i.items[s.id] = {
            id: s.id,
            name: s.name,
            building_type: s.building_type,
            type: "instance",
            href: s.href,
            link_href: s.link_href,
            confirm: s.confirm,
            confirm_text: s.confirm_text,
            mode: "area"
        }
    }
    return {
        town: i
    }
}
;
canvas.app.location.Finder = function() {
    this.p1 = 0;
    this.p2 = 0;
    this.p1_tmp = 0;
    this.p2_tmp = 0;
    this.arr_tmp = null;
    this.arr_trash = null;
    this.cache_cont = null;
    this.arr_loc = null
}
;
canvas.app.location.Finder.prototype.find = function(t, e) {
    canvas.app.location.log("Finder: start = " + t + ", target = " + e, 10551296);
    var a = canvas.app.location.model;
    this.p1 = t;
    this.p2 = e;
    if (String(this.p1) == String(this.p2)) {
        return [0]
    }
    this.p2_tmp = this.p2;
    this.p1_tmp = this.p2_tmp;
    this.arr_tmp = [];
    this.arr_trash = [];
    this.cache_cont = {};
    this.arr_loc = [];
    this.arr_tmp.push(this.p1);
    this.arr_trash = this.arr_trash.concat(this.arr_tmp);
    var i = 0;
    var s = a.NUM_LOCATIONS;
    if (s <= 0)
        return [0];
    t: while (i < s) {
        i++;
        var n = [];
        for (var r = this.arr_tmp.length; r--; ) {
            var o = [];
            o = this.getNearLoc(this.arr_tmp[r]);
            this.clearArr(o, this.arr_trash);
            this.cache_cont[this.arr_tmp[r]] = o;
            if (this.seach(o, this.p2)) {
                break t
            }
            this.arr_trash = this.arr_trash.concat(o);
            n = n.concat(o)
        }
        this.arr_tmp = [];
        this.arr_tmp = this.arr_tmp.concat(n);
        if (this.arr_tmp.length == 0) {
            return [-1]
        }
    }
    this.arr_loc.push(this.p1_tmp);
    while (this.p1_tmp != this.p1) {
        this.p2_tmp = this.getNextCacheLoc(this.p2_tmp);
        this.p1_tmp = this.p2_tmp;
        this.arr_loc.push(this.p1_tmp)
    }
    return this.arr_loc
}
;
canvas.app.location.Finder.prototype.getNextCacheLoc = function(t) {
    for (var e in this.cache_cont) {
        var a = this.cache_cont[e];
        for (var i = a.length; i--; ) {
            if (parseInt(a[i]) == t) {
                return parseInt(e)
            }
        }
    }
    return 1
}
;
canvas.app.location.Finder.prototype.getNearLoc = function(t) {
    var e = canvas.app.location.model;
    var a = [];
    for (var i in e.OBJ_LOCVERGE) {
        var s = e.OBJ_LOCVERGE[i];
        t: for (var n = s.length; n--; ) {
            for (var r = s[n].length; r--; ) {
                if (s[n][r] == t) {
                    a.push(i);
                    break t
                }
            }
        }
    }
    return a
}
;
canvas.app.location.Finder.prototype.seach = function(t, e) {
    for (var a = t.length; a--; ) {
        if (t[a] == e) {
            return true
        }
    }
    return false
}
;
canvas.app.location.Finder.prototype.clearArr = function(t, e) {
    for (var a = e.length; a--; ) {
        for (var i = t.length; i--; ) {
            if (t[i] == e[a]) {
                t.splice(i, 1);
                i++
            }
        }
    }
}
;
canvas.app.location.view.LocationView = function(t) {
    canvas.px.Container.call(this);
    this.name = t;
    this.buttons = {};
    this.anims = {};
    this.movies = [];
    this.ready = false;
    this.url = canvas.Config.areasPath + t + "/" + t;
    this.back = new canvas.ui.Image(canvas.Config.areasPath + t + ".png");
    this.addChild(this.back);
    this.tmpIndex = 0;
    if (this.back.ready) {
        this._preInit()
    } else {
        canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.back, this._preInit, this)
    }
}
;
canvas.app.location.view.LocationView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.LocationView.prototype._preInit = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.back, this.preInit, this);
    this.tmpIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.location.view.LocationView.prototype.frameHandler = function() {
    if (this.tmpIndex == 2) {
        canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.preInit()
    } else {
        this.tmpIndex++
    }
}
;
canvas.app.location.view.LocationView.prototype.preInit = function() {
    if (!canvas.ResourceLoader.get(this.url + ".mci")) {
        canvas.ResourceLoader.add([this.url + ".mci", this.url + ".json"]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this)
    } else {
        this.init()
    }
}
;
canvas.app.location.view.LocationView.prototype.init = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this);
    this.data = canvas.ResourceLoader.get(this.url + ".mci").data;
    this.atlas = canvas.ResourceLoader.get(this.url + ".json").textures;
    var t = this.data[canvas.px.MovieClipProps.children].length;
    var e;
    var a;
    var i;
    for (var s = 0; s < t; s++) {
        a = null;
        e = this.data[canvas.px.MovieClipProps.children][s];
        if (e.mc) {
            a = new canvas.px.MovieClipChild(e.mc,this.atlas,e.name + "/",null);
            a.frameEvent = canvas.app.location.Event.ENTER_FRAME;
            a.play()
        } else if (e.polygon) {
            a = new canvas.px.Container;
            i = new canvas.px.Polygon(e.polygon);
            a.addChild(i);
            a.button = i;
            i.interactive = true
        } else {
            a = new canvas.px.Sprite(this.atlas[e.name + ".png"])
        }
        if (e.name.substr(0, 4) == "but_") {
            if (!this.anims[e.name.substr(4)]) {
                a = new canvas.app.location.view.elements.LocationAnim(a);
                this.anims[e.name.substr(4)] = a;
                a.name = e.name.substr(4)
            } else {
                a = null
            }
        } else if (e.name.substr(0, 4) == "hit_") {
            if (!this.buttons[e.name.substr(8)]) {
                this.buttons[e.name.substr(8)] = a;
                a.interactive = true;
                a.buttonMode = true;
                a.mouseover = this.overHandler.bind(this);
                a.mouseout = this.outHandler.bind(this);
                a.click = this.clickHandler.bind(this);
                a.name = a.id = e.name.substr(8)
            } else {
                a = null
            }
        } else if (e.mc) {
            this.movies.push(a)
        }
        if (a) {
            this.addChild(a);
            a.position.set(Math.round(e.x) * (e[canvas.px.MovieClipProps.matrix] && e[canvas.px.MovieClipProps.matrix].a < 0 ? e[canvas.px.MovieClipProps.matrix].a : 1), Math.round(e.y) * (e[canvas.px.MovieClipProps.matrix] && e[canvas.px.MovieClipProps.matrix].d < 0 ? e[canvas.px.MovieClipProps.matrix].d : 1));
            if (e[canvas.px.MovieClipProps.matrix]) {
                a.scale.set(e[canvas.px.MovieClipProps.matrix].a < 0 && a.x > 0 ? e[canvas.px.MovieClipProps.matrix].a : 1, e[canvas.px.MovieClipProps.matrix].d < 0 && a.y > 0 ? e[canvas.px.MovieClipProps.matrix].d : 1);
                if (e.x2 == 1) {
                    a.scale.set(2, 2)
                }
            }
        }
    }
    var n;
    for (var n in this.buttons) {
        if (!this.anims[n] && !this.movies[n]) {
            this.removeChild(this.buttons[n]);
            this.buttons[n].destroy({
                children: true
            });
            this.buttons[n] = null
        }
    }
    this.ready = true;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.LOCATION_READY)
}
;
canvas.app.location.view.LocationView.prototype.overHandler = function(t) {
    if (!t.currentTarget || !t.currentTarget.name)
        return;
    var e = this.anims[t.currentTarget.name];
    if (e) {
        e.show();
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_OVER, null, t.currentTarget)
    }
}
;
canvas.app.location.view.LocationView.prototype.outHandler = function(t) {
    if (!t.currentTarget || !t.currentTarget.name)
        return;
    var e = this.anims[t.currentTarget.name];
    if (e) {
        e.hide();
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_OUT, null, t.currentTarget)
    }
}
;
canvas.app.location.view.LocationView.prototype.clickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_CLICK, null, t.currentTarget)
}
;
canvas.app.location.view.LocationView.prototype.start = function() {
    for (var t = 0; t < this.movies.length; t++) {
        this.movies[t].play()
    }
}
;
canvas.app.location.view.LocationView.prototype.stop = function() {
    for (var t = 0; t < this.movies.length; t++) {
        this.movies[t].stop()
    }
}
;
canvas.app.location.view.LocationView.prototype.destroy = function() {
    for (var t in this.buttons) {
        this.buttons[t].mouseover = null;
        this.buttons[t].mouseout = null;
        this.buttons[t].click = null
    }
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.PopupWin = function(t, e, a, i, s, n) {
    canvas.px.Container.call(this);
    this.interactive = true;
    var r = canvas.app.location.model;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", s ? "popup_win2" : "popup_win"));
    this.caption_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,100,20,"center");
    this.caption_tf.text = r.STRINGS_ARR[r.S_CONFIRMATION];
    this.info_tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,9722697,this.bg.width - 40,50,"center","middle");
    if (e) {
        this.info_tf.text = e
    } else {
        if (i == "area") {
            this.info_tf.text = !t ? r.STRINGS_ARR[r.S_ARE_YOU_ASSURED] : t
        } else if (i == "instance") {
            this.info_tf.text = !t ? r.STRINGS_ARR[r.S_ARE_YOU_ASSURED] : t
        } else {
            this.info_tf.text = t ? i : r.STRINGS_ARR[r.S_ARE_YOU_ASSURED]
        }
    }
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.info_tf, this.info_tfLinkHandler, this);
    this.but_ok = new canvas.app.view.OldButton(1133569);
    this.but_ok.setTitle(a ? a : r.STRINGS_ARR[r.S_YES]);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_ok, this.confirmHandler, this);
    this.but_cancel = new canvas.app.view.OldButton(12124160);
    this.but_cancel.setTitle(r.STRINGS_ARR[r.S_CANCEL]);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.hideWinHandler, this);
    this.addChild(this.bg);
    this.addChild(this.caption_tf);
    this.addChild(this.info_tf);
    this.addChild(this.but_ok);
    this.addChild(this.but_cancel);
    this.caption_tf.position.set(Math.round((this.width - this.caption_tf.width) / 2), 2);
    this.info_tf.position.set(Math.round((this.width - this.info_tf._width) / 2) - 2, 20);
    if (e) {
        this.but_ok.x = Math.round(this.bg.width / 2 - this.but_ok.width + 27);
        this.but_ok.y = this.height - this.but_ok.height - 15;
        this.but_cancel.x = Math.round(this.bg.width / 2 - 27);
        this.but_cancel.y = this.height - this.but_cancel.height - 15
    } else {
        this.but_ok.x = Math.round((this.width - this.but_ok.width) / 2);
        this.but_ok.y = 67;
        this.but_cancel.x = Math.round((this.width - this.but_cancel.width) / 2);
        this.but_cancel.y = 87
    }
    this.info_tf.setSize(0, this.but_ok.x - 20);
    if (s) {
        this.checkBox = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "checker_back"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker_front")));
        var o = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9722697,150,20,"center","top",0,0);
        o.text = s;
        this.checkBox.sprite.addChild(o);
        o.position.set(30, 3);
        this.addChild(this.checkBox);
        this.checkBox.y = 102;
        this.checkBox.x = Math.round((this.bg.width - this.checkBox.width) * .5);
        this.but_ok.y -= 15;
        this.but_cancel.y -= 15;
        if (n) {
            this.hint = new canvas.app.view.MappingHint(n);
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
                target: this.checkBox,
                params: new canvas.utils.HintParams(this.hint)
            })
        }
    }
}
;
canvas.app.location.view.PopupWin.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.PopupWin.prototype.confirmHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this)
}
;
canvas.app.location.view.PopupWin.prototype.hideWinHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this)
}
;
canvas.app.location.view.PopupWin.prototype.info_tfLinkHandler = function(t) {
    ExternalInterface.call(t.params)
}
;
canvas.app.location.view.PopupWin.prototype.destroy = function() {
    if (this.parent)
        this.parent.removeChild(this);
    if (this.checkBox)
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
            target: this.checkBox
        });
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_ok, this.confirmHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.hideWinHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.MapSide = function() {
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.curls.width
        },
        set: function(t) {
            this.resize(t)
        }
    });
    Object.defineProperty(this, "_height", {
        get: function() {
            return this.curls.height
        },
        set: function(t) {
            this.hh = t;
            this.resize(this.ww)
        }
    });
    Object.defineProperty(this, "isVisible", {
        get: function() {
            return false
        },
        set: function(t) {
            this.visible = t;
            canvas.app.location.model.localStorage.set("MapSide", t ? "1" : "0")
        }
    });
    Object.defineProperty(this, "active", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.activate();
            else
                this.deactivate()
        }
    });
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    this.isOvered = false;
    this.hh = t.MIN_STAGE_HEIGHT - 8;
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130);
    this.curls.height = this.hh;
    this.caption = new canvas.ui.Text(t.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,100,20,"center");
    this.caption.text = t.STRINGS_ARR[t.S_MAP];
    this.caption.y = -4;
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0);
    this.header.width = this.caption.field.textWidth + 70;
    this.header.y = -6;
    this.miniMap = new canvas.app.location.view.MiniMap;
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OVER, this.miniMap, this.wayOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OUT, this.miniMap, this.wayOutHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_CLICK, this.miniMap, this.wayClickHandler, this);
    this.miniMap.x = -3;
    this.mapZoom = new canvas.app.location.view.elements.MapZoom;
    canvas.EventManager.addEventListener(canvas.app.location.Event.REFRESH_MAP, this.mapZoom, this.refreshMapHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ZOOM_IN, this.mapZoom, this.zoomInMapHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ZOOM_OUT, this.mapZoom, this.zoomOutMapHandler, this);
    this.mapZoom.y = this.hh - this.mapZoom.height;
    this.mapMask = new canvas.px.Mask(t.MAP_WIDTH,this.hh - 10);
    this.miniMap.mask = this.mapMask;
    this.addChild(this.miniMap);
    this.addChild(this.curls);
    this.addChild(this.header);
    this.addChild(this.caption);
    this.addChild(this.mapZoom);
    this.addChild(this.mapMask);
    this.interactive = true;
    this.mouseover = this.rollOverHandler.bind(this);
    this.mouseout = this.rollOutHandler.bind(this)
}
;
canvas.app.location.view.MapSide.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.MapSide.prototype.resize = function(t) {
    var e = canvas.app.location.model;
    this.ww = t;
    this.curls.width = this.ww;
    this.curls.height = this.hh;
    this.caption.x = Math.round((t - this.caption._width) / 2) + 1;
    this.header.x = Math.round((t - this.header.width) / 2);
    this.mapZoom.y = this.hh - this.mapZoom.height;
    this.mapMask.setSize(e.MAP_WIDTH, this.hh - 10);
    this.miniMap.resizeMap()
}
;
canvas.app.location.view.MapSide.prototype.updateFlag = function() {
    this.miniMap.updateFlag()
}
;
canvas.app.location.view.MapSide.prototype.build = function() {
    this.miniMap.build()
}
;
canvas.app.location.view.MapSide.prototype.wayOverHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_OVER, this, t.params)
}
;
canvas.app.location.view.MapSide.prototype.wayOutHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_OUT, this)
}
;
canvas.app.location.view.MapSide.prototype.wayClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_CLICK, this, t.params)
}
;
canvas.app.location.view.MapSide.prototype.refreshMapHandler = function() {
    this.miniMap.refreshMap()
}
;
canvas.app.location.view.MapSide.prototype.zoomInMapHandler = function() {
    this.miniMap.zoomMode(2);
    this.mapZoom.zoomMode(2)
}
;
canvas.app.location.view.MapSide.prototype.zoomOutMapHandler = function() {
    this.miniMap.zoomMode(1);
    this.mapZoom.zoomMode(1)
}
;
canvas.app.location.view.MapSide.prototype.rollOverHandler = function() {
    this.isOvered = true
}
;
canvas.app.location.view.MapSide.prototype.rollOutHandler = function() {
    this.isOvered = false
}
;
canvas.app.location.view.MapSide.prototype.activate = function() {
    this.miniMap.filters = []
}
;
canvas.app.location.view.MapSide.prototype.deactivate = function() {
    this.miniMap.filters = [canvas.Functions.getGreyScale(.5)]
}
;
canvas.app.location.view.MiniMap = function() {
    canvas.px.Container.call(this);
    this.isBuilded = false
}
;
canvas.app.location.view.MiniMap.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.MiniMap.prototype.updateFlag = function() {
    if (this.map && this.isBuilded && this.map["fastUpdateFlag"]) {
        this.map["fastUpdateFlag"].call(this.map)
    }
}
;
canvas.app.location.view.MiniMap.prototype.refreshMap = function() {
    if (this.map && this.isBuilded && this.map["refreshFlag"]) {
        this.map["refreshFlag"].call(this.map)
    }
}
;
canvas.app.location.view.MiniMap.prototype.zoomMode = function(t) {
    if (this.map && this.isBuilded) {
        if (t == 1) {
            if (this.map["zoomOut"])
                this.map["zoomOut"].call(this.map, t)
        } else {
            if (this.map["zoomIn"])
                this.map["zoomIn"].call(this.map, t)
        }
    }
}
;
canvas.app.location.view.MiniMap.prototype.wheelMouse = function(t, e) {
    if (e == undefined)
        e = "y";
    if (this.map && this.isBuilded && this.map["wheelMouse"]) {
        this.map["wheelMouse"].call(this.map, t, e)
    }
}
;
canvas.app.location.view.MiniMap.prototype.resizeMap = function() {
    if (this.map && this.isBuilded && this.map["resize"]) {
        this.map["resize"].call(this.map)
    }
}
;
canvas.app.location.view.MiniMap.prototype.swfObject = function(t) {
    if (this.map && this.isBuilded && this.map["swfObjectData"]) {
        this.map["swfObjectData"].call(this.map, t)
    }
}
;
canvas.app.location.view.MiniMap.prototype.build = function() {
    if (this.isBuilded)
        return;
    this.isBuilded = true;
    this.map = new canvas.app.CanvasWorld({},this,true)
}
;
canvas.app.location.view.MiniMap.prototype.selectWay = function(t, e) {
    var a = {
        arr: t,
        areaWaypoints: e
    }
}
;
canvas.app.location.view.MiniMap.prototype.unSelectWay = function() {}
;
canvas.app.location.view.MiniMap.prototype.goToWay = function(t, e) {
    var a = {
        arr: t,
        areaWaypoints: e
    };
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_CLICK, this, a)
}
;
canvas.app.location.view.MiniMap.prototype.zoomModeAnswer = function(t) {
    if (t == 1) {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_OUT, this)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_IN, this)
    }
}
;
canvas.app.location.view.ListSide = function() {
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.curls.width
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "_height", {
        get: function() {
            return this.curls.height
        },
        set: function(t) {
            this.hh = t;
            this.resize()
        }
    });
    Object.defineProperty(this, "showOverOnItem", {
        get: function() {
            return false
        },
        set: function(t) {
            this.list.showOverOnItem = t
        }
    });
    Object.defineProperty(this, "active", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.activate();
            else
                this.deactivate()
        }
    });
    Object.defineProperty(this, "partActive", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.partiallyDeactivate()
        }
    });
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    t.listOveredFlag = false;
    this.bg = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "bg_list"));
    this.bg.position.set(14, 14);
    this.bg.width = 203;
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130);
    this.curls.width = 232;
    this.curls.height = t.MIN_STAGE_HEIGHT - 8;
    this.curls2 = new canvas.app.location.view.elements.CurlBack;
    this.curls2.setSize(196, t.MIN_STAGE_HEIGHT - 36);
    this.curls2.position.set(18, 14);
    this.bg.height = this.curls2.height;
    var e = t.OBJ_TOWN.ftime_max == 0 ? 0 : 50;
    this.list = new canvas.app.location.view.List(167,256 - e,t.OBJ_TOWN.items,this);
    this.list.position.set(34, 30);
    this.partiallyDeactivate();
    this.timer = new canvas.app.location.view.elements.LocTimer(t.OBJ_TOWN.ftime,t.OBJ_TOWN.ftime_max);
    canvas.EventManager.addEventListener(canvas.app.location.Event.TIMER_DONE, this.timer, this.timerDoneHandler, this);
    this.addChild(this.bg);
    this.addChild(this.curls2);
    this.addChild(this.curls);
    this.addChild(this.list);
    this.addChild(this.timer);
    this.timer.position.set(Math.round((this.curls.width - this.timer.width) / 2), this.curls.height - this.timer.height - 18);
    this.interactive = true;
    this.mouseover = this.rollOverHandler.bind(this);
    this.mouseout = this.rollOutHandler.bind(this)
}
;
canvas.app.location.view.ListSide.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.ListSide.prototype.timerStart = function() {
    this.timer.timerStart()
}
;
canvas.app.location.view.ListSide.prototype.partiallyDeactivate = function() {
    this.list.active = false
}
;
canvas.app.location.view.ListSide.prototype.timerDoneHandler = function() {
    canvas.app.location.model.TRANSITION_POSSIBLE = true
}
;
canvas.app.location.view.ListSide.prototype.activate = function() {
    this.list.activeAll = true
}
;
canvas.app.location.view.ListSide.prototype.deactivate = function() {
    this.list.activeAll = false
}
;
canvas.app.location.view.ListSide.prototype.rollOverHandler = function() {
    canvas.app.location.model.listOveredFlag = true;
    this.list.listRollOver()
}
;
canvas.app.location.view.ListSide.prototype.rollOutHandler = function() {
    canvas.app.location.model.listOveredFlag = false;
    this.list.listRollOut()
}
;
canvas.app.location.view.ListSide.prototype.resize = function() {
    this.curls.height = this.hh;
    this.curls2.height = this.hh - 28;
    this.timer.y = this.curls.height - this.timer.height - 18;
    this.bg.height = this.curls2.height;
    this.list.resize(this.hh)
}
;
canvas.app.location.view.ListSide.prototype.destroy = function() {
    if (this.list)
        this.list.destroy();
    if (this.timer)
        this.timer.destroy();
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.removeEventListener(canvas.app.location.Event.TIMER_DONE, this.timer, this.timerDoneHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.List = function(t, e, a, i) {
    Object.defineProperty(this, "showOverOnItem", {
        get: function() {
            return false
        },
        set: function(t) {
            this.overOnItem(t)
        }
    });
    Object.defineProperty(this, "active", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.activate();
            else
                this.deactivate()
        }
    });
    Object.defineProperty(this, "activeAll", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.activate();
            else
                this.deactivate(true)
        }
    });
    canvas.px.Container.call(this);
    this.actived = true;
    this.items = {};
    this.ww = t;
    this.hh = e;
    this.listSide = i;
    this.items = a;
    this.cont_mask = new canvas.px.Mask;
    this.cont = new canvas.px.Container;
    this.addChild(this.cont);
    this.addChild(this.cont_mask);
    this.cont.mask = this.cont_mask;
    this.create_masked_cont();
    this.intervalId = setInterval(this.finderTik.bind(this), 2e3);
    this.finderTik();
    this.activate()
}
;
canvas.app.location.view.List.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.List.prototype.activate = function() {
    this.actived = true;
    this.create_masked_cont()
}
;
canvas.app.location.view.List.prototype.deactivate = function(t) {
    if (t == undefined)
        t = false;
    this.create_masked_cont(true, t)
}
;
canvas.app.location.view.List.prototype.create_masked_cont = function(t, e) {
    if (t == undefined)
        t = false;
    if (e == undefined)
        e = false;
    var a = canvas.app.location.model;
    this.destroyAllBtns();
    this.cont_mask.setSize(this.ww - 2, this.hh - 24);
    var i = 0;
    var s = [[a.MODE_AREA, a.STRINGS_ARR[a.S_LOCATIONS], 0], [a.MODE_HOUSE, a.STRINGS_ARR[a.S_OBJECTS], 0], [a.MODE_NPC, a.STRINGS_ARR[a.S_NPCs], 0]];
    for (var n = 0; n < s.length; n++) {
        var r = new canvas.ui.Text(a.IsBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10,16771765,100,20,"center");
        r.text = s[n][1];
        r.position.set(Math.round((this.ww - r._width) / 2), 3);
        var o = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "list_sliser"),56,0,56,0);
        o.width = Math.round(r.field.textWidth) + 110;
        o.x = Math.round((this.ww - o.width) / 2);
        var l = new canvas.px.Container;
        l.addChild(o);
        l.addChild(r);
        l.y = i;
        for (var c in this.items) {
            if (this.items[c].mode == s[n][0]) {
                var p = new canvas.app.location.view.elements.ListItem(this.ww,18,this.items[c]);
                this.items[c].btn = p;
                if (!this.items[c].hide) {
                    if (s[n][2] == 0) {
                        this.cont.addChild(l);
                        s[n][2] = 1;
                        i += 21
                    }
                    p.position.set(0, i);
                    if (!t || this.items[c].mode == a.MODE_NPC && !e) {
                        canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OVER, null, this.itemBtnMouseOver, this);
                        p.interactive = true
                    } else {
                        p.gray = true
                    }
                    i += 21;
                    this.cont.addChild(p)
                }
            }
        }
    }
    this.creat_scroll();
    this.update()
}
;
canvas.app.location.view.List.prototype.listRollOver = function() {
    for (var t in this.items) {
        this.items[t].btn.overList()
    }
}
;
canvas.app.location.view.List.prototype.listRollOut = function() {
    for (var t in this.items) {
        this.items[t].btn.outList()
    }
}
;
canvas.app.location.view.List.prototype.itemBtnMouseOver = function(t) {
    for (var e in this.items) {
        if (this.items[e].btn.id != t.params.id) {
            this.items[e].btn.refresh()
        }
    }
}
;
canvas.app.location.view.List.prototype.finderTik = function() {
    var t = canvas.app.location.model;
    var e = t.FinishLocation;
    t.getCoordinates();
    if (t.FinishLocation != e) {
        t.ARR_LOCATIONS = [];
        t.ARR_LOCATIONS = t.ARR_LOCATIONS.concat(t.finder.find(parseInt(t.FlagLocation), parseInt(t.FinishLocation)));
        if (this.actived)
            this.activate();
        else
            this.deactivate()
    } else {
        if (t.FinishLocation == null) {
            t.ARR_LOCATIONS = []
        }
    }
}
;
canvas.app.location.view.List.prototype.update = function() {
    var t = canvas.app.location.model;
    for (var e in this.items) {
        var a = this.items[e].btn;
        if (t.ARR_LOCATIONS.indexOf(parseInt(this.items[e].loc_id)) != -1 || t.blinkIds.indexOf(parseInt(this.items[e].id)) >= 0) {
            a.light = true
        } else {
            a.light = false
        }
    }
}
;
canvas.app.location.view.List.prototype.creat_scroll = function() {
    if (!this.scroll) {
        var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_up"));
        var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_down"));
        var a = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "scroll_item"),0,3,0,3);
        a.height = 40;
        this.drag = a;
        var i = new canvas.px.Graphics;
        i.beginFill(9764864, .1);
        i.drawRect(0, 0, 16, 100);
        i.endFill();
        this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,t,e,i,a,this);
        this.scroll.padding = 15;
        this.scroll.step = 15;
        this.scroll.position.set(this.ww, -16)
    }
    this.scroll.setSize(16, this.hh + (this.listSide.timer && this.listSide.timer.visible ? -4 : 17));
    this.scroll.max = this.cont.height - (this.hh - 28);
    this.scroll.current = this.scroll.current;
    this.drag.height = Math.min(this.hh - 70, this.hh - this.scroll.max);
    if (this.drag.height < 50)
        this.drag.height = 50;
    if (this.scroll.isDisabled()) {
        if (this.scroll.parent)
            this.removeChild(this.scroll);
        canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this)
    } else {
        if (!this.scroll.parent)
            this.addChild(this.scroll);
        canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this)
    }
}
;
canvas.app.location.view.List.prototype.resize = function(t) {
    this.hh = t - (this.listSide.timer.visible ? 75 : 35);
    this.create_masked_cont()
}
;
canvas.app.location.view.List.prototype.scrollHandler = function() {
    this.cont.y = -this.scroll.current
}
;
canvas.app.location.view.List.prototype.overOnItem = function(t) {
    for (var e in this.items) {
        if (!this.items[e].hide) {
            var a = this.items[e].btn;
            if (t) {
                if (parseInt(a.id) == parseInt(t.id)) {
                    a.select = true;
                    this.toListPosition(a.y)
                } else {
                    a.select = false
                }
            } else {
                a.select = false
            }
        }
    }
}
;
canvas.app.location.view.List.prototype.toListPosition = function(t) {
    if (this.scroll.parent) {
        this.scroll.current = t - this.hh + 80;
        this.scrollHandler()
    }
}
;
canvas.app.location.view.List.prototype.destroyAllBtns = function() {
    canvas.Functions.destroyChildren(this.cont)
}
;
canvas.app.location.view.List.prototype.destroy = function() {
    clearInterval(this.intervalId);
    clearTimeout(this.timeoutId);
    canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    this.destroyAllBtns();
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.LocSide = function() {
    this._hPos = 0;
    Object.defineProperty(this, "hPos", {
        get: function() {
            return this._hPos
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.curls.width
        },
        set: function(t) {
            this.ww = t
        }
    });
    Object.defineProperty(this, "_height", {
        get: function() {
            return this.curls.height
        },
        set: function(t) {
            this.hh = t;
            this.activeHeight = t - 25;
            if (!canvas.app.location.model.firstResize)
                this.loadLocation();
            this.resize(this.ww);
            canvas.app.location.model.firstResize = false
        }
    });
    Object.defineProperty(this, "bg", {
        get: function() {
            return this.objTownBg
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "areaID", {
        get: function() {
            return this.objTown.area_id
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "showOverOnAnim", {
        get: function() {
            return false
        },
        set: function(t) {
            if (this.location != null)
                this.location.showOverOnAnim = t
        }
    });
    Object.defineProperty(this, "showOutOnAnim", {
        get: function() {
            return false
        },
        set: function(t) {
            if (this.location != null)
                this.location.showOutOnAnim = t;
            this.animOutHandler()
        }
    });
    Object.defineProperty(this, "active", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.activate();
            else
                this.deactivate()
        }
    });
    Object.defineProperty(this, "moveToAnim", {
        get: function() {
            return false
        },
        set: function(t) {
            this.moveToAnimHandler({
                params: t
            })
        }
    });
    canvas.px.Container.call(this);
    this.objTown = {};
    this.locationCurType = "small";
    this.locationCurTypePrev = "small";
    this.actived = true;
    this.locIsLoaded = false;
    this.locMidIsLoaded = false;
    this.locIsStartLoading = false;
    this.locMidIsSartLoading = false;
    this.eventsContainer = new canvas.px.Container;
    this.mapWasMoved = false;
    this.hPosMax = 0;
    this.vScrollActive = false;
    var t = canvas.app.location.model;
    this.hh = t.MIN_STAGE_HEIGHT - 8;
    this.cont = new canvas.px.Container;
    this.cont.y = -1;
    this.cont2 = new canvas.px.Container;
    this.location_cont = new canvas.px.Container;
    this.location_cont.position.set(14, 14);
    this.location_mask = new canvas.px.Graphics;
    this.cont.addChild(this.location_cont);
    this.cont.mask = this.location_mask;
    this.objTown = t.OBJ_TOWN;
    this.objTownBg = this.objTown.bg;
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130);
    this.curls.height = this.hh - 3;
    this.caption = new canvas.ui.Text(t.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,1e3,20,"center");
    this.caption.text = String(this.objTown.title);
    this.caption.setSize(this.caption.textWidth);
    this.caption.y = -4;
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0);
    this.header.width = this.caption._width + 70;
    this.header.y = -6;
    this.drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_slider"),[47, 0, 47, 0]);
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,null,null,new canvas.px.Mask(100,19),this.drag,this.cont,true);
    this.scroll.padding = 15;
    this.scroll.step = 30;
    this.scroll.position.set(this.ww, -16);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    this.dragV = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_slider_v"),[0, 47, 0, 47]);
    this.scrollV = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,null,null,new canvas.px.Mask(19,100),this.dragV,this.cont2,true,false);
    this.scrollV.padding = 15;
    this.scrollV.step = 30;
    this.scrollV.position.set(this.ww, 0);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollVHandler, this);
    this.techBtn = new canvas.app.location.view.popups.TechBtn(t.par,canvas.app.location.Event.ENTER_FRAME);
    this.infoBtn = new canvas.app.location.view.popups.InfoBtn(t.par);
    if (t.CasinoLink) {
        this.casinoBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "casino"));
        this.casinoBtn.position.set(13, 207);
        this.casinoBtn.sprite.hitArea = new canvas.px.Circle(38,58,27);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: this.casinoBtn,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.CasinoIsGold ? canvas.Translator.getText(735) : canvas.Translator.getText(734)))
        });
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.casinoBtn, this.onCasionClick, this)
    }
    if (t.diceGameEnabled) {
        this.diceGameButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "dice_game"));
        this.diceGameButton.sprite.hitArea = new canvas.px.Circle(46,46,36);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: this.diceGameButton,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(700)))
        });
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this)
    }
    this.magicMirrorButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "icon_mirror"));
    this.magicMirrorButton.x = 10;
    this.magicMirrorButton.visible = t.magicMirrorEndTime > t.serverTime.getTime();
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.magicMirrorButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(732)))
    });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.magicMirrorButton, this.onMagicMirrorClick, this);
    this.addChild(this.cont2);
    this.cont2.addChild(this.cont);
    this.addChild(this.location_mask);
    if (this.casinoBtn != null)
        this.addChild(this.casinoBtn);
    if (this.diceGameButton != null)
        this.addChild(this.diceGameButton);
    this.addChild(this.curls);
    this.addChild(this.header);
    this.addChild(this.caption);
    this.addChild(this.techBtn);
    this.techBtn.position.set(1028, 305);
    this.addChild(this.infoBtn);
    this.infoBtn.position.set(1080, 105);
    this.addChild(this.scroll);
    this.addChild(this.scrollV);
    this.addChild(this.magicMirrorButton);
    this.eventsContainer = new canvas.px.Container;
    this.addChild(this.eventsContainer);
    this.eventsContainer.position.set(15, 70);
    var e;
    var a;
    for (var i = 0; i < t.NPCEvents.length; i++) {
        e = t.NPCEvents[i];
        a = new canvas.app.location.view.popups.NPCEventBtn(e);
        this.eventsContainer.addChild(a)
    }
    this.updateNPCEvents();
    canvas.EventManager.addEventListener(canvas.app.location.Event.UPDATE_NPC_EVENTS, null, this.updateNPCEvents, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.MOVE_TO_ANIM, null, this.moveToAnimHandler, this)
}
;
canvas.app.location.view.LocSide.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.LocSide.prototype.scrollHandler = function() {
    if (this.scroll.isDisabled()) {
        this.location_cont.x = 0
    } else {
        this.location_cont.x = -Math.round(this.scroll.current)
    }
}
;
canvas.app.location.view.LocSide.prototype.scrollVHandler = function() {
    if (this.scrollV.isDisabled()) {
        this.location_cont.y = this.locationCurType == "mid" ? 0 : 15
    } else {
        this.location_cont.y = (this.locationCurType == "mid" ? 0 : 15) - Math.round(this.scrollV.current)
    }
}
;
canvas.app.location.view.LocSide.prototype.onCasionClick = function() {
    canvas.Functions.navigateToURL(canvas.app.location.model.CasinoLink, "_self")
}
;
canvas.app.location.view.LocSide.prototype.onDiceGameClick = function() {
    openHeavensGift(canvas.app.location.model.canvasMinigamesFlag);
    canvas.app.location.model.diceGameEnabled = false;
    this.update()
}
;
canvas.app.location.view.LocSide.prototype.update = function() {
    if (this.diceGameButton) {
        if (canvas.app.location.model.diceGameEnabled) {
            if (!this.diceGameButton.parent) {
                this.addChild(this.diceGameButton);
                canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
                    target: this.diceGameButton,
                    params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(700)))
                });
                canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this)
            }
        } else {
            if (this.diceGameButton.parent) {
                this.removeChild(this.diceGameButton);
                canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
                    target: this.diceGameButton
                });
                canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this)
            }
        }
    }
}
;
canvas.app.location.view.LocSide.prototype.onMagicMirrorClick = function() {
    _top().openMagicMirror(canvas.app.location.model.canvasMinigamesFlag)
}
;
canvas.app.location.view.LocSide.prototype.loadLocation = function() {
    if (this.locMidIsSartLoading && !this.locMidIsLoaded || this.locIsStartLoading && !this.locIsLoaded)
        return;
    this.locationCurTypePrev = this.locationCurType;
    if (canvas.app.location.model.hh > canvas.app.location.Const.LOC_SMALL_HEIGHT && this.objTown.bg_mid != "") {
        this.locationCurType = "mid";
        if (this.locMidIsSartLoading) {
            if (this.locMidIsLoaded) {
                this.location = this.location_mid;
                this.resizeLocation()
            }
            return
        }
        this.startLoad(this.objTown.bg_mid, this.getLocationMid);
        this.locMidIsSartLoading = true
    } else {
        this.locationCurType = "small";
        if (this.locIsStartLoading) {
            if (this.locIsLoaded) {
                this.location = this.location_small;
                this.resizeLocation()
            }
            return
        }
        this.startLoad(this.objTown.bg, this.getLocation);
        this.locIsStartLoading = true
    }
}
;
canvas.app.location.view.LocSide.prototype.loadProgress = function(t) {
    if (this.preloader)
        this.preloader.gotoAndStop(Math.round(t.params.progress))
}
;
canvas.app.location.view.LocSide.prototype.loadCompleteOperations = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.getLocationMid, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.getLocation, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.loadProgress, this);
    if (this.preloader) {
        this.preloader.destroy();
        delete this.preloader
    }
}
;
canvas.app.location.view.LocSide.prototype.startLoad = function(t, e) {
    if (this.sky)
        this.sky.visible = false;
    if (this.snow)
        this.snow.visible = false;
    var a = canvas.Config.areasPath + t + "/" + t;
    this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader");
    this.preloader.frameEvent = canvas.app.location.Event.ENTER_FRAME;
    this.preloader.position.set(Math.round(this.ww / 2), Math.round(this.hh / 2));
    this.addChild(this.preloader);
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, e, this);
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.loadProgress, this);
    canvas.ResourceLoader.add([a + ".mci", a + ".json"])
}
;
canvas.app.location.view.LocSide.prototype.getLocation = function(t) {
    this.loadCompleteOperations();
    this.location_small = new canvas.app.location.view.LocContents(this.objTown.bg,canvas.app.location.model.OBJ_TOWN.items);
    this.location = this.location_small;
    if (this.location == null) {
        canvas.app.location.log("ERR: found old location [ " + this.objTown.bg + " ]", 16711680);
        return
    }
    this.completeLocation()
}
;
canvas.app.location.view.LocSide.prototype.getLocationMid = function(t) {
    this.loadCompleteOperations();
    this.location_mid = new canvas.app.location.view.LocContents(this.objTown.bg_mid,canvas.app.location.model.OBJ_TOWN.items);
    this.location = this.location_mid;
    if (this.location == null) {
        canvas.app.location.log("ERR: found old location [ " + objTown.bg + " ]", 16711680);
        return
    }
    this.completeLocation()
}
;
canvas.app.location.view.LocSide.prototype.completeLocation = function() {
    switch (this.locationCurType) {
    case "small":
        this.locIsLoaded = true;
        break;
    case "mid":
        this.locMidIsLoaded = true;
        break
    }
    this.location_cont.addChild(this.location);
    if (this.sky)
        this.sky.visible = true;
    if (this.snow)
        this.snow.visible = true;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.COMPLETE, null, this);
    this.resizeLocation();
    this.setScrollSize(this.ww - 28);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.RESIZE);
    this.resetHorizontalScrollPos()
}
;
canvas.app.location.view.LocSide.prototype.setSky = function(t) {
    this.sky = t;
    this.location_cont.addChildAt(t, 0)
}
;
canvas.app.location.view.LocSide.prototype.setSnow = function(t) {
    this.snow = t;
    this.cont.addChild(this.snow)
}
;
canvas.app.location.view.LocSide.prototype.resetHorizontalScrollPos = function() {
    if (this.scroll)
        this.scroll.current = Math.round(this.scroll.max * .5);
    this.scrollHandler();
    if (this.scrollV)
        this.scrollV.current = this.scrollV.max
}
;
canvas.app.location.view.LocSide.prototype.resize = function(t) {
    var e = this.getLocationHeight();
    var a = this.hPosMax == 0 ? 0 : this.hPos / this.hPosMax;
    if (this.location != null) {
        this.hPosMax = this.hh >= e ? 0 : e - this.hh;
        if (this.locationCurType != this.locationCurTypePrev) {
            this.resetHorizontalScrollPos()
        } else {
            this.hPos = this.hPosMax * a
        }
    }
    this.location_mask.clear();
    this.location_mask.beginFill(255, 1);
    this.location_mask.drawRect(15, 14, this.ww - 28, this.hh - 25);
    this.location_mask.endFill();
    this.ww = t;
    this.curls.width = this.ww;
    this.curls.height = this.hh - 3;
    this.caption.x = Math.round((this.ww - this.caption.width) / 2);
    this.header.x = Math.round((this.ww - this.header.width) / 2);
    this.setScrollSize(this.ww - 28);
    this.scroll.position.set(30, this.hh - 20);
    this.scrollV.position.set(this.ww - 20, 0);
    this.techBtn.position.set(this.ww - 10, this.hh - 20);
    this.infoBtn.position.set(this.ww - 10, 100);
    if (this.casinoBtn != null)
        this.casinoBtn.y = this.hh - 100;
    if (this.magicMirrorButton != null)
        this.magicMirrorButton.y = this.hh - 130;
    if (this.diceGameButton != null) {
        this.diceGameButton.position.set(this.techBtn.x - this.techBtn.width - 93, this.techBtn.y - 85)
    }
    if (this.preloader)
        this.preloader.position.set(Math.round(this.ww / 2), Math.round(this.hh / 2))
}
;
canvas.app.location.view.LocSide.prototype.setScrollSize = function(t) {
    var e = this.getLocationWidth();
    this.scroll.max = e - t - 14;
    this.scroll.setSize(t - 35, 19);
    var a = this.scroll._width - this.scroll.padding * 2 - this.scroll.max;
    this.drag.setSize(a < 300 ? 300 : a, 19);
    if (this.scroll.max == 0) {
        this.location_cont.x = 0;
        this.scroll.visible = false
    } else {
        this.scroll.visible = true;
        this.scroll.update();
        this.scroll.current = Math.round(this.scroll.max * .5)
    }
    t = this.hh - 14;
    e = this.getLocationHeight();
    this.scrollV.max = e - t - 14;
    this.scrollV.setSize(19, this.hh);
    a = this.scrollV._height - this.scrollV.max;
    this.dragV.setSize(19, a < 200 ? 200 : a);
    if (this.scrollV.max == 0) {
        this.location_cont.y = 0;
        this.scrollV.visible = false
    } else {
        this.scrollV.visible = true;
        this.scrollV.current = this.scrollV.max
    }
    this.scrollHandler();
    this.scrollVHandler()
}
;
canvas.app.location.view.LocSide.prototype.resizeLocation = function() {
    switch (this.locationCurType) {
    case "small":
        if (this.location_small != null && !this.location_small.parent) {
            this.location_cont.addChild(this.location_small);
            this.location_small.location.start()
        }
        if (this.location_mid != null && this.location_mid.parent) {
            this.location_cont.removeChild(this.location_mid);
            this.location_mid.location.stop()
        }
        break;
    case "mid":
        if (this.location_small != null && this.location_small.parent) {
            this.location_cont.removeChild(this.location_small);
            this.location_small.location.stop()
        }
        if (this.location_mid != null && !this.location_mid.parent) {
            this.location_cont.addChild(this.location_mid);
            this.location_mid.location.start()
        }
        break
    }
    this.scrollHandler();
    this.scrollVHandler()
}
;
canvas.app.location.view.LocSide.prototype.updateNPCEvents = function() {
    var t = 0;
    var e;
    var a = this.eventsContainer.children.length;
    while (a--) {
        e = this.eventsContainer.getChildAt(a);
        e.x = t;
        t += e.imageWidth + 5
    }
}
;
canvas.app.location.view.LocSide.prototype.activate = function() {
    this.actived = true;
    this.cont.filters = []
}
;
canvas.app.location.view.LocSide.prototype.deactivate = function() {
    this.actived = false
}
;
canvas.app.location.view.LocSide.prototype.grayscaleLoc = function(t) {
    this.location_cont.filters = t ? [canvas.Functions.getGreyScale(.3)] : []
}
;
canvas.app.location.view.LocSide.prototype.getLocationWidth = function() {
    if (this.location == null)
        return canvas.app.location.Const.LOC_SMALL_WIDTH + 2;
    if (this.locationCurType == "small" || this.objTown.bg_mid == "") {
        return canvas.app.location.Const.LOC_SMALL_WIDTH * this.location.scale.x
    } else {
        return canvas.app.location.Const.LOC_MID_WIDTH * this.location.scale.x
    }
}
;
canvas.app.location.view.LocSide.prototype.getLocationHeight = function() {
    if (this.location == null)
        return canvas.app.location.Const.LOC_SMALL_HEIGHT;
    if (this.locationCurType == "small" || this.objTown.bg_mid == "") {
        return canvas.app.location.Const.LOC_SMALL_HEIGHT
    } else {
        return canvas.app.location.Const.LOC_MID_HEIGHT
    }
}
;
canvas.app.location.view.LocSide.prototype.moveToAnimHandler = function(t) {
    var e = t.params;
    var a = this.getLocationWidth();
    var i = Math.round(a * .4);
    var s = Math.round(a * .6);
    var n = e.getBounds(e.parent);
    var r = e.x + e.width;
    if (r <= i) {
        this.scrollTargetValue = 0
    } else if (r - e.width >= s) {
        this.scrollTargetValue = this.scroll.max
    } else {
        this.scrollTargetValue = Math.round(this.scroll.max * .5)
    }
    clearTimeout(this.timeOutId);
    this.timeOutId = setTimeout(this.startMoveToAnim.bind(this), 1e3)
}
;
canvas.app.location.view.LocSide.prototype.animOutHandler = function(t) {
    if (this.timeOutId)
        clearTimeout(this.timeOutId);
    if (this.tween)
        this.tween.stop()
}
;
canvas.app.location.view.LocSide.prototype.startMoveToAnim = function() {
    this.tween = new canvas.px.Tween.Tween(this.scroll).to({
        current: this.scrollTargetValue
    }, 1e3).easing(canvas.px.Tween.Easing.Linear.None).onUpdate(this.scrollHandler.bind(this)).start()
}
;
canvas.app.location.view.LocSide.prototype.start = function() {
    if (this.location)
        this.location.location.start()
}
;
canvas.app.location.view.LocSide.prototype.stop = function() {
    if (this.location_small)
        this.location_small.location.stop();
    if (this.location_mid)
        this.location_mid.location.stop()
}
;
canvas.app.location.view.LocContents = function(t, e) {
    Object.defineProperty(this, "showOverOnAnim", {
        get: function() {},
        set: function(t) {
            this.overOnAnim(t)
        }
    });
    Object.defineProperty(this, "showOutOnAnim", {
        get: function() {},
        set: function(t) {
            this.outOnAnim(t)
        }
    });
    canvas.px.Container.call(this);
    this.location = new canvas.app.location.view.LocationView(t);
    this.items = e == null ? new Object : this.cloneObject(e);
    this.addChild(this.location);
    if (this.location.ready) {
        this.preInit()
    } else {
        canvas.EventManager.addEventListener(canvas.app.location.Event.LOCATION_READY, null, this.preInit, this)
    }
}
;
canvas.app.location.view.LocContents.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.LocContents.prototype.cloneObject = function(t) {
    if (t.clone)
        return t.clone();
    var e = new Object;
    for (var a in t) {
        if (a != "btn") {
            e[a] = t[a] && typeof t[a] == "object" ? this.cloneObject(t[a]) : t[a]
        }
    }
    return e
}
;
canvas.app.location.view.LocContents.prototype.preInit = function() {
    canvas.EventManager.removeEventListener(canvas.app.location.Event.LOCATION_READY, null, this.preInit, this);
    this.init();
    this.update()
}
;
canvas.app.location.view.LocContents.prototype.init = function() {
    var t = canvas.app.location.model;
    var e = {};
    var a;
    for (a in this.items) {
        e[this.items[a].id] = this.items[a]
    }
    for (a in this.location.buttons) {
        var i = this.location.buttons[a];
        var s = this.location.anims[a];
        var n;
        if (e[a]) {
            if (!e[a].hide && e[a].name) {
                n = e[a].mode == t.MODE_AREA ? 6770493 : e[a].mode == t.MODE_NPC ? 6585600 : e[a].mode == t.MODE_HOUSE ? 11813888 : 6770493;
                canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
                    target: i.button,
                    params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(e[a].name,n))
                })
            } else {}
        } else {
            if (i && i.parent)
                i.parent.removeChild(i);
            if (s && s.parent)
                s.parent.removeChild(s)
        }
    }
}
;
canvas.app.location.view.LocContents.prototype.update = function() {
    var t;
    var e = false;
    var a = 0;
    var i = canvas.app.location.model;
    if (i.USER_NUB) {
        for (var s in i.OBJ_NUB_LOC_ITEMS) {
            if (s == i.OBJ_TOWN.swf_file) {
                e = true;
                a = i.OBJ_NUB_LOC_ITEMS[s]
            }
        }
    }
    for (var n in this.location.anims) {
        t = this.location.anims[n];
        if (t == null)
            continue;
        if (e && parseInt(a) == parseInt(n) || i.blinkIds.indexOf(parseInt(n)) >= 0) {
            t.alwaysLight = true
        } else {
            t.alwaysLight = false
        }
    }
}
;
canvas.app.location.view.LocContents.prototype.overOnAnim = function(t) {
    for (var e in this.location.anims) {
        var a = this.location.anims[e];
        if (e == t.id) {
            a.show();
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.MOVE_TO_ANIM, null, a)
        } else {
            a.hide()
        }
    }
}
;
canvas.app.location.view.LocContents.prototype.outOnAnim = function(t) {
    for (var e in this.location.anims) {
        var a = this.location.anims[e];
        if (e == t.id) {
            a.hide();
            break
        }
    }
}
;
canvas.app.location.view.ResurrectWindow = function() {
    this._itemsCount = 0;
    Object.defineProperty(this, "itemsCount", {
        get: function() {
            return this._itemsCount
        },
        set: function(t) {
            if (this._itemsCount === t)
                return;
            this._itemsCount = t;
            if (!this.items)
                this.items = new Array;
            var e = this.items.length;
            var a;
            var i;
            if (e < this._itemsCount) {
                for (a = e; a < this._itemsCount; a++) {
                    i = new canvas.app.location.view.elements.ResurrectItem;
                    this.container.addChild(i);
                    this.items.push(i);
                    i.position.set(a % 3 * (i.width - 20), Math.floor(a / 3) * (i.height + 10))
                }
            }
            e = this.items.length;
            for (a = 0; a < e; a++) {
                this.items[a].visible = a < this._itemsCount
            }
        }
    });
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.back.width
        }
    });
    canvas.px.Window.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "resurrect_back")));
    this.header = new canvas.px.Container;
    this.addChild(this.header);
    this.header.interactive = true;
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD_STROKE,16577975,this.back.width,25,"center","top",0,0);
    this.headerField.y = 4;
    this.headerField.text = canvas.Translator.getText(29);
    this.header.addChild(this.headerField);
    this.closeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "cross"));
    this.closeButton.x = this.back.width - this.closeButton.width;
    this.closeButton.interactive = true;
    this.addChild(this.closeButton);
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.container.position.set(20, 35);
    var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var e = new canvas.px.Container;
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5]);
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    i.scale.y = -1;
    i.position.y = -i.height + 2;
    e.addChild(i);
    a.setSize(21, 40);
    this.drag = a;
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,t,e,new canvas.px.Mask(21,100),a,this);
    this.scroll.position.set(this.back.width - 40, 30);
    this.scroll.padding = 13;
    this.scroll.step = 30;
    this.scroll.setSize(21, 176);
    this.containerMask = new canvas.px.Mask(this.back.width,170);
    this.addChild(this.containerMask);
    this.containerMask.position.set(20, 35);
    this.container.mask = this.containerMask;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this)
}
;
canvas.app.location.view.ResurrectWindow.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.location.view.ResurrectWindow.prototype.scrollHandler = function() {
    if (this.scroll.parent)
        this.container.y = 35 - this.scroll.current
}
;
canvas.app.location.view.ResurrectWindow.prototype.update = function() {
    var t = canvas.app.location.model;
    if (t.resurrectData == null)
        return;
    var e = 0;
    var a = t.resurrectData.length;
    for (e = 0; e < a; e++) {
        this.items[e].data = t.resurrectData[e]
    }
    this.scroll.max = this.container.height - 170;
    if (a > 6) {
        this.addChild(this.scroll)
    } else {
        if (this.scroll.parent)
            this.removeChild(this.scroll)
    }
    this.container.x = this.scroll.parent ? 20 : 29
}
;
canvas.app.location.view.ProgressWin = function(t, e, a, i) {
    canvas.px.Container.call(this);
    this.interactive = true;
    var s = canvas.app.location.model;
    if (t == undefined)
        t = 0;
    if (e == undefined)
        e = 0;
    if (a == undefined)
        a = 0;
    if (i == undefined)
        i = "";
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "popup_progress_win"));
    if (t == 0)
        return;
    var n = Date.now();
    var r = t - n;
    this.ctime = n;
    this.ftime = e;
    this.stime = a;
    this.stime -= r;
    this.ftime -= r + 1;
    this.caption_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,this.bg.width,20,"center");
    this.caption_tf.text = i;
    this.caption_tf.y = -4;
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0);
    this.header.width = Math.round(this.caption_tf.textWidth) + 70;
    this.header.y = -7;
    this.but_cancel = new canvas.app.view.OldButton(12124160);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.cancelClickHandler, this);
    this.but_cancel.setTitle(s.STRINGS_ARR[s.S_CANCEL]);
    this.bar_red = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_bar_red"));
    this.bar_green = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_bar_green"));
    this.green_mask = new canvas.ui.Progress;
    this.green_mask.setSize(this.bar_green.width, this.bar_green.height);
    this.bar_green.mask = this.green_mask.sprite;
    this.addChild(this.bg);
    this.addChild(this.header);
    this.addChild(this.caption_tf);
    this.addChild(this.bar_red);
    this.addChild(this.bar_green);
    this.addChild(this.green_mask);
    this.addChild(this.but_cancel);
    this.header.x = Math.round((this.width - this.header.width) / 2);
    this.but_cancel.position.set(Math.round((this.width - this.but_cancel.width) / 2), 51);
    this.bar_red.position.set(Math.round((this.width - this.bar_red.width) / 2), 20);
    this.bar_green.position.set(this.bar_red.x, this.bar_red.y);
    this.green_mask.position.set(this.bar_green.x, this.bar_green.y)
}
;
canvas.app.location.view.ProgressWin.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.ProgressWin.prototype.startProgress = function() {
    if (this.ctime >= this.ftime) {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_DONE)
    } else {
        canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.location.view.ProgressWin.prototype.frameHandler = function() {
    var t = Date.now();
    this.green_mask.progress = (t - this.stime) / (this.ftime - this.stime);
    if (this.green_mask.progress >= 1) {
        canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_DONE)
    }
}
;
canvas.app.location.view.ProgressWin.prototype.cancelClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_CANCEL)
}
;
canvas.app.location.view.ProgressWin.prototype.destroy = function() {
    if (this.parent)
        this.parent.removeChild(this);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.elements.LocationAnim = function(t) {
    this._alwaysLight = false;
    Object.defineProperty(this, "alwaysLight", {
        get: function() {
            return this._alwaysLight
        },
        set: function(t) {
            this._alwaysLight = t;
            if (t) {
                this.speed = .1;
                this.show()
            } else {
                this.speed = .25;
                this.hide()
            }
        }
    });
    canvas.px.Container.call(this);
    this.anim = t;
    this.direction = false;
    this.alpha = 0;
    this.speed = .25
}
;
canvas.app.location.view.elements.LocationAnim.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.LocationAnim.prototype.show = function() {
    this.direction = true;
    this.addChild(this.anim);
    if (this.anim.gotoAndPlay != undefined) {
        this.anim.gotoAndPlay(1)
    }
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.location.view.elements.LocationAnim.prototype.hide = function() {
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.location.view.elements.LocationAnim.prototype.frameHandler = function() {
    if (this.direction) {
        this.alpha += this.speed;
        if (this.alpha >= 1) {
            this.alpha = 1;
            if (this.alwaysLight) {
                this.direction = !this.direction;
                return
            }
            canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    } else {
        this.alpha -= this.speed;
        if (this.alpha <= 0) {
            this.alpha = 0;
            if (this.alwaysLight) {
                this.direction = !this.direction;
                return
            }
            canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
            if (this.anim.stop != undefined) {
                this.anim.stop()
            }
            if (this.anim.parent) {
                this.removeChild(this.anim)
            }
        }
    }
}
;
canvas.app.location.view.elements.Clocks = function() {
    canvas.px.Container.call(this);
    this.rect = new canvas.px.RoundRect(0,.4,80,34,10,10);
    this.addChild(this.rect);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,80,20,"center");
    this.title.y = 2;
    this.addChild(this.title);
    this.time = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,80,20,"center");
    this.addChild(this.time);
    this.time.y = 18
}
;
canvas.app.location.view.elements.Clocks.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.Clocks.prototype.update = function(t) {
    var e = new Date;
    this.title.text = canvas.Translator.getText(314) + ":";
    if (t > 0) {
        e.setTime(t * 1e3);
        this.time.text = canvas.Functions.setNumberLen(e.getMinutes()) + ":" + canvas.Functions.setNumberLen(e.getSeconds());
        this.visible = true
    }
}
;
canvas.app.location.view.elements.MapZoom = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    this.curl = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "zoom_curl"));
    this.openMapBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_map_btn"));
    this.plusBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_plus_btn"));
    this.minusBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_minus_btn"));
    this.refreshBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_refresh_btn"));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.openMapBtn, this.openMapHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.plusBtn, this.zoomInMapHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.minusBtn, this.zoomOutMapHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.refreshBtn, this.refreshMapHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.openMapBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_OPEN_WORLD_MAP]))
    });
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.plusBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_ZOOM_IN]))
    });
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.minusBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_ZOOM_OUT]))
    });
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.refreshBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_REFRESH_MAP]))
    });
    this.plusBtn.visible = false;
    this.bgBtn = new canvas.px.Graphics;
    this.bgBtn.beginFill(0, 0);
    this.bgBtn.moveTo(5, -5);
    this.bgBtn.lineTo(this.curl.width + 5, this.curl.height - 5);
    this.bgBtn.lineTo(5, this.bgBtn.height - 5);
    this.bgBtn.lineTo(5, -5);
    this.bgBtn.endFill();
    this.bgBtn.interactive = true;
    this.openMapBtn.position.set(7, 56);
    this.plusBtn.position.set(20, 29);
    this.minusBtn.position.set(20, 29);
    this.refreshBtn.position.set(58, 72);
    this.addChild(this.curl);
    this.addChild(this.bgBtn);
    this.addChild(this.openMapBtn);
    this.addChild(this.plusBtn);
    this.addChild(this.minusBtn);
    this.addChild(this.refreshBtn)
}
;
canvas.app.location.view.elements.MapZoom.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.MapZoom.prototype.zoomMode = function(t) {
    if (t == 1) {
        this.plusBtn.visible = true;
        this.minusBtn.visible = false
    } else {
        this.plusBtn.visible = false;
        this.minusBtn.visible = true
    }
}
;
canvas.app.location.view.elements.MapZoom.prototype.refreshMapHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.REFRESH_MAP, this)
}
;
canvas.app.location.view.elements.MapZoom.prototype.zoomOutMapHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_OUT, this)
}
;
canvas.app.location.view.elements.MapZoom.prototype.zoomInMapHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_IN, this)
}
;
canvas.app.location.view.elements.MapZoom.prototype.openMapHandler = function() {
    openMap()
}
;
canvas.app.location.view.elements.CurlBack = function() {
    canvas.px.Container.call(this);
    this.curl2_0 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_0"));
    this.curl2_2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_2"));
    this.curl2_5 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_5"));
    this.curl2_7 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_7"));
    this.curl2_1 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_1"),20,17);
    this.curl2_3 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_3"),17,24);
    this.curl2_4 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_4"),17,24);
    this.curl2_6 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_6"),20,17);
    this.addChild(this.curl2_0);
    this.addChild(this.curl2_1);
    this.addChild(this.curl2_2);
    this.addChild(this.curl2_3);
    this.addChild(this.curl2_4);
    this.addChild(this.curl2_5);
    this.addChild(this.curl2_6);
    this.addChild(this.curl2_7);
    this.setSize(100, 100)
}
;
canvas.app.location.view.elements.CurlBack.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.CurlBack.prototype.setSize = function(t, e) {
    var a = 32;
    this.curl2_1.position.set(a, 0);
    this.curl2_1.width = t - a * 2;
    this.curl2_2.position.set(t - a, 0);
    this.curl2_3.position.set(0, a);
    this.curl2_3.height = e - a * 2;
    this.curl2_4.position.set(t - 17, a);
    this.curl2_4.height = e - a * 2;
    this.curl2_5.position.set(0, e - a);
    this.curl2_6.position.set(a, e - 17);
    this.curl2_6.width = t - a * 2;
    this.curl2_7.position.set(t - a, e - a)
}
;
canvas.app.location.view.elements.LocTimer = function(t, e) {
    canvas.px.Container.call(this);
    var a = canvas.app.location.model;
    this.timerIsDone = false;
    this.ftime = t;
    this.ftime_max = e;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "timer"));
    this.bar = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "timer_bar"));
    this.bar.position.set(20, 20);
    this.bar_mask = new canvas.px.Mask(this.bar.width,this.bar.height);
    this.bar_mask.position.set(20, 20);
    this.bar.mask = this.bar_mask;
    this.time_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,10551296,60,16,"center");
    this.time_tf.text = "00:00:00";
    this.time_tf.position.set(69, 34);
    this.title_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,5391675,123,16,"center");
    this.title_tf.text = canvas.app.location.model.STRINGS_ARR[a.S_TIME_TRANSITION];
    this.title_tf.position.set(38, 2);
    this.addChild(this.bg);
    this.addChild(this.bar);
    this.addChild(this.bar_mask);
    this.addChild(this.time_tf);
    this.addChild(this.title_tf);
    this.timer = setInterval(this.timerHandler.bind(this), 500)
}
;
canvas.app.location.view.elements.LocTimer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.LocTimer.prototype.timerStart = function() {
    this.bar.texture = canvas.ResourceLoader.getImage("ui", "timer_bar");
    this.autoDone = false;
    var t = (this.ftime_max - this.ftime) * 1e3;
    this.cur_time = Date.now();
    this.start_time = this.cur_time - t;
    this.fin_time = this.cur_time + this.ftime * 1e3;
    if (this.ftime_max == 0) {
        this.timerDone();
        this.visible = false
    } else {
        this.intervalId = setInterval(this.timerTik.bind(this), 70);
        this.timerTik()
    }
}
;
canvas.app.location.view.elements.LocTimer.prototype.timerTik = function() {
    this.cur_time = Date.now();
    if (this.cur_time <= this.fin_time) {
        this.time_tf.text = this.timeToStr(parseInt((this.fin_time - this.cur_time + 999) / 1e3));
        this.bar_mask.scale.x = Math.min(1, 1 - (this.cur_time - this.start_time) / (this.fin_time - this.start_time))
    } else {
        clearInterval(this.intervalId);
        this.timerDone()
    }
}
;
canvas.app.location.view.elements.LocTimer.prototype.timerDone = function() {
    var t = canvas.app.location.model;
    this.bar_mask.scale.x = 0;
    this.title_tf.text = t.STRINGS_ARR[t.S_TRANSITION_POSSIBLE];
    this.time_tf.text = "00:00:00";
    this.timerIsDone = true;
    this.title_tf.color = 5391675;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.TIMER_DONE, this)
}
;
canvas.app.location.view.elements.LocTimer.prototype.timeToStr = function(t) {
    var e = "";
    var a = Math.floor(t / 3600);
    t -= a * 3600;
    var i = Math.floor(t / 60);
    t -= i * 60;
    var s = t;
    e = canvas.Functions.setNumberLen(a) + ":" + canvas.Functions.setNumberLen(i) + ":" + canvas.Functions.setNumberLen(s);
    return e
}
;
canvas.app.location.view.elements.LocTimer.prototype.timerHandler = function() {
    if (this.timerIsDone) {
        if (canvas.app.location.model.autoPenalty >= 0 && !this.autoDone) {
            if (!this.autoTime) {
                this.autoTime = this.fin_time + this.ftime * 10 * canvas.app.location.model.autoPenalty;
                this.bar.texture = canvas.ResourceLoader.getImage("ui", "timer_bar_green")
            } else {
                this.bar_mask.scale.x = Math.min(1, 1 - (Date.now() - this.fin_time) / (this.autoTime - this.fin_time));
                if (this.autoTime <= Date.now()) {
                    if (canvas.app.location.model.manorAutoEnter) {
                        canvas.app.location.model.finishSessTarget();
                        canvas.Functions.navigateToURL("estate.php?mode=enter", "_self")
                    } else {
                        canvas.EventManager.dispatchEvent(canvas.app.location.Event.AUTO_TURN, this)
                    }
                    this.bar_mask.scale.x = 0;
                    this.autoDone = true
                }
            }
        }
    } else {
        this.title_tf.color = this.title_tf.color == 13369344 ? 5391675 : 13369344
    }
}
;
canvas.app.location.view.elements.LocTimer.prototype.destroy = function() {
    clearInterval(this.intervalId);
    clearInterval(this.timer);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.elements.ListItem = function(t, e, a) {
    Object.defineProperty(this, "id", {
        get: function() {
            return parseInt(a.id)
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "confirm", {
        get: function() {
            return parseInt(this.item.confirm) == 1
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "confirm_text", {
        get: function() {
            return !this.item.confirm_text ? null : this.item.confirm_text
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "href", {
        get: function() {
            return String(this.item.href)
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "farm", {
        get: function() {
            return String(this.item.farm)
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "overloaded", {
        get: function() {
            return parseInt(this.item.refresh) == 1
        },
        set: function(t) {}
    });
    Object.defineProperty(this, "select", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.showSelect();
            else
                this.hideSelect()
        }
    });
    Object.defineProperty(this, "light", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.showLight();
            else
                this.hideLight();
            if (this.compass) {
                this.compass.visible = t;
                if (this.compass.visible)
                    this.clock.visible = false
            }
        }
    });
    Object.defineProperty(this, "gray", {
        get: function() {
            return false
        },
        set: function(t) {
            if (t)
                this.showGray();
            else
                this.hideGray()
        }
    });
    canvas.px.Container.call(this);
    var i = canvas.app.location.model;
    this.item = {};
    this.start_frame = 0;
    this.cur_frame = 0;
    this.stop_frame = 30;
    this.div = 1;
    this.isDestroyed = false;
    this.item = a;
    this.ww = t;
    this.hh = e;
    this.cont = new canvas.px.Container;
    this.over_bg = new canvas.px.Graphics;
    this.over_bg.alpha = 0;
    this.light_bg = new canvas.px.Graphics;
    this.light_bg.alpha = 0;
    this.ico_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.item.mode));
    this.ico_bmp.position.set(4, 4);
    if (this.item.mode == i.MODE_AREA) {
        this.clock = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "clock"));
        this.clock.position.set(4, 4);
        this.clock.visible = false;
        this.addChild(this.clock);
        this.compass = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "compass"));
        this.compass.position.set(3, 3);
        this.compass.visible = false
    }
    this.creat_bg(this.over_bg, this.ww - 2, this.hh, 8742487, 16777215);
    this.creat_bg(this.light_bg, this.ww - 2, this.hh, 14243584, 16737792);
    var s = this.item.mode == i.MODE_AREA ? 6770493 : this.item.mode == i.MODE_NPC ? 6585600 : this.item.mode == i.MODE_HOUSE ? 11813888 : 6770493;
    this.name_tf = new canvas.ui.Text(i.IsBold ? canvas.Const.FONT_TAHOMA_12_BOLD : canvas.Const.FONT_TAHOMA_12,s,300,20,"left");
    this.name_tf.text = this.item.name;
    this.name_tf.position.set(22, 1);
    this.name_copy_tf = new canvas.ui.Text(i.IsBold ? canvas.Const.FONT_TAHOMA_12_BOLD : canvas.Const.FONT_TAHOMA_12,s,300,20,"left");
    this.name_copy_tf.text = this.item.name;
    this.name_copy_tf.position.set(10 + this.name_tf.x + this.name_tf.field.textWidth, 1);
    this.txt_cont = new canvas.px.Container;
    this.txt_cont.addChild(this.name_tf);
    if (this.name_tf.x + this.name_tf.field.textWidth > this.ww)
        this.txt_cont.addChild(this.name_copy_tf);
    this.txt_mask = new canvas.px.Mask(this.name_tf._width,this.name_tf._height);
    this.txt_mask.x = 21;
    this.txt_cont.mask = this.txt_mask;
    this.cont.addChild(this.over_bg);
    this.cont.addChild(this.ico_bmp);
    this.cont.addChild(this.txt_cont);
    this.cont.addChild(this.txt_mask);
    this.addChild(this.cont);
    this.addChild(this.light_bg);
    if (this.compass)
        this.addChild(this.compass);
    this.buttonMode = true;
    this.mouseover = this.mouseOverHandler.bind(this);
    this.mouseout = this.mouseOutHandler.bind(this);
    this.click = this.mouseClickHandler.bind(this);
    if (i.listOveredFlag)
        this.overList();
    canvas.EventManager.addEventListener(canvas.app.location.Event.AUTO_TURN, null, this.autoTurnHandler, this)
}
;
canvas.app.location.view.elements.ListItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.ListItem.prototype.refresh = function() {
    this.over_bg.alpha = 0
}
;
canvas.app.location.view.elements.ListItem.prototype.overList = function() {
    if (!this.clock)
        return;
    if (this.cont.filters == null || this.cont.filters.length == 0) {
        this.clock.visible = false;
        this.ico_bmp.visible = true
    } else {
        this.clock.visible = this.compass.visible ? false : true;
        this.ico_bmp.visible = false
    }
}
;
canvas.app.location.view.elements.ListItem.prototype.outList = function() {
    if (this.clock == null)
        return;
    this.clock.visible = false;
    this.ico_bmp.visible = true
}
;
canvas.app.location.view.elements.ListItem.prototype.moveTxtHandler = function() {
    if (this.name_tf.x + this.name_tf.field.textWidth <= this.ww)
        return;
    if (this.txt_cont.x < -this.txt_cont.width / 2)
        this.txt_cont.x = 3;
    else
        this.txt_cont.x -= 1
}
;
canvas.app.location.view.elements.ListItem.prototype.creat_bg = function(t, e, a, i, s) {
    t.beginFill(i, .8);
    t.drawRect(1, 0, e - 1, 1);
    t.drawRect(e - 1, 1, 1, a - 1);
    t.drawRect(0, a - 1, e - 1, 1);
    t.drawRect(0, 0, 1, a - 1);
    t.endFill();
    t.beginFill(s, .15);
    t.drawRect(1, 1, e - 2, a - 2);
    t.endFill()
}
;
canvas.app.location.view.elements.ListItem.prototype.mouseClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_CLICK, null, this.item)
}
;
canvas.app.location.view.elements.ListItem.prototype.mouseOverHandler = function() {
    this.over_bg.alpha = 1;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_OVER, null, this.item);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this)
}
;
canvas.app.location.view.elements.ListItem.prototype.mouseOutHandler = function() {
    this.over_bg.alpha = 0;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_OUT, null, this.item);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
    this.txt_cont.x = 0
}
;
canvas.app.location.view.elements.ListItem.prototype.showLight = function() {
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this)
}
;
canvas.app.location.view.elements.ListItem.prototype.hideLight = function() {
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this)
}
;
canvas.app.location.view.elements.ListItem.prototype.showSelect = function() {
    this.over_bg.alpha = 1;
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this)
}
;
canvas.app.location.view.elements.ListItem.prototype.hideSelect = function() {
    this.over_bg.alpha = 0;
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
    this.txt_cont.x = 0
}
;
canvas.app.location.view.elements.ListItem.prototype.showGray = function() {
    this.cont.filters = [canvas.Functions.getGreyScale(.5)];
    if (canvas.app.location.model.listOveredFlag)
        this.overList()
}
;
canvas.app.location.view.elements.ListItem.prototype.hideGray = function() {
    this.cont.filters = [];
    if (canvas.app.location.model.listOveredFlag)
        this.overList()
}
;
canvas.app.location.view.elements.ListItem.prototype.lightBgEnterFrameHandler = function() {
    this.cur_frame++;
    if (this.cur_frame < this.stop_frame) {
        this.light_bg.alpha = (this.div < 0 ? 1 : 0) + this.cur_frame / this.stop_frame * this.div
    } else {
        this.cur_frame = this.start_frame;
        this.div *= -1
    }
    if (this.isDestroyed) {
        canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this)
    }
}
;
canvas.app.location.view.elements.ListItem.prototype.autoTurnHandler = function() {
    if (this.compass && this.compass.visible) {
        this.mouseClickHandler()
    }
}
;
canvas.app.location.view.elements.ListItem.prototype.destroy = function() {
    this.isDestroyed = true;
    this.lightBgEnterFrameHandler();
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.AUTO_TURN, null, this.autoTurnHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.elements.Snow = function(t, e) {
    canvas.px.Container.call(this);
    if (e == undefined)
        e = canvas.app.location.Event.ENTER_FRAME;
    this.enterFrameEvent = e;
    this.count_snow = t;
    this.arr_snow = [];
    this.gravity = 3;
    this.share = new canvas.app.location.view.elements.SnowShare;
    this.setData();
    this.id_interval = setInterval(this.setData.bind(this), 3e3)
}
;
canvas.app.location.view.elements.Snow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.Snow.prototype.setData = function() {
    var t = this.share.getData();
    if (!this.count_snow)
        this.count_snow = t.snow_count;
    this.wind = {};
    this.wind.x = t.wind.x;
    this.wind.y = t.wind.y;
    var e = this.arr_snow.length;
    for (var a = 0; a < e; a++) {
        if (Math.abs(this.wind.x) > 2) {
            this.arr_snow[a].vibration_max = 3
        } else {
            this.arr_snow[a].vibration_max = 1
        }
    }
}
;
canvas.app.location.view.elements.Snow.prototype.init = function(t, e) {
    this.w = t;
    this.h = e;
    this.arr_snow = [];
    for (var a = 0; a < this.count_snow; a++) {
        var i = this.createSnowFlakes();
        canvas.EventManager.addEventListener(canvas.app.location.Event.SNOWBALL_KILL, i, this.killSnow, this);
        i.y = Math.round(this.h * Math.random());
        this.addChild(i);
        this.arr_snow.push(i)
    }
}
;
canvas.app.location.view.elements.Snow.prototype.createSnowFlakes = function() {
    var t = new canvas.app.location.view.elements.SnowBall(this.w,this.h,this.wind,this.gravity,this.enterFrameEvent);
    t.position.set(Math.round(this.w * Math.random()), -t.height);
    return t
}
;
canvas.app.location.view.elements.Snow.prototype.killSnow = function(t) {
    var e = t.target;
    e.initAlpha();
    e.position.set(Math.round(this.w * Math.random()), -e.height)
}
;
canvas.app.location.view.elements.Sky = function(t) {
    canvas.px.Container.call(this);
    this.name = t;
    this.stopped = true;
    this.anims = [];
    this.loopWidth = 1e3;
    if (!t)
        return;
    this.staticContent = new canvas.px.Container;
    this.dynamicContent = new canvas.px.Container;
    this.addChild(this.staticContent);
    this.addChild(this.dynamicContent);
    this.url = canvas.Config.skyPath + t + "/" + t;
    if (!canvas.ResourceLoader.get(this.url + ".mci")) {
        canvas.ResourceLoader.add([this.url + ".mci"]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this)
    } else {
        this.init()
    }
}
;
canvas.app.location.view.elements.Sky.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.Sky.prototype.init = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this);
    this.data = canvas.ResourceLoader.get(this.url + ".mci").data;
    if (this.data.loopWidth)
        this.loopWidth = this.data.loopWidth;
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    if (this.data[canvas.px.MovieClipProps.children]) {
        canvas.ResourceLoader.add([this.url + ".json"])
    } else {
        canvas.ResourceLoader.add([this.url + ".jpg"])
    }
}
;
canvas.app.location.view.elements.Sky.prototype.ready = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    if (this.data[canvas.px.MovieClipProps.children]) {
        var t;
        this.atlas = canvas.ResourceLoader.get(this.url + ".json").textures;
        var e = this.data[canvas.px.MovieClipProps.children].length;
        for (var a = 0; a < e; a++) {
            var i = this.data[canvas.px.MovieClipProps.children][a];
            var s = i.name == "dynamic_layer";
            var n = 3;
            for (var r = 0; r < n; r++) {
                if (i.mc) {
                    t = new canvas.px.MovieClipChild(i.mc,this.atlas,i.name + "/",null);
                    t.frameEvent = canvas.app.location.Event.ENTER_FRAME;
                    this.anims.push[t];
                    if (!this.stopped)
                        t.play();
                    else
                        t.gotoAndStop(1)
                } else {
                    t = new canvas.px.Sprite(this.atlas[i.name + ".png"])
                }
                t.position.set(i.x - r * this.loopWidth, i.y);
                if (s) {
                    this.dynamicContent.addChild(t)
                } else {
                    this.staticContent.addChild(t)
                }
            }
        }
    } else {
        for (var o = 0; o < 3; o++) {
            t = new canvas.ui.Image(this.url + ".jpg");
            t.position.set(-o * this.loopWidth, 0);
            this.dynamicContent.addChild(t)
        }
    }
    this.dynamicContent.x = this.loopWidth;
    if (!this.data.stop) {
        canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.updateHandler, this)
    }
}
;
canvas.app.location.view.elements.Sky.prototype.updateHandler = function() {
    if (this.stopeed)
        return;
    if (this.dynamicContent.x >= this.loopWidth * 2 - 1) {
        this.dynamicContent.x = this.loopWidth
    } else {
        this.dynamicContent.x += 1
    }
}
;
canvas.app.location.view.elements.Sky.prototype.stop = function() {
    this.stopped = true;
    for (var t = 0; t < this.anims.length; t++) {
        this.anims[t].stop()
    }
}
;
canvas.app.location.view.elements.Sky.prototype.start = function() {
    this.stopped = false;
    for (var t = 0; t < this.anims.length; t++) {
        this.anims[t].play()
    }
}
;
canvas.app.location.view.elements.SnowBall = function(t, e, a, i, s) {
    canvas.px.Graphics.call(this);
    this.enterFrameEvent = s;
    this.pers_set = .8;
    this.size_min = .5;
    this.size_max = 3;
    this.alpha_min = .2;
    this.alpha_max = 1;
    this.vibration_max = 1;
    this.time = 0;
    this.min_time = 0;
    this.max_time = 30;
    this.max_x = t;
    this.max_y = e;
    this.wind = a;
    this.gravity = i;
    this.init()
}
;
canvas.app.location.view.elements.SnowBall.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.location.view.elements.SnowBall.prototype.init = function() {
    canvas.EventManager.addEventListener(this.enterFrameEvent, null, this.enterFrameHandler, this);
    this.initAlpha()
}
;
canvas.app.location.view.elements.SnowBall.prototype.initAlpha = function() {
    this.clear();
    this.beginFill(16777215, 1);
    var t = Math.random();
    this.size = this.size_min + t * (this.size_max - this.size_min);
    this.drawCircle(0, 0, this.size);
    this.endFill();
    this.curr_alpha = this.alpha_min + t * (this.alpha_max - this.alpha_min);
    this.alpha = this.curr_alpha;
    this.hide_y = this.max_y - this.max_y * .5 * (1 - t);
    this.vibration = {
        x: 0,
        y: 0
    };
    if (Math.abs(this.wind.x) > 2) {
        this.vibration_max = 3
    } else {
        this.vibration_max = 1
    }
}
;
canvas.app.location.view.elements.SnowBall.prototype.enterFrameHandler = function() {
    this.x += this.vibration.x + this.wind.x;
    this.y += this.vibration.y + this.wind.y + this.gravity;
    this.time--;
    if (this.time <= 0) {
        this.time = this.min_time + Math.random() * (this.max_time - this.min_time);
        this.vibration.x = -this.vibration_max + Math.random() * this.vibration_max * 2;
        this.vibration.y = -this.vibration_max + Math.random() * this.vibration_max * 2
    }
    if (this.size < (this.size_max - this.size_min) * .99) {
        this.alpha = this.curr_alpha - this.curr_alpha * this.y / this.hide_y
    }
    if (this.y > this.max_y) {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_KILL, this)
    }
    if (this.x > this.max_x - this.width / 2) {
        if (this.size > this.pers_set * this.size_max) {
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_DRAW, this)
        }
        this.x = this.width / 2 + 2
    }
    if (this.x < this.width / 2) {
        if (this.size > this.pers_set * this.size_max) {
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_DRAW, this)
        }
        this.x = this.max_x - this.width / 2 - 2
    }
}
;
canvas.app.location.view.elements.SnowShare = function() {
    this.save_count = 24;
    var t = new Date;
    this.name = "snow_location_" + t.getMonth() + "_" + t.getDate();
    var e = canvas.app.location.model ? canvas.app.location.model.localStorage : null;
    var a = e ? e.get(this.name) : null;
    if (a) {
        this.arr_data = JSON.parse(a)
    } else {
        this.arr_data = this.generationData();
        if (e)
            e.set(this.name, JSON.stringify(this.arr_data))
    }
}
;
canvas.app.location.view.elements.SnowShare.prototype.clearFunc = function() {
    canvas.app.location.model.localStorage.set(this.name, "")
}
;
canvas.app.location.view.elements.SnowShare.prototype.generationData = function() {
    var t = [];
    var e = 80;
    var a = 20;
    for (var i = 0; i < this.save_count; i++) {
        var s = {};
        s.snow_count = Math.round(a + Math.random() * (e - a));
        var n = {
            x: 0,
            y: 0
        };
        if (s.snow_count > e * .2) {
            n.x = -7 + Math.random() * 7 * 2;
            n.y = -2 + Math.random() * 2 * 2
        }
        s.wind = n;
        t.push(s)
    }
    return t
}
;
canvas.app.location.view.elements.SnowShare.prototype.getData = function() {
    var t = new Date;
    var e = t.getHours() / this.save_count;
    var a = Math.floor(this.arr_data.length * e);
    var i = this.arr_data[a];
    var s;
    if (a == this.save_count - 1) {
        s = this.arr_data[a]
    } else {
        s = this.arr_data[a + 1]
    }
    var n = {};
    e = t.getMinutes() / 60;
    n.snow_count = i.snow_count + e * (s.snow_count - i.snow_count);
    n.wind = {};
    n.wind.x = i.wind.x + e * (s.wind.x - i.wind.x);
    n.wind.y = i.wind.y + e * (s.wind.y - i.wind.y);
    return n
}
;
canvas.app.location.view.elements.EventPanel = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    this.maxWidth = 0;
    this.bg = new canvas.px.Graphics;
    this.addChild(this.bg);
    this.eventTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16705718,300,20,"left");
    this.eventTF.text = t.OBJ_EVENT.title;
    this.addChild(this.eventTF);
    this.maxWidth = Math.max(this.eventTF.textWidth, this.maxWidth);
    this.eventTF.y = 2;
    this.eventPointTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16705718,300,20,"left");
    this.eventPointTF.text = t.OBJ_EVENT.point_title;
    this.eventPointTF.y = Math.round(this.eventTF.y + this.eventTF.height - 2);
    this.addChild(this.eventPointTF);
    this.maxWidth = Math.max(this.eventPointTF.textWidth, this.maxWidth);
    this.sliser = new canvas.px.Graphics;
    this.sliser.y = Math.round(this.eventPointTF.y + this.eventPointTF.height + 1);
    this.addChild(this.sliser);
    var e = this.sliser.y + 2;
    for (var a in t.OBJ_EVENT.tasks) {
        var i = t.OBJ_EVENT.tasks[a];
        if (i.max_value == 0)
            continue;
        if (!i.noUserValue) {
            var s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bullet"));
            s.y = e + 4;
            var n = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16705718,300,20,"left");
            n.position.set(s.x + s.width + 3, e);
            this.addChild(s);
            n.text = t.STRINGS_ARR[t.S_TO_YOU] + " " + String(i.title) + "  " + i.user_value + String(i.max_user_value != 0 ? "/" + i.max_user_value : "");
            this.addChild(n);
            this.maxWidth = Math.max(n.textWidth, this.maxWidth);
            e += 12
        }
        var r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bullet"));
        r.y = e + 4;
        this.addChild(r);
        var o = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16705718,300,20,"left");
        o.text = t.STRINGS_ARR[t.S_TO_ALL] + " " + String(i.title) + "  " + i.value + String(i.max_value != 0 ? "/" + i.max_value : "");
        o.position.set(r.x + r.width + 3, e);
        this.addChild(o);
        this.maxWidth = Math.max(o.textWidth, this.maxWidth);
        e += 12
    }
    this.sliser.beginFill(8937019, 1);
    this.sliser.drawRect(-4, 0, this.maxWidth + 5, 1);
    this.sliser.endFill();
    this.bg.beginFill(0, .55);
    this.bg.moveTo(0, 0);
    this.bg.lineTo(this.maxWidth + 47, 0);
    this.bg.lineTo(this.maxWidth + 47, this.height + 5);
    this.bg.lineTo(0, this.height);
    this.bg.lineTo(-10, this.height - 10);
    this.bg.lineTo(-10, 0);
    this.bg.lineTo(0, 0);
    this.bg.endFill()
}
;
canvas.app.location.view.elements.EventPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.FightButton = function(t) {
    var e = canvas.app.location.model;
    canvas.px.Container.call(this);
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_fight_bg"));
    this.addChild(a);
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "big_fight_btn"),[0, 0, 0, 0]);
    this.addChild(this.button);
    this.button.position.set(7, 20);
    var i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,16758046,20,16,"center");
    i.text = t.toString();
    this.addChild(i);
    i.position.set(18, 49);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(e.STRINGS_ARR[e.S_GREAT_FIGHT]))
    });
    this.interactive = true;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn, this.clickHandler, this)
}
;
canvas.app.location.view.elements.FightButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.FightButton.prototype.clickHandler = function() {
    enterGreatFights()
}
;
canvas.app.location.view.elements.FightButton.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn, this.clickHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
        target: this
    });
    canvas.px.Container.prototype.destroy.apply(this, arguments)
}
;
canvas.app.location.view.elements.ResurrectItem = function() {
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t;
            this.button.enabled = t;
            this.image.filters = t ? [] : [canvas.Functions.getGreyScale()]
        }
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.image = new canvas.px.Container;
    this.container.addChild(this.image);
    var t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_back"));
    this.image.addChild(t);
    this.loader = new canvas.ui.Image;
    this.image.addChild(this.loader);
    this.image.x = 60;
    this.button = new canvas.app.location.view.elements.ResurrectButton;
    this.container.addChild(this.button);
    this.button.y = 40;
    this.button.setSize(190, 0);
    this.container.click = this.clickHandler.bind(this);
    this.container.mouseover = this.overHandler.bind(this);
    this.container.mouseout = this.outHandler.bind(this);
    this.container.buttonMode = true;
    this.container.interactive = true;
    this.interactive = true
}
;
canvas.app.location.view.elements.ResurrectItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.ResurrectItem.prototype.update = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
        target: this
    });
    if (this._data != null) {
        switch (this._data.id) {
        case 1:
            this.button.setTitle(canvas.Translator.getText(731) + " " + this._data.title, canvas.ResourceLoader.getImage("ui", "silver"));
            break;
        default:
            this.button.setTitle(this._data.title)
        }
        this.enabled = this.container.buttonMode = this._data.enabled;
        if (this._data.error) {
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
                target: this,
                params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(this._data.error))
            })
        }
        if (this.loader.name != this._data.picture) {
            this.loader.name = this._data.picture;
            this.loader.setImage(this._data.picture)
        }
    } else {
        this.visible = false
    }
}
;
canvas.app.location.view.elements.ResurrectItem.prototype.clickHandler = function() {
    if (!this._enabled)
        return;
    resurrect(this._data.id)
}
;
canvas.app.location.view.elements.ResurrectItem.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
;
canvas.app.location.view.elements.ResurrectItem.prototype.outHandler = function() {
    this.filters = null
}
;
canvas.app.location.view.elements.ResurrectButton = function() {
    canvas.app.view.MainButton.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16375713,100,20,"center");
    this.addChild(this.field);
    this.field.position.set(25, 10);
    this.imageContainer = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.imageContainer)
}
;
canvas.app.location.view.elements.ResurrectButton.prototype = Object.create(canvas.app.view.MainButton.prototype);
canvas.app.location.view.elements.ResurrectButton.prototype.setTitle = function(t, e) {
    this.imageContainer.texture = canvas.px.TextureEmpty;
    if (t == undefined)
        t = "";
    this.field.text = t;
    this.field.x = 25;
    if (e != null) {
        this.imageContainer.texture = e;
        var a = this.field.getLocalBounds();
        this.imageContainer.x = this.field.x + a.x + a.width + 3 - Math.round(e.width * .5);
        this.imageContainer.y = Math.round((34 - e.height) * .5);
        this.field.x = 25 - Math.round(e.width * .5)
    }
}
;
canvas.app.location.view.elements.CampaignInfo = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            if (this._data === t)
                return;
            this._data = t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    this.image = new canvas.ui.Image;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "campaign_back")));
    this.addChild(this.image);
    this.image.position.set(12, 6);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "campaign_front")));
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,6236456,66,20,"center");
    this.timeField.position.set(8, 68);
    this.addChild(this.timeField);
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.clickHandler.bind(this);
    this.hint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    })
}
;
canvas.app.location.view.elements.CampaignInfo.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.CampaignInfo.prototype.update = function() {
    if (!this.data)
        return;
    this.image.setImage(this.data.picture);
    this.hint.update(this.data.title);
    this.updateTime()
}
;
canvas.app.location.view.elements.CampaignInfo.prototype.updateTime = function() {
    if (!this.data)
        return;
    this.timeField.text = canvas.Functions.formatDate((this.data.finishTime - canvas.app.location.model.serverTime.getTime()) * 1e3, "00", 2, true)
}
;
canvas.app.location.view.elements.CampaignInfo.prototype.clickHandler = function() {
    tProcessMenu("b36", {
        url: "/area_banks.php?mode=user_campaign"
    })
}
;
canvas.app.location.view.elements.CampaignInfo.prototype.destroy = function() {
    this.data = null;
    if (this.parent)
        this.parent.removeChild(this)
}
;
canvas.app.location.view.popups.Popups = function(t) {
    canvas.px.Container.call(this);
    this.hintEvent = t
}
;
canvas.app.location.view.popups.Popups.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.Popups.prototype.init = function(t, e) {
    var a;
    var i;
    canvas.Functions.destroyChildren(this);
    this.popupType = t;
    switch (t) {
    case canvas.app.location.Const.POPUP_ZERO_LEVEL:
        a = new canvas.app.location.view.popups.PopupZeroLevel(parseInt(e.time_bonus_online) * 1e3,e.time_bonus_message == undefined ? "Останься в Легенде и получи подарок!" : e.time_bonus_message);
        i = new canvas.app.view.MappingHint(e.time_bonus_hint == undefined ? "Оставайтесь в игре и через указанное на таймере время получите подарок!" : e.time_bonus_hint);
        canvas.EventManager.dispatchEvent(this.hintEvent.HINT_ADD, null, {
            target: a,
            params: new canvas.utils.HintParams(i)
        });
        if (a.children.length > 0) {
            return this.addChild(a)
        }
        break;
    case canvas.app.location.Const.POPUP_ACTIVITY:
        a = new canvas.app.location.view.popups.PopupActivity(e);
        i = new canvas.app.view.MappingHint(canvas.Translator.getText(733));
        canvas.EventManager.dispatchEvent(this.hintEvent.HINT_ADD, null, {
            target: a,
            params: new canvas.utils.HintParams(i)
        });
        if (a.children.length > 0) {
            return this.addChild(a)
        }
        break;
    case canvas.app.location.Const.POPUP_WHEEL:
        i = new canvas.app.view.BigHint(canvas.Translator.getText(736));
        a = new canvas.app.location.view.popups.PopupWheelFortune(e,i);
        canvas.EventManager.dispatchEvent(this.hintEvent.HINT_ADD, null, {
            target: a,
            params: new canvas.utils.HintParams(i)
        });
        if (a.children.length > 0) {
            return this.addChild(a)
        }
        break
    }
    return null
}
;
canvas.app.location.view.popups.Popups.prototype.removeHint = function(t) {
    canvas.EventManager.dispatchEvent(this.hintEvent.HINT_REMOVE, null, {
        target: t
    })
}
;
canvas.app.location.view.popups.Popup = function() {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.background = new canvas.px.Graphics;
    this.addChild(this.background);
    this.addChild(this.container);
    this.interactive = true;
    this.container.interactive = true;
    this.buttonMode = true;
    this.container.click = this.clickHandler.bind(this);
    this.container.mouseover = this.overHandler.bind(this);
    this.container.mouseout = this.outHandler.bind(this)
}
;
canvas.app.location.view.popups.Popup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.Popup.prototype.update = function(t, e) {
    if (t == undefined)
        t = 0;
    if (e == undefined)
        e = 0;
    this.background.clear();
    this.background.beginFill(1118481, .5);
    this.background.drawRoundedRect(0, 0, t == 0 ? this.container.width : t, e == 0 ? this.container.height : e, 7);
    this.background.endFill()
}
;
canvas.app.location.view.popups.Popup.prototype.clickHandler = function() {}
;
canvas.app.location.view.popups.Popup.prototype.overHandler = function() {}
;
canvas.app.location.view.popups.Popup.prototype.outHandler = function() {}
;
canvas.app.location.view.popups.Popup.prototype.destroy = function() {
    if (this.parent) {
        if (this.parent.removeHint) {
            this.parent.removeHint(this)
        }
        this.parent.removeChild(this)
    }
    if (this.container) {
        this.container.click = null;
        this.container.mouseover = null;
        this.container.mouseout = null
    }
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.popups.PopupZeroLevel = function(t, e) {
    canvas.app.location.view.popups.Popup.call(this);
    this.checkPoints = [120, 600, 1500, 3600];
    this.baseTimeStamp = this.timeStamp = t;
    this.next = this.getNext();
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16777215,64,20,"center");
    this.timeField.position.set(66, 29);
    this.timeField.text = "?";
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "chest"));
    a.position.set(18, 6);
    this.container.addChild(a);
    this.container.addChild(this.timeField);
    this.removeChild(this.background);
    this.date = new Date;
    this.baseTime = this.constBaseTime = this.date.getTime();
    this.diff = this.next - t;
    this.date.setTime(this.diff);
    this.request = new canvas.utils.URLRequest("time_bonus.php","GET",{
        time: 0
    });
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestIOErrorHandler, this);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.timerHandler();
    this.testTime()
}
;
canvas.app.location.view.popups.PopupZeroLevel.prototype = Object.create(canvas.app.location.view.popups.Popup.prototype);
canvas.app.location.view.popups.PopupZeroLevel.prototype.testTime = function() {
    if (this.timeStamp >= this.checkPoints[this.checkPoints.length - 1] * 1e3) {
        this.destroy();
        return false
    }
    return true
}
;
canvas.app.location.view.popups.PopupZeroLevel.prototype.getNext = function() {
    var t = 0;
    for (var e = 0; e < this.checkPoints.length; e++) {
        if (this.timeStamp < this.checkPoints[e] * 1e3) {
            t = this.checkPoints[e] * 1e3;
            break
        }
    }
    return t
}
;
canvas.app.location.view.popups.PopupZeroLevel.prototype.timerHandler = function() {
    var t = new Date;
    var e = this.date.getTime() - (t.getTime() - this.baseTime);
    e = e < 0 ? 0 : e;
    this.date.setTime(e);
    this.baseTime = t.getTime();
    this.timeField.text = canvas.Functions.setNumberLen(this.date.getMinutes()) + ":" + canvas.Functions.setNumberLen(this.date.getSeconds());
    this.timeStamp = this.baseTimeStamp + (t.getTime() - this.constBaseTime);
    if (this.date.getTime() <= 0) {
        if (this.next > 0) {
            this.request.params.time = Math.round(this.next * .001).toString();
            this.request.load()
        }
        this.next = this.getNext();
        if (this.next == 0) {
            this.destroy();
            return
        }
        this.diff = this.next - this.timeStamp;
        this.date.setTime(this.diff);
        this.timerHandler()
    }
}
;
canvas.app.location.view.popups.PopupZeroLevel.prototype.requestIOErrorHandler = function() {
    this.destroy()
}
;
canvas.app.location.view.popups.PopupZeroLevel.prototype.destroy = function() {
    if (this.timer)
        clearInterval(this.timer);
    if (this.request)
        canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestIOErrorHandler, this);
    canvas.app.location.view.popups.Popup.prototype.destroy.apply(this, arguments)
}
;
canvas.app.location.view.popups.PopupActivity = function(t) {
    canvas.app.location.view.popups.Popup.call(this);
    this.url = t;
    this.hitArea = this.container.hitArea = new canvas.px.Circle(40,40,32);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "activities")))
}
;
canvas.app.location.view.popups.PopupActivity.prototype = Object.create(canvas.app.location.view.popups.Popup.prototype);
canvas.app.location.view.popups.PopupActivity.prototype.clickHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.clickHandler.apply(this, arguments);
    canvas.Functions.navigateToURL(this.url, "_self");
    this.destroy()
}
;
canvas.app.location.view.popups.PopupActivity.prototype.overHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.overHandler.apply(this, arguments);
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
;
canvas.app.location.view.popups.PopupActivity.prototype.outHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.outHandler.apply(this, arguments);
    this.filters = null
}
;
canvas.app.location.view.popups.HintBtn = function(t, e, a, i, s) {
    canvas.px.Container.call(this);
    if (i == undefined)
        i = 200;
    if (s == undefined)
        s = 240;
    this.isNow = false;
    this.hintText = "";
    this.backgroundColor = 1118481;
    this.textColor = 0;
    this.hintWidth = i;
    this.currentDate = new Date;
    this.currentDate.setTime(a - (-s - this.currentDate.getTimezoneOffset()) * 6e4);
    this.stopDate = new Date;
    this.stopDate.setTime(e - (-s - this.currentDate.getTimezoneOffset()) * 6e4);
    if (!this.testTime())
        return;
    this.dateStart = new Date;
    this.dateStart.setTime(t - (-s - this.currentDate.getTimezoneOffset()) * 6e4);
    this.image = new canvas.px.Container;
    this.addChild(this.image);
    if (Math.floor((this.currentDate.valueOf() - this.dateStart.valueOf()) / 1e3) > 0) {
        this.isNow = true;
        this.timeLeftSec = Math.floor((this.stopDate.valueOf() - this.currentDate.valueOf()) / 1e3)
    } else {
        this.timeLeftSec = Math.floor((this.dateStart.valueOf() - this.currentDate.valueOf()) / 1e3)
    }
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.interactive = true;
    this.image.buttonMode = true;
    this.image.interactive = true;
    this.click = this.onClick.bind(this);
    this.image.mouseover = this.onRollOver.bind(this);
    this.image.mouseout = this.onRollOut.bind(this)
}
;
canvas.app.location.view.popups.HintBtn.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.HintBtn.prototype.testTime = function() {
    return this.stopDate.valueOf() >= this.currentDate.valueOf()
}
;
canvas.app.location.view.popups.HintBtn.prototype.onClick = function() {
    this.click = null;
    var t = new canvas.px.Graphics;
    t.beginFill(16777215, .4);
    t.drawRect(-this.image.width, -this.image.height, this.image.width, this.image.height);
    t.endFill();
    this.addChild(t);
    this.image.mask = t;
    var e = new canvas.px.Tween.Tween(this.image).to({
        y: 50
    }, 4e3).easing(canvas.px.Tween.Easing.Elastic.Out).onUpdate(function() {}).onComplete(this.onRemoveBanner.bind(this)).start()
}
;
canvas.app.location.view.popups.HintBtn.prototype.getTimeLeft = function() {
    return this.timeLeftSec < 60 ? this.getFormattedTimeBySeconds(this.timeLeftSec, false, true, true, false) : this.getFormattedTimeBySeconds(this.timeLeftSec, true, true, false, false)
}
;
canvas.app.location.view.popups.HintBtn.prototype.timerHandler = function() {
    if (this.image == null) {
        clearInterval(this.timer);
        return
    }
    this.timeLeftSec--;
    if (this.timeLeftSec <= 0) {
        clearInterval(this.timer);
        if (this.isNow) {
            this.removeChild(this.image);
            this.image = null;
            return
        } else {
            this.isNow = true;
            this.timeLeftSec = Math.floor((this.stopDate.valueOf() - this.dateStart.valueOf()) / 1e3);
            this.timer = setInterval(this.timerHandler.bind(this), 1e3);
            this.setHintText(this.updateHint(true), 1118481, 16705718);
            return
        }
    }
    this.setHintText(this.updateHint(this.isNow), 1118481, 16705718)
}
;
canvas.app.location.view.popups.HintBtn.prototype.updateHint = function(t) {
    if (t == undefined)
        t = false;
    return ""
}
;
canvas.app.location.view.popups.HintBtn.prototype.onRemoveBanner = function() {
    this.removeChild(this.image);
    this.image.destroy({
        children: true
    });
    this.image = null;
    this.destroy()
}
;
canvas.app.location.view.popups.HintBtn.prototype.getFormattedTimeBySeconds = function(t, e, a, i, s) {
    var n = "";
    var r = Math.floor(t);
    var o = Math.floor(1e3 * (t - r));
    var l = Math.floor(r / 60);
    r -= l * 60;
    var c = Math.floor(l / 60);
    l -= c * 60;
    if (e) {
        n += c < 10 ? "0" : "";
        n += c.toString()
    }
    if (a) {
        if (e)
            n += ":";
        n += l < 10 ? "0" : "";
        n += l.toString()
    }
    if (i) {
        if (a)
            n += ":";
        n += r < 10 ? "0" : "";
        n += r.toString()
    }
    if (s) {
        if (i) {
            n += ".";
            n += (o < 100 ? "0" : "") + (o < 10 ? "0" : "")
        }
        n += o.toString()
    }
    return n
}
;
canvas.app.location.view.popups.HintBtn.prototype.getTimeFormated = function(t) {
    var e = new Date;
    e.setTime(t * 1e3);
    var a = e.getHours() < 10 ? "0" + e.getHours().toString() : e.getHours().toString();
    a += ":";
    a += e.getMinutes() < 10 ? "0" + e.getMinutes().toString() : e.getMinutes().toString();
    return a
}
;
canvas.app.location.view.popups.HintBtn.prototype.setHintText = function(t, e, a) {
    if (t == undefined)
        t = "";
    if (e == undefined)
        e = 1118481;
    if (a == undefined)
        a = 0;
    this.hintText = t;
    this.backgroundColor = e;
    this.textColor = a;
    this.updateHintText()
}
;
canvas.app.location.view.popups.HintBtn.prototype.updateHintText = function() {
    if (this.hint == null)
        return;
    canvas.Functions.destroyChildren(this.hint);
    this.hint.clear();
    this.textField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,this.textColor,this.hintWidth,500,"center");
    this.textField.text = this.hintText;
    this.hint.beginFill(this.backgroundColor, .55);
    var t = this.textField.getBounds();
    var e = this.hintWidth + 8;
    var a = this.textField.textHeight + 14;
    this.hint.drawRoundedRect(-4, 0, e, a, 6);
    this.hint.endFill();
    this.textField.x = -this.textField.x;
    this.textField.y = 2;
    this.hint.addChild(this.textField);
    this.hint.position.set(-e - 20, -a)
}
;
canvas.app.location.view.popups.HintBtn.prototype.onRollOver = function() {
    if (this.hintText == "")
        return;
    this.hint = new canvas.px.Graphics;
    this.updateHintText();
    this.addChildAt(this.hint, 0)
}
;
canvas.app.location.view.popups.HintBtn.prototype.onRollOut = function() {
    if (this.hint != null)
        this.removeChild(this.hint);
    this.hint = null
}
;
canvas.app.location.view.popups.HintBtn.prototype.destroy = function() {
    clearInterval(this.timer);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.popups.TechBtn = function(t, e) {
    this.link = "";
    if (t) {
        this.start = parseInt(t["tech_works_start"]) * 1e3;
        this.stop = parseInt(t["tech_works_stop"]) * 1e3;
        this.curTime = parseInt(t["current_time"]) * 1e3;
        this.title = t["tech_works_name"];
        this.description = t["tech_works_description"];
        if (t["tech_works_link"] != undefined)
            this.link = t["tech_works_link"]
    }
    canvas.app.location.view.popups.HintBtn.call(this, this.start, this.stop, this.curTime, 200, t.time_zone == undefined ? 240 : parseInt(t.time_zone));
    if (!this.testTime())
        return;
    this.techBtn = new canvas.app.location.view.popups.TechnicalWorksBtn(e);
    this.image.addChild(this.techBtn);
    this.techBtn.updateTimeLeft("--:--")
}
;
canvas.app.location.view.popups.TechBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype);
canvas.app.location.view.popups.TechBtn.prototype.timerHandler = function() {
    this.techBtn.updateTimeLeft(this.getTimeLeft(), this.isNow);
    canvas.app.location.view.popups.HintBtn.prototype.timerHandler.call(this)
}
;
canvas.app.location.view.popups.TechBtn.prototype.updateHint = function(t) {
    if (t == undefined)
        t = false;
    var e = "<font color='#fcb567'><b>" + this.title + "</b></font><br/><br/>";
    e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.description + "</font>";
    e += "<font color='#fcb567'><br/><br/>" + canvas.Translator.getText(2028) + " " + this.getTimeFormated(Math.floor(this.dateStart.getTime() / 1e3)) + " " + canvas.Translator.getText(2029) + " " + this.getTimeFormated(Math.floor(this.stopDate.getTime() / 1e3)) + "</font>";
    if (t) {
        e += "<font color='#FF0000'> (" + canvas.Translator.getText(2032).toLowerCase() + ")<br/></font>";
        e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>"
    } else {
        e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>"
    }
    return e
}
;
canvas.app.location.view.popups.TechBtn.prototype.updateHintText = function() {
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this);
    if (this.hint != null) {
        this.hint.clear();
        this.hint.beginFill(this.backgroundColor, .55);
        var t = this.hintWidth + 8;
        var e = this.textField.textHeight + 54;
        this.hint.drawRoundedRect(-4, 0, t, e, 6);
        this.hint.endFill();
        this.hint.position.set(-t - 20, -e);
        this.hint.y = -e
    }
}
;
canvas.app.location.view.popups.TechBtn.prototype.onClick = function() {
    canvas.app.location.view.popups.HintBtn.prototype.onClick.call(this);
    if (this.link)
        canvas.Functions.navigateToURL(this.link, "_blank")
}
;
canvas.app.location.view.popups.InfoBtn = function(t) {
    this.link = "";
    if (t) {
        this.start = parseInt(t["info_start"]) * 1e3;
        this.stop = parseInt(t["info_stop"]) * 1e3;
        this.curTime = parseInt(t["current_time"]) * 1e3;
        this.title = t["info_name"];
        this.description = t["info_description"];
        if (t["info_link"] != undefined)
            this.link = t["info_link"]
    }
    canvas.app.location.view.popups.HintBtn.call(this, this.start, this.stop, this.curTime, 200, t.time_zone == undefined ? 240 : parseInt(t.time_zone));
    if (!this.testTime())
        return;
    this.image.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info_button")));
    this.image.position.set(-50, -30)
}
;
canvas.app.location.view.popups.InfoBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype);
canvas.app.location.view.popups.InfoBtn.prototype.updateHint = function(t) {
    if (t == undefined)
        t = false;
    var e = "<br/><br/><br/><font color='#fcb567'><b>" + this.title + "<br/><br/></b></font>";
    e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.description + "</font>";
    e += "<font color='#fcb567'><br/><br/>" + canvas.Translator.getText(2028) + " " + this.getTimeFormated(Math.floor(this.dateStart.getTime() / 1e3)) + "<br/> " + canvas.Translator.getText(2029) + " " + this.getTimeFormated(Math.floor(this.stopDate.getTime() / 1e3)) + "</font><br/>";
    if (t) {
        e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>"
    } else {
        e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>"
    }
    return e
}
;
canvas.app.location.view.popups.InfoBtn.prototype.getTimeFormated = function(t) {
    var e = new Date;
    e.setTime(t * 1e3);
    return canvas.app.location.view.popups.HintBtn.prototype.getTimeFormated.call(this, t) + " " + e.getDate().toString() + " " + canvas.Translator.getText(2004 + e.getMonth())
}
;
canvas.app.location.view.popups.InfoBtn.prototype.updateHintText = function() {
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this);
    if (this.hint != null) {
        this.hint.clear();
        this.hint.beginFill(this.backgroundColor, .55);
        var t = this.hintWidth + 8;
        var e = this.textField.textHeight + 54;
        this.hint.drawRoundedRect(-4, 0, t, e, 6);
        this.hint.endFill();
        this.hint.x = -this.hintWidth - 20;
        this.hint.y = -this.image.height
    }
}
;
canvas.app.location.view.popups.InfoBtn.prototype.onClick = function() {
    this.click = null;
    var t = new canvas.px.Mask(this.image.width,this.image.height);
    t.position.set(this.image.x, this.image.y);
    this.addChild(t);
    this.image.mask = t;
    var e = new canvas.px.Tween.Tween(this.image).to({
        x: this.image.x + this.image.width + 20
    }, 4e3).easing(canvas.px.Tween.Easing.Elastic.Out).onUpdate(function() {}).onComplete(this.onRemoveBanner.bind(this)).start();
    if (this.link)
        canvas.Functions.navigateToURL(this.link, "_blank")
}
;
canvas.app.location.view.popups.TechnicalWorksBtn = function(t) {
    canvas.px.Container.call(this);
    this.enterFrameEvent = t;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_back")));
    this.position.set(-this.width - 20, -this.height);
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,15518322,50,20,"right");
    this.addChild(this.timeField);
    this.timeField.position.set(-17, 26);
    var e = new canvas.px.Graphics;
    e.beginFill(16777215, 1);
    e.drawCircle(55, 21, 17);
    e.endFill();
    this.addChild(e);
    this.container = new canvas.px.Container;
    this.container.mask = e;
    this.wheel1 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_wheel"));
    this.wheel2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_wheel"));
    this.container.addChild(this.wheel1);
    this.container.addChild(this.wheel2);
    this.wheel1.anchor.set(.5, .5);
    this.wheel2.anchor.set(.5, .5);
    this.addChild(this.container);
    this.wheel1.position.set(41, 11);
    this.wheel2.position.set(65, 35);
    this.hitArea = new canvas.px.Circle(55,21,20);
    canvas.EventManager.addEventListener(this.enterFrameEvent, null, this.updateHandler, this)
}
;
canvas.app.location.view.popups.TechnicalWorksBtn.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.updateTimeLeft = function(t, e, a) {
    if (e == undefined)
        e = false;
    if (a == undefined)
        a = 15518322;
    this.speed = e ? 4 : 1;
    this.timeField.color = a;
    this.timeField.text = t
}
;
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.updateHandler = function() {
    this.wheel1.rotation += this.speed * .02;
    this.wheel2.rotation -= this.speed * .02
}
;
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(this.enterFrameEvent, null, this.updateHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.location.view.popups.NPCEventBtn = function(t) {
    Object.defineProperty(this, "imageWidth", {
        get: function() {
            return this.image ? this.image.width : 0
        },
        set: function(t) {}
    });
    this.data = t;
    canvas.app.location.view.popups.HintBtn.call(this, 0, this.data.finishTime * 1e3, Date.now(), 200, canvas.app.location.model.serverTimeZoneOffset);
    if (!this.testTime())
        return;
    this.loader = new canvas.ui.Image(this.data.picture);
    this.image.addChild(this.loader);
    if (this.loader.ready) {
        this.completeHandler()
    } else {
        canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.loader, this.completeHandler, this)
    }
}
;
canvas.app.location.view.popups.NPCEventBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype);
canvas.app.location.view.popups.NPCEventBtn.prototype.updateHint = function(t) {
    if (t == undefined)
        t = false;
    var e = "<font color='#fcb567'><b>" + this.data.title + "<br/><br/></b></font>";
    if (this.data.description != null)
        e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.data.description + "</font>";
    if (t == true) {
        e += "<font size='11' color='#FF0000'> (" + canvas.Translator.getText(2032).toLowerCase() + ")<br/></font>";
        e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>"
    } else {
        e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>"
    }
    return e
}
;
canvas.app.location.view.popups.NPCEventBtn.prototype.updateHintText = function(t) {
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this);
    this.moveHint()
}
;
canvas.app.location.view.popups.NPCEventBtn.prototype.timerHandler = function() {
    canvas.app.location.view.popups.HintBtn.prototype.timerHandler.call(this);
    if (!this.image) {
        if (this.parent)
            this.parent.removeChild(this);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.UPDATE_NPC_EVENTS)
    }
}
;
canvas.app.location.view.popups.NPCEventBtn.prototype.moveHint = function() {
    if (this.hint) {
        this.hint.position.set(this.image.width, this.image.height)
    }
}
;
canvas.app.location.view.popups.NPCEventBtn.prototype.onClick = function() {
    canvas.Functions.navigateToURL(this.data.url, "_self")
}
;
canvas.app.location.view.popups.NPCEventBtn.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.loader, this.completeHandler, this);
    delete this.loader;
    this.moveHint();
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.UPDATE_NPC_EVENTS)
}
;
canvas.app.location.view.popups.PopupWheelFortune = function(t, e) {
    canvas.app.location.view.popups.Popup.call(this);
    this.message = t.message;
    this.expireTime = t.expireTime;
    this.url = t.url;
    this.hint = e;
    this.hitArea = this.container.hitArea = new canvas.px.Circle(25,25,25);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "wheel_of_fortune")));
    this.updateTime()
}
;
canvas.app.location.view.popups.PopupWheelFortune.prototype = Object.create(canvas.app.location.view.popups.Popup.prototype);
canvas.app.location.view.popups.PopupWheelFortune.prototype.clickHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.clickHandler.apply(this, arguments);
    canvas.Functions.navigateToURL(this.url, "_self")
}
;
canvas.app.location.view.popups.PopupWheelFortune.prototype.overHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.overHandler.apply(this, arguments);
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
;
canvas.app.location.view.popups.PopupWheelFortune.prototype.outHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.outHandler.apply(this, arguments);
    this.filters = null
}
;
canvas.app.location.view.popups.PopupWheelFortune.prototype.updateTime = function() {
    var t = this.expireTime - canvas.app.location.model.serverTime.getTime();
    this.hint.update(this.message + " " + canvas.Functions.formatDate(t * 1e3, "00", 2));
    if (t <= 0)
        this.destroy()
}
;
canvas.app.location.view.fronts.FrontsIcon = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.items = [];
    var e;
    this.infoContainer = new canvas.px.Container;
    this.addChild(this.infoContainer);
    this.infoContainer.x = 35;
    this.infoContainer.y = -70;
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts3")));
    e = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts4")));
    this.maskBlue = new canvas.px.Graphics;
    this.maskBlue.beginFill(16777215, 1);
    this.maskBlue.drawRect(0, 0, 40, 40);
    this.maskBlue.endFill();
    this.maskBlue.position.set(5, 5);
    this.container.addChild(this.maskBlue);
    e.mask = this.maskBlue;
    e = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts5")));
    this.maskRed = new canvas.px.Graphics;
    this.maskRed.beginFill(16777215, 1);
    this.maskRed.drawRect(-40, 0, 40, 40);
    this.maskRed.endFill();
    this.maskRed.position.set(45, 5);
    this.container.addChild(this.maskRed);
    e.mask = this.maskRed;
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts6")));
    this.icons = new canvas.app.location.view.fronts.FrontsIcons;
    this.container.addChild(this.icons);
    this.icons.position.set(13, 33);
    this.infoContainerBack = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "fronts10"),10,0,10,0);
    this.infoContainer.addChild(this.infoContainerBack);
    this.infoContainerBack.width = 200;
    this.locsContainer = new canvas.px.Container;
    this.infoContainer.addChild(this.locsContainer);
    this.locsContainer.position.set(10, 30);
    this.infoHeader = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769695,200,20,"center");
    this.infoContainer.addChild(this.infoHeader);
    this.infoHeader.y = 4;
    this.container.buttonMode = true;
    this.container.interactive = true;
    this.infoContainer.visible = false;
    this.click = this.clickHandler.bind(this);
    this.interactive = true
}
;
canvas.app.location.view.fronts.FrontsIcon.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsIcon.prototype.setProgress = function(t, e) {
    this.maskBlue.scale.x = t;
    this.maskRed.scale.x = e
}
;
canvas.app.location.view.fronts.FrontsIcon.prototype.update = function() {
    var t;
    var e;
    var a = 0;
    var i = 0;
    var s = canvas.app.location.model;
    canvas.Functions.clearChildren(this.locsContainer);
    this.infoHeader.text = s.fronts.frontTitle;
    var n = s.fronts.locationsData.length;
    for (var r = 0; r < n; r++) {
        t = s.fronts.locationsData[r];
        e = this.items[i];
        if (!e) {
            e = new canvas.app.location.view.fronts.FrontsLoc(this.baseLnk);
            this.items.push(e)
        }
        e.data = t;
        this.locsContainer.addChild(e);
        e.x = a;
        a += 55;
        i++
    }
    this.infoContainerBack.width = Math.max(a + 15, this.infoHeader.field.textWidth + 20);
    this.infoHeader.setSize(this.infoContainerBack.width);
    this.setProgress(s.fronts.humLocs * .01, s.fronts.magLocs * .01);
    this.icons.setIcon();
    if (s.fronts.availableLocationData)
        switch (parseInt(s.fronts.availableLocationData.status)) {
        case 0:
            this.icons.setIcon(2);
            break;
        case 1:
            this.icons.setIcon(0);
            break;
        case 2:
            this.icons.setIcon(1);
            break;
        case 3:
            this.icons.setIcon(3);
            break
        }
}
;
canvas.app.location.view.fronts.FrontsIcon.prototype.updateTimer = function() {
    var t = this.items.length;
    for (var e = 0; e < t; e++) {
        this.items[e].updateTimer()
    }
}
;
canvas.app.location.view.fronts.FrontsIcon.prototype.clickHandler = function() {
    this.infoContainer.visible = !this.infoContainer.visible
}
;
canvas.app.location.view.fronts.FrontsPanel = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "fronts15"),25,0,20,0);
    this.addChild(this.back);
    this.back.width = 170;
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,11730944,300,20,"left");
    this.addChild(this.header);
    this.header.position.set(34, 13);
    this.actionButton = new canvas.app.view.MainButton;
    this.addChild(this.actionButton);
    this.actionButton.y = 32;
    this.locInfo = new canvas.app.location.view.fronts.FrontsLoc(this.baseLnk,1);
    this.addChild(this.locInfo);
    this.locInfo.position.set(-15, 0);
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "fronts14"));
    this.addChild(this.infoButton);
    this.infoButton.y = 9;
    this.hint = new canvas.app.view.MappingHint("");
    this.click = this.clickHandler.bind(this);
    this.interactive = true;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.actionButton,
        params: new canvas.utils.HintParams(this.hint)
    })
}
;
canvas.app.location.view.fronts.FrontsPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsPanel.prototype.update = function() {
    var t = canvas.app.location.model;
    this.actionButton.enabled = false;
    switch (t.fronts.currentLocationData.status) {
    case 0:
        this.header.text = canvas.Translator.getText(706);
        this.actionButton.setTitle(canvas.Translator.getText(707));
        this.hint.update(canvas.Translator.getText(711));
        this.hint.visible = true;
        break;
    case 1:
        this.header.text = canvas.Translator.getText(708);
        this.actionButton.enabled = true;
        this.actionButton.setTitle(canvas.Translator.getText(707));
        this.hint.visible = false;
        break;
    case 2:
        this.header.text = canvas.Translator.getText(709);
        this.actionButton.setTitle(canvas.Translator.getText(712));
        this.actionButton.enabled = true;
        this.hint.visible = false;
        break;
    case 3:
        this.header.text = canvas.Translator.getText(710);
        this.actionButton.setTitle(canvas.Translator.getText(712));
        this.hint.update(canvas.Translator.getText(713));
        this.hint.visible = true;
        break
    }
    this.updateBack();
    this.updateTimer();
    this.locInfo.data = t.fronts.currentLocationData;
    this.resize()
}
;
canvas.app.location.view.fronts.FrontsPanel.prototype.updateBack = function() {
    this.back.width = this.header.field.textWidth + 56;
    if (this.back.width < 160)
        this.back.width = 160;
    this.infoButton.x = this.back.width - 15;
    this.actionButton.width = this.actionButton.field.field.textWidth + 80;
    this.actionButton.x = Math.round((this.back.width - this.actionButton.width) * .5);
    this.resize()
}
;
canvas.app.location.view.fronts.FrontsPanel.prototype.resize = function() {
    this.x = Math.round((this.baseLnk.locSide.width - this.back.width) * .5) + (this.baseLnk.mapSide.visible ? this.baseLnk.mapSide.width : 0)
}
;
canvas.app.location.view.fronts.FrontsPanel.prototype.updateTimer = function() {
    var t = canvas.app.location.model;
    var e = 0;
    var a;
    if (t.fronts.currentLocationData.status >= 0 && t.fronts.currentLocationData.status <= 2) {
        switch (t.fronts.currentLocationData.status) {
        case 0:
            a = canvas.Translator.getText(706);
            break;
        case 1:
            a = canvas.Translator.getText(708);
            break;
        case 2:
            a = canvas.Translator.getText(709);
            break
        }
        e = t.fronts.currentLocationData.cooldown - Date.now();
        this.header.text = a + " " + canvas.Functions.formatDate(e, "", 0, true, true);
        if (e <= 0)
            this.baseLnk.main.loadFrontsData();
        this.updateBack()
    }
}
;
canvas.app.location.view.fronts.FrontsPanel.prototype.clickHandler = function(t) {
    var e = canvas.app.location.model;
    if (canvas.Functions.findParent(this.infoButton, t.target)) {
        canvas.Functions.navigateToURL(canvas.Translator.getText(721), "_blank")
    } else if (canvas.Functions.findParent(this.locInfo.icons, t.target)) {
        if (this.locInfo.icons.currentIcon != 1)
            return
    } else if (canvas.Functions.findParent(this.actionButton, t.target)) {
        switch (e.fronts.currentLocationData.status) {
        case 1:
            this.baseLnk.showStartBattleConfirm(e.fronts.currentLocationData.title, e.fronts.currentLocationData.id, e.fronts.currentLocationData.cooldown);
            break;
        case 2:
            this.baseLnk.showEnterBattleConfirm(e.fronts.currentLocationData.title, e.fronts.currentLocationData.id, e.fronts.currentLocationData.cooldown);
            break
        }
    }
}
;
canvas.app.location.view.fronts.FrontsIcons = function() {
    canvas.px.Container.call(this);
    this.currentIcon = -1;
    this.sprite = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.sprite);
    this.interactive = true;
    this.setIcon();
    this.icons = ["fronts1", "fronts2", "fronts19", "fronts18"]
}
;
canvas.app.location.view.fronts.FrontsIcons.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsIcons.prototype.setIcon = function(t) {
    if (t == undefined)
        t = -1;
    this.sprite.texture = t < 0 ? canvas.px.TextureEmpty : canvas.ResourceLoader.getImage("ui", this.icons[t]);
    switch (t) {
    case 1:
    case 3:
        this.buttonMode = true;
        break;
    default:
        this.buttonMode = false
    }
    this.currentIcon = t
}
;
canvas.app.location.view.fronts.FrontsLoc = function(t, e) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            if (t == null)
                return;
            if (this._data == null || this._data.image != t.image)
                this.loader.setImage(t.image);
            this._data = t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    this.baseLnk = t;
    if (e == undefined)
        e = 0;
    this.hintType = parseInt(e);
    var a;
    var i;
    var s = this.hintType == 0 ? 10 : 0;
    this.back = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.clock = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.clock.position.set(6, s - 11);
    this.back.y = s;
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts12")));
    a.position.set(4, 5 + s);
    this.shape = new canvas.px.Graphics;
    this.shape.beginFill(0, 1);
    this.shape.drawCircle(25, 25 + s, 19);
    this.shape.endFill();
    this.addChild(this.shape);
    this.loader = new canvas.ui.Image;
    this.addChild(this.loader);
    this.loader.position.set(4, 5 + s);
    this.loader.mask = this.shape;
    this.icons = new canvas.app.location.view.fronts.FrontsIcons;
    this.addChild(this.icons);
    this.icons.position.set(13, 33 + s);
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,13021302,50,20,"left");
    this.header.position.set(18, s - 12);
    if (this.hintType == 0) {
        this.addChild(this.header)
    } else {
        this.removeChild(this.clock)
    }
    this.click = this.clickHandler.bind(this);
    this.interactive = true
}
;
canvas.app.location.view.fronts.FrontsLoc.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsLoc.prototype.update = function() {
    var t = 726;
    var e = 4473924;
    this.back.visible = this.clock.visible = false;
    this.icons.setIcon();
    switch (parseInt(this._data.status)) {
    case 0:
        switch (parseInt(this._data.owner)) {
        case 1:
            t = 724;
            e = 1210068;
            break;
        case -1:
            t = 725;
            e = 11730944;
            break;
        default:
            t = 726;
            e = 4473924
        }
        this.icons.setIcon(2);
        break;
    case 1:
        this.icons.setIcon(0);
        t = 727;
        break;
    case 2:
        this.icons.setIcon(this._data.fightAvail ? 1 : -1);
        t = 728;
        break;
    case 3:
        t = 710;
        this.icons.setIcon(3);
        break
    }
    switch (parseInt(this._data.owner)) {
    case 0:
        this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts9");
        this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_none");
        this.back.visible = this.clock.visible = true;
        break;
    case 1:
        this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts8");
        this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_hum");
        this.back.visible = this.clock.visible = true;
        break;
    case -1:
        this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts7");
        this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_mag");
        this.back.visible = this.clock.visible = true;
        break
    }
    if (!this.hint) {
        if (this.hintType == 0) {
            this.hint = new canvas.app.location.view.fronts.FrontsHint(this._data.title,"")
        } else {
            this.hint = new canvas.app.view.MappingHint
        }
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: this,
            params: new canvas.utils.HintParams(this.hint,true)
        })
    }
    switch (this.hintType) {
    case 0:
        this.hint.update(canvas.Translator.getText(723) + "<br/><br/>" + this._data.description);
        this.hint.icons.setIcon(this.icons.currentIcon);
        this.hint.updateTop(canvas.Translator.getText(t), e);
        break;
    default:
        this.hint.update(this._data.owner > 0 ? canvas.Translator.getText(703) : this._data.owner < 0 ? canvas.Translator.getText(702) : canvas.Translator.getText(704), this._data.owner > 0 ? 1210068 : this._data.owner < 0 ? 11730944 : 4010799, canvas.Const.FONT_TAHOMA_12_BOLD)
    }
    if (parseInt(this._data.status) == 3) {
        this.clock.visible = false;
        this.header.visible = false
    } else {
        this.header.visible = true
    }
    this.updateTimer()
}
;
canvas.app.location.view.fronts.FrontsLoc.prototype.updateTimer = function() {
    var t = this.data.cooldown - Date.now();
    this.header.text = canvas.Functions.formatDate(t, "", 0, true, true);
    switch (this.hintType) {
    case 0:
        this.hint.updateTime(this._data.status == 3 ? 0 : t);
        break
    }
}
;
canvas.app.location.view.fronts.FrontsLoc.prototype.clickHandler = function(t) {
    if (canvas.Functions.findParent(this.icons, t.target)) {
        switch (parseInt(this.icons.currentIcon)) {
        case 1:
            this.baseLnk.showEnterBattleConfirm(this.data.title, this.data.id, this.data.cooldown);
            break;
        case 3:
            if (this.data.fightID != "")
                showFightInfo(this.data.fightID);
            break
        }
    }
}
;
canvas.app.location.view.fronts.FrontsHint = function(t, e) {
    canvas.app.view.BigHint.call(this, t, e);
    this.iconsContainer = new canvas.px.Container;
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,869915,Math.round(this.width - 15),20,"right");
    this.addChild(this.timeField);
    this.timeField.y = 47;
    this.wall = new canvas.px.Mask(this.width - 28,15,15973005,1);
    this.addChildAt(this.wall, 1);
    this.wall.position.set(14, 47);
    this.topField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,4010799,this.width,20,"center");
    this.addChild(this.iconsContainer);
    this.icons = new canvas.app.location.view.fronts.FrontsIcons;
    this.iconsContainer.addChild(this.icons);
    this.iconsContainer.y = 24;
    this.addChild(this.topField);
    this.topField.position.set(0, 27);
    this.infoField.position.set(22, 32 + 15)
}
;
canvas.app.location.view.fronts.FrontsHint.prototype = Object.create(canvas.app.view.BigHint.prototype);
canvas.app.location.view.fronts.FrontsHint.prototype.updateTop = function(t, e) {
    this.topField.color = e;
    this.topField.text = t;
    this.iconsContainer.x = Math.round((this.width - this.topField.textWidth) * .5) - this.iconsContainer.width - 4
}
;
canvas.app.location.view.fronts.FrontsHint.prototype.updateTime = function(t) {
    this.timeField.text = t > 0 ? canvas.Functions.formatDate(t, "00", 1) : "--"
}
;
canvas.app.location.view.fronts.FrontsHint.prototype.update = function(t, e, a) {
    if (e == undefined)
        e = 4010799;
    if (a == undefined)
        a = canvas.Const.FONT_TAHOMA_12;
    this.infoField.color = e;
    this.infoField.font = a;
    this.infoField.text = t;
    this.back.height = this.infoField.textHeight + 60
}
;
canvas.app.manor.Const = {
    REQUESTS_ON_PAGE: 10,
    REQUESTS_ON_PAGE_SHORT: 6,
    FLAG_AFTER_BUILD: 1,
    STORAGE_MAX_CELLS: 25,
    REQ_CONFIG: "config",
    REQ_BUILD: "build",
    REQ_CREATE_WORK_REQUEST: "createWorkRequest",
    REQ_LOAD_USER_REQUESTS: "loadUserRequests",
    REQ_REMOVE_WORK_REQUEST: "removeWorkRequest",
    REQ_WORK_USE: "workUse",
    REQ_BUY_CEMENT: "buyCement",
    REQ_USE_PETS_DATA: "usePetsData",
    REQ_USE_PETS_ACTION: "usePetsAction",
    REQ_USE_EXP_DATA: "useExpData",
    REQ_USE_EXP_ACTION: "useExpAction",
    REQ_USE_EXP2_DATA: "useExp2Data",
    REQ_USE_EXP2_ACTION: "useExp2Action",
    REQ_USE_VALOUR_DATA: "useValourData",
    REQ_USE_VALOUR_ACTION: "useValourAction",
    REQ_USE_HOSPITAL_DATA: "useHospitalData",
    REQ_USE_HOSPITAL_ACTION: "useHospitalAction",
    REQ_USE_STORAGE_ACTION: "useStorageAction",
    REQ_USE_BANK_DATA: "useBankData",
    REQ_USE_BANK_ACTION: "useBankAction",
    REQ_USE_WORKSHOP_DATA: "useWorkshopData",
    REQ_USE_WORKSHOP_ACTION: "useWorkshopAction",
    REQ_USE_MINE_DATA: "useMineData",
    REQ_USE_MINE_ACTION: "useMineAction",
    REQ_DESTROY_BUILDING: "destroyBuilding",
    REQ_GET_AVAILABLE_BUILDINGS: "getAvailableBuildings",
    REQ_EXIT: "exit",
    REQ_USE_KENNEL_DATA: "useKennelData",
    REQ_USE_KENNEL_ACTION: "useKennelAction",
    TITLES: ["main", "exp", "obelisk", "pets", "storage", "workshop", "mail", "hospital", "market", "wall", "tree", "mine1", "mine2", "mine3", "make1", "make2", "make3", "portal", "halloween", "kennel", "exp2", "camp"],
    MAP_POINTS: {
        1: [[5, 1804, 176], [11, 1724, 316], [19, 1724, 316], [20, 768, 409], [1, 1338, 274], [6, 1852, 372], [7, 1668, 412], [2, 1964, 508], [9, 1820, 519], [3, 1643, 540], [4, 1210, 610], [8, 1674, 625], [10, 1898, 630], [12, 311, 241], [18, 644, 95], [22, 435, 583]],
        2: [[4, 214, 136], [1, 678, 274], [5, 190, 340], [7, 324, 436], [2, 108, 484], [9, 242, 486], [3, 524, 542], [11, 620, 573], [19, 621, 573], [20, 1212, 413], [6, 732, 598], [8, 426, 638], [10, 106, 640], [12, 1691, 243], [18, 1342, 100], [22, 1643, 551]]
    },
    WIDTH_MIN: 800,
    HEIGHT_MIN: 400,
    WIDTH_MAX: 2024,
    HEIGHT_MAX: 724,
    MAP_ORIGINAL_WIDTH: 2e3,
    MAP_ORIGINAL_HEIGHT: 700,
    CURL_DX: 12,
    CURL_DY: 12,
    BUILDING_COUNT: 22,
    BUILDING_MAX_COUNT: 30,
    ENERGY_COURSE: 5,
    THRONE_ROOM_WIDTH: 1e3,
    THRONE_ROOM_HEIGHT: 300
};
canvas.app.manor.Controller = function(t) {
    this.main = t;
    this.view = this.main.view;
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELECT_BUILDING, null, this.thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_THRONE_ROOM, null, this.thisHandler, this);
    if (canvas.app.manor.model.guestMode)
        return;
    var e = [canvas.app.manor.Event.CLOSE_BUILDING, canvas.app.manor.Event.CLOSE_LABOUR, canvas.app.manor.Event.OPEN_LABOUR, canvas.app.manor.Event.OPEN_HIRE, canvas.app.manor.Event.CLOSE_HIRE, canvas.app.manor.Event.OPEN_PORTAL_RESET, canvas.app.manor.Event.CLOSE_PORTAL_RESET, canvas.app.manor.Event.OPEN_WORK, canvas.app.manor.Event.CLOSE_WORK, canvas.app.manor.Event.OPEN_CONFIRM, canvas.app.manor.Event.OPEN_MESSAGE, canvas.app.manor.Event.OPEN_CEMENT, canvas.app.manor.Event.CLOSE_CEMENT, canvas.app.manor.Event.BUY_CEMENT, canvas.app.manor.Event.CREATE_WORK_REQUEST, canvas.app.manor.Event.LOAD_WORK_REQUESTS, canvas.app.manor.Event.REMOVE_WORK_REQUEST, canvas.app.manor.Event.WORK_USE, canvas.app.manor.Event.BUILD, canvas.app.manor.Event.USE_PETS_DATA, canvas.app.manor.Event.USE_PETS_ACTION, canvas.app.manor.Event.USE_EXP_DATA, canvas.app.manor.Event.USE_EXP_ACTION, canvas.app.manor.Event.USE_EXP2_DATA, canvas.app.manor.Event.USE_EXP2_ACTION, canvas.app.manor.Event.USE_HOSPITAL_DATA, canvas.app.manor.Event.USE_HOSPITAL_ACTION, canvas.app.manor.Event.USE_STORAGE_DATA, canvas.app.manor.Event.USE_STORAGE_ACTION, canvas.app.manor.Event.USE_VALOUR_DATA, canvas.app.manor.Event.USE_VALOUR_ACTION, canvas.app.manor.Event.OPEN_BANK, canvas.app.manor.Event.OPEN_HUNT_CAMP, canvas.app.manor.Event.OPEN_COUNT, canvas.app.manor.Event.USE_BANK_ACTION, canvas.app.manor.Event.USE_WORKSHOP_DATA, canvas.app.manor.Event.USE_WORKSHOP_ACTION, canvas.app.manor.Event.USE_MINE_DATA, canvas.app.manor.Event.USE_MINE_ACTION, canvas.app.manor.Event.USE_PORTAL_DATA, canvas.app.manor.Event.USE_PORTAL_ACTION, canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM, canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE, canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH, canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, canvas.app.manor.Event.LOAD_CONFIG, canvas.app.manor.Event.DESTROY_BUILDING, canvas.app.manor.Event.GET_AVAILABLE_BUILDINGS, canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING, canvas.app.manor.Event.USE_KENNEL_DATA, canvas.app.manor.Event.USE_KENNEL_ACTION, canvas.app.manor.Event.OPEN_CHOOSE_PET, canvas.app.manor.Event.CLOSE_CHOOSE_PET, canvas.app.manor.Event.EXIT, canvas.app.manor.Event.THRONE_ROOM_INSTALL, canvas.app.manor.Event.THRONE_ROOM_REMOVE, canvas.app.manor.Event.THRONE_ROOM_UPDATE, canvas.app.manor.Event.THRONE_ROOM_BUY];
    var a, i = e.length;
    for (a = 0; a < i; a++) {
        canvas.EventManager.addEventListener(e[a], null, this.thisHandler, this)
    }
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LIST_SHOW_HIDE, null, this.listHandler, this);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.exitButton, this.exit, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.workButton, this.workButtonClickHandler, this);
    this.timer = setInterval(this.timerHandler.bind(this), 6e4);
    this.timerHandler();
    this.timer1000 = setInterval(this.timerHandler1000.bind(this), 1e3)
}
;
canvas.app.manor.Controller.prototype.workButtonClickHandler = function() {
    this.view.labourWin.open();
    this.view.labourWin.panel.path = "all"
}
;
canvas.app.manor.Controller.prototype.testError = function(t) {
    if (t.error) {
        this.view.showError(t.error);
        return true
    }
    return false
}
;
canvas.app.manor.Controller.prototype.completeHandler = function(t) {
    var e = canvas.app.manor.model;
    this.main.interactiveChildren = true;
    var a;
    var i;
    var s = t ? JSON.parse(this.request.request.responseText) : JSON.parse(canvas.ResourceLoader.get("conf").data);
    var n = s;
    var r = "";
    var o;
    if (n["user|view"]) {
        swfObject("lvl", n)
    }
    for (o in s) {
        if (o.substr(0, 6) == "estate") {
            s = s[o];
            r = "estate";
            break
        }
        if (o.substr(0, 5) == "store") {
            s = s[o];
            r = "store";
            break
        }
    }
    if (parseInt(s.reload) == 1) {
        e.needUpdate = true
    }
    if (s.redirect) {
        canvas.Functions.navigateToURL(s.redirect, "_self");
        return
    }
    if (this.request.info.name) {
        if (this.testError(s)) {
            switch (this.request.info.name) {
            case canvas.app.manor.Const.REQ_USE_KENNEL_ACTION:
                this.view.buildingWin.useKennel.update();
                break
            }
            return
        }
        switch (this.request.info.name) {
        case canvas.app.manor.Const.REQ_CONFIG:
            e.parseConf(s);
            this.loadUserRequests();
            this.view.update();
            this.timerHandler1000();
            a = e.user.buildings["portal"];
            if (!e.portals && a && a.level > 0)
                this.usePortalData();
            break;
        case canvas.app.manor.Const.REQ_BUILD:
            if (parseInt(s.amount) > 0) {
                e.user.labour -= parseInt(s.amount.toString());
                e.user.cement -= parseInt(s.amount.toString());
                a = e.user.buildings[e.selectedBuilding];
                i = e.buildings[e.selectedBuilding][a.level];
                a.labour += parseInt(s.amount.toString())
            }
            this.view.update(canvas.app.manor.Const.FLAG_AFTER_BUILD);
            break;
        case canvas.app.manor.Const.REQ_CREATE_WORK_REQUEST:
            break;
        case canvas.app.manor.Const.REQ_LOAD_USER_REQUESTS:
            e.parseUserRequests(s);
            this.view.labourWin.allRequests.update();
            break;
        case canvas.app.manor.Const.REQ_REMOVE_WORK_REQUEST:
            this.view.labourWin.myRequests.update();
            break;
        case canvas.app.manor.Const.REQ_WORK_USE:
            var l, c, p = e.labourRequests.length;
            for (c = 0; c < p; c++) {
                l = e.labourRequests[c];
                if (l && l.id == e.selectedRequestID) {
                    e.user.labour -= l.labour - s.amount;
                    l.labour = s.amount;
                    this.view.labourWin.update();
                    break
                }
            }
            break;
        case canvas.app.manor.Const.REQ_USE_PETS_DATA:
            e.parsePets(s);
            this.view.buildingWin.usePets.update();
            break;
        case canvas.app.manor.Const.REQ_USE_PETS_ACTION:
            this.usePetsData();
            return;
        case canvas.app.manor.Const.REQ_USE_EXP_DATA:
            e.parseExp(s);
            this.view.buildingWin.useExp.update();
            break;
        case canvas.app.manor.Const.REQ_USE_EXP_ACTION:
            this.useExpData();
            return;
        case canvas.app.manor.Const.REQ_USE_EXP2_DATA:
            e.parseExp2(s);
            this.view.buildingWin.useExp2.update();
            break;
        case canvas.app.manor.Const.REQ_USE_EXP2_ACTION:
            this.useExpData("21", canvas.app.manor.Const.REQ_USE_EXP2_DATA);
            return;
        case canvas.app.manor.Const.REQ_USE_VALOUR_DATA:
            e.parseValour(s);
            this.view.buildingWin.useObelisk.update();
            break;
        case canvas.app.manor.Const.REQ_USE_VALOUR_ACTION:
            this.useValourData();
            return;
        case canvas.app.manor.Const.REQ_USE_HOSPITAL_DATA:
            e.parseHospital(s);
            this.view.buildingWin.useHospital.update();
            break;
        case canvas.app.manor.Const.REQ_USE_HOSPITAL_ACTION:
            this.useHospitalData();
            return;
        case canvas.app.manor.Const.REQ_USE_STORAGE_ACTION:
            if (e.storageArtToPut) {
                this.useStorageAction(e.storageArtToPut, "", e.storageArtToPutCount == 0 ? 1 : e.storageArtToPutCount);
                e.storageArtToPut = "";
                e.storageArtToPutCount = 1
            } else {
                this.useBankData()
            }
            break;
        case canvas.app.manor.Const.REQ_USE_BANK_DATA:
            e.parseBank(s);
            this.view.bankWin.update();
            break;
        case canvas.app.manor.Const.REQ_USE_BANK_ACTION:
            this.useBankData();
            break;
        case canvas.app.manor.Const.REQ_USE_WORKSHOP_DATA:
            e.parseWorkshop(s);
            this.view.buildingWin.useWorkshop.update();
            this.view.buildingWin.useWorkshop2.update();
            break;
        case canvas.app.manor.Const.REQ_USE_WORKSHOP_ACTION:
            this.useWorkshopData();
            break;
        case canvas.app.manor.Const.REQ_USE_MINE_DATA:
            e.parseMine(s);
            switch (e.getSelectedBuildingBase()) {
            case "mine":
                this.view.buildingWin.useMine.update();
                break;
            case "make":
                this.view.buildingWin.useMake.update();
                break
            }
            this.view.buildingWin.useMine2.update();
            break;
        case canvas.app.manor.Const.REQ_USE_MINE_ACTION:
            this.useMineData();
            break;
        case canvas.app.manor.Const.REQ_DESTROY_BUILDING:
            e.craftData = null;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING);
            break;
        case canvas.app.manor.Const.REQ_GET_AVAILABLE_BUILDINGS:
            e.parseAvailableBuildings(s.buildings_id_list.toString());
            if (e.availableBuildings.length < 2) {
                if (e.availableBuildings.length == 1) {
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, {
                        params: "chooser",
                        object: e.availableBuildings[0]
                    })
                }
            } else {
                this.view.buildingWin.close();
                this.view.chooseBuildingWin.update();
                this.view.chooseBuildingWin.open()
            }
            break;
        case canvas.app.manor.Const.REQ_USE_KENNEL_DATA:
            e.parseKennel(s);
            this.view.buildingWin.useKennel.update();
            break;
        case canvas.app.manor.Const.REQ_USE_KENNEL_ACTION:
            this.useBuildingData(canvas.app.manor.Const.REQ_USE_KENNEL_DATA);
            break
        }
    } else {
        switch (r) {
        case "estate":
            switch (this.request.info.action) {
            case "building":
                switch (parseInt(this.request.params.type_id)) {
                case 18:
                    switch (this.request.params.building_action) {
                    case "teleport":
                        if (s.need_confirm && s.error) {
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                                params: s.error,
                                object: {
                                    name: canvas.app.manor.Event.USE_PORTAL_ACTION,
                                    params: {
                                        object: {
                                            building_action: "teleport",
                                            number: this.request.params.number,
                                            confirmed: true
                                        }
                                    }
                                }
                            });
                            return
                        }
                    }
                    break
                }
                switch (parseInt(this.request.params.type_id)) {
                case 1:
                    if (this.testError(s)) {
                        return
                    }
                    switch (this.request.params.building_action) {
                    case "throneroom_conf":
                        e.throneRoomData.parseConf(s);
                        if (!e.throneRoomData.shopItems) {
                            this.throneRoomStoreList()
                        } else {
                            this.view.throneRoom.update()
                        }
                        break;
                    case "throneroom_install":
                    case "throneroom_remove":
                    case "throneroom_buy_artikul":
                        e.throneRoomData.mergeItems(s.change_items);
                        this.view.throneRoom.update();
                        break
                    }
                    break;
                case 18:
                    if (this.testError(s)) {
                        return
                    }
                    switch (this.request.params.building_action) {
                    case "conf":
                        e.parsePortal(s);
                        this.view.buildingWin.usePortal.update();
                        this.view.updateMenu();
                        break;
                    case "bind":
                    case "reset_bind_timer":
                        this.usePortalData();
                        break
                    }
                    break;
                case 22:
                    if (this.testError(s)) {
                        return
                    }
                    switch (this.request.params.building_action) {
                    case "confSearch":
                    case "confFarm":
                    case "confForge":
                        e.parseHuntCamp(s);
                        this.view.huntCampWin.update();
                        break;
                    case "missionGetRewards":
                        e.campData.parsePets(s.pets);
                        e.campData.removeActiveMission(e.campData.currentActiveMission);
                        this.view.huntCampWin.updateFarm();
                        break;
                    case "missionSendPets":
                        e.campData.parsePets(s.pets);
                        e.campData.parseActiveMissions(s.missions);
                        e.campData.changeArtifactsCount();
                        this.view.huntCampWin.updateFarm();
                        break;
                    case "destructItem":
                        e.campData.parseDestructResult(s);
                        this.view.huntCampWin.activate();
                        this.view.huntCampWin.equipment.update();
                        break;
                    case "buildItemRandom":
                        e.campData.deltaFragment();
                        if (s.new) {
                            for (o in s.new) {
                                e.campData.addForgeItem(s.new[o], true)
                            }
                        }
                        this.view.huntCampWin.equipment.update();
                        break;
                    case "buildItemLevel":
                        e.campData.deltaFragment(e.campData.currentForgeLevel);
                        if (s.new) {
                            for (o in s.new) {
                                e.campData.addForgeItem(s.new[o], true)
                            }
                        }
                        this.view.huntCampWin.equipment.update();
                        break
                    }
                    this.view.huntCampWin.showLoader();
                    break
                }
                break
            }
            break;
        case "store":
            if (!this.testError(s)) {
                switch (this.request.info.action) {
                case "list":
                    e.throneRoomData.parseShopItems(s);
                    e.throneRoomData.userData.restrictions = s.restrictions;
                    this.view.throneRoom.update();
                    e.throneRoomData.loadHints();
                    break;
                case "cart_add":
                    this.throneRoomStorePurchase();
                    break;
                case "purchase":
                case "purchase_in_one_step":
                    this.throneRoomConf();
                    break
                }
            } else {
                switch (this.request.info.action) {
                case "cart_add":
                case "purchase":
                    this.throneRoomStoreClear();
                    break
                }
            }
            break
        }
    }
    if (e.needUpdate) {
        this.loadConfig()
    }
    if (s.js_code) {
        getArtifactAlt(s.js_code.replace("<![CDATA[", "").replace("]]>", ""))
    }
}
;
canvas.app.manor.Controller.prototype.errorHandler = function(t) {
    this.main.interactiveChildren = true
}
;
canvas.app.manor.Controller.prototype.timerHandler = function() {
    this.sendRequest("last_active")
}
;
canvas.app.manor.Controller.prototype.timerHandler1000 = function() {
    var t = canvas.app.manor.model;
    var e;
    if (t.selectedBuilding == "workshop" && t.workShopRequests != null) {
        e = t.workShopRequests[0];
        if (e != null) {
            e.duration++;
            if (e.duration >= e.durationMax) {
                this.useWorkshopData()
            } else {
                this.view.buildingWin.useWorkshop2.updateRequests()
            }
        }
    }
    if (t.craftData != null && (t.getSelectedBuildingBase() == "mine" || t.getSelectedBuildingBase() == "make") && t.craftData.requests != null) {
        e = t.craftData.requests[0];
        if (e != null) {
            e.duration++;
            if (e.duration >= e.durationMax) {
                this.useMineData()
            } else {
                switch (t.getSelectedBuildingBase()) {
                case "mine":
                    this.view.buildingWin.useMine.updateRequests();
                    break;
                case "make":
                    this.view.buildingWin.useMake.updateRequests();
                    break
                }
            }
        }
    }
    if (t.user.labourMax == 0) {
        this.view.labour.setLabour(0, 0);
        this.view.labour.tf.text = canvas.Functions.formatDate(t.user.workRefreshTime * 1e3, "00", 2, true);
        t.user.workRefreshTime--;
        if (t.user.workRefreshTime < 0)
            t.user.workRefreshTime = 0;
        if (t.user.workRefreshTime == 0) {
            this.loadConfig()
        }
    } else {
        this.view.labour.setLabour(t.user.labour, t.user.labourMax)
    }
    switch (t.getSelectedBuildingBase()) {
    case "portal":
        this.view.buildingWin.usePortal.updateTime();
        break;
    case "kennel":
        this.view.buildingWin.useKennel.updateTime();
        break
    }
    if (this.view.huntCampWin.parent) {
        this.view.huntCampWin.updateTime()
    }
    if (this.view.throneRoom.parent) {
        this.view.throneRoom.updateTime()
    }
    var a = canvas.Functions.getSessTarget();
    if (a.autoPenalty >= 0) {
        this.exit()
    }
}
;
canvas.app.manor.Controller.prototype.updateCurrentBuilding = function() {
    this.view.updateCurrentBuildingPath()
}
;
canvas.app.manor.Controller.prototype.update = function() {
    this.view.update()
}
;
canvas.app.manor.Controller.prototype.sendRequest = function(t, e, a, i) {
    var s, n = this.request.stack.length;
    if (n > 0) {
        for (s = 0; s < n; s++) {
            if (this.request.stack[s][2].name == a)
                return
        }
    }
    if (a == undefined)
        a = "";
    if (i == undefined)
        i = "estate";
    var r = canvas.Config.entryPoint + "?object=" + i + "&json_mode_on=1&action=" + t;
    if (e) {
        for (var o in e) {
            r += "&" + o + "=" + e[o]
        }
    } else {
        e = new Object
    }
    if (this.request.busy && this.request.url == r)
        return;
    this.request.load(r, e, {
        name: a,
        action: t
    })
}
;
canvas.app.manor.Controller.prototype.listHandler = function() {
    canvas.app.manor.model.localStorage.set("menuOpened", this.view.menu.showed ? "1" : "0")
}
;
canvas.app.manor.Controller.prototype.loadConfig = function() {
    canvas.app.manor.model.needUpdate = false;
    if (canvas.ResourceLoader.get("conf")) {
        var t = this.request.info;
        var e = this.request.params;
        this.request.info = {
            name: canvas.app.manor.Const.REQ_CONFIG,
            action: "conf"
        };
        this.request.params = null;
        this.completeHandler();
        canvas.ResourceLoader.remove("conf");
        this.request.info = t;
        this.request.params = e
    } else {
        this.sendRequest("conf", null, canvas.app.manor.Const.REQ_CONFIG)
    }
}
;
canvas.app.manor.Controller.prototype.loadUserRequests = function() {
    var t = new Object;
    t.page = canvas.app.manor.model.requestCurPage + 1;
    this.sendRequest("work_requests", t, canvas.app.manor.Const.REQ_LOAD_USER_REQUESTS)
}
;
canvas.app.manor.Controller.prototype.build = function() {
    var t = new Object;
    t.index = canvas.app.manor.model.selectedDich;
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    t.amount = this.view.buildingWin.upgrade.labourInput.input.text;
    this.sendRequest("build", t, canvas.app.manor.Const.REQ_BUILD)
}
;
canvas.app.manor.Controller.prototype.createWorkRequest = function(t, e, a, i) {
    var s = new Object;
    var n = canvas.app.manor.model.user.buildings[t];
    s.amount = e;
    s.index = n.dichIndex.toString();
    s.type_id = canvas.app.manor.Const.TITLES.indexOf(t) + 1;
    s.work_request_price = a;
    this.sendRequest(i ? "work_request_update" : "build", s, canvas.app.manor.Const.REQ_CREATE_WORK_REQUEST)
}
;
canvas.app.manor.Controller.prototype.removeWorkRequest = function(t) {
    var e = new Object;
    e.work_request_id = t;
    this.sendRequest("cancel_request", e, canvas.app.manor.Const.REQ_REMOVE_WORK_REQUEST)
}
;
canvas.app.manor.Controller.prototype.workUse = function(t) {
    var e = new Object;
    e.work_request_id = canvas.app.manor.model.selectedRequestID;
    e.amount = t;
    this.sendRequest("work", e, canvas.app.manor.Const.REQ_WORK_USE)
}
;
canvas.app.manor.Controller.prototype.buyCement = function(t, e) {
    var a = new Object;
    a.amount = t;
    a.energy = e ? "1" : "0";
    this.sendRequest("buy_cement", a, canvas.app.manor.Const.REQ_BUY_CEMENT)
}
;
canvas.app.manor.Controller.prototype.usePetsData = function() {
    var t = new Object;
    t.building_action = "conf";
    t.type_id = "4";
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_PETS_DATA)
}
;
canvas.app.manor.Controller.prototype.usePetsAction = function(t, e) {
    var a = new Object;
    var i = canvas.app.manor.model.petTrainingTypes[e];
    a.building_action = "train";
    a.type_id = "4";
    a.pet_id = t;
    a.training_type = i.id;
    this.sendRequest("building", a, canvas.app.manor.Const.REQ_USE_PETS_ACTION)
}
;
canvas.app.manor.Controller.prototype.useExpData = function(t, e) {
    var a = new Object;
    a.building_action = "conf";
    a.type_id = t == undefined ? "2" : t;
    this.sendRequest("building", a, e == undefined ? canvas.app.manor.Const.REQ_USE_EXP_DATA : e)
}
;
canvas.app.manor.Controller.prototype.useExpAction = function(t, e, a, i) {
    var s = new Object;
    s.building_action = t;
    s.type_id = a == undefined ? "2" : a;
    s.energy = e ? "1" : "0";
    if (t == "set_direction")
        s.dir = e ? "1" : "0";
    this.sendRequest("building", s, i == undefined ? canvas.app.manor.Const.REQ_USE_EXP_ACTION : i)
}
;
canvas.app.manor.Controller.prototype.useValourData = function() {
    var t = new Object;
    t.building_action = "conf";
    t.type_id = "3";
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_VALOUR_DATA)
}
;
canvas.app.manor.Controller.prototype.useValourAction = function(t, e) {
    var a = new Object;
    a.building_action = t;
    a.type_id = "3";
    a.energy = e ? "1" : "0";
    this.sendRequest("building", a, canvas.app.manor.Const.REQ_USE_VALOUR_ACTION)
}
;
canvas.app.manor.Controller.prototype.useHospitalData = function() {
    var t = new Object;
    t.building_action = "conf";
    t.type_id = "8";
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_HOSPITAL_DATA)
}
;
canvas.app.manor.Controller.prototype.useHospitalAction = function() {
    var t = new Object;
    t.building_action = "use_buff";
    t.type_id = "8";
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_HOSPITAL_ACTION)
}
;
canvas.app.manor.Controller.prototype.useStorageAction = function(t, e, a) {
    if (a == undefined)
        a = 1;
    var i = new Object;
    i.type_id = "5";
    i.cnt = a;
    if (e) {
        i.building_action = "give_art";
        i.artifact_id = e
    } else if (t) {
        i.building_action = "put_art";
        i.artifact_id = t
    }
    this.sendRequest("building", i, canvas.app.manor.Const.REQ_USE_STORAGE_ACTION)
}
;
canvas.app.manor.Controller.prototype.useBankData = function() {
    var t = new Object;
    t.building_action = "conf";
    t.type_id = "1";
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_BANK_DATA)
}
;
canvas.app.manor.Controller.prototype.useBankAction = function(t) {
    if (t == undefined)
        t = 1;
    var e = new Object;
    e.building_action = "move_art";
    e.type_id = "1";
    e.artifact_id = canvas.app.manor.model.bankItemFrom.id;
    e.cnt = t;
    e.area_id_from = canvas.app.manor.model.bankItemFrom.area;
    e.area_id_to = canvas.app.manor.model.bankItemToArea;
    this.sendRequest("building", e, canvas.app.manor.Const.REQ_USE_BANK_ACTION)
}
;
canvas.app.manor.Controller.prototype.useWorkshopData = function() {
    var t = new Object;
    t.building_action = "conf";
    t.type_id = "6";
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_WORKSHOP_DATA)
}
;
canvas.app.manor.Controller.prototype.useWorkshopAction = function(t) {
    t.type_id = "6";
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_WORKSHOP_ACTION)
}
;
canvas.app.manor.Controller.prototype.useMineData = function() {
    var t = new Object;
    t.building_action = "conf";
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_MINE_DATA)
}
;
canvas.app.manor.Controller.prototype.useMineAction = function(t) {
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_MINE_ACTION)
}
;
canvas.app.manor.Controller.prototype.usePortalData = function() {
    this.sendRequest("building", {
        type_id: 18,
        building_action: "conf"
    })
}
;
canvas.app.manor.Controller.prototype.useBuildingData = function(t) {
    var e = new Object;
    e.building_action = "conf";
    e.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", e, t)
}
;
canvas.app.manor.Controller.prototype.useBuildingAction = function(t, e) {
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", t, e)
}
;
canvas.app.manor.Controller.prototype.destroyBuilding = function() {
    var t = new Object;
    t.index = canvas.app.manor.model.selectedDich;
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("destroy_building", t, canvas.app.manor.Const.REQ_DESTROY_BUILDING)
}
;
canvas.app.manor.Controller.prototype.getAvailableBuildings = function() {
    var t = new Object;
    t.index = canvas.app.manor.model.selectedDich;
    this.sendRequest("buildings_list", t, canvas.app.manor.Const.REQ_GET_AVAILABLE_BUILDINGS)
}
;
canvas.app.manor.Controller.prototype.throneRoomConf = function() {
    var t = new Object;
    t.type_id = 1;
    t.building_action = "throneroom_conf";
    this.sendRequest("building", t)
}
;
canvas.app.manor.Controller.prototype.throneRoomStoreList = function() {
    this.sendRequest("list", {
        is_throne_room: "1",
        with_badges: "1",
        with_restrictions: "1"
    }, null, "store")
}
;
canvas.app.manor.Controller.prototype.throneRoomStorePurchase = function() {
    this.sendRequest("purchase", {
        is_throne_room: "1"
    }, null, "store")
}
;
canvas.app.manor.Controller.prototype.throneRoomStoreClear = function() {
    this.sendRequest("cart_clear", {
        is_throne_room: "1"
    }, null, "store")
}
;
canvas.app.manor.Controller.prototype.exit = function() {
    this.sendRequest("exit", null, canvas.app.manor.Const.REQ_EXIT)
}
;
canvas.app.manor.Controller.prototype.thisHandler = function(t) {
    var e = t.params;
    var a = canvas.app.manor.model;
    var i;
    var s;
    var n;
    switch (t.name) {
    case canvas.app.manor.Event.SELECT_BUILDING:
        if (a.guestMode) {
            if (e.params == "1")
                this.view.openGuestThroneRoom()
        } else {
            if (e.params == "exit") {
                this.exit();
                return
            }
            this.view.bankWin.close();
            if (e.params == "chooser") {
                a.selectedBuilding = e.object.name;
                this.view.buildingWin.open();
                this.view.chooseBuildingWin.close()
            } else {
                a.selectedDich = parseInt(e.params);
                n = a.user.buildingsByIndex[parseInt(e.params)];
                if (n) {
                    a.selectedBuilding = n.name;
                    this.view.buildingWin.open()
                } else {
                    this.getAvailableBuildings()
                }
            }
        }
        break;
    case canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING:
        this.view.buildingWin.close();
        this.getAvailableBuildings();
        break;
    case canvas.app.manor.Event.CLOSE_BUILDING:
        this.view.buildingWin.close();
        break;
    case canvas.app.manor.Event.CLOSE_LABOUR:
        this.view.labourWin.close();
        break;
    case canvas.app.manor.Event.OPEN_LABOUR:
        this.view.labourWin.open();
        break;
    case canvas.app.manor.Event.BUILD:
        this.build();
        break;
    case canvas.app.manor.Event.OPEN_HIRE:
        this.view.hireWin.open(false);
        if (e.object) {
            i = e.object;
            this.view.hireWin.combo.setSelectedItem("name", i.building);
            this.view.hireWin.inputLabour.text = i.labour.toString();
            this.view.hireWin.inputPrice.text = i.price.toString();
            this.view.hireWin.changeHandler()
        }
        break;
    case canvas.app.manor.Event.CLOSE_HIRE:
        this.view.hireWin.close();
        break;
    case canvas.app.manor.Event.OPEN_PORTAL_RESET:
        this.view.portalResetWin.open();
        break;
    case canvas.app.manor.Event.CLOSE_PORTAL_RESET:
        this.view.portalResetWin.close();
        break;
    case canvas.app.manor.Event.CLOSE_WORK:
        this.view.workWin.close();
        break;
    case canvas.app.manor.Event.OPEN_WORK:
        this.view.workWin.open(false);
        break;
    case canvas.app.manor.Event.OPEN_CONFIRM:
        this.view.openConfirm(e.params, e.object);
        break;
    case canvas.app.manor.Event.OPEN_MESSAGE:
        this.view.showError(e.params);
        break;
    case canvas.app.manor.Event.OPEN_CEMENT:
        this.view.cementWin.open();
        break;
    case canvas.app.manor.Event.CLOSE_CEMENT:
        this.view.cementWin.close();
        break;
    case canvas.app.manor.Event.CREATE_WORK_REQUEST:
        this.createWorkRequest(e.object.type, e.object.labour, e.object.price, typeof e.object.edit == "boolean" ? e.object.edit : false);
        break;
    case canvas.app.manor.Event.LOAD_WORK_REQUESTS:
        this.loadUserRequests();
        break;
    case canvas.app.manor.Event.REMOVE_WORK_REQUEST:
        this.removeWorkRequest(e.params);
        break;
    case canvas.app.manor.Event.WORK_USE:
        this.workUse(t.params);
        break;
    case canvas.app.manor.Event.BUY_CEMENT:
        this.view.cementWin.close();
        this.buyCement(parseInt(e.params), e.flag);
        break;
    case canvas.app.manor.Event.USE_PETS_DATA:
        this.usePetsData();
        break;
    case canvas.app.manor.Event.USE_PETS_ACTION:
        this.usePetsAction(e.object.pet, e.object.type);
        break;
    case canvas.app.manor.Event.USE_EXP_DATA:
        this.useExpData();
        break;
    case canvas.app.manor.Event.USE_EXP_ACTION:
        this.useExpAction(e.params, e.flag);
        break;
    case canvas.app.manor.Event.USE_EXP2_DATA:
        this.useExpData("21", canvas.app.manor.Const.REQ_USE_EXP2_DATA);
        break;
    case canvas.app.manor.Event.USE_EXP2_ACTION:
        this.useExpAction(e.params, e.flag, "21", canvas.app.manor.Const.REQ_USE_EXP2_ACTION);
        break;
    case canvas.app.manor.Event.USE_VALOUR_DATA:
        this.useValourData();
        break;
    case canvas.app.manor.Event.USE_VALOUR_ACTION:
        this.useValourAction(e.params, e.flag);
        break;
    case canvas.app.manor.Event.USE_HOSPITAL_DATA:
        this.useHospitalData();
        break;
    case canvas.app.manor.Event.USE_HOSPITAL_ACTION:
        this.useHospitalAction();
        break;
    case canvas.app.manor.Event.USE_STORAGE_DATA:
        this.useBankData();
        break;
    case canvas.app.manor.Event.USE_STORAGE_ACTION:
        if (e.object.putItem == undefined && e.object.getItem != undefined) {
            s = e.object.getItem
        } else {
            s = e.object.putItem
        }
        if (e.object.putItem != undefined && e.object.getItem != undefined) {
            a.storageArtToPut = s.id;
            if (s.equals(e.object.getItem)) {
                a.storageArtToPutCount = (canvas.app.manor.view.controls.CountWin.count == 0 ? 1 : canvas.app.manor.view.controls.CountWin.count) + e.object.getItem.count
            } else {
                a.storageArtToPutCount = canvas.app.manor.view.controls.CountWin.count
            }
        }
        if (s && s.count > 1 && canvas.app.manor.view.controls.CountWin.count == 0) {
            canvas.app.manor.view.controls.CountWin.event = [canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                object: {
                    putItem: e.object.putItem,
                    getItem: e.object.getItem
                }
            }];
            canvas.app.manor.view.controls.CountWin.maxCount = s.count;
            this.view.countWin.open()
        } else {
            if (e.object.putItem != undefined && e.object.getItem != undefined) {
                this.useStorageAction("", e.object.getItem.id, e.object.getItem.count)
            } else {
                this.useStorageAction(e.object.putItem == undefined ? "" : e.object.putItem.id, e.object.getItem == undefined ? "" : e.object.getItem.id, canvas.app.manor.view.controls.CountWin.count == 0 ? 1 : canvas.app.manor.view.controls.CountWin.count)
            }
        }
        break;
    case canvas.app.manor.Event.USE_PORTAL_DATA:
        this.sendRequest("building", {
            type_id: 18,
            building_action: "conf"
        });
        break;
    case canvas.app.manor.Event.USE_PORTAL_ACTION:
        e.object.type_id = 18;
        this.sendRequest("building", e.object);
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH:
        this.sendRequest("building", {
            type_id: 22,
            building_action: "confSearch"
        });
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM:
        this.sendRequest("building", {
            type_id: 22,
            building_action: "confFarm"
        });
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE:
        this.sendRequest("building", {
            type_id: 22,
            building_action: "confForge"
        });
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_ACTION:
        e.object.type_id = 22;
        this.view.huntCampWin.showLoader(true);
        this.sendRequest("building", e.object);
        break;
    case canvas.app.manor.Event.OPEN_BANK:
        this.view.bankWin.open();
        this.useBankData();
        this.view.bankWin.panels.path = e.flag ? "storage" : "cells";
        break;
    case canvas.app.manor.Event.USE_BANK_DATA:
        this.useBankData();
        break;
    case canvas.app.manor.Event.USE_BANK_ACTION:
        a.bankItemFrom = e.object.from;
        a.bankItemToArea = e.object.toArea == "firstFree" ? a.findFirstFreeArea(a.bankItemFrom.stackable ? a.bankItemFrom : null) : e.object.toArea;
        if (a.bankItemToArea == "")
            return;
        if (a.bankItemFrom.count > 1 && canvas.app.manor.view.controls.CountWin.count == 0) {
            canvas.app.manor.view.controls.CountWin.event = [canvas.app.manor.Event.USE_BANK_ACTION, null, {
                object: {
                    from: a.bankItemFrom,
                    toArea: a.bankItemToArea
                }
            }];
            canvas.app.manor.view.controls.CountWin.maxCount = a.bankItemFrom.count;
            this.view.countWin.open()
        } else {
            this.useBankAction(canvas.app.manor.view.controls.CountWin.count == 0 ? 1 : canvas.app.manor.view.controls.CountWin.count)
        }
        break;
    case canvas.app.manor.Event.OPEN_HUNT_CAMP:
        this.view.huntCampWin.open();
        break;
    case canvas.app.manor.Event.OPEN_COUNT:
        this.view.countWin.open();
        break;
    case canvas.app.manor.Event.USE_WORKSHOP_DATA:
        this.useWorkshopData();
        break;
    case canvas.app.manor.Event.USE_WORKSHOP_ACTION:
        this.useWorkshopAction(e.object);
        break;
    case canvas.app.manor.Event.USE_MINE_DATA:
        this.useMineData();
        break;
    case canvas.app.manor.Event.USE_MINE_ACTION:
        this.useMineAction(e.object);
        break;
    case canvas.app.manor.Event.LOAD_CONFIG:
        this.loadConfig();
        break;
    case canvas.app.manor.Event.DESTROY_BUILDING:
        this.destroyBuilding();
        break;
    case canvas.app.manor.Event.GET_AVAILABLE_BUILDINGS:
        this.getAvailableBuildings();
        break;
    case canvas.app.manor.Event.OPEN_THRONE_ROOM:
        a.throneRoomData.userData.items = null;
        this.view.throneRoom.open();
        this.throneRoomConf();
        break;
    case canvas.app.manor.Event.USE_KENNEL_DATA:
        this.useBuildingData(canvas.app.manor.Const.REQ_USE_KENNEL_DATA);
        break;
    case canvas.app.manor.Event.USE_KENNEL_ACTION:
        this.useBuildingAction(e.object, canvas.app.manor.Const.REQ_USE_KENNEL_ACTION);
        break;
    case canvas.app.manor.Event.OPEN_CHOOSE_PET:
        if (e.object.type) {
            a.campData.selectedType = e.object.type
        } else {
            a.campData.selectedType = 0
        }
        a.campData.selectedSlot = e.object.index;
        this.view.choosePetWin.excludePets = e.object.excludePets;
        this.view.choosePetWin.open();
        break;
    case canvas.app.manor.Event.CLOSE_CHOOSE_PET:
        if (a.campData.selectedType) {
            this.view.huntCampWin.mineTalismans.list.items[a.campData.selectedType - 4].pets[a.campData.selectedSlot].data = e.object;
            this.view.huntCampWin.mineTalismans.list.items[a.campData.selectedType - 4].update()
        } else {
            this.view.huntCampWin.mineResources.list.items[a.campData.selectedSlot].pet = e.object
        }
        this.view.choosePetWin.close();
        break;
    case canvas.app.manor.Event.EXIT:
        this.exit();
        break;
    case canvas.app.manor.Event.THRONE_ROOM_INSTALL:
        this.sendRequest("building", {
            type_id: 1,
            building_action: "throneroom_install",
            id: e.id
        });
        break;
    case canvas.app.manor.Event.THRONE_ROOM_REMOVE:
        this.sendRequest("building", {
            type_id: 1,
            building_action: "throneroom_remove",
            id: e.id
        });
        break;
    case canvas.app.manor.Event.THRONE_ROOM_UPDATE:
        this.view.throneRoom.update();
        break;
    case canvas.app.manor.Event.THRONE_ROOM_BUY:
        this.sendRequest("purchase_in_one_step", {
            "form[item_id]": e.id,
            "form[amount]": 1,
            is_throne_room: 1
        }, null, "store");
        break
    }
}
;
canvas.app.manor.Event = {
    ENTER_FRAME: "Manor.ENTER_FRAME",
    ENTER_FRAME_ANIM: "Manor.ENTER_FRAME_ANIM",
    HINT_ADD: "Manor.HINT_ADD",
    HINT_REMOVE: "Manor.HINT_REMOVE",
    SELECT_BUILDING: "Manor.SELECT_BUILDING",
    CLOSE_BUILDING: "Manor.CLOSE_BUILDING",
    BUILD: "Manor.BUILD",
    CLOSE_LABOUR: "Manor.CLOSE_LABOUR",
    OPEN_LABOUR: "Manor.OPEN_LABOUR",
    OPEN_HIRE: "Manor.OPEN_HIRE",
    CLOSE_HIRE: "Manor.CLOSE_HIRE",
    OPEN_PORTAL_RESET: "Manor.OPEN_PORTAL_RESET",
    CLOSE_PORTAL_RESET: "Manor.CLOSE_PORTAL_RESET",
    OPEN_WORK: "Manor.OPEN_WORK",
    CLOSE_WORK: "Manor.CLOSE_WORK",
    OPEN_CONFIRM: "Manor.OPEN_CONFIRM",
    OPEN_MESSAGE: "Manor.OPEN_MESSAGE",
    OPEN_CEMENT: "Manor.OPEN_CEMENT",
    CLOSE_CEMENT: "Manor.CLOSE_CEMENT",
    CREATE_WORK_REQUEST: "Manor.CREATE_WORK_REQUEST",
    LOAD_WORK_REQUESTS: "Manor.LOAD_WORK_REQUESTS",
    REMOVE_WORK_REQUEST: "Manor.REMOVE_WORK_REQUEST",
    WORK_USE: "Manor.WORK_USE",
    OPEN_MARKET_BUY: "Manor.OPEN_MARKET_BUY",
    OPEN_MARKET_SELL: "Manor.OPEN_MARKET_SELL",
    CLOSE_MARKET: "Manor.CLOSE_MARKET",
    LOAD_SELL_REQUESTS: "Manor.LOAD_SELL_REQUESTS",
    LOAD_SELL_REQUESTS2: "Manor.LOAD_SELL_REQUESTS2",
    BUY_AREA: "Manor.BUY_AREA",
    SELL_AREA: "Manor.SELL_AREA",
    SELL_AREA_CANCEL: "Manor.SELL_AREA_CANCEL",
    SELECT_LOCATION: "Manor.SELECT_LOCATION",
    BUY_CEMENT: "Manor.BUY_CEMENT",
    USE_PETS_DATA: "Manor.USE_PETS_DATA",
    USE_PETS_ACTION: "Manor.USE_PETS_ACTION",
    USE_EXP_DATA: "Manor.USE_EXP_DATA",
    USE_EXP_ACTION: "Manor.USE_EXP_ACTION",
    USE_EXP2_DATA: "Manor.USE_EXP2_DATA",
    USE_EXP2_ACTION: "Manor.USE_EXP2_ACTION",
    USE_VALOUR_DATA: "Manor.USE_VALOUR_DATA",
    USE_VALOUR_ACTION: "Manor.USE_VALOUR_ACTION",
    USE_HOSPITAL_DATA: "Manor.USE_HOSPITAL_DATA",
    USE_HOSPITAL_ACTION: "Manor.USE_HOSPITAL_ACTION",
    USE_STORAGE_DATA: "Manor.USE_STORAGE_DATA",
    USE_STORAGE_ACTION: "Manor.USE_STORAGE_ACTION",
    USE_PORTAL_DATA: "Manor.USE_PORTAL_DATA",
    USE_PORTAL_ACTION: "Manor.USE_PORTAL_ACTION",
    USE_HUNT_CAMP_DATA_SEARCH: "Manor.USE_HUNT_CAMP_DATA_SEARCH",
    USE_HUNT_CAMP_DATA_FARM: "Manor.USE_HUNT_CAMP_DATA_FARM",
    USE_HUNT_CAMP_DATA_FORGE: "Manor.USE_HUNT_CAMP_DATA_FORGE",
    USE_HUNT_CAMP_ACTION: "Manor.USE_HUNT_CAMP_ACTION",
    OPEN_HUNT_CAMP: "Manor.OPEN_HUNT_CAMP",
    OPEN_CHOOSE_PET: "Manor.OPEN_CHOOSE_PET",
    CLOSE_CHOOSE_PET: "Manor.CLOSE_CHOOSE_PET",
    OPEN_BANK: "Manor.OPEN_BANK",
    USE_BANK_DATA: "Manor.USE_BANK_DATA",
    USE_BANK_ACTION: "Manor.USE_BANK_ACTION",
    OPEN_COUNT: "Manor.OPEN_COUNT",
    USE_WORKSHOP_DATA: "Manor.USE_WORKSHOP_DATA",
    USE_WORKSHOP_ACTION: "Manor.USE_WORKSHOP_ACTION",
    USE_MINE_DATA: "Manor.USE_MINE_DATA",
    USE_MINE_ACTION: "Manor.USE_MINE_ACTION",
    LOAD_CONFIG: "Manor.LOAD_CONFIG",
    MOVE_AREA: "Manor.MOVE_AREA",
    DESTROY_BUILDING: "Manor.DESTROY_BUILDING",
    GET_AVAILABLE_BUILDINGS: "Manor.GET_AVAILABLE_BUILDINGS",
    BACK_TO_CHOOSE_BUILDING: "Manor.BACK_TO_CHOOSE_BUILDING",
    OPEN_THRONE_ROOM: "Manor.OPEN_THRONE_ROOM",
    USE_KENNEL_DATA: "Manor.USE_KENNEL_DATA",
    USE_KENNEL_ACTION: "Manor.USE_KENNEL_ACTION",
    PANELS_PATH: "Manor.PANELS_PATH",
    PANELS_CLICK: "Manor.PANELS_CLICK",
    EXIT: "Manor.EXIT",
    THRONE_ROOM_INSTALL: "Manor.THRONE_ROOM_INSTALL",
    THRONE_ROOM_REMOVE: "Manor.THRONE_ROOM_REMOVE",
    THRONE_ROOM_UPDATE: "Manor.THRONE_ROOM_UPDATE",
    THRONE_ROOM_BUY: "Manor.THRONE_ROOM_BUY",
    HIDE_BUILDING_LOADER: "Manor.HIDE_BUILDING_LOADER"
};
canvas.app.manor.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsContainer = new canvas.px.Container;
    this.view = this.addChild(new canvas.app.manor.View);
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.windowsManager = new canvas.utils.WindowsManager;
    this.controller = new canvas.app.manor.Controller(this);
    if (this.model.guestMode) {
        this.view.hideGuestControls();
        this.view.update();
        this.x -= 10;
        if (this.model.showThroneRoom)
            this.view.openGuestThroneRoom()
    } else {
        this.controller.loadConfig()
    }
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.openWinHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeWinHandler, this)
}
;
canvas.app.manor.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.manor.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.manor.Main.prototype.resize = function(t, e) {
    this.view.resize();
    this.windowsManager.init(this.windowsContainer, t, e, this.view.container);
    this.hintManager.init(this.hintContainer, t, e);
    this.view.position.set(Math.round((t - this.model.width) * .5), canvas.app.manor.Const.CURL_DY + Math.round((e - this.model.height) * .5))
}
;
canvas.app.manor.Main.prototype.openWinHandler = function(t) {
    this.hintManager.hide();
    this.model.paused = true;
    this.view.manor.deactivate()
}
;
canvas.app.manor.Main.prototype.closeWinHandler = function(t) {
    this.model.paused = this.windowsManager.haveActiveWindows;
    if (!this.windowsManager.haveActiveWindows)
        this.view.manor.activate()
}
;
canvas.app.manor.Model = function(t) {
    this.par = t;
    this.paused = false;
    this.showThroneRoom = t.show_throne_room == "1";
    this.requestCurPage = 0;
    this.mapMode = false;
    this.selectedBuilding = "";
    this.selectedRequest = 0;
    this.selectedRequestID = "";
    this.requestNumPages = 1;
    this.selectedPet = "";
    this.expUse = false;
    this.expCost = 0;
    this.exp2Use = false;
    this.exp2Cost = 0;
    this.valourCost = 0;
    this.storageArtToPut = "";
    this.storageArtToPutCount = 1;
    this.storageCellsCount = 0;
    this.bankCells = [];
    this.bankItems = [];
    this.needUpdate = false;
    this.selectedDich = 0;
    this.globalDrag = false;
    this.buildingPanelsStatus = {};
    this.kennelData = new canvas.data.manor.DKennel;
    this.campData = new canvas.data.manor.DCampData;
    this.throneRoomData = new canvas.data.manor.DThroneRoomData(t);
    this.requestToRemove = "";
    this.winScale = 1;
    this.user = new canvas.data.manor.DUser;
    this.backImage = t.BackImage != undefined ? canvas.Functions.extractSwfName(t.BackImage) : "manor_back_hum";
    this.cementImage = t.CementImage != undefined ? t.CementImage : "";
    this.favoriteImage = t.FavoriteImage != undefined ? t.FavoriteImage : "images/favorite.png";
    this.cementID = t.CementArtikulId != undefined ? t.CementArtikulId : "";
    this.dicURL = t.DicUrl != undefined ? t.DicUrl : "dic.xml";
    this.requestURL = t.RequestUrl != undefined ? t.RequestUrl : "manor_conf.xml";
    this.cementCost = t.CementCost != undefined ? parseInt(t.CementCost) : 1;
    this.user.race = t.Race != undefined ? parseInt(t.Race) : 1;
    this.guestMode = t.Guest != undefined ? t.Guest == "1" : false;
    this.guestBuildings = t.Buildings != undefined ? t.Buildings.toString() : "";
    this.winterMode = t.winterMode != undefined ? t.winterMode == "1" : false;
    this.user.labourMax = 100;
    this.labourRequests = new Array;
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MANOR);
    this.serverTime = new canvas.utils.ServerTime(parseInt(t.current_time),parseInt(t.time_zone));
    var e, a = canvas.app.manor.Const.TITLES.length + 1;
    for (e = a; e <= canvas.app.manor.Const.BUILDING_MAX_COUNT; e++) {
        canvas.app.manor.Const.TITLES.push("b" + e)
    }
    this.labourPrognosisData = new Object;
    if (t.WorkAvgTimes != undefined) {
        this.labourPrognosisData = JSON.parse(t.WorkAvgTimes)
    }
    var i = canvas.Functions.getSessTarget();
    if (i.manor) {
        canvas.Functions.deleteSessTarget()
    }
}
;
canvas.app.manor.Model.prototype.getSelectedBuildingBase = function() {
    if (this.selectedBuilding.substr(0, 4) == "mine")
        return "mine";
    if (this.selectedBuilding.substr(0, 4) == "make")
        return "make";
    return this.selectedBuilding
}
;
canvas.app.manor.Model.prototype.parseDic = function() {
    var t = canvas.ResourceLoader.get("dic").data;
    var e;
    var a;
    var i;
    var s;
    var n;
    var r = 0;
    var o;
    var l;
    var c, p, h;
    this.buildings = new Object;
    this.diches = new Array;
    this.multiBuildingTypes = new Array;
    l = t.getElementsByTagName("building");
    var p = l.length;
    for (c = 0; c < p; c++) {
        e = l[c];
        a = new canvas.data.manor.DBuilding;
        a.cost = parseInt(canvas.Functions.getChildValueByName(e, "cost")) || 0;
        a.desc = canvas.Functions.getChildValueByName(e, "description");
        if (this.user.race == 1) {
            o = this.winterMode ? canvas.Functions.getChildNodeByName(e, "building_swf3") : canvas.Functions.getChildNodeByName(e, "building_swf1")
        } else {
            o = this.winterMode ? canvas.Functions.getChildNodeByName(e, "building_swf4") : canvas.Functions.getChildNodeByName(e, "building_swf2")
        }
        a.image = o ? canvas.Functions.extractSwfName(o[0].innerHTML) : "";
        a.dx = o ? parseInt(canvas.Functions.getAttribute(o[0], "dx")) : 0;
        a.dy = o ? parseInt(canvas.Functions.getAttribute(o[0], "dy")) : 0;
        a.picture = this.user.race == 1 ? canvas.Functions.getChildValueByName(e, "building_picture3") : canvas.Functions.getChildValueByName(e, "building_picture4");
        if (a.picture.indexOf(".") < 0) {
            a.picture = ""
        } else {
            a.picture = a.picture.substr(0, a.picture.length - 4)
        }
        a.level = parseInt(canvas.Functions.getChildValueByName(e, "level"));
        a.type = parseInt(canvas.Functions.getChildValueByName(e, "type_id"));
        if (a.type > r)
            r = a.type;
        a.name = canvas.app.manor.Const.TITLES[a.type - 1];
        a.title = canvas.Functions.getChildValueByName(e, "title");
        n = canvas.Functions.getChildValueByName(e, "flags");
        if (n) {
            n = parseInt(n);
            a.enabled = !canvas.Functions.testFlag(n, 1);
            a.destroyEnabled = !canvas.Functions.testFlag(n, 4)
        }
        if (this.buildings[a.name] == undefined) {
            i = new Array;
            i[a.level] = a;
            this.buildings[a.name] = i
        } else {
            i = this.buildings[a.name];
            i[a.level] = a
        }
        if (a.level == 0) {
            h = parseInt(canvas.Functions.getChildValueByName(e, "index"));
            if (this.diches[h] != undefined)
                this.multiBuildingTypes.push(a.type);
            if (a.type == 0 || this.diches[h] == undefined) {
                this.diches[h] = a;
                a.ownDichIndex = h
            }
        }
    }
    canvas.app.manor.Const.BUILDING_COUNT = r;
    var c;
    var d;
    if (this.guestMode && this.guestBuildings != "") {
        e = JSON.parse(this.guestBuildings);
        this.user.buildings = new Object;
        this.user.buildingsByIndex = new Array;
        for (c = 1; c <= canvas.app.manor.Const.BUILDING_COUNT; c++) {
            d = new canvas.data.manor.DUserBuilding;
            d.level = e[c] == undefined ? 0 : parseInt(e[c].level);
            d.type = c;
            d.dichIndex = e[c] == undefined ? 0 : parseInt(e[c].map_index);
            d.name = canvas.app.manor.Const.TITLES[d.type - 1];
            this.user.buildings[d.name] = d;
            this.user.buildingsByIndex[d.dichIndex] = d
        }
    }
}
;
canvas.app.manor.Model.prototype.parseConf = function(t) {
    var e;
    var a;
    var i, s;
    var n;
    var r;
    this.user.buildings = new Object;
    this.user.buildingsById = new Object;
    this.user.buildingsByIndex = new Array;
    for (i = 0; i < canvas.app.manor.Const.BUILDING_COUNT; i++) {
        if (this.buildings[canvas.app.manor.Const.TITLES[i]] == undefined)
            continue;
        r = this.buildings[canvas.app.manor.Const.TITLES[i]][0];
        n = new canvas.data.manor.DUserBuilding;
        n.labour = 0;
        n.level = 0;
        n.type = i + 1;
        n.name = canvas.app.manor.Const.TITLES[i];
        n.dichIndex = r.ownDichIndex;
        switch (n.type) {
        case canvas.data.manor.DBuilding.TYPE_TREE:
            n.params = t.tree_url;
            break;
        case canvas.data.manor.DBuilding.TYPE_HALLOWEEN:
            n.params = t.halloween_url;
            break
        }
        this.user.buildings[n.name] = n
    }
    s = t.buildings.length;
    for (i = 0; i < s; i++) {
        e = t.buildings[i];
        n = new canvas.data.manor.DUserBuilding;
        n.labour = parseInt(e.work);
        n.level = parseInt(e.level);
        n.type = parseInt(e.type_id);
        n.id = parseInt(e.id);
        n.dichIndex = parseInt(e.index);
        n.name = canvas.app.manor.Const.TITLES[n.type - 1];
        switch (n.type) {
        case canvas.data.manor.DBuilding.TYPE_STORAGE:
            this.storageCellsCount = n.level;
            break;
        case canvas.data.manor.DBuilding.TYPE_TREE:
            n.params = t.tree_url;
            break;
        case canvas.data.manor.DBuilding.TYPE_HALLOWEEN:
            n.params = t.halloween_url;
            break
        }
        this.user.buildings[n.name] = n;
        this.user.buildingsById[n.id] = n;
        this.user.buildingsByIndex[n.dichIndex] = n;
        n.hirePrice = 10;
        this.buildingPanelsStatus["bs_" + n.name] = this.localStorage.get("bs_" + n.name)
    }
    var o;
    this.user.requests = new Array;
    s = t.work_requests.length;
    for (i = 0; i < s; i++) {
        e = t.work_requests[i];
        o = new canvas.data.manor.DWorkRequest;
        n = this.user.buildingsById[parseInt(e.building_id)];
        if (n == null)
            continue;
        o.building = n.name;
        o.id = e.id;
        o.labour = parseInt(e.amount);
        o.price = parseInt(e.price);
        this.user.requests.push(o)
    }
    this.user.labour = parseInt(t.current_work);
    this.user.cement = parseInt(t.current_cement);
    this.user.money = parseInt(t.money);
    this.user.labourMax = parseInt(t.work_max);
    this.user.ghost = t.ghost == "1";
    this.user.workRefreshTime = parseInt(t.work_refresh_time)
}
;
canvas.app.manor.Model.prototype.parseUserRequests = function(t) {
    this.requestNumPages = t.pages;
    this.labourRequests = new Array;
    var e;
    var a;
    var i = t.work_requests.length;
    for (var s = 0; s < i; s++) {
        a = t.work_requests[s];
        e = new canvas.data.manor.DLabourRequest;
        e.user = new canvas.data.manor.DUserGame;
        e.user.login = a.nick;
        e.user.level = a.level;
        e.labour = a.amount;
        e.price = a.price;
        e.id = a.id;
        this.labourRequests[this.requestCurPage * canvas.app.manor.Const.REQUESTS_ON_PAGE + s] = e
    }
}
;
canvas.app.manor.Model.prototype.parsePets = function(t) {
    this.pets = new Array;
    this.petTrainingTypes = new Array;
    var e;
    var a;
    var i;
    var s, n = t.pets.length;
    for (s = 0; s < n; s++) {
        i = t.pets[s];
        e = new canvas.data.manor.DPet;
        e.id = i.id.toString();
        e.title = i.title.toString();
        e.image = i.picture2.toString();
        e.level = parseInt(i.level.toString());
        e.swf = i.picture.toString();
        e.exp = parseInt(i.exp.toString());
        e.expUp = parseInt(i.exp_max.toString());
        e.time = parseInt(i.time_left.toString());
        e.timeFull = parseInt(i.time_total.toString());
        e.error = i.error.toString();
        e.color = parseInt(i.quality.toString());
        this.pets.push(e)
    }
    n = t.training_types.length;
    for (s = 0; s < n; s++) {
        i = t.training_types[s];
        a = new canvas.data.manor.DPetTrainingType;
        a.id = i.id.toString();
        a.duration = parseInt(i.duration.toString());
        a.exp = parseInt(i.exp.toString());
        a.feedCost = parseInt(i.feed_cost.toString());
        this.petTrainingTypes.push(a)
    }
}
;
canvas.app.manor.Model.prototype.parseExp = function(t) {
    this.expCount = parseInt(t.exp.toString());
    this.expDecrease = parseInt(t.exp_decr.toString()) == 1;
    this.expMax = parseInt(t.exp_limit.toString());
    this.expPercent = parseInt(t.exp_percent.toString());
    this.expUse = t.exp_use.toString() == "1";
    this.expCost = parseInt(t.cost.toString())
}
;
canvas.app.manor.Model.prototype.parseExp2 = function(t) {
    this.exp2Count = parseInt(t.exp.toString());
    this.exp2Decrease = parseInt(t.exp_decr.toString()) == 1;
    this.exp2Max = parseInt(t.exp_limit.toString());
    this.exp2Percent = parseInt(t.exp_percent.toString());
    this.exp2Use = t.exp_use.toString() == "1";
    this.exp2Cost = parseInt(t.cost.toString())
}
;
canvas.app.manor.Model.prototype.parseValour = function(t) {
    this.valourCount = parseInt(t.honor.toString());
    this.valourMax = parseInt(t.honor_limit.toString());
    this.valourPercent = parseInt(t.honor_percent.toString());
    this.valourUse = t.honor_use.toString() == "1";
    this.valourCost = parseInt(t.cost.toString())
}
;
canvas.app.manor.Model.prototype.parseHospital = function(t) {
    var e;
    var a;
    this.hospitalItems = new Array;
    var i, s = t.injuries.length;
    this.hospitalRegeneratePercent = t.reg_percent * .01;
    for (i = 0; i < s; i++) {
        e = t.injuries[i];
        a = new canvas.data.manor.DItem;
        a.id = e.id.toString();
        a.title = e.title.toString();
        a.image = e.picture.toString();
        a.time = Math.round(e.expires * (1 - this.hospitalRegeneratePercent)).toString();
        this.hospitalItems.push(a)
    }
    this.hospitalBuffItem = new canvas.data.manor.DItem;
    this.hospitalBuffItem.id = this.hospitalBuffItem.aid = t.buff_id.toString();
    this.hospitalBuffItem.image = t.buff_picture.toString();
    this.hospitalBuffItem.time = parseInt(t.buff_time.toString());
    this.hospitalBuffItem.timeFull = parseInt(t.buff_cooldown.toString())
}
;
canvas.app.manor.Model.prototype.parseKennel = function(t) {
    var e;
    var a;
    var i;
    this.kennelData.bots = new Array;
    var s, n = t.bot_list.length;
    for (i in t.bot_list) {
        e = t.bot_list[i];
        if (typeof e == "function")
            continue;
        if (!e)
            break;
        a = new canvas.data.manor.DKennelBot;
        a.id = e.id;
        a.nick = e.nick;
        a.picture = canvas.Config.dataPath + "bots/" + e.picture;
        a.moneyMin = parseInt(e.money_min);
        a.moneyMax = parseInt(e.money_max);
        a.price = parseInt(e.price);
        a.exp = parseInt(e.exp);
        this.kennelData.bots.push(a)
    }
    for (i in t.user_times) {
        e = t.user_times[i];
        switch (i) {
        case "KENNEL_TIME":
            this.kennelData.killTime = e;
            break;
        case "KENNEL_BIG_TIME":
            this.kennelData.killBigTime = e;
            break
        }
    }
    for (i in t.settings) {
        e = t.settings[i];
        switch (i) {
        case "KILL10_PRICE_EXT":
            this.kennelData.killPriceExt = e;
            break;
        case "KILL10_TIMER":
            this.kennelData.killBigCooldown = parseInt(e) + 1;
            break;
        case "KILL1_TIMER":
            this.kennelData.killColldown = parseInt(e) + 1;
            break
        }
    }
    this.kennelData.canKill = t.can_kill;
    this.kennelData.canKillTotal = t.kill_cnt
}
;
canvas.app.manor.Model.prototype.parseStorage = function(t) {
    var e;
    var a;
    this.storageItems = new Array;
    this.storageUserItems = new Array;
    var i, s = t.tmp_artifacts.length;
    for (i = 0; i < s; i++) {
        e = t.tmp_artifacts[i];
        a = new canvas.data.manor.DItem;
        a.id = e.id.toString();
        a.aid = e.aid.toString();
        a.title = e.title.toString();
        a.image = e.picture.toString();
        a.time = e.expires.toString();
        a.count = parseInt(e.cnt.toString());
        this.storageUserItems.push(a)
    }
    s = t.current_artifacts.length;
    for (i = 0; i < s; i++) {
        e = t.current_artifacts[i];
        a = new canvas.data.manor.DItem;
        a.id = e.id.toString();
        a.aid = e.aid.toString();
        a.title = e.title.toString();
        a.image = e.picture.toString();
        a.time = e.expires.toString();
        a.count = parseInt(e.cnt.toString());
        storageItems.push(a)
    }
    this.storageSlots = parseInt(t.fridge_cnt.toString());
    while (i < this.storageSlots) {
        a = new canvas.data.manor.DItem;
        this.storageItems.push(a);
        a.id = "empty";
        i++
    }
}
;
canvas.app.manor.Model.prototype.parseBank = function(t) {
    var e;
    var a;
    var i;
    var s;
    this.bankItems = new Array;
    var n, r, o = t.bag_artifacts.length, l;
    for (n = 0; n < o; n++) {
        e = t.bag_artifacts[n];
        i = new canvas.data.manor.DItem(e);
        i.area = "0";
        this.bankItems.push(i)
    }
    this.storageItems = new Array;
    o = t.cell_storage.length;
    for (n = 0; n < o; n++) {
        e = t.cell_storage[n];
        i = new canvas.data.manor.DItem(e);
        this.storageItems.push(i)
    }
    this.bankCells = new Array;
    o = t.cells.length;
    for (n = 0; n < o; n++) {
        e = t.cells[n];
        s = new canvas.data.manor.DItemCell;
        s.size = parseInt(e.cell_capacity.toString());
        s.area = e.cell_area_id.toString();
        s.title = e.cell_area_title.toString();
        s.items = new Array;
        l = e.cell_artifacts.length;
        for (r = 0; r < l; r++) {
            a = e.cell_artifacts[r];
            i = new canvas.data.manor.DItem(a);
            s.items.push(i);
            i.area = s.area
        }
        this.bankCells.push(s)
    }
    if (t.storage_fridge_cnt)
        this.storageCellsCount = parseInt(t.storage_fridge_cnt)
}
;
canvas.app.manor.Model.prototype.parseWorkshop = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    this.workShopTimeLeft = parseInt(t.duration_left.toString());
    this.workShopReduceKoef = parseFloat(t.reduce_duration.toString());
    if (!this.workShopReduceKoef)
        this.workShopReduceKoef = 1;
    this.workShopRecepts = new Object;
    this.workShopReceptsArray = new Array;
    var o, l = t.recipes.length;
    for (o = 0; o < l; o++) {
        e = t.recipes[o];
        i = new canvas.data.manor.DRecipe;
        i.id = e.recipe_id.toString();
        i.title = e.title.toString();
        i.duration = parseInt(e.duration.toString());
        i.image = e.picture.toString();
        i.resultCount = parseInt(e.cnt.toString());
        i.resultAid = e.artikul_id.toString();
        i.favorite = e.favorite == "1";
        i.items = new Array;
        var c, p = e.parts.length;
        for (c = 0; c < p; c++) {
            a = e.parts[c];
            n = new canvas.data.manor.DItem;
            n.id = n.aid = a.artikul_id.toString();
            n.title = a.title.toString();
            n.image = a.picture.toString();
            n.count = parseInt(a.cnt.toString());
            i.items.push(n)
        }
        this.workShopRecepts[i.id] = i;
        this.workShopReceptsArray.push(i)
    }
    this.workShopBugArtefacts = new Object;
    l = t.bag_artifacts.length;
    for (o = 0; o < l; o++) {
        e = t.bag_artifacts[o];
        n = new canvas.data.manor.DItem;
        n.id = n.aid = e.artikul_id.toString();
        n.image = e.picture.toString();
        n.title = e.title.toString();
        n.count = parseInt(e.cnt.toString());
        this.workShopBugArtefacts[n.id] = n
    }
    this.workShopRequests = new Array;
    this.workShopRequestsCompleted = new Array;
    l = t.craft_requests.length;
    for (o = 0; o < l; o++) {
        e = t.craft_requests[o];
        r = new canvas.data.manor.DCraftRequest;
        r.id = e.id.toString();
        r.recipe = e.recipe_id.toString();
        r.count = parseInt(e.amount.toString());
        r.durationMax = Math.round(parseInt(e.duration.toString()) * this.workShopReduceKoef);
        r.duration = parseInt(e.time.toString());
        if (r.duration >= r.durationMax) {
            this.workShopRequestsCompleted.push(r)
        } else {
            this.workShopRequests.push(r)
        }
    }
}
;
canvas.app.manor.Model.prototype.parseMine = function(t) {
    var e;
    var a;
    this.craftData = new canvas.data.manor.DCraftData;
    this.craftData.item = new canvas.data.manor.DItem;
    if (t.hasOwnProperty("artikul_id")) {
        this.craftData.item.count = parseInt(t.artikul_quantity);
        this.craftData.item.aid = this.craftData.item.id = t.artikul_id;
        this.craftData.item.image = t.picture;
        this.craftData.item.title = t.title
    } else {
        this.craftData.item.count = parseInt(t.material_artikul_quantity);
        this.craftData.item.aid = this.craftData.item.id = t.material_artikul_id;
        this.craftData.item.image = t.material_picture;
        this.craftData.item.title = t.material_title;
        this.craftData.item2 = new canvas.data.manor.DItem;
        this.craftData.item2.count = parseInt(t.result_artikul_quantity);
        this.craftData.item2.aid = this.craftData.item2.id = t.result_artikul_id;
        this.craftData.item2.image = t.result_picture;
        this.craftData.item2.title = t.result_title
    }
    this.craftData.price = parseInt(t.cost);
    this.craftData.queueSizeMax = parseInt(t.max_queue_length);
    this.craftData.requests = new Array;
    this.craftData.requestsCompleted = new Array;
    this.craftData.materialCount = parseInt(t.material_cnt);
    var i, s = t.craft_requests.length;
    for (i = 0; i < s; i++) {
        a = t.craft_requests[i];
        e = new canvas.data.manor.DCraftRequest;
        e.item = this.craftData.item2 == null ? this.craftData.item : this.craftData.item2;
        e.id = a.id.toString();
        e.durationMax = parseInt(t.max_time_to_produce);
        e.duration = parseInt(a.time.toString());
        if (e.duration >= e.durationMax) {
            this.craftData.requestsCompleted.push(e)
        } else {
            this.craftData.requests.push(e)
        }
    }
    this.craftData.requests.sort(function(t, e) {
        return parseInt(e.duration) - parseInt(t.duration)
    })
}
;
canvas.app.manor.Model.prototype.parsePortal = function(t) {
    var e;
    var a;
    this.portals = new Array;
    this.portalLocations = new Array;
    this.portalRebindTime = Math.round(Date.now() * .001) + t.rebind_left_time;
    this.portalRebindCooldown = t.rebind_cooldown;
    this.portalJumpCost = t.energy_per_jump;
    var i;
    var s, n = t.available_areas.length;
    for (s = 0; s < n; s++) {
        i = t.available_areas[s];
        a = new canvas.data.manor.DLocation;
        a.id = i.id;
        a.areaID = i.area_id;
        a.title = i.title;
        a.picture = i.picture;
        a.error = i.error;
        this.portalLocations[a.id] = a
    }
    var r = new Array;
    n = t.user_areas.length;
    for (s = 0; s < n; s++) {
        i = t.user_areas[s];
        r[i.num] = i.value
    }
    var o = this.user.buildings["portal"];
    for (s = 1; s <= 6; s++) {
        a = this.portalLocations[r[s]];
        e = new canvas.data.manor.DPortal;
        e.status = o.level < s ? 0 : a ? 1 : -1;
        e.level = s;
        e.locationID = a ? a.id : 0;
        this.portals.push(e)
    }
    this.portalResetItem = new canvas.data.manor.DItem;
    this.portalResetItem.id = t.artifact_reset_timer.id;
    this.portalResetItem.title = t.artifact_reset_timer.title;
    this.portalResetItem.image = t.artifact_reset_timer.picture;
    this.portalResetItem.count2 = parseInt(t.artifact_reset_timer.cnt)
}
;
canvas.app.manor.Model.prototype.parseHuntCamp = function(t) {
    this.campData.parse(t)
}
;
canvas.app.manor.Model.prototype.getLabourPrognosis = function(t, e) {
    var a = 1;
    var i = 1e3;
    var s;
    var n;
    var r;
    for (s in this.labourPrognosisData) {
        if (Math.abs(parseInt(s) - t) < i) {
            i = Math.abs(parseInt(s) - t);
            a = parseFloat(this.labourPrognosisData[s])
        }
    }
    if (i == 1e3 || t == 0 || e == 0)
        return canvas.Translator.getText(117) + ".";
    n = Math.round(e / a);
    if (n >= 86400) {
        return canvas.Translator.getText(118) + "."
    } else {
        if (n < 3600) {
            return Math.ceil(n / 60).toString() + " " + canvas.Translator.getText(2016) + "."
        } else {
            r = n % 3600;
            return Math.floor(n / 3600).toString() + " " + canvas.Translator.getText(2001) + ". " + Math.ceil(r / 60).toString() + " " + canvas.Translator.getText(2016) + "."
        }
    }
}
;
canvas.app.manor.Model.prototype.parseAvailableBuildings = function(t) {
    this.availableBuildings = new Array;
    if (t == "")
        return;
    var e = t.split(",");
    var a;
    var i;
    var s, n = e.length;
    for (s = 0; s < n; s++) {
        i = e[s];
        this.availableBuildings.push(this.buildings[canvas.app.manor.Const.TITLES[parseInt(i) - 1]][1])
    }
}
;
canvas.app.manor.Model.prototype.findFirstFreeArea = function(t) {
    var e, a = this.bankCells.length;
    if (a < 1)
        return "";
    var i;
    var s = "";
    var n;
    for (e = 0; e < a; e++) {
        i = this.bankCells[e];
        if (s == "" && i.items.length < i.size)
            s = i.area;
        if (t) {
            var r, o = i.items.length;
            for (r = 0; r < o; r++) {
                n = i.items[r];
                if (n.equals(t)) {
                    return i.area
                }
            }
        }
    }
    return s == "" ? this.bankCells[0].area : s
}
;
canvas.app.manor.Model.prototype.getFilteredItems = function(t, e) {
    var a = new Array;
    var i;
    var s, n = t.length;
    for (s = 0; s < n; s++) {
        i = t[s];
        if (i.flags[e])
            a.push(i)
    }
    return a
}
;
canvas.app.manor.Model.prototype.storageHaveFreeCells = function() {
    var t = this.user.buildings["storage"];
    return t.level > this.storageItems.length
}
;
canvas.app.manor.Model.prototype.getDragScale = function() {
    return 1 - this.winScale + 1
}
;
canvas.app.manor.View = function() {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container);
    this.manor = this.container.addChild(new canvas.app.manor.view.Map);
    this.manor.position.set(canvas.app.manor.Const.CURL_DX, canvas.app.manor.Const.CURL_DY);
    this.curls = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "contour"),49,49,49,49));
    this.header = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_header"),30,0,30,0));
    this.header.width = 150;
    this.header.y = -16;
    this.title = this.header.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD,16118721,150,20,"center"));
    this.title.text = canvas.Translator.getText(148);
    this.title.y = 9;
    this.labour = this.container.addChild(new canvas.app.manor.view.controls.elements.Labour(canvas.Translator.getText(149)));
    this.labour.setLabour(0, 100);
    this.windows = [];
    this.buildingWin = new canvas.app.manor.view.controls.BuildingWin;
    this.buildingWin.position.set(20, 0);
    this.windows.push(this.buildingWin);
    this.labourWin = new canvas.app.manor.view.controls.LabourWin;
    this.labourWin.position.set(475, 0);
    this.windows.push(this.labourWin);
    this.hireWin = new canvas.app.manor.view.controls.HireWin;
    this.hireWin.position.set(200, 100);
    this.windows.push(this.hireWin);
    this.portalResetWin = new canvas.app.manor.view.controls.PortalResetWin;
    this.portalResetWin.position.set(200, 100);
    this.windows.push(this.portalResetWin);
    this.workWin = new canvas.app.manor.view.controls.WorkWin;
    this.workWin.position.set(475, 0);
    this.windows.push(this.workWin);
    this.messageWin = new canvas.app.manor.view.controls.MessageWindow;
    this.windows.push(this.messageWin);
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow;
    this.windows.push(this.confirmWin);
    this.cementWin = new canvas.app.manor.view.controls.BuyCementWin;
    this.cementWin.position.set(200, 100);
    this.windows.push(this.cementWin);
    this.huntCampWin = new canvas.app.manor.view.controls.HuntCampWin;
    this.huntCampWin.position.set(20, 0);
    this.windows.push(this.huntCampWin);
    this.countWin = new canvas.app.manor.view.controls.CountWin;
    this.countWin.position.set(200, 100);
    this.windows.push(this.countWin);
    this.chooseBuildingWin = new canvas.app.manor.view.controls.ChooseBuildingWin;
    this.chooseBuildingWin.position.set(20, 0);
    this.windows.push(this.chooseBuildingWin);
    this.choosePetWin = new canvas.app.manor.view.controls.ChoosePetWin;
    this.choosePetWin.position.set(20, 0);
    this.windows.push(this.choosePetWin);
    this.bankWin = new canvas.app.manor.view.controls.BankWin;
    this.bankWin.position.set(20, 0);
    this.windows.push(this.bankWin);
    this.throneRoom = new canvas.app.manor.view.controls.ThroneRoom;
    this.throneRoom.position.set(20, 20);
    this.windows.push(this.throneRoom);
    this.menu = this.addChild(new canvas.app.manor.view.controls.Menu(parseInt(canvas.app.manor.model.localStorage.get("menuOpened"))));
    this.menu.y = 25;
    this.exitButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "exit_button_base"),canvas.ResourceLoader.getImage("ui", "exit_button_over"),canvas.ResourceLoader.getImage("ui", "exit_button_down")));
    this.exitButton.y = -2;
    this.exitButton.sprite.hitArea = new canvas.px.Circle(20,20,20);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.exitButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(150)))
    });
    this.workButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "work_button_base"),canvas.ResourceLoader.getImage("ui", "work_button_over"),canvas.ResourceLoader.getImage("ui", "work_button_down")));
    this.workButton.y = -2;
    this.workButton.sprite.hitArea = new canvas.px.Circle(22,22,22);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.workButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(151)))
    });
    this.techBtn = this.addChild(new canvas.app.location.view.popups.TechBtn(canvas.app.manor.model.par,canvas.app.manor.Event.ENTER_FRAME));
    this.infoBtn = this.addChild(new canvas.app.location.view.popups.InfoBtn(canvas.app.manor.model.par));
    this.infoBtn.y = 50
}
;
canvas.app.manor.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.View.prototype.hideGuestControls = function() {
    this.workButton.parent.removeChild(this.workButton);
    this.exitButton.parent.removeChild(this.exitButton);
    this.menu.parent.removeChild(this.menu);
    this.labour.parent.removeChild(this.labour);
    this.curls.parent.removeChild(this.curls);
    this.title.parent.removeChild(this.title)
}
;
canvas.app.manor.View.prototype.resize = function() {
    var t = canvas.app.manor.model;
    var e = t.width;
    var a = t.height;
    this.curls.width = e;
    this.curls.height = a - 12;
    this.manor.setSize(e - canvas.app.manor.Const.CURL_DX * 2, a - canvas.app.manor.Const.CURL_DY * 3);
    this.header.x = Math.round((e - this.header.width) * .5);
    this.labour.position.set(e - this.labour.width - 13, a - 50);
    this.exitButton.x = e - 41;
    if (this.techBtn && this.techBtn.parent)
        this.techBtn.position.set(e - 45, a - 40);
    if (this.infoBtn && this.infoBtn.parent)
        this.infoBtn.x = e - 25;
    this.resizeMenu();
    canvas.utils.WindowsManager.instance.resizeWindows();
    var i, s = this.windows.length, n;
    if (a) {
        for (i = 0; i < s; i++) {
            n = this.windows[i];
            if (!n.back.height)
                continue;
            if (n.back.height < a + 20) {
                t.winScale = 1
            } else {
                t.winScale = a / n.back.height
            }
            n.scale.set(t.winScale, t.winScale)
        }
    }
}
;
canvas.app.manor.View.prototype.resizeMenu = function() {
    this.menu.x = canvas.app.manor.model.width - this.menu._width + 3;
    this.menu.resize()
}
;
canvas.app.manor.View.prototype.update = function(t) {
    if (t == undefined)
        t = 0;
    this.updateMenu();
    this.manor.updateMap();
    var e, a = this.windows.length, i;
    for (e = 0; e < a; e++) {
        i = this.windows[e];
        if (i.parent)
            i.update(t)
    }
    this.resize();
    this.filters = canvas.app.manor.model.user.ghost ? [canvas.Functions.getGreyScale()] : null
}
;
canvas.app.manor.View.prototype.updateMenu = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s;
    var n;
    var r = new Array;
    var o = new Array;
    var l, c = canvas.app.manor.Const.TITLES.length;
    var p;
    for (l = 0; l < c; l++) {
        p = canvas.app.manor.Const.TITLES[l];
        e = t.user.buildings[p];
        if (e == null || e.level == 0)
            continue;
        if (!t.buildings[e.name])
            continue;
        a = t.buildings[e.name][e.level];
        if (a == null || !a.enabled)
            continue;
        r.push(a.title + " [" + e.level.toString() + "]");
        o.push(e.dichIndex)
    }
    r.push("");
    o.push("");
    for (l = 0; l < c; l++) {
        p = canvas.app.manor.Const.TITLES[l];
        e = t.user.buildings[p];
        if (e == null || e.level > 0 || e.isUnknownDich())
            continue;
        if (!t.buildings[e.name])
            continue;
        a = t.buildings[e.name][e.level];
        i = t.buildings[e.name][e.level + 1];
        if (a == null || !a.enabled || i == null || i.cost < 1)
            continue;
        r.push(a.title);
        o.push(e.dichIndex)
    }
    r.push("");
    o.push("");
    r.push(canvas.Translator.getText(152));
    o.push("exit");
    if (t.portals) {
        c = t.portals.length;
        for (l = 0; l < c; l++) {
            s = t.portals[l];
            if (s.status == 1) {
                n = t.portalLocations[s.locationID];
                if (n) {
                    r.push(n.title);
                    o.push("prt" + s.level)
                }
            }
        }
    }
    this.menu.update(r, o);
    this.resizeMenu()
}
;
canvas.app.manor.View.prototype.openConfirm = function(t, e) {
    this.confirmWin.init(t, e);
    this.confirmWin.open(false, false, true)
}
;
canvas.app.manor.View.prototype.showError = function(t) {
    this.messageWin.init(t);
    this.messageWin.open(false, false, true)
}
;
canvas.app.manor.View.prototype.openGuestThroneRoom = function() {
    var t = canvas.app.manor.model.user.buildings["main"];
    if (t && t.level > 0) {
        this.throneRoom.open()
    }
}
;
canvas.app.manor.view.Back = function() {
    canvas.px.Container.call(this);
    this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + canvas.app.manor.model.backImage));
    this.mc.frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM;
    for (var t in this.mc.mcChildsCache) {
        this.mc.mcChildsCache[t].loop = true;
        this.mc.mcChildsCache[t].frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM;
        this.mc.mcChildsCache[t].play()
    }
}
;
canvas.app.manor.view.Back.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.BuildingRenderer = function(t) {
    canvas.ui.ListRenderer.call(this);
    this.type = t;
    this.hint = new canvas.app.view.MappingHint;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this)
}
;
canvas.app.manor.view.BuildingRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.BuildingRenderer.prototype.update = function() {
    if (this.data != this.oldData) {
        this.clear();
        if (this.data) {
            var t = canvas.Functions.extractSwfName(this.data.image);
            var e = canvas.ResourceLoader.get(canvas.Config.manorBuildingsPath + t + "/" + t + ".mci");
            if (e) {
                this.readyHandler()
            } else {
                canvas.ResourceLoader.add([canvas.Config.manorBuildingsPath + t + "/" + t + ".mci", canvas.Config.manorBuildingsPath + t + "/" + t + ".json", canvas.Config.manorBuildingsPath + t + "/" + t + ".png"]);
                canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this)
            }
        }
    }
}
;
canvas.app.manor.view.BuildingRenderer.prototype.readyHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this);
    var t = canvas.Functions.extractSwfName(this.data.image);
    var e = canvas.ResourceLoader.get(canvas.Config.manorBuildingsPath + t + "/" + t + ".mci");
    if (e) {
        var a = canvas.Config.manorBuildingsPath + t + "/" + t + ".json";
        var i = e.data;
        var s = i[canvas.px.MovieClipProps.children];
        var n, r, o, l = s.length;
        var c = -Math.round(parseInt(i.w) * .5) + parseInt(this.data.dx);
        var p = -Math.round(parseInt(i.h) * .5) + parseInt(this.data.dy);
        for (o = 0; o < l; o++) {
            r = s[o];
            if (r.polygon) {
                n = this.polygon = this.addChild(new canvas.px.Polygon(r.polygon));
                this.addPolygon(n);
                n.position.set(r.x + c, r.y + p)
            } else if (r.isImage) {
                n = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage(a, r.name)));
                n.position.set(r.x + c, r.y + p)
            } else {
                n = this.addChild(new canvas.px.MovieClipChild(r.mc,canvas.ResourceLoader.get(a).textures,null,null,false));
                if (r.x2) {
                    n.scale.set(2, 2)
                }
                n.frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM;
                n.loop = true;
                n.play();
                if (n.mcChildsCache) {
                    for (e in n.mcChildsCache) {
                        n.mcChildsCache[e].frameEvent = n.frameEvent;
                        n.mcChildsCache[e].play()
                    }
                }
                n.position.set(c, p)
            }
        }
        if (!this.polygon) {
            this.addPolygon(this)
        }
    }
}
;
canvas.app.manor.view.BuildingRenderer.prototype.addPolygon = function(t) {
    t.interactive = true;
    t.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: t,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.hint.update(this.data.title + (this.data.level > 0 ? " [" + this.data.level + "]" : ""))
}
;
canvas.app.manor.view.BuildingRenderer.prototype.removePolygon = function(t) {
    t.interactive = false;
    t.buttonMode = false;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: t
    })
}
;
canvas.app.manor.view.BuildingRenderer.prototype.clear = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this);
    if (this.polygon) {
        this.removePolygon(this.polygon);
        this.removeIfExist(this.polygon);
        this.polygon.destroy();
        this.polygon = null
    } else {
        this.removePolygon(this)
    }
    canvas.Functions.destroyChildren(this)
}
;
canvas.app.manor.view.BuildingRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness()]
}
;
canvas.app.manor.view.BuildingRenderer.prototype.outHandler = function() {
    this.filters = null
}
;
canvas.app.manor.view.Map = function() {
    canvas.px.Container.call(this);
    this._width = 0;
    this._height = 0;
    this.container = this.addChild(new canvas.px.Container);
    this.msk = this.addChild(new canvas.px.Mask(100,100));
    this.container.mask = this.msk;
    this.back = this.container.addChild(new canvas.app.manor.view.Back);
    this.buildingsContainer = this.container.addChild(new canvas.px.Container);
    var t = canvas.app.manor.Const.MAP_POINTS[canvas.app.manor.model.user.race];
    var e, a, i = t.length;
    for (e = 0; e < i; e++) {
        a = this.buildingsContainer.addChild(new canvas.app.manor.view.BuildingRenderer(t[e][0]));
        a.position.set(t[e][1], t[e][2])
    }
    this.scrollV = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this.container,true));
    this.scrollV.step = 40;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollHandler, this);
    this.scrollH = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this,true,false));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollH, this.scrollHandler, this);
    this.firstResize = true;
    this.interactive = true;
    this.dragIndex = 0;
    this.click = this.clickHandler.bind(this);
    if (canvas.app.manor.model.winterMode) {
        this.snow = this.container.addChild(new canvas.app.location.view.elements.Snow(null,canvas.app.manor.Event.ENTER_FRAME_ANIM));
        this.snow.init(canvas.app.manor.Const.MAP_ORIGINAL_WIDTH, canvas.app.manor.Const.MAP_ORIGINAL_HEIGHT)
    }
}
;
canvas.app.manor.view.Map.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.Map.prototype.setSize = function(t, e) {
    this._width = t;
    this._height = e;
    this.msk.setSize(this._width, this._height);
    this.scrollV.max = canvas.app.manor.Const.MAP_ORIGINAL_HEIGHT - this._height;
    this.scrollH.max = canvas.app.manor.Const.MAP_ORIGINAL_WIDTH - this._width;
    if (this.firstResize && this.scrollH.max > 0) {
        this.firstResize = false;
        this.scrollH.current = Math.round(this.scrollH.max * (parseInt(canvas.app.manor.model.user.race) == 1 ? .9 : .2));
        this.scrollV.current = Math.round(this.scrollV.max * .5)
    }
    this.updateScrollPos();
    this.scrollHandler()
}
;
canvas.app.manor.view.Map.prototype.updateMap = function() {
    var t = canvas.app.manor.model;
    var e = canvas.app.manor.Const.MAP_POINTS[t.user.race];
    var a, i, s;
    var n, r, o, l, c = e.length;
    for (r = 0; r < c; r++) {
        s = e[r][0];
        l = this.buildingsContainer.getChildAt(r);
        a = t.user.buildingsByIndex[s];
        if (!a) {
            i = t.diches[s]
        } else {
            n = t.buildings[a.name];
            if (!n)
                continue;
            i = n[a.level]
        }
        if (i && i.enabled) {
            l.data = i
        } else {
            l.data = null
        }
    }
}
;
canvas.app.manor.view.Map.prototype.scrollHandler = function() {
    if (this.dragIndex++ > 2) {
        this.wasDragged = true
    }
    this.updateScrollPos();
    if (canvas.app.manor.model.guestMode) {
        if (this.scrollH.isDisabled()) {
            hideArrow("left");
            hideArrow("right");
            this.scrollStop()
        } else if (this.scrollH.current == 0) {
            hideArrow("left");
            showArrow("right");
            if (!this.direction)
                this.scrollStop()
        } else if (this.scrollH.current == this.scrollH.max) {
            showArrow("left");
            hideArrow("right");
            if (this.direction)
                this.scrollStop()
        } else {
            showArrow("right");
            showArrow("left")
        }
    }
}
;
canvas.app.manor.view.Map.prototype.activate = function() {
    this.scrollV.handlerWheelTargetOver()
}
;
canvas.app.manor.view.Map.prototype.deactivate = function() {
    this.scrollV.handlerWheelTargetOut()
}
;
canvas.app.manor.view.Map.prototype.updateScrollPos = function() {
    this.container.position.set(-this.scrollH.current, -this.scrollV.current)
}
;
canvas.app.manor.view.Map.prototype.clickHandler = function(t) {
    if (this.wasDragged) {
        this.wasDragged = false;
        this.dragIndex = 0;
        return
    }
    if (t.target.parent && t.target.parent.hasOwnProperty("type")) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, {
            params: t.target.parent.type
        })
    }
}
;
canvas.app.manor.view.Map.prototype.scrollMove = function(t, e) {
    this.direction = t;
    if (e) {
        this.scrollStart()
    } else {
        this.scrollStop()
    }
}
;
canvas.app.manor.view.Map.prototype.scrollStart = function() {
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.manor.view.Map.prototype.scrollStop = function() {
    canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.manor.view.Map.prototype.frameHandler = function() {
    if (this.direction) {
        this.scrollH.current += 10
    } else {
        this.scrollH.current -= 10
    }
    this.scrollHandler()
}
;
canvas.app.manor.view.UseBuilding = function() {
    canvas.px.Container.call(this);
    this.alpha = 0
}
;
canvas.app.manor.view.UseBuilding.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.UseBuilding.prototype.update = function() {
    if (!this.alpha) {
        this.alpha = 1;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HIDE_BUILDING_LOADER)
    }
}
;
canvas.app.manor.view.WindowManorBase = function(t, e, a) {
    canvas.px.Window.call(this);
    this._baseHeight = 520;
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "main_window"),19,42,39,23));
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_S_15_BOLD,16118721,t - 40,20,"center","top",0);
    this.header.position.set(20, 4);
    this.header.text = a == undefined ? "" : a;
    this.header.interactive = true;
    this.sliceLeft = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_left"),18,20);
    this.sliceRight = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_right"),39,20);
    this.sliceTop = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_top"),20,41);
    this.sliceBot = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_bot"),20,24);
    this.addChild(this.sliceLeft);
    this.addChild(this.sliceRight);
    this.addChild(this.sliceTop);
    this.addChild(this.sliceBot);
    this.addChild(this.header);
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "main_window_close_base"),canvas.ResourceLoader.getImage("ui", "main_window_close_over"),canvas.ResourceLoader.getImage("ui", "main_window_close_down"),null));
    this.setSize(t, e);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this._show, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this._hide, this)
}
;
canvas.app.manor.view.WindowManorBase.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.manor.view.WindowManorBase.prototype.setSize = function(t, e) {
    this.header.setSize(t - 40);
    this.closeButton.position.set(t - 32, 0);
    this.back.width = t;
    this.back.height = e;
    this.sliceLeft.position.set(0, 41);
    this.sliceLeft.height = e - 63;
    this.sliceRight.position.set(t - 38, 41);
    this.sliceRight.height = e - 63;
    this.sliceTop.position.set(18, 0);
    this.sliceTop.width = t - 56;
    this.sliceBot.position.set(18, e - 22);
    this.sliceBot.width = t - 56
}
;
canvas.app.manor.view.WindowManorBase.prototype._show = function(t) {
    if (t != undefined && t.params == this) {
        this.show()
    }
}
;
canvas.app.manor.view.WindowManorBase.prototype._hide = function(t) {
    if (t != undefined && t.params == this) {
        this.hide()
    }
}
;
canvas.app.manor.view.WindowManorBase.prototype.show = function(t) {
    this._onTop();
    this.update();
    if (canvas.utils.HintManager.instance)
        canvas.utils.HintManager.instance.hide()
}
;
canvas.app.manor.view.WindowManorBase.prototype.open = function(t, e, a, i) {
    if (t == undefined)
        t = false;
    if (e == undefined)
        e = false;
    if (a == undefined)
        a = false;
    if (i == undefined)
        i = false;
    canvas.utils.WindowsManager.instance.openWindow(this, t, e, a, i)
}
;
canvas.app.manor.view.WindowManorBase.prototype.close = function() {
    canvas.utils.WindowsManager.instance.closeWindow(this);
    this.hide()
}
;
canvas.app.manor.view.WindowManorBase.prototype.hide = function(t) {
    this.deactivate()
}
;
canvas.app.manor.view.WindowManorBase.prototype._onTop = function() {
    if (this.parent)
        this.parent.setChildIndex(this, this.parent.numChildren - 1);
    var t = canvas.utils.WindowsManager.instance.activeWindows.length;
    var e;
    for (var a = 0; a < t; a++) {
        e = canvas.utils.WindowsManager.instance.activeWindows[a];
        if (e != this) {
            e.deactivate()
        }
    }
    this.activate()
}
;
canvas.app.manor.view.WindowManorBase.prototype.update = function() {}
;
canvas.app.manor.view.WindowManorBase.prototype.downHandler = function(t) {
    this._onTop();
    canvas.px.Window.prototype.downHandler.call(this, t)
}
;
canvas.app.manor.view.WindowManorBase.prototype.activate = function() {}
;
canvas.app.manor.view.WindowManorBase.prototype.deactivate = function() {}
;
canvas.app.manor.view.WindowManorBase.prototype.destroy = function() {
    canvas.px.Window.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.AllRequests = function() {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.listContainer = new canvas.px.Container;
    this.addChild(this.container);
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(20, 64);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,400,18,"center");
    this.fieldTitle.position.set(6, 17);
    this.container.addChild(this.fieldTitle);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,73,18,"center");
    t.position.set(2, 39);
    t.text = canvas.Translator.getText(153);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left");
    t.position.set(80, 39);
    t.text = canvas.Translator.getText(154);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,94,18,"center");
    t.position.set(243, 39);
    t.text = canvas.Translator.getText(107);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center");
    t.position.set(330, 39);
    t.text = canvas.Translator.getText(155);
    this.container.addChild(t);
    this.pager = new canvas.app.manor.view.controls.elements.Pager;
    this.container.addChild(this.pager);
    this.pager.position.set(207, 360);
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    var e;
    var a = 0;
    var i;
    var s = [];
    for (e = 0; e < canvas.app.manor.Const.REQUESTS_ON_PAGE; e++) {
        i = new canvas.app.manor.view.controls.elements.WorkRequestLine(e,s);
        s.push(i.check);
        this.listContainer.addChild(i);
        i.y = a;
        a += 29;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, i.check, this._itemClickHandler, this)
    }
    this.workButton = new canvas.app.view.MainButton;
    this.workButton.setTitle(canvas.Translator.getText(151));
    this.workButton.setSize(180);
    this.container.addChild(this.workButton);
    this.workButton.position.set(18, 390);
    this.cancelButton = new canvas.app.view.MainButton;
    this.cancelButton.setTitle(canvas.Translator.getText(156));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 390);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this._workClickHandler, this)
}
;
canvas.app.manor.view.controls.AllRequests.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.AllRequests.prototype._pagerHandler = function(t) {
    var e = canvas.app.manor.model;
    e.requestCurPage = this.pager.currentPage;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_WORK_REQUESTS)
}
;
canvas.app.manor.view.controls.AllRequests.prototype._itemClickHandler = function(t) {
    var e = canvas.app.manor.model;
    e.selectedRequest = this.pager.currentPage * canvas.app.manor.Const.REQUESTS_ON_PAGE + t.target.parent.index
}
;
canvas.app.manor.view.controls.AllRequests.prototype._cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_WORK_REQUESTS)
}
;
canvas.app.manor.view.controls.AllRequests.prototype._workClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_WORK)
}
;
canvas.app.manor.view.controls.AllRequests.prototype._updateList = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s = 0;
    var n = false;
    for (e = this.pager.startIndex; e < this.pager.endIndex; e++) {
        a = t.labourRequests[e];
        i = this.listContainer.getChildAt(s);
        i.check.checked = s == 0;
        i.data = a;
        if (a != null) {
            n = true;
            i.visible = true
        } else {
            i.visible = false
        }
        s++
    }
    if (t.user.labour == 0)
        n = false;
    this.workButton.enabled = n
}
;
canvas.app.manor.view.controls.AllRequests.prototype.update = function() {
    var t = canvas.app.manor.model;
    if (t.requestNumPages > 1) {
        this.pager.init(t.requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE, canvas.app.manor.Const.REQUESTS_ON_PAGE);
        this.pager.currentPage = t.requestCurPage;
        this.pager.visible = true
    } else {
        this.pager.init(t.labourRequests.length, canvas.app.manor.Const.REQUESTS_ON_PAGE);
        this.pager.visible = false
    }
    this._updateList();
    t.selectedRequest = this.pager.currentPage * canvas.app.manor.Const.REQUESTS_ON_PAGE;
    if (canvas.app.manor.Const.REQUESTS_ON_PAGE > 0)
        this.listContainer.getChildAt(0).check.checked = true
}
;
canvas.app.manor.view.controls.BankWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 900, 496, "");
    this.leftPagerMemory = {};
    this.container = this.addChild(new canvas.px.Container);
    var t = 25;
    var e = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"),20,20,20,20));
    e.width = 415;
    e.height = 400;
    e.position.set(30, 40 + t);
    e = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"),37,0,37,0));
    e.width = 180;
    e.position.set(140, 14 + t);
    this.bagTitle = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,150,20,"center"));
    this.bagTitle.position.set(155, 46);
    this.leftTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD,7092753,300,20,"left"));
    this.leftTitle.position.set(46, 50 + t);
    this.bankItems = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,5));
    this.bankItems.setSize(400, 360);
    this.bankItems.position.set(45, 100);
    this.bankItems._paddingH = this.bankItems._paddingV = 0;
    var a, i;
    for (a = 0; a < 25; a++) {
        i = new canvas.app.manor.view.controls.elements.Item(true,true,canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT);
        this.bankItems.add(i, false);
        i.name = "bank"
    }
    this.bankItems.update();
    this.leftScroll = this.container.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,true,true,this.bankItems.container,2));
    this.leftScroll.position.set(407, 100);
    this.leftScroll.setSize(20, 350);
    this.storageContent = new canvas.px.Container;
    this.storageContent.position.set(0, 14);
    this.storageItems = this.storageContent.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,5));
    this.storageItems.setSize(400, 360);
    this.storageItems._paddingH = this.storageItems._paddingV = 0;
    for (a = 0; a < canvas.app.manor.Const.STORAGE_MAX_CELLS; a++) {
        i = new canvas.app.manor.view.controls.elements.Item(true,true,canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET,canvas.Translator.getText(248) + " " + (a + 1).toString() + " " + canvas.Translator.getText(249));
        this.storageItems.add(i, false);
        i.name = "storage"
    }
    this.storageItems.update();
    this.cellsContent = new canvas.px.Container;
    this.tree = this.cellsContent.addChild(new canvas.app.manor.view.controls.elements.Tree);
    this.tree.setSize(330, 365);
    this.tree._scrollPadding = 40;
    this.panels = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.cellsContent, this.storageContent],["cells", "storage"],["", ""],1));
    this.panels.position.set(455, 14 + t);
    this.panels.setSize(420, 400);
    this.panels.contentContainer.x += 20;
    this.panels.contentContainer.y += 20;
    this.rightScroll = this.cellsContent.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,true,true,this.cellsContent,2));
    this.rightScroll.position.set(362, 20);
    this.rightScroll.setSize(20, 365);
    this.rightScroll.dragView.setSize = function() {}
    ;
    this.rightScroll._step = 50;
    this.tree.scroll = this.rightScroll;
    this.filterSortControl = new canvas.app.manor.view.controls.elements.FilterSortControl([new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_DEFAULT,canvas.Translator.getText(280)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TITLE,canvas.Translator.getText(272)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_COLOR,canvas.Translator.getText(273)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TYPE,canvas.Translator.getText(274)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TIME,canvas.Translator.getText(275))],"",canvas.app.manor.model.localStorage.get("sortType"),canvas.app.manor.model.localStorage.get("sortDirection") == "1",canvas.Translator.getText(276));
    this.filterSortControl.name = "filter";
    this.addChild(this.filterSortControl);
    this.filterSortControl.position.set(430, 70);
    this.updateFilterAndSort();
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.leftScroll, this.leftScrollHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panels, this.panelsHandler, this);
    this.panelsHandler()
}
;
canvas.app.manor.view.controls.BankWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.BankWin.CONTENT_HEIGHT = 342;
canvas.app.manor.view.controls.BankWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    var e = new Array;
    var a = new Array;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    var h = 0;
    var d;
    var v = t.bankCells.length;
    var u;
    var m;
    for (m in this.lists)
        this.lists[m].destroy();
    this.lists = new Object;
    this.updateLeft();
    for (r = 0; r < v; r++) {
        s = t.bankCells[r];
        e.push(s.title);
        u = new canvas.ui.List(canvas.ui.ListType.VERTICAL,4);
        u._paddingH = u._paddingV = 0;
        u.setSize(300, Math.ceil(s.size / 4) * 70);
        this.lists[s.area] = u;
        for (o = 0; o < s.size; o++) {
            p = new canvas.app.manor.view.controls.elements.Item(true,true,canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET);
            u.add(p, false);
            p.name = "cell" + s.area;
            p.data = s.items[o]
        }
        a.push(u);
        u.update()
    }
    this.tree.init(e, a);
    if (!this.inited && e.length > 0) {
        this.inited = true;
        this.tree.openAll()
    }
    this.tree.update();
    for (r = 0; r < canvas.app.manor.Const.STORAGE_MAX_CELLS; r++) {
        p = this.storageItems.items[r];
        d = t.storageItems == null ? null : t.storageItems[r];
        if (d == null && r < t.storageCellsCount) {
            d = new canvas.data.manor.DItem;
            d.title = "";
            d.id = "empty"
        }
        p.data = d
    }
    e = [this.cellsContent, this.storageContent];
    a = ["<b>" + canvas.Translator.getText(101) + " (" + t.bankCells.length + ")</b>", "<b>" + canvas.Translator.getText(103) + "</b>"];
    this.panels.init(e, ["cells", "storage"], a);
    this.panelsHandler()
}
;
canvas.app.manor.view.controls.BankWin.prototype.updateLeft = function() {
    var t = canvas.app.manor.model;
    var e;
    switch (this.panels.path) {
    case "storage":
        e = t.getFilteredItems(t.bankItems, "storage");
        break;
    default:
        e = t.getFilteredItems(t.bankItems, "cell")
    }
    var a, i, s;
    if (this.filterSortControl.filterText.length > 2) {
        this.leftItems = new Array;
        s = e.length;
        for (i = 0; i < s; i++) {
            a = e[i];
            if (a.title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) >= 0)
                this.leftItems.push(a)
        }
    } else {
        this.leftItems = e
    }
    switch (this.filterSortControl.sortType) {
    case canvas.data.manor.DSortData.TYPE_TITLE:
        this.leftItems.sort(this.sortOnTitle.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_TIME:
        this.leftItems.sort(this.sortOnTime.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_TYPE:
        this.leftItems.sort(this.sortOnType.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_COLOR:
        this.leftItems.sort(this.sortOnColor.bind(this));
        break;
    default:
        if (this.filterSortControl.sortDirection)
            this.leftItems.reverse()
    }
    this.leftScroll.max = Math.ceil(this.leftItems.length / 5) - 5;
    this.leftScroll.current = this.leftPagerMemory[this.panels.path] ? this.leftPagerMemory[this.panels.path] : this.leftScroll.current;
    this.leftScrollHandler();
    this.bagTitle.text = "<b>" + canvas.Translator.getText(102) + " (" + this.leftItems.length + ")</b>"
}
;
canvas.app.manor.view.controls.BankWin.prototype.sortOnType = function(t, e) {
    if (t.type > e.type) {
        return this.filterSortControl.sortDirection ? -1 : 1
    } else if (t.type < e.type) {
        return this.filterSortControl.sortDirection ? 1 : -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.BankWin.prototype.sortOnTime = function(t, e) {
    if (t.time > e.time) {
        return this.filterSortControl.sortDirection ? -1 : 1
    } else if (t.time < e.time) {
        return this.filterSortControl.sortDirection ? 1 : -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.BankWin.prototype.sortOnTitle = function(t, e) {
    if (t.title.toLowerCase() > e.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? -1 : 1
    } else if (t.title.toLowerCase() < e.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? 1 : -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.BankWin.prototype.sortOnColor = function(t, e) {
    if (t.color > e.color) {
        return this.filterSortControl.sortDirection ? -1 : 1
    } else if (t.color < e.color) {
        return this.filterSortControl.sortDirection ? 1 : -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.BankWin.prototype.updateFilterAndSort = function() {
    this.updateLeft()
}
;
canvas.app.manor.view.controls.BankWin.prototype.filterChangeHandler = function() {
    canvas.app.manor.model.localStorage.set("sortType", this.filterSortControl.sortType);
    canvas.app.manor.model.localStorage.set("sortDirection", this.filterSortControl.sortDirection ? "1" : "0");
    this.updateFilterAndSort()
}
;
canvas.app.manor.view.controls.BankWin.prototype.leftScrollHandler = function() {
    var t = this.leftScroll.current * 5;
    var e;
    this.leftPagerMemory[this.panels.path] = this.leftScroll.current;
    var a, i = this.bankItems.items.length;
    for (a = 0; a < i; a++) {
        e = this.bankItems.items[a];
        e.data = this.leftItems[t++]
    }
}
;
canvas.app.manor.view.controls.BankWin.prototype.downHandler = function(t) {
    canvas.app.manor.view.WindowManorBase.prototype.downHandler.call(this, t);
    if (!canvas.Functions.findParentByName("filter", t.target))
        this.filterSortControl.mode = "";
    var e = canvas.Functions.findParentByName("bank", t.target) || canvas.Functions.findParentByName("storage", t.target) || canvas.Functions.findParentByName("cell", t.target);
    if (e != null && e.data != null && e.data.id != "empty") {
        this.dragItem(e)
    }
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this)
}
;
canvas.app.manor.view.controls.BankWin.prototype.dragItem = function(t) {
    var e = canvas.app.manor.model;
    var a;
    var i;
    var s = null;
    if (this.currentDragItem) {
        this.currentDragItem.filters = [];
        this.currentDragItem.stopDrag();
        this.removeChild(this.currentDragItem);
        this.currentDragItem = null;
        s = canvas.app.manor.view.controls.elements.Item.overedItem;
        e.globalDrag = false
    }
    if (t != null) {
        this.currentDragItem = t.clone();
        this.currentDragItem.interactive = this.currentDragItem.interactiveChildren = false;
        this.currentDragItem.removeHints();
        this.addChild(this.currentDragItem);
        this.currentDragItem.startDrag(new canvas.px.Point(35 * e.winScale,35 * e.winScale), new canvas.px.Rectangle(0,0,800,400), canvas.app.CanvasManor.App.renderer.plugins.interaction.mouse.global, e.getDragScale());
        var n = this.toLocal(new canvas.px.Point(0,0), t);
        this.currentDragItem.position.set(n.x, n.y);
        e.globalDrag = true
    }
    return s
}
;
canvas.app.manor.view.controls.BankWin.prototype.upHandler = function(t) {
    var e;
    var a;
    var i = null;
    if (this.currentDragItem) {
        e = this.currentDragItem;
        this.dragItem();
        a = canvas.app.manor.view.controls.elements.Item.overedItem;
        if (a != null && !a.lockedImage.visible && a.name != e.name) {
            switch (this.panels.path) {
            case "storage":
                if (a.name == "bank") {
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                        object: {
                            getItem: e.data
                        }
                    })
                } else {
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                        object: {
                            putItem: e.data,
                            getItem: a.data != null && a.data.id != "empty" && (!a.data.equals(e.data) || !a.data.stackable) ? a.data : null
                        }
                    })
                }
                break;
            default:
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, {
                    object: {
                        from: e.data,
                        toArea: a.name == "bank" ? "0" : a.name.substr(4)
                    }
                })
            }
        }
    }
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler)
}
;
canvas.app.manor.view.controls.BankWin.prototype.mouseMoveHandler = function(t) {
    var e;
    var a;
    var i;
    if (this.currentDragItem) {
        i = canvas.app.manor.view.controls.elements.Item.overedItem;
        if (i != null && i.name != this.currentDragItem.name && !i.lockedImage.visible) {
            this.currentDragItem.filters = [canvas.Functions.getBrightness(1.5)]
        } else {
            this.currentDragItem.filters = null
        }
    }
}
;
canvas.app.manor.view.controls.BankWin.prototype.panelsHandler = function(t) {
    var e, a, i = this.bankItems.items.length;
    switch (this.panels.path) {
    case "storage":
        this.leftTitle.text = canvas.Translator.getText(247) + ":";
        for (a = 0; a < i; a++)
            this.bankItems.items[a].mode = canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT;
        break;
    default:
        this.leftTitle.text = canvas.Translator.getText(246) + ":";
        for (a = 0; a < i; a++)
            this.bankItems.items[a].mode = canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT
    }
    if (t != undefined)
        this.updateLeft()
}
;
canvas.app.manor.view.controls.BankWin.prototype.activate = function() {
    this.filterSortControl.input.input = canvas.app.manor.view.input8
}
;
canvas.app.manor.view.controls.BankWin.prototype.deactivate = function() {
    this.filterSortControl.input.input = null
}
;
canvas.app.manor.view.controls.BankWin.prototype.hide = function() {
    this.filterSortControl.filterText = ""
}
;
canvas.app.manor.view.controls.BuildingWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 600, 500, "");
    this.container = this.addChild(new canvas.px.Container);
    this.useContainer = new canvas.px.Container;
    this.useContainer2 = new canvas.px.Container;
    this.useModules = {};
    this.fieldDesc = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,350,164,"left"));
    this.fieldDesc.position.set(218, 35);
    this.image = this.container.addChild(new canvas.ui.Image);
    this.image.position.set(20, 27);
    this.level = this.container.addChild(new canvas.app.manor.view.controls.elements.Level);
    this.level.position.set(45, 140);
    this.upgrade = new canvas.app.manor.view.controls.Upgrade;
    this.panel = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.upgrade, this.useContainer],["upgrade", "use"],[canvas.Translator.getText(114), canvas.Translator.getText(115)],1));
    this.panel.position.set(22, 185);
    this.panel.setSize(555);
    this.useKennel = new canvas.app.manor.view.controls.UseKennel;
    this.useObelisk = new canvas.app.manor.view.controls.UseObelisk;
    this.useExp = new canvas.app.manor.view.controls.UseExp;
    this.useExp2 = new canvas.app.manor.view.controls.UseExp2;
    this.usePets = new canvas.app.manor.view.controls.UsePets;
    this.useHospital = new canvas.app.manor.view.controls.UseHospital;
    this.useWorkshop = new canvas.app.manor.view.controls.UseWorkshop;
    this.useWorkshop2 = new canvas.app.manor.view.controls.UseWorkshop2;
    this.useMine = new canvas.app.manor.view.controls.UseMine;
    this.useMine2 = new canvas.app.manor.view.controls.UseMine2;
    this.useMake = new canvas.app.manor.view.controls.UseMake;
    this.usePortal = new canvas.app.manor.view.controls.UsePortal;
    this.useModules["kennel"] = this.useKennel;
    this.useModules["obelisk"] = this.useObelisk;
    this.useModules["exp"] = this.useExp;
    this.useModules["exp2"] = this.useExp2;
    this.useModules["pets"] = this.usePets;
    this.useModules["hospital"] = this.useHospital;
    this.useModules["workshop"] = this.useWorkshop;
    this.useModules["workshop2"] = this.useWorkshop2;
    this.useModules["mine"] = this.useMine;
    this.useModules["mine2"] = this.useMine2;
    this.useModules["make"] = this.useMake;
    this.useModules["portal"] = this.usePortal;
    this.enterButton = this.container.addChild(new canvas.app.view.MainButton);
    this.enterButton.setTitle(canvas.Translator.getText(104));
    this.enterButton.y = 145;
    this.enterButton.visible = false;
    this.enterButton.setSize(120);
    this.enterButton2 = this.container.addChild(new canvas.app.view.MainButton);
    this.enterButton2.y = 145;
    this.enterButton2.visible = false;
    this.loader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass");
    this.loader.frameEvent = canvas.app.manor.Event.ENTER_FRAME;
    this.loader.loop = true;
    this.loader.position.set(208, 300);
    this.updateButtonsPositions();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton, this.enterClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton2, this.enter2ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panel, this.pathHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_CLICK, this.panel, this.panelsClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HIDE_BUILDING_LOADER, null, this.hideLoaderHandler, this)
}
;
canvas.app.manor.view.controls.BuildingWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.BuildingWin.prototype.update = function(t) {
    if (t == undefined)
        t = 0;
    var e = canvas.app.manor.model;
    var a = e.buildings[e.selectedBuilding];
    var i = e.user.buildings[e.selectedBuilding];
    var s = a[i.level];
    var n = a[i.level + 1];
    var r, o;
    if (s != null) {
        this.level.level = i.level.toString();
        if (s.picture == "") {
            this.image.clear()
        } else {
            this.image.setImage(s.picture + ".png")
        }
        this.header.text = s.title;
        this.fieldDesc.text = s.desc.replace("\r", "");
        if (n != null && n.enabled) {
            this.upgrade.labour.setLabour(i.labour, n.cost, canvas.Functions.testFlag(t, canvas.app.manor.Const.FLAG_AFTER_BUILD));
            this.upgrade.labourInput.buildingMaxValue = n.cost;
            this.upgrade.labourInput.maxValue = Math.min(e.user.labour, e.user.cement, n.cost - i.labour);
            this.upgrade.setTitlePercent(Math.round(i.labour / n.cost * 100));
            this.upgrade.labourInput.update();
            this.upgrade.cementInput.update(null, e.user.cement.toString());
            this.upgrade.clear();
            this.upgrade.testRequires();
            this.upgrade.labour.visible = true;
            this.upgrade.labourInput.interactiveChildren = true
        } else {
            switch (i.name) {
            case "storage":
            case "mail":
            case "market":
            case "camp":
                canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton);
                return
            }
            this.upgrade.labour.setLabour(i.labour, 0);
            this.upgrade.setTitlePercent(0);
            this.upgrade.labourInput.update();
            this.upgrade.cementInput.update(null, e.user.cement);
            this.upgrade.clear();
            this.upgrade.buildButton.enabled = false;
            this.upgrade.labour.visible = false;
            this.upgrade.labourInput.interactiveChildren = false;
            this.upgrade.fieldTopTitle.text = canvas.Translator.getText(113) + "."
        }
        this.upgrade.destroyButton.visible = i.level > 0 || i.labour > 0;
        this.upgrade.backButton.visible = this.upgrade.fieldBack.visible = !this.upgrade.destroyButton.visible && e.availableBuildings != null && e.availableBuildings.length > 1;
        if (!s.destroyEnabled)
            this.upgrade.destroyButton.visible = false
    }
    switch (e.getSelectedBuildingBase()) {
    case "tree":
    case "halloween":
        this.panel.visible = false;
        break;
    case "workshop":
    case "mine":
    case "make":
        switch (e.getSelectedBuildingBase()) {
        case "workshop":
            o = 115;
            break;
        case "mine":
            o = 234;
            break;
        case "make":
            o = 237;
            break
        }
        if (i.level > 0) {
            this.panel.init([this.upgrade, this.useContainer, this.useContainer2], ["upgrade", "use", "use2"], [canvas.Translator.getText(114), canvas.Translator.getText(o), canvas.Translator.getText(116)]);
            this.panel.visible = true;
            break
        }
    default:
        this.panel.init([this.upgrade, this.useContainer], ["upgrade", "use"], [canvas.Translator.getText(114), canvas.Translator.getText(115)]);
        this.panel.visible = true;
        break
    }
    if (i == null || i.level == 0 || ["main", "storage", "mail", "market", "wall", "tree", "halloween", "camp"].indexOf(i.name) != -1) {
        this.panel.init([this.upgrade], ["upgrade"], [canvas.Translator.getText(114)])
    }
    this.enterButton.visible = this.enterButton2.visible = false;
    if (i != null)
        switch (i.name) {
        case "main":
            if (i.level > 0)
                this.enterButton2.visible = true;
        case "camp":
        case "storage":
        case "mail":
        case "market":
            if (i.level > 0)
                this.enterButton.visible = true;
            break;
        case "tree":
        case "halloween":
            this.enterButton.visible = true;
            break
        }
    this.upgrade.hireButton.enabled = !i.isUnknownDich()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    var t = canvas.app.manor.model;
    var e = this.panel.visible ? this.panel : null;
    if (e != null && t.buildingPanelsStatus["bs_" + t.selectedBuilding] != undefined && t.buildingPanelsStatus["bs_" + t.selectedBuilding] != "" && this.panel.getEnabled(t.buildingPanelsStatus["bs_" + t.selectedBuilding])) {
        e.path = t.buildingPanelsStatus["bs_" + t.selectedBuilding]
    } else {
        if (e != null)
            e.setDefaultPath()
    }
    this.pathHandler();
    this.activate()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    this.deactivate();
    if (this.usePets.petView.pet)
        this.usePets.petView.pet.stop()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.enterClickHandler = function() {
    var t = canvas.app.manor.model;
    var e = t.user.buildings[t.selectedBuilding];
    switch (t.selectedBuilding) {
    case "main":
    case "storage":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_BANK, null, {
            flag: t.selectedBuilding == "storage"
        });
        break;
    case "mail":
        canvas.Functions.navigateToURL("area_post.php", "_self");
        break;
    case "tree":
    case "halloween":
        if (e != null && e.params != "") {
            canvas.Functions.navigateToURL(e.params, "_self")
        }
        break;
    case "market":
        canvas.Functions.navigateToURL("area_store.php", "_self");
        break;
    case "camp":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HUNT_CAMP);
        break
    }
    this.close()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.enter2ClickHandler = function() {
    var t = canvas.app.manor.model;
    switch (t.selectedBuilding) {
    case "main":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_THRONE_ROOM);
        break
    }
    this.close()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.panelsClickHandler = function() {
    var t = canvas.app.manor.model;
    t.localStorage.set("bs_" + t.selectedBuilding, this.panel.path);
    t.buildingPanelsStatus["bs_" + t.selectedBuilding] = this.panel.path
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.pathHandler = function() {
    var t = canvas.app.manor.model;
    var e;
    var a = this.panel.visible ? this.panel : null;
    canvas.Functions.clearChildren(this.useContainer);
    canvas.Functions.clearChildren(this.useContainer2);
    var i = 140;
    if (a != null && a.path == "upgrade" && (this.upgrade.destroyButton.visible || this.upgrade.backButton.visible)) {
        this.setSize(600, 500);
        this.fieldDesc.setSize(350);
        a.setSize(556)
    } else {
        this.setSize(600 - i, 500);
        this.fieldDesc.setSize(350 - i);
        if (a != null)
            a.setSize(556 - i)
    }
    this.enterButton.setTitle(canvas.Translator.getText(104));
    this.enterButton2.setTitle("");
    if (a != null)
        a.setSize(0, 265);
    switch (t.selectedBuilding) {
    case "main":
        this.enterButton.setTitle(canvas.Translator.getText(253));
        this.enterButton2.setTitle(canvas.Translator.getText(252));
        break;
    case "tree":
    case "halloween":
        this.setSize(this.back.width, 215);
        this.enterButton.setTitle(canvas.Translator.getText(226));
        this.enterButton.x = this.back.width - this.enterButton._width - 10;
        this.baseHeight = 300;
        break;
    default:
        this.baseHeight = 520;
        break
    }
    this.updateButtonsPositions();
    if (this.useModules[t.getSelectedBuildingBase()] != undefined && a != null) {
        switch (a.path) {
        case "use":
            e = t.user.buildings[t.selectedBuilding];
            if (e != null && e.level > 0) {
                switch (t.getSelectedBuildingBase()) {
                case "pets":
                    this.setSize(this.back.width, 526);
                    a.setSize(0, 295);
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PETS_DATA);
                    break;
                case "exp":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP_DATA);
                    break;
                case "exp2":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP2_DATA);
                    break;
                case "obelisk":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_VALOUR_DATA);
                    break;
                case "hospital":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HOSPITAL_DATA);
                    break;
                case "workshop":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_DATA);
                    break;
                case "mine":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA);
                    break;
                case "make":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA);
                    break;
                case "portal":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_DATA);
                    break;
                case "kennel":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_DATA);
                    break
                }
                this.useContainer.addChild(this.useModules[t.getSelectedBuildingBase()])
            }
            break;
        case "use2":
            e = t.user.buildings[t.selectedBuilding];
            if (e != null && e.level > 0) {
                switch (t.getSelectedBuildingBase()) {
                case "workshop":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_DATA);
                    this.useContainer2.addChild(this.useWorkshop2);
                    break;
                case "mine":
                case "make":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA);
                    this.useContainer2.addChild(this.useMine2);
                    break
                }
            }
            break
        }
    }
    var s = null;
    if (this.useContainer.numChildren > 0)
        s = this.useContainer.getChildAt(0);
    if (this.useContainer2.numChildren > 0)
        s = this.useContainer2.getChildAt(0);
    if (s && s.alpha == 0) {
        this.addChild(this.loader);
        this.loader.play()
    } else {
        this.hideLoaderHandler()
    }
    this.deactivate();
    this.activate()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.updatePath = function() {
    this.pathHandler()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.updateButtonsPositions = function() {
    this.enterButton.x = this.back.width - this.enterButton._width - 10;
    this.enterButton2.x = this.enterButton.x - this.enterButton2._width + 20
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.activate = function() {
    if (!this.parent)
        return;
    if (this.upgrade.parent)
        this.upgrade.labourInput.input.input = canvas.app.manor.view.input4;
    if (this.usePets.parent)
        this.usePets.filterSortControl.input.input = canvas.app.manor.view.input1;
    if (this.useWorkshop.parent && !this.useWorkshop.combo.isOpened())
        this.useWorkshop.input.input = canvas.app.manor.view.input5;
    if (this.useWorkshop.parent)
        this.useWorkshop.search.input = canvas.app.manor.view.input7;
    if (this.usePortal.parent)
        this.usePortal.activate()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.deactivate = function() {
    this.upgrade.labourInput.input.input = null;
    this.usePets.filterSortControl.input.input = null;
    this.useWorkshop.input.input = null;
    this.useWorkshop.search.input = null;
    this.usePortal.deactivate()
}
;
canvas.app.manor.view.controls.BuildingWin.prototype.hideLoaderHandler = function() {
    this.loader.stop();
    this.removeIfExist(this.loader)
}
;
canvas.app.manor.view.controls.BuyArea = function() {
    canvas.px.Container.call(this);
    this._selectedRequest = 0;
    Object.defineProperty(this, "selectedRequest", {
        get: function() {
            return this._requests[this._selectedRequest]
        }
    });
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.listContainer = new canvas.px.Container;
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(20, 64);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,400,18,"center");
    this.container.addChild(this.fieldTitle);
    this.fieldTitle.position.set(6, 17);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,73,18,"center");
    this.container.addChild(t);
    t.position.set(-2, 39);
    t.text = canvas.Translator.getText(153);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left");
    this.container.addChild(t);
    t.position.set(75, 39);
    t.text = canvas.Translator.getText(123);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center");
    this.container.addChild(t);
    t.position.set(323, 39);
    t.text = canvas.Translator.getText(121);
    this.pager = new canvas.app.manor.view.controls.elements.Pager;
    this.container.addChild(this.pager);
    this.pager.position.set(207, 360);
    this.pager.visible = false;
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    var e;
    var a = 0;
    var i;
    var s = [];
    for (e = 0; e < canvas.app.manor.Const.REQUESTS_ON_PAGE; e++) {
        i = new canvas.app.manor.view.controls.elements.WorkRequestLine(e,s,"money_gold");
        i.visible = false;
        s.push(i.check);
        this.listContainer.addChild(i);
        i.y = a;
        a += 29;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, i.check, this._itemClickHandler, this)
    }
    this.buyButton = new canvas.app.view.MainButton;
    this.buyButton.setTitle(canvas.Translator.getText(167));
    this.buyButton.setSize(180);
    this.container.addChild(this.buyButton);
    this.buyButton.position.set(18, 390);
    this.cancelButton = new canvas.app.view.MainButton;
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 390);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this._buyClickHandler, this)
}
;
canvas.app.manor.view.controls.BuyArea.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.BuyArea.prototype._pagerHandler = function(t) {
    this.requestCurPage = this.pager.currentPage;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS)
}
;
canvas.app.manor.view.controls.BuyArea.prototype._itemClickHandler = function(t) {
    this._selectedRequest = t.target.parent.index
}
;
canvas.app.manor.view.controls.BuyArea.prototype._updateList = function() {
    var t;
    var e;
    var a;
    var i = 0;
    for (t = 0; t < canvas.app.manor.Const.REQUESTS_ON_PAGE; t++) {
        e = this._requests[t];
        a = this.listContainer.getChildAt(i);
        a.check.checked = i == 0;
        a.data = e;
        if (e != null) {
            a.visible = true
        } else {
            a.visible = false
        }
        i++
    }
    this._selectedRequest = 0
}
;
canvas.app.manor.view.controls.BuyArea.prototype.update = function(t, e, a, i) {
    this._requests = t;
    this._requestNumPages = e;
    if (this._requestNumPages > 1) {
        this.pager.init(this._requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE);
        this.pager.currentPage = this._requestCurPage;
        this.pager.visible = true
    } else {
        this.pager.visible = false
    }
    this.fieldTitle.text = "<b>" + canvas.Translator.getText(127) + ":</b> " + a + "     <b>" + canvas.Translator.getText(128) + ":</b> " + i;
    this._updateList()
}
;
canvas.app.manor.view.controls.BuyArea.prototype._cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_MARKET)
}
;
canvas.app.manor.view.controls.BuyArea.prototype._buyClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        text: canvas.Translator.getText(168) + " <b>" + this.selectedRequest.price + "</b> <img src='money_gold' atlas='ui' yOffset='1'/> ?",
        event: {
            name: canvas.app.manor.Event.BUY_AREA,
            params: {
                areaId: "",
                requestId: this.selectedRequest.id,
                price: this.selectedRequest.price
            }
        }
    })
}
;
canvas.app.manor.view.controls.BuyCementWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 390, 194, "");
    this.container = this.addChild(new canvas.px.Container);
    var t = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 153;
    t.height = 104;
    t.position.set(31, 38);
    var e = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,85,38,"left"));
    e.position.set(119, 51);
    e.text = canvas.Translator.getText(169);
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,95,18,"right"));
    e.position.set(175, 57);
    e.text = canvas.Translator.getText(170) + ":";
    this.title1 = e;
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,95,18,"right"));
    e.position.set(175, 81);
    e.text = canvas.Translator.getText(171) + ":";
    this.item = this.container.addChild(new canvas.app.manor.view.controls.elements.Item(false,true));
    this.item.position.set(38, 44);
    this.item.data = new canvas.data.manor.DItem({
        id: canvas.app.manor.model.cementID,
        picture: canvas.app.manor.model.cementImage,
        title: canvas.Translator.getText(169)
    });
    this.item.buttonMode = false;
    this.input = this.container.addChild(new canvas.app.manor.view.controls.elements.Input("center",true,41,null,null,null,null,true));
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.input.onlyNumbers = true;
    this.input.maxChars = 10;
    this.input.position.set(53, 116);
    this.radioArray = [];
    this.checkMoney = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray));
    this.radioArray.push(this.checkMoney);
    this.checkMoney.position.set(113, 68);
    this.coins1 = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,40,null,null,null,false,0,0));
    this.coins1.position.set(32, 8);
    this.checkMoney.checked = true;
    this.checkEnergy = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray));
    this.radioArray.push(this.checkEnergy);
    this.checkEnergy.position.set(113, 95);
    this.energy1 = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy);
    this.energy1.position.set(32, 8);
    this.coins2 = this.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,110,null,null,null,false));
    this.coins2.position.set(275, 56);
    this.coins2.interactive = false;
    this.coins3 = this.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,110,null,null,null,false));
    this.coins3.position.set(275, 80);
    this.coins3.interactive = false;
    this.energy2 = this.addChild(new canvas.app.manor.view.controls.elements.Energy);
    this.energy2.position.set(275, 56);
    this.energy2.interactive = false;
    this.energy3 = this.addChild(new canvas.app.manor.view.controls.elements.Energy);
    this.energy3.position.set(275, 80);
    this.energy3.interactive = false;
    this.container.x = -10;
    var a, i = this.radioArray.length;
    for (a = 0; a < i; a++) {
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, this.radioArray[a], this.selectHandler, this)
    }
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    this.buyButton = this.addChild(new canvas.app.view.MainButton);
    this.buyButton.setTitle(canvas.Translator.getText(167));
    this.buyButton.position.set(140, 142);
    this.buyButton.setSize(120);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    this.selectHandler()
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.BuyCementWin.prototype.show = function(t) {
    this.activate();
    this.input.text = "0";
    canvas.app.manor.view.WindowManorBase.prototype.show.apply(this)
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype.hide = function(t) {
    this.deactivate();
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype.activate = function() {
    this.input.input = canvas.app.manor.view.input3
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype.deactivate = function() {
    this.input.input = null
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    this.coins1.money = t.cementCost * 100;
    this.coins2.money = t.user.money * 100;
    this.coins3.money = this.input.text ? t.cementCost * parseInt(this.input.text) * 100 : 0;
    this.energy1.update(t.cementCost);
    this.energy2.update(t.user.labour);
    this.energy3.update(this.input.text ? t.cementCost * parseInt(this.input.text) : 0);
    this.buyButton.enabled = parseInt(this.input.text) > 0 && (this.checkEnergy.checked ? this.energy3.energy <= this.energy2.energy : this.coins3.money <= this.coins2.money)
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype.selectHandler = function() {
    if (this.checkMoney.checked) {
        this.removeIfExist(this.energy2);
        this.removeIfExist(this.energy3);
        this.addChild(this.coins2);
        this.addChild(this.coins3);
        this.title1.text = canvas.Translator.getText(170) + ":";
        this.item.data.count = 1;
        this.item.update();
        this.item.interactive = false;
        this.input.text = "0"
    } else {
        this.removeIfExist(this.coins2);
        this.removeIfExist(this.coins3);
        this.addChild(this.energy2);
        this.addChild(this.energy3);
        this.item.data.count = canvas.app.manor.Const.ENERGY_COURSE;
        this.item.update();
        this.item.interactive = false;
        this.title1.text = canvas.Translator.getText(205) + ":";
        this.input.text = Math.floor(canvas.app.manor.model.user.labour / canvas.app.manor.model.cementCost)
    }
    this.update()
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype.changeHandler = function() {
    this.update()
}
;
canvas.app.manor.view.controls.BuyCementWin.prototype.buyClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(109),
        object: {
            name: canvas.app.manor.Event.BUY_CEMENT,
            params: {
                params: this.input.text,
                flag: this.checkEnergy.checked
            }
        }
    })
}
;
canvas.app.manor.view.controls.ChooseBuildingWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 460, 510, canvas.Translator.getText(230));
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list.setSize(420, 446);
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container);
    this.list.position.set(20, 40);
    this.list._scrollPadding = 3;
    this.list.scroll._step = 100
}
;
canvas.app.manor.view.controls.ChooseBuildingWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ChooseBuildingWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    this.list.clear(false);
    var e, a = t.availableBuildings.length;
    for (e = 0; e < a; e++) {
        this.list.add(new canvas.app.manor.view.controls.elements.ChoseBuildingItem(t.availableBuildings[e]), false)
    }
    this.list.update()
}
;
canvas.app.manor.view.controls.ChoosePetWin = function() {
    this._selectedIndex = -1;
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t;
            this.updateSorButtons();
            this.updateView()
        }
    });
    canvas.app.manor.view.WindowManorBase.call(this, 630, 524, canvas.Translator.getText(327));
    this.container = this.addChild(new canvas.px.Container);
    this.container.y = 30;
    this.topList = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1));
    this.topList._paddingV = this.topList._paddingH = 0;
    this.topList.setSize(440, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH);
    var t, e, a;
    for (t = 0; t < canvas.data.manor.DCampData.TYPE_COUNT; t++) {
        this.topList.add(new canvas.app.manor.view.controls.camp.SortButtonRenderer(t), false)
    }
    this.topList.update();
    this.topList.position.set(canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH, 0);
    var i = this.container.addChild(new canvas.px.RoundRect(16576940,1,this.back.width - 13,427,15,15));
    i.position.set(6, 61);
    i = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_gradient"),10,0,10,0));
    i.width = this.back.width - 24;
    i.position.set(12, 60);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list._paddingV = this.list._paddingH = 0;
    this.list._scrollPadding = 20;
    this.list.position.set(6, 91);
    this.list.setSize(599, 420);
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container);
    this.filterSortControl = this.addChild(new canvas.app.manor.view.controls.elements.FilterSortControlPets([],"","",false,canvas.Translator.getText(281)));
    this.filterSortControl.container.removeChild(this.filterSortControl.filterButton);
    this.filterSortControl.position.set(54, 65);
    this.excludePets = null;
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.topList, this.topSelectHandler, this)
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH = 170;
canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH = 72;
canvas.app.manor.view.controls.ChoosePetWin.prototype.updateView = function() {
    this.pets.sort(this.sortFunction.bind(this));
    var t, e = this.pets.length;
    var a;
    for (t = 0; t < e; t++) {
        a = this.list.items[t];
        a.selectedIndex = this.selectedIndex;
        a.data = this.pets[t]
    }
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype.updateSorButtons = function() {
    var t, e;
    for (t = 0; t < canvas.data.manor.DCampData.TYPE_COUNT; t++) {
        e = this.topList.items[t];
        if (e.id == this.selectedIndex) {
            e.changeSort()
        } else {
            e.sortValue = 0
        }
    }
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype.sortFunction = function(t, e) {
    if (t.getSkillByIndex(this.selectedIndex + 1) > e.getSkillByIndex(this.selectedIndex + 1)) {
        return -this.topList.items[this.selectedIndex].sortValue
    } else if (t.getSkillByIndex(this.selectedIndex + 1) < e.getSkillByIndex(this.selectedIndex + 1)) {
        return this.topList.items[this.selectedIndex].sortValue
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    if (!t.campData.pets)
        return;
    var e;
    var a;
    var i = 0;
    this.pets = new Array;
    this.list.clear(false);
    for (var s in t.campData.pets) {
        a = t.campData.pets[s];
        if (a.mission || !a.canQuest || this.excludePets && this.excludePets.indexOf(a.id) >= 0)
            continue;
        if (this.filterSortControl.filterText.length > 2 && a.title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) < 0) {
            continue
        }
        this.list.add(new canvas.app.manor.view.controls.camp.PetLineRenderer(this.back.width - 13,a), false);
        this.pets.push(a)
    }
    this.list.update();
    if (this._selectedIndex < 0)
        this.selectedIndex = 0;
    else
        this.updateView()
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype.topSelectHandler = function(t) {
    if (t.params) {
        this.selectedIndex = t.params.id
    }
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype.filterChangeHandler = function(t) {
    this.update()
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype.activate = function() {
    this.filterSortControl.input.input = canvas.app.manor.view.input11
}
;
canvas.app.manor.view.controls.ChoosePetWin.prototype.deactivate = function() {
    this.filterSortControl.input.input = null
}
;
canvas.app.manor.view.controls.ConfirmWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166, canvas.Translator.getText(2020));
    this.messageField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,250,70,"center","middle");
    this.messageField._lineSpace = 4;
    this.messageField.position.set(40, 40);
    this.addChild(this.messageField);
    this.okButton = new canvas.app.view.MainButton;
    this.okButton.setTitle(canvas.Translator.getText(2018));
    this.okButton.setSize(120);
    this.okButton.position.set(Math.round(this.width * .5 - this.okButton.width - 10), 105);
    this.addChild(this.okButton);
    this.cancelButton = new canvas.app.view.MainButton;
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    this.cancelButton.setSize(120);
    this.cancelButton.position.set(Math.round(this.width * .5 + 10), 105);
    this.addChild(this.cancelButton)
}
;
canvas.app.manor.view.controls.ConfirmWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ConfirmWindow.prototype.clickHandler = function(t) {
    if (canvas.Functions.findParent(this.okButton, t.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
        if (this.e != null) {
            if (this.e.func) {
                this.e.func.apply(null, this.e.params)
            } else if (this.e.name) {
                canvas.EventManager.dispatchEvent(this.e.name, null, this.e.params)
            }
        }
        return
    }
    if (canvas.Functions.findParent(this.cancelButton, t.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
        return
    }
    canvas.px.Window.prototype.clickHandler.call(this, t)
}
;
canvas.app.manor.view.controls.ConfirmWindow.prototype.init = function(t, e, a, i) {
    if (a != undefined)
        this.okButton.setTitle(a);
    if (i != undefined)
        this.cancelButton.setTitle(i);
    if (e == undefined)
        e = null;
    this.messageField.text = t;
    this.e = e
}
;
canvas.app.manor.view.controls.CountWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166, "");
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,240,18,"center"));
    this.title.position.set(40, 53);
    this.title.text = canvas.Translator.getText(186) + ":";
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center",true,41,null,null,null,null,true));
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.input.onlyNumbers = true;
    this.input.maxChars = 10;
    this.input.position.set(135, 80);
    this.okButton = this.addChild(new canvas.app.view.MainButton);
    this.okButton.setTitle(canvas.Translator.getText(2018));
    this.okButton.position.set(50, 110);
    this.okButton.setSize(100);
    this.allButton = this.addChild(new canvas.app.view.MainButton);
    this.allButton.setTitle(canvas.Translator.getText(187));
    this.allButton.position.set(165, 110);
    this.allButton.setSize(100);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.okButton, this.okHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.allButton, this.allHandler, this)
}
;
canvas.app.manor.view.controls.CountWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.CountWin.count = 0;
canvas.app.manor.view.controls.CountWin.maxCount = 0;
canvas.app.manor.view.controls.CountWin.event = null;
canvas.app.manor.view.controls.CountWin.prototype.update = function() {
    this.okButton.enabled = parseInt(this.input.text) > 0
}
;
canvas.app.manor.view.controls.CountWin.prototype.changeHandler = function() {
    this.update()
}
;
canvas.app.manor.view.controls.CountWin.prototype.okHandler = function() {
    canvas.app.manor.view.controls.CountWin.count = parseInt(this.input.text);
    canvas.EventManager.dispatchEvent.apply(canvas.EventManager, canvas.app.manor.view.controls.CountWin.event);
    this.close()
}
;
canvas.app.manor.view.controls.CountWin.prototype.allHandler = function() {
    canvas.app.manor.view.controls.CountWin.count = canvas.app.manor.view.controls.CountWin.maxCount;
    canvas.EventManager.dispatchEvent.apply(canvas.EventManager, canvas.app.manor.view.controls.CountWin.event);
    this.close()
}
;
canvas.app.manor.view.controls.CountWin.prototype.activate = function() {
    this.input.input = canvas.app.manor.view.input9
}
;
canvas.app.manor.view.controls.CountWin.prototype.deactivate = function() {
    this.input.input = null
}
;
canvas.app.manor.view.controls.CountWin.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    this.input.text = "1";
    this.update()
}
;
canvas.app.manor.view.controls.CountWin.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    canvas.app.manor.view.controls.CountWin.count = 0;
    canvas.app.manor.view.controls.CountWin.maxCount = 1;
    this.input.input = null
}
;
canvas.app.manor.view.controls.HireWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307, canvas.Translator.getText(105));
    this.container = this.addChild(new canvas.px.Container);
    var t = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,96,18,"right"));
    t.position.set(5, 46);
    t.text = canvas.Translator.getText(106) + ":";
    var e = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,96,18,"right"));
    e.position.set(5, 76);
    e.text = canvas.Translator.getText(107) + ":";
    var a = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,96,18,"right"));
    a.position.set(107, 76);
    a.text = canvas.Translator.getText(108);
    this.prognosisField = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11,7026733,283,18,"center"));
    this.prognosisField.position.set(23, 102);
    this.inputLabour = this.container.addChild(new canvas.app.manor.view.controls.elements.Input);
    this.inputLabour.onlyNumbers = true;
    this.inputLabour.maxChars = 4;
    this.inputLabour.position.set(104, 74);
    this.inputPrice = this.container.addChild(new canvas.app.manor.view.controls.elements.Input);
    this.inputPrice.onlyNumbers = true;
    this.inputPrice.maxChars = 2;
    this.inputPrice.position.set(206, 74);
    var i = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "money_silver")));
    i.position.set(240, 78);
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput);
    this.cementInput.position.set(80, 125);
    this.buyCementButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(109),2));
    this.buyCementButton.position.set(20, 252);
    this.saveButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(110),4));
    this.saveButton.position.set(159, 252);
    this.combo = this.container.addChild(new canvas.app.manor.view.controls.elements.Combo);
    this.combo.position.set(105, 40);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_OPEN, this.combo, this.comboOpenHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this.combo, this.comboCloseHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.inputLabour, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.inputPrice, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyCementButton, this.buyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.saveButton, this.saveClickHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeHandler, this)
}
;
canvas.app.manor.view.controls.HireWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.HireWin.prototype.show = function(t) {
    this.activate();
    canvas.app.manor.view.WindowManorBase.prototype.show.apply(this)
}
;
canvas.app.manor.view.controls.HireWin.prototype.hide = function(t) {
    this.deactivate();
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
;
canvas.app.manor.view.controls.HireWin.prototype.comboOpenHandler = function(t) {
    this.deactivate()
}
;
canvas.app.manor.view.controls.HireWin.prototype.comboCloseHandler = function(t) {
    if (this.parent)
        this.activate()
}
;
canvas.app.manor.view.controls.HireWin.prototype.activate = function() {
    this.inputLabour.input = canvas.app.manor.view.input;
    this.inputPrice.input = canvas.app.manor.view.input2
}
;
canvas.app.manor.view.controls.HireWin.prototype.deactivate = function() {
    this.inputLabour.input = null;
    this.inputPrice.input = null
}
;
canvas.app.manor.view.controls.HireWin.prototype.update = function(t) {
    if (t == undefined)
        t = 0;
    var e = canvas.app.manor.model;
    var a;
    var i;
    var s = new Array;
    for (var n in e.user.buildings) {
        a = e.user.buildings[n];
        i = e.buildings[a.name][a.level + 1];
        if (i != null && !a.isUnknownDich() && i.cost > 0) {
            s.push({
                name: i.name,
                title: i.title
            })
        }
    }
    if (s.length < 1) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MESSAGE, null, {
            params: canvas.Translator.getText(250)
        });
        this.close();
        return
    } else {
        this.combo.init(s);
        this.inputLabour.text = "0";
        this.cementInput.clear();
        this.inputPrice.text = "5";
        this.updateLight();
        this.saveButton.setTitle(e.requestToRemove != "" ? canvas.Translator.getText(111) : canvas.Translator.getText(110));
        this.combo.enabled = e.requestToRemove == "";
        this.updatePrognosis()
    }
}
;
canvas.app.manor.view.controls.HireWin.prototype.updateLight = function() {
    var t = canvas.app.manor.model;
    if (t.requestToRemove != "") {
        var e = t.user.getRequestById(t.requestToRemove);
        if (e != null)
            this.cementInput.update(null, t.user.cement + e.labour)
    } else {
        this.cementInput.update()
    }
    this.saveButton.enabled = this.cementInput.testRequires() && parseInt(this.inputPrice.text) > 0
}
;
canvas.app.manor.view.controls.HireWin.prototype.updatePrognosis = function() {
    this.prognosisField.text = canvas.Translator.getText(112) + ": <b>" + canvas.app.manor.model.getLabourPrognosis(parseInt(this.inputPrice.text), parseInt(this.inputLabour.text)) + "</b>"
}
;
canvas.app.manor.view.controls.HireWin.prototype.changeHandler = function() {
    this.cementInput.update(this.inputLabour.text);
    this.saveButton.enabled = this.cementInput.testRequires() && parseInt(this.inputPrice.text) > 0;
    this.updatePrognosis()
}
;
canvas.app.manor.view.controls.HireWin.prototype.buyClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CEMENT)
}
;
canvas.app.manor.view.controls.HireWin.prototype.saveClickHandler = function(t) {
    var e = new Object;
    e.type = this.combo.selectedItem.name;
    e.labour = this.inputLabour.text;
    e.price = this.inputPrice.text;
    if (canvas.app.manor.model.requestToRemove != "") {
        e.edit = true;
        canvas.app.manor.model.requestToRemove = ""
    } else {
        e.edit = false
    }
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CREATE_WORK_REQUEST, null, {
        object: e
    });
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_HIRE)
}
;
canvas.app.manor.view.controls.HireWin.prototype.closeHandler = function(t) {
    if (t.params == this) {
        canvas.app.manor.model.requestToRemove = ""
    }
}
;
canvas.app.manor.view.controls.HuntCampWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 926, 524, canvas.Translator.getText(292));
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(20, 32);
    this.mineResources = new canvas.app.manor.view.controls.camp.MineResources;
    this.mineTalismans = new canvas.app.manor.view.controls.camp.MineTalismans;
    this.equipment = new canvas.app.manor.view.controls.camp.Equipment;
    this.panels = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.mineTalismans, this.mineResources, this.equipment],["talismans", "resources", "equipment"],[canvas.Translator.getText(294), canvas.Translator.getText(293), canvas.Translator.getText(295)],1));
    this.panels.setSize(886, 443);
    this.panels.contentContainer.x += 16;
    this.panels.contentContainer.y += 20;
    this.panels.path = "talismans";
    this.loader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass");
    this.loader.frameEvent = canvas.app.manor.Event.ENTER_FRAME;
    this.loader.loop = true;
    this.loader.position.set(450, 270);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panels, this.pathHandler, this)
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.HuntCampWin.prototype.update = function() {
    if (!this.mineResources.inited && this.panels.path == "resources")
        this.mineResources.update();
    if (!this.mineTalismans.inited && this.panels.path == "talismans")
        this.mineTalismans.update();
    if (!this.equipment.inited && this.panels.path == "equipment") {
        this.equipment.update();
        this.activate()
    }
    this.testLoader()
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.updateFarm = function() {
    this.mineResources.update();
    this.mineTalismans.update()
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    this.testInited()
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.testLoader = function() {
    var t = false;
    switch (this.panels.path) {
    case "resources":
        t = !this.mineResources.inited;
        break;
    case "talismans":
        t = !this.mineTalismans.inited;
        break;
    case "equipment":
        t = !this.equipment.inited;
        break
    }
    this.showLoader(t)
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.showLoader = function(t) {
    if (t) {
        this.loader.play();
        this.addChild(this.loader);
        this.interactiveChildren = false
    } else {
        this.loader.stop();
        this.removeIfExist(this.loader);
        this.interactiveChildren = true
    }
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.updateTime = function() {
    this.mineResources.updateTime();
    this.mineTalismans.updateTime()
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.pathHandler = function() {
    this.activate();
    this.testLoader();
    this.testInited()
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.testInited = function() {
    switch (this.panels.path) {
    case "resources":
        if (!this.mineResources.inited)
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM);
        break;
    case "talismans":
        if (!this.mineTalismans.inited)
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH);
        break;
    case "equipment":
        if (!this.equipment.inited)
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE);
        break
    }
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.activate = function() {
    if (this.parent && this.equipment.input && this.panels.path == "equipment") {
        this.equipment.input.input = canvas.app.manor.view.input10
    } else {
        this.deactivate()
    }
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.deactivate = function() {
    if (this.equipment.input) {
        this.equipment.input.input = null
    }
}
;
canvas.app.manor.view.controls.HuntCampWin.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    if (this.equipment.input) {
        this.equipment.input.input = null
    }
}
;
canvas.app.manor.view.controls.LabourWin = function(t) {
    canvas.app.manor.view.WindowManorBase.call(this, 461, 496, canvas.Translator.getText(157) + ":");
    if (t == undefined)
        t = false;
    this.header.hAlign = "left";
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.allRequests = new canvas.app.manor.view.controls.AllRequests;
    if (t) {
        this.panel = new canvas.app.manor.view.controls.elements.Panels([this.allRequests],["all"],[canvas.Translator.getText(158)],null,null,100)
    } else {
        this.myRequests = new canvas.app.manor.view.controls.MyRequests;
        this.panel = new canvas.app.manor.view.controls.elements.Panels([this.allRequests, this.myRequests],["all", "my"],[canvas.Translator.getText(158), canvas.Translator.getText(159)],null,null,100)
    }
    this.panel.setSize(415, 440);
    this.container.addChild(this.panel);
    this.panel.position.set(22, 10);
    if (canvas.app.manor.model.mapMode) {
        this.position.set(30, 70)
    }
}
;
canvas.app.manor.view.controls.LabourWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.LabourWin.prototype.show = function(t) {
    this.panel.path = "my";
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t)
}
;
canvas.app.manor.view.controls.LabourWin.prototype.update = function(t) {
    if (t == undefined)
        t = 0;
    var e = canvas.app.manor.model;
    this.allRequests.fieldTitle.text = canvas.Translator.getText(160) + " <b>" + e.user.labour + "</b> " + canvas.Translator.getText(161);
    this.allRequests.update();
    if (this.myRequests) {
        this.myRequests.fieldTitle.text = this.allRequests.fieldTitle.text;
        this.myRequests.update()
    }
}
;
canvas.app.manor.view.controls.MarketWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 461, 496, canvas.Translator.getText(173) + ":");
    this.header.hAlign = "left";
    this.header.field.x += 20;
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.buyArea = new canvas.app.manor.view.controls.BuyArea;
    this.sellArea = new canvas.app.manor.view.controls.SellArea;
    this.panel = new canvas.app.manor.view.controls.elements.Panels([this.buyArea, this.sellArea],["buy", "sell"],[canvas.Translator.getText(174), canvas.Translator.getText(175)],null,null,100);
    this.panel.setSize(415, 440);
    this.container.addChild(this.panel);
    this.panel.position.set(22, 10);
    if (canvas.app.manor.model.mapMode) {
        this.position.set(30, 70)
    }
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panel, this.pathHandler, this)
}
;
canvas.app.manor.view.controls.MarketWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.MarketWin.prototype.show = function(t) {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t);
    this.panel.path = "buy";
    this.sellArea.input.input = canvas.app.manor.view.input;
    this.sellArea.input.input.text = "10"
}
;
canvas.app.manor.view.controls.MarketWin.prototype.hide = function(t) {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t);
    this.sellArea.input.input = null
}
;
canvas.app.manor.view.controls.MarketWin.prototype.activate = function(t) {
    if (this.panel.path == "sell") {
        this.sellArea.input.input = canvas.app.manor.view.input
    }
    canvas.app.manor.view.WindowManorBase.prototype.activate.call(this, t)
}
;
canvas.app.manor.view.controls.MarketWin.prototype.deactivate = function(t) {
    this.sellArea.input.input = null;
    canvas.app.manor.view.WindowManorBase.prototype.deactivate.call(this, t)
}
;
canvas.app.manor.view.controls.MarketWin.prototype.pathHandler = function(t) {
    switch (this.panel.path) {
    case "buy":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS);
        this.sellArea.input.input = null;
        break;
    case "sell":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS2);
        this.sellArea.input.input = canvas.app.manor.view.input;
        break
    }
}
;
canvas.app.manor.view.controls.Menu = function(t) {
    this._showed = true;
    Object.defineProperty(this, "showed", {
        get: function() {
            return this._showed
        },
        set: function(t) {
            this._showed = t;
            this.updatePos()
        }
    });
    canvas.px.Container.call(this);
    if (t == undefined || isNaN(t))
        t = true;
    this._width = 250;
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(-17, 0);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back")));
    this.button.position.set(this._width - 35, 80);
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow")));
    this.arrow.position.set(14, 21);
    this.hint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.button,
        params: new canvas.utils.HintParams(this.hint)
    });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.back = this.container.addChild(new canvas.px.RoundRect(0,.5,this._width,200,5,5));
    this.msk = this.addChild(new canvas.px.Mask(this.back.width,this.back.height));
    this.msk.position.set(this.container.x, this.container.y);
    this.container.mask = this.msk;
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list.position.set(6, 10);
    this.list._paddingV = 0;
    var e = new canvas.px.Sprite(canvas.px.TextureEmpty);
    var a = new canvas.px.Sprite(canvas.px.TextureEmpty);
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "menu_scroll_drag"));
    i.setSize = function() {}
    ;
    var s = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,e,a,new canvas.px.Mask(6,100,0,.6),i,this);
    s.padding = 13;
    s.backPadding = 20;
    s.step = 30;
    s.setSize(5);
    this.list.scrollPadding = -20;
    this.list.scrollMaxAdd = 10;
    this.list.scroll = s;
    this.showed = t;
    this.container.x = this.targetPos
}
;
canvas.app.manor.view.controls.Menu.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.Menu.prototype.updatePos = function() {
    if (!this.button)
        return;
    if (this.showed) {
        this.addChildAt(this.msk, 0);
        this.addChildAt(this.container, 0);
        this.arrow.scale.x = 1;
        this.arrow.x = 14;
        this.hint.update(canvas.Translator.getText(188));
        this.targetPos = -15
    } else {
        this.arrow.scale.x = -1;
        this.arrow.x = 29;
        this.hint.update(canvas.Translator.getText(189));
        this.targetPos = this._width
    }
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.manor.view.controls.Menu.prototype.update = function(t, e, a) {
    if (a == undefined)
        a = canvas.app.manor.Event.SELECT_BUILDING;
    this.list.clear(false);
    var i, s, n, r = t.length;
    for (i = 0; i < r; i++) {
        n = new canvas.app.manor.view.MenuItemRenderer({
            title: t[i],
            link: e[i].toString(),
            event: a
        });
        this.list.add(n, false)
    }
    this.list.update()
}
;
canvas.app.manor.view.controls.Menu.prototype.resize = function() {
    var t = canvas.app.manor.model.height;
    this.list.setSize(this._width, t - 80);
    this.back.h = this.list.container.height + 18;
    this.msk.setSize(-1, this.back.h);
    this.button.y = Math.round(this.back.h * .5) - 40
}
;
canvas.app.manor.view.controls.Menu.prototype.buttonClickHandler = function() {
    this.showed = !this.showed;
    canvas.app.manor.model.localStorage.set("menuOpened", this.showed ? "1" : "0")
}
;
canvas.app.manor.view.controls.Menu.prototype.frameHandler = function() {
    if (this.container.x != this.targetPos) {
        if (this.container.x < this.targetPos) {
            this.container.x = Math.min(this.container.x + 30, this.targetPos)
        } else {
            this.container.x = Math.max(this.container.x - 30, this.targetPos)
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this);
        if (!this.showed) {
            this.removeIfExist(this.container);
            this.removeIfExist(this.msk)
        }
    }
}
;
canvas.app.manor.view.controls.MessageWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166);
    this.messageField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,250,70,"center","middle");
    this.messageField.position.set(40, 40);
    this.addChild(this.messageField);
    this.okButton = new canvas.app.view.MainButton;
    this.okButton.setTitle(canvas.Translator.getText(2018));
    this.okButton.setSize(120);
    this.okButton.position.set(Math.round(this.width * .5 - this.okButton.width * .5), 105);
    this.addChild(this.okButton)
}
;
canvas.app.manor.view.controls.MessageWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.MessageWindow.prototype.clickHandler = function(t) {
    if (canvas.Functions.findParent(this.okButton, t.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
    }
    canvas.px.Window.prototype.clickHandler.call(this, t)
}
;
canvas.app.manor.view.controls.MessageWindow.prototype.init = function(t, e) {
    if (e != undefined)
        this.okButton.setTitle(e);
    this.messageField.text = t
}
;
canvas.app.manor.view.controls.MyRequests = function() {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.listContainer = new canvas.px.Container;
    this.addChild(this.container);
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(20, 64);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,400,18,"center");
    this.fieldTitle.position.set(6, 17);
    this.container.addChild(this.fieldTitle);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,73,18,"center");
    t.position.set(9, 39);
    t.text = canvas.Translator.getText(106);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left");
    t.position.set(174, 39);
    t.text = canvas.Translator.getText(162);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,94,18,"center");
    t.position.set(230, 39);
    t.text = canvas.Translator.getText(107);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center");
    t.position.set(300, 39);
    t.text = canvas.Translator.getText(155);
    this.container.addChild(t);
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list.position.set(20, 60);
    this.list.setSize(380, 330);
    this.createButton = new canvas.app.view.MainButton;
    this.createButton.setTitle(canvas.Translator.getText(163));
    this.createButton.setSize(180);
    this.container.addChild(this.createButton);
    this.createButton.position.set(18, 390);
    this.cancelButton = new canvas.app.view.MainButton;
    this.cancelButton.setTitle(canvas.Translator.getText(156));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 390);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this.cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.createButton, this.createClickHandler, this)
}
;
canvas.app.manor.view.controls.MyRequests.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.MyRequests.prototype.update = function() {
    var t = canvas.app.manor.model;
    this.list.clear(false);
    var e, a, i;
    var s, n = t.user.requests.length;
    for (s = 0; s < n; s++) {
        e = t.user.requests[s];
        a = t.user.buildings[e.building];
        if (!a)
            continue;
        i = t.buildings[a.name][a.level + 1];
        if (!i)
            continue;
        this.list.add(new canvas.app.manor.view.controls.elements.MyRequestLine(e), false)
    }
    this.list.update()
}
;
canvas.app.manor.view.controls.MyRequests.prototype.cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_CONFIG)
}
;
canvas.app.manor.view.controls.MyRequests.prototype.createClickHandler = function(t) {
    var e = canvas.app.manor.model;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, e.selectedBuilding == "" ? {} : {
        params: e.selectedBuilding
    })
}
;
canvas.app.manor.view.controls.PortalResetWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307, canvas.Translator.getText(263));
    this.container = this.addChild(new canvas.px.Container);
    this.titleField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7092268,300,20,"center"));
    this.titleField.text = canvas.Translator.getText(260);
    this.titleField.position.set(10, 40);
    this.cooldown = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200));
    this.cooldown.position.set(65, 60);
    this.buyButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(266),6));
    this.buyButton.position.set(20, 250);
    this.goButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(267),7));
    this.goButton.position.set(160, 250);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.goButton, this.goClickHandler, this)
}
;
canvas.app.manor.view.controls.PortalResetWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.PortalResetWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    var e = t.portalRebindTime - Math.round(Date.now() * .001);
    this.cooldown.setLabour(e, t.portalRebindCooldown);
    this.cooldown.setTitle(canvas.Functions.formatDate(e * 1e3, "00", 2, true));
    if (this.cementInput)
        this.cementInput.destroy();
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput(t.portalResetItem));
    this.cementInput.position.set(80, 110);
    this.cementInput.update(1, t.portalResetItem.count2);
    this.goButton.enabled = t.portalResetItem.count2 > 0
}
;
canvas.app.manor.view.controls.PortalResetWin.prototype.updateLight = function() {
    this.cementInput.update()
}
;
canvas.app.manor.view.controls.PortalResetWin.prototype.buyClickHandler = function() {
    canvas.Functions.navigateToURL("area_store.php?source=premium&mode=store", "_self")
}
;
canvas.app.manor.view.controls.PortalResetWin.prototype.goClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, {
        object: {
            building_action: "reset_bind_timer"
        }
    });
    this.close()
}
;
canvas.app.manor.view.controls.SellArea = function() {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.listContainer = new canvas.px.Container;
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(10, 204);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,235,48,"left");
    this.container.addChild(this.fieldTitle);
    this.fieldTitle.position.set(172, 31);
    this.label0 = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,70,18,"right");
    this.container.addChild(this.label0);
    this.label0.position.set(7, 39);
    this.label0.text = "<b>" + canvas.Translator.getText(121) + ":</b> <img src='money_gold' atlas='ui' yOffset='1'/>";
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7092753,403,18,"center");
    this.container.addChild(t);
    t.position.set(5, 152);
    t.text = canvas.Translator.getText(122) + ":";
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left");
    this.container.addChild(t);
    t.position.set(65, 179);
    t.text = canvas.Translator.getText(123);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center");
    this.container.addChild(t);
    t.position.set(313, 179);
    t.text = canvas.Translator.getText(121);
    var e = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "line_0"),1,0,1,0);
    this.container.addChild(e);
    e.width = 381;
    e.position.set(15, 142);
    this.pager = new canvas.app.manor.view.controls.elements.Pager;
    this.container.addChild(this.pager);
    this.pager.position.set(207, 385);
    this.pager.visible = false;
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    var a;
    var i = 0;
    var s;
    var n = [];
    for (a = 0; a < canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT; a++) {
        s = new canvas.app.manor.view.controls.elements.WorkRequestLine(a,n,"money_gold");
        s.visible = false;
        n.push(s.check);
        this.listContainer.addChild(s);
        s.y = i;
        i += 29;
        s.check.visible = false;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, s.check, this._itemClickHandler, this)
    }
    this.input = new canvas.app.manor.view.controls.elements.Input(canvas.app.manor.view.input,true,45);
    this.container.addChild(this.input);
    this.input.onlyNumbers = true;
    this.input.maxChars = 10;
    this.input.text = "10";
    this.sellButton = new canvas.app.view.MainButton;
    this.sellButton.setTitle(canvas.Translator.getText(124));
    this.sellButton.setSize(180);
    this.container.addChild(this.sellButton);
    this.sellButton.position.set(18, 90);
    this.cancelButton = new canvas.app.view.MainButton;
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 90);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.sellButton, this._sellClickHandler, this);
    this.hideSellView()
}
;
canvas.app.manor.view.controls.SellArea.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.SellArea.prototype._pagerHandler = function(t) {
    this.requestCurPage = this.pager.currentPage;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS2)
}
;
canvas.app.manor.view.controls.SellArea.prototype._updateList = function() {
    var t;
    var e;
    var a;
    var i = 0;
    for (t = 0; t < canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT; t++) {
        e = this._requests[t];
        a = this.listContainer.getChildAt(i);
        a.check.checked = i == 0;
        a.data = e;
        if (e != null) {
            a.visible = true
        } else {
            a.visible = false
        }
        i++
    }
}
;
canvas.app.manor.view.controls.SellArea.prototype.update = function(t, e, a, i, s) {
    if (s == undefined)
        s = true;
    this._requests = t;
    this._requestNumPages = e;
    if (this._requestNumPages > 1) {
        this.pager.init(this._requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT);
        this.pager.currentPage = this.requestCurPage;
        this.pager.visible = true
    } else {
        this.pager.visible = false
    }
    this.fieldTitle.text = "<b>" + canvas.Translator.getText(127) + ":</b> " + a + "<br/><b>" + canvas.Translator.getText(128) + ":</b> " + i;
    this._updateList();
    if (s) {
        this.showSellView()
    } else {
        this.hideSellView()
    }
}
;
canvas.app.manor.view.controls.SellArea.prototype.showSellView = function() {
    this.label0.visible = true;
    this.input.visible = true;
    this.sellButton.visible = true;
    this.cancelButton.visible = true;
    this.input.position.set(86, 36)
}
;
canvas.app.manor.view.controls.SellArea.prototype.hideSellView = function() {
    this.label0.visible = false;
    this.input.visible = false;
    this.sellButton.visible = false;
    this.cancelButton.visible = false;
    this.input.position.set(86, -2e3)
}
;
canvas.app.manor.view.controls.SellArea.prototype._cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_MARKET)
}
;
canvas.app.manor.view.controls.SellArea.prototype._sellClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        text: canvas.Translator.getText(126) + "?",
        event: {
            name: canvas.app.manor.Event.SELL_AREA
        }
    })
}
;
canvas.app.manor.view.controls.ThroneRoom = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 1054, 356, canvas.Translator.getText(254));
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(25, 35);
    this.back = this.container.addChild(new canvas.ui.Image);
    this.back.interactive = true;
    this.back.click = this.backClickHandler.bind(this);
    this.throneRoom = this.container.addChild(new canvas.app.manor.view.controls.throne.ThroneRoomView);
    this.viewButton = this.container.addChild(new canvas.app.view.MainButton);
    this.viewButton.setSize(200);
    this.viewButton.setTitle(canvas.Translator.getText(1500));
    this.viewButton.position.set(0, canvas.app.manor.Const.THRONE_ROOM_HEIGHT - 40);
    this.tabsPanel = new canvas.app.manor.view.controls.throne.ItemsWindow;
    var t = this.toGlobal(new canvas.px.Point(canvas.app.manor.Const.THRONE_ROOM_WIDTH - this.tabsPanel.width - 20,20));
    this.tabsPanel.position.set(t.x, t.y);
    var e = this.addChild(new canvas.px.Mask(canvas.app.manor.Const.THRONE_ROOM_WIDTH,canvas.app.manor.Const.THRONE_ROOM_HEIGHT));
    e.position.set(this.container.x, this.container.y);
    this.container.mask = e;
    if (canvas.app.manor.model.throneRoomData.guestMode) {
        this.container.interactiveChildren = false
    }
    this.preloader = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader"));
    this.preloader.gotoAndStop(1);
    this.preloader.position.set(Math.round(canvas.app.manor.Const.THRONE_ROOM_WIDTH * .5) + 25, Math.round(canvas.app.manor.Const.THRONE_ROOM_HEIGHT * .5) + 25);
    this.throneRoom.interactive = true;
    this.throneRoom.click = this.throneClickHandler.bind(this);
    this.container.interactive = true;
    this.container.click = this.containerClickHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.tabsPanel.panels, this.pathHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.viewButton, this.viewClickHandler, this)
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ThroneRoom.prototype.update = function() {
    var t = canvas.app.manor.model.throneRoomData;
    if (!t.userData.items)
        return;
    this.back.setImage(t.userData.throneRoomBack);
    var e = t.userData.items.filter(t.filterActiveItems);
    var a;
    var i;
    var s;
    var n;
    var r = canvas.data.manor.throne.Prototypes.getTypePrototype(t.currentType);
    var o = t.userData.items.filter(t.filterTypeItems.bind(t));
    var l = t.shopItems.filter(t.filterTypeItems.bind(t));
    var c = new Array;
    s = e.length;
    for (i = 0; i < s; i++) {
        n = e[i];
        c.push(n.proto.type)
    }
    for (a in canvas.data.manor.throne.Prototypes.typePrototypes) {
        if (c.indexOf(parseInt(a)) < 0) {
            n = new canvas.data.manor.throne.ItemData(0);
            n.id = parseInt(a);
            e.push(n)
        }
    }
    if (t.watchMode) {
        canvas.utils.WindowsManager.instance.closeWindow(this.tabsPanel);
        this.viewButton.visible = false;
        this.throneRoom.bMode = false
    } else {
        this.throneRoom.bMode = true;
        if (t.currentType > 0 && (!r || !r.disabled)) {
            canvas.utils.WindowsManager.instance.openWindow(this.tabsPanel, false, false, false);
            if (this.tabsPanel.panels.path == "shop") {
                this.tabsPanel.data = l
            } else {
                this.tabsPanel.data = o
            }
        } else {
            canvas.utils.WindowsManager.instance.closeWindow(this.tabsPanel)
        }
        this.viewButton.visible = true
    }
    if (t.userData.redressItemID > 0) {
        var p = new canvas.data.manor.throne.ItemData(t.userData.redressItemID);
        s = e.length;
        if (s)
            for (i = 0; i < s; i++) {
                n = e[i];
                if (n.proto.type == p.proto.type || !n.artikulID && n.id == p.proto.type) {
                    e.splice(i, 1);
                    break
                }
            }
        e.push(p)
    }
    e.sort(t.compareItemDataIndex);
    this.throneRoom.data = e;
    if (this.preloader) {
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.progressHandler, this);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this)
    }
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.progressHandler = function(t) {
    this.preloader.gotoAndStop(Math.round(t.params.progress))
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.progressHandler, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.preloader.destroy();
    this.preloader = null
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.throneClickHandler = function(t) {
    var e = canvas.Functions.findParentByName("item", t.target);
    if (e) {
        canvas.app.manor.model.throneRoomData.currentType = parseInt(e.data.artikulID > 0 ? e.data.proto.type : e.data.id);
        this.update()
    }
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.pathHandler = function() {
    if (this.tabsPanel.panels.path != "shop")
        canvas.app.manor.model.throneRoomData.userData.redressItemID = 0;
    this.update()
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.updateTime = function() {
    this.tabsPanel.updateTime();
    if (canvas.app.manor.model.throneRoomData.testExpiredItems())
        this.update()
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.containerClickHandler = function(t) {
    var e = canvas.app.manor.model.throneRoomData;
    if (e.watchMode && !e.guestMode) {
        e.watchMode = false;
        this.update()
    }
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.backClickHandler = function(t) {
    var e = canvas.app.manor.model.throneRoomData;
    if (!e.watchMode && !e.guestMode) {
        e.currentType = 0;
        this.update()
    }
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.viewClickHandler = function(t) {
    t.params.stopPropagation();
    var e = canvas.app.manor.model.throneRoomData;
    e.watchMode = true;
    e.currentType = 0;
    this.update()
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    this.throneRoom.stopAndPlay()
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.hide = function() {
    canvas.utils.WindowsManager.instance.closeAllWindows();
    canvas.app.manor.model.throneRoomData.currentType = 0;
    this.update();
    this.throneRoom.stopAndPlay(true)
}
;
canvas.app.manor.view.controls.ThroneRoom.prototype.activate = function() {
    if (this.tabsPanel.parent) {
        this.tabsPanel.parent.addChild(this.tabsPanel)
    }
}
;
canvas.app.manor.view.controls.Upgrade = function() {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container);
    this.fieldTopTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,394,18,"center"));
    this.fieldTopTitle.position.set(12, 14);
    this.fieldBack = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7026733,138,18,"left"));
    this.fieldBack.position.set(412, 90);
    this.fieldBack.text = canvas.Translator.getText(233);
    this.requiresField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,394,18,"center"));
    this.requiresField.position.set(10, 67);
    this.requiresField.text = canvas.Translator.getText(144) + ":";
    this.labourInput = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourInput);
    this.labourInput.position.set(23, 90);
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput);
    this.cementInput.position.set(220, 90);
    var t = new Object;
    t.back = "labour3_progress_back";
    t.front = "labour3_progress";
    t.font = canvas.Const.FONT_TAHOMA_10;
    t.color = 6499081;
    t.pos = new canvas.px.Point(16,9);
    t.textPos = new canvas.px.Point(0,0);
    this.labour = this.container.addChild(new canvas.app.manor.view.controls.elements.Labour(canvas.Translator.getText(176),t));
    this.labour.position.set(28, 30);
    this.labour.setLabour(0, 0);
    var e = 0;
    this.hireButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(177),1));
    this.hireButton.position.set(e, 220);
    e += Math.round(this.hireButton.width - 20);
    this.buyCementButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(109),2));
    this.buyCementButton.position.set(e, 220);
    e += Math.round(this.buyCementButton.width - 20);
    this.buildButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(178),3));
    this.buildButton.position.set(e, 220);
    e += Math.round(this.buildButton.width - 20);
    this.destroyButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(228),5));
    this.destroyButton.position.set(e, 220);
    this.backButton = this.addChild(new canvas.app.view.MainButton);
    this.backButton.setTitle(canvas.Translator.getText(232));
    this.backButton.setSize(120);
    this.backButton.position.set(410, 30);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hireButton, this.hireClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyCementButton, this.buyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.destroyButton, this.destroyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.backButton, this.backClickHandler, this)
}
;
canvas.app.manor.view.controls.Upgrade.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.Upgrade.prototype.setTitlePercent = function(t) {
    this.fieldTopTitle.text = canvas.Translator.getText(179) + " " + t + "%:"
}
;
canvas.app.manor.view.controls.Upgrade.prototype.changeHandler = function() {
    this.cementInput.update(this.labourInput.input.text);
    this.testRequires()
}
;
canvas.app.manor.view.controls.Upgrade.prototype.buildClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BUILD)
}
;
canvas.app.manor.view.controls.Upgrade.prototype.hireClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_LABOUR);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, canvas.app.manor.model.selectedBuilding == "" ? {} : {
        params: canvas.app.manor.model.selectedBuilding
    })
}
;
canvas.app.manor.view.controls.Upgrade.prototype.buyClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CEMENT)
}
;
canvas.app.manor.view.controls.Upgrade.prototype.destroyClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(229) + "?",
        object: {
            name: canvas.app.manor.Event.DESTROY_BUILDING
        }
    })
}
;
canvas.app.manor.view.controls.Upgrade.prototype.backClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING)
}
;
canvas.app.manor.view.controls.Upgrade.prototype.testRequires = function() {
    this.buildButton.enabled = this.labourInput.testRequires() && this.cementInput.testRequires()
}
;
canvas.app.manor.view.controls.Upgrade.prototype.clear = function() {
    this.labourInput.clear();
    this.cementInput.clear()
}
;
canvas.app.manor.view.controls.UseExp = function() {
    canvas.app.manor.view.UseBuilding.call(this);
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,391,18,"center"));
    this.title.position.set(12, 19);
    this.title.text = canvas.Translator.getText(129);
    this.description = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,360,56,"left"));
    this.description.position.set(27, 155);
    this.description.text = canvas.Translator.getText(132);
    this.leftLabel = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,100,18,"right"));
    this.leftLabel.position.set(45, 108);
    this.leftLabel.text = canvas.Translator.getText(130);
    this.rightLabel = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,100,18,"left"));
    this.rightLabel.position.set(265, 108);
    this.rightLabel.text = canvas.Translator.getText(131);
    this.exp = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360));
    this.exp.position.set(29, 40);
    this.exp.setLabour(0, 0);
    this.checker = this.addChild(new canvas.app.manor.view.controls.elements.Checker);
    this.checker.position.set(155, 110);
    this.checker.enabled = false;
    this.modeButton = this.addChild(new canvas.app.view.MainButton);
    this.modeButton.position.set(130, 220);
    this.modeButton.enabled = false;
    this.checkContainer = new canvas.px.Container;
    this.checkContainer.y = 190;
    this.checkContainer.interactiveChildren = false;
    this.radioArray = [];
    this.checkMoney = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray));
    this.radioArray.push(this.checkMoney);
    this.checkMoney.position.set(70, 0);
    this.coins = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,80,null,null,null,false,0,0));
    this.coins.position.set(32, 8);
    this.checkMoney.checked = true;
    this.checkEnergy = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray));
    this.radioArray.push(this.checkEnergy);
    this.checkEnergy.position.set(268, 0);
    this.energy = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy);
    this.energy.position.set(32, 8);
    this.orField = this.checkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,40,18,"center"));
    this.orField.position.set(180, 8);
    this.orField.text = canvas.Translator.getText(206);
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.checker, this.checkerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.modeButton, this.clickHandler, this)
}
;
canvas.app.manor.view.controls.UseExp.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseExp.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.update2(t.expCount, t.expMax, t.expDecrease, t.expUse, t.expCost)
}
;
canvas.app.manor.view.controls.UseExp.prototype.update2 = function(t, e, a, i, s) {
    this.exp.setLabour(t, e);
    this.checker.checked = a;
    if (i) {
        this.exp.filters = [];
        this.modeButton.setTitle(canvas.Translator.getText(133));
        this.removeIfExist(this.checkContainer);
        this.checker.enabled = true
    } else {
        this.exp.filters = [canvas.Functions.getBlackAndWhite()];
        this.modeButton.setTitle(canvas.Translator.getText(115));
        this.addChild(this.checkContainer);
        this.checker.enabled = false
    }
    this.coins.money = s * 100;
    this.energy.energy = Math.round(s / canvas.app.manor.Const.ENERGY_COURSE);
    this.coins.visible = !i;
    this.modeButton.enabled = true;
    this.checkContainer.interactiveChildren = true
}
;
canvas.app.manor.view.controls.UseExp.prototype.clickHandler = function() {
    var t = canvas.app.manor.model;
    this.clickAction(canvas.app.manor.Event.USE_EXP_ACTION, t.expUse, t.expCost)
}
;
canvas.app.manor.view.controls.UseExp.prototype.clickAction = function(t, e, a) {
    var i, s;
    if (e) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(134),
            object: {
                name: t,
                params: {
                    params: "store"
                }
            }
        })
    } else {
        if (this.checkEnergy.checked) {
            i = " <b>" + Math.round(a / canvas.app.manor.Const.ENERGY_COURSE) + "</b> <img src='energy_icon' yOffset='2' atlas='ui'/>"
        } else {
            s = canvas.Functions.getMoneyForText(a);
            i = " <b>" + s.value + "</b> <img src='" + s.icon + "' yOffset='2' atlas='ui'/>"
        }
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(135) + i,
            object: {
                name: t,
                params: {
                    params: "use",
                    flag: this.checkEnergy.checked
                }
            }
        })
    }
}
;
canvas.app.manor.view.controls.UseExp.prototype.checkerHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP_ACTION, null, {
        params: "set_direction",
        flag: this.checker.checked
    })
}
;
canvas.app.manor.view.controls.UseExp2 = function() {
    canvas.app.manor.view.controls.UseExp.call(this);
    this.removeChild(this.checker);
    this.removeChild(this.leftLabel);
    this.removeChild(this.rightLabel)
}
;
canvas.app.manor.view.controls.UseExp2.prototype = Object.create(canvas.app.manor.view.controls.UseExp.prototype);
canvas.app.manor.view.controls.UseExp2.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.update2(t.exp2Count, t.exp2Max, t.exp2Decrease, t.exp2Use, t.exp2Cost)
}
;
canvas.app.manor.view.controls.UseExp2.prototype.clickHandler = function() {
    var t = canvas.app.manor.model;
    this.clickAction(canvas.app.manor.Event.USE_EXP2_ACTION, t.exp2Use, t.exp2Cost)
}
;
canvas.app.manor.view.controls.UseExp2.prototype.checkerHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP2_ACTION, null, {
        params: "set_direction",
        flag: this.checker.checked
    })
}
;
canvas.app.manor.view.controls.UseHospital = function() {
    canvas.app.manor.view.UseBuilding.call(this);
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    t.position.set(0, 97);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,false,false,null,true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 40);
    var e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,204,20,"center"));
    e.position.set(107, 105);
    e.text = canvas.Translator.getText(180);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1));
    this.list.position.set(34, 15);
    this.list.setSize(350, 80);
    this.list._paddingH = -1;
    var a;
    for (var i = 0; i < canvas.app.manor.view.controls.UseHospital.ON_PAGE; i++) {
        a = new canvas.app.manor.view.controls.elements.Item;
        a.buttonMode = false;
        this.list.add(a, false)
    }
    this.list.update();
    this.targetItem = this.addChild(new canvas.app.manor.view.controls.elements.Item);
    this.targetItem.position.set(175, 135);
    this.getButton = this.addChild(new canvas.app.view.MainButton);
    this.getButton.position.set(137, 215);
    this.getButton.setTitle(canvas.Translator.getText(181));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.getButton, this.getClickHandler, this)
}
;
canvas.app.manor.view.controls.UseHospital.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseHospital.ON_PAGE = 5;
canvas.app.manor.view.controls.UseHospital.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.pager.max = t.hospitalItems.length - canvas.app.manor.view.controls.UseHospital.ON_PAGE;
    this.pager.current = 0;
    this.pagerHandler();
    this.targetItem.data = t.hospitalBuffItem;
    this.getButton.enabled = t.hospitalBuffItem.time == 0
}
;
canvas.app.manor.view.controls.UseHospital.prototype.pagerHandler = function() {
    var t = canvas.app.manor.model;
    var e, a, i = 0;
    for (var s = this.pager.current; s < this.pager.current + canvas.app.manor.view.controls.UseHospital.ON_PAGE; s++) {
        e = this.list.items[i++];
        a = t.hospitalItems[s];
        e.data = a
    }
}
;
canvas.app.manor.view.controls.UseHospital.prototype.getClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HOSPITAL_ACTION)
}
;
canvas.app.manor.view.controls.UseKennel = function() {
    canvas.app.manor.view.UseBuilding.call(this);
    this.defaultBot = parseInt(canvas.app.manor.model.localStorage.get("kennelBot"));
    var t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 390;
    t.height = 80;
    t.position.set(12, 10);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    t.position.set(21, 20);
    this.image = this.addChild(new canvas.ui.Image);
    this.image.position.set(21, 20);
    this.image.scale.set(1.2, 1.2);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")));
    t.position.set(15, 15);
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,4594699,300,40,"left"));
    this.infoField.position.set(92, 44);
    this.infoField._lineSpace = 5;
    this.leftButton = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,true));
    this.leftButton.setSize(170);
    this.leftButton.position.set(5, 100);
    this.rightButton = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,true));
    this.rightButton.setSize(240);
    this.rightButton.position.set(170, 100);
    this.leftText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,4594699,170,18,"center"));
    this.leftText.position.set(5, 137);
    this.rightText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,4594699,170,18,"center"));
    this.rightText.position.set(205, 137);
    this.rightText.text = canvas.Translator.getText(288);
    this.combo = this.addChild(new canvas.app.manor.view.controls.elements.Combo(305,96));
    this.combo.position.set(90, 15);
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360));
    this.progress.position.set(27, 165);
    this.progress.removeChild(this.progress.tf);
    t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 390;
    t.height = 30;
    t.position.set(12, 210);
    this.bottomText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_12_BOLD,4594699,370,18,"left"));
    this.bottomText.position.set(20, 218);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftButton, this.leftClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightButton, this.rightClickHandler, this)
}
;
canvas.app.manor.view.controls.UseKennel.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseKennel.prototype.comboSelectHandler = function() {
    var t = parseInt(this.combo.selectedItem.id);
    if (t > 0 && t != this.defaultBot) {
        canvas.app.manor.model.localStorage.set("kennelBot", t.toString());
        this.defaultBot = t
    }
    this.updateMonsterView()
}
;
canvas.app.manor.view.controls.UseKennel.prototype.updateMonsterView = function() {
    var t = canvas.app.manor.model;
    var e = t.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    if (e) {
        this.infoField.text = canvas.Translator.getText(286) + "<br/><img src='money_silver' yOffset='1' atlas='ui'/> <b>" + e.moneyMin + "-" + e.moneyMax + "</b>   " + canvas.Translator.getText(142) + ": <b>" + e.exp + "</b>";
        this.image.setImage(e.picture);
        this.leftButton.setTitle(canvas.Translator.getText(290) + "  <img src='money_silver' yOffset='2' xOffset='-2' atlas='ui'/>" + e.price);
        this.rightButton.setTitle(canvas.Translator.getText(291) + "  <img src='money_silver' yOffset='2' xOffset='-2' atlas='ui'/>" + e.price * 10 + "  <img src='money_crystal' yOffset='2' xOffset='-2' atlas='ui'/>" + t.kennelData.killPriceExt)
    } else {
        this.image.clear();
        this.infoField.text = canvas.Translator.getText(286) + "<br/><img src='money_silver' yOffset='1' atlas='ui'/> <b>0</b>   " + canvas.Translator.getText(142) + ": <b>0</b>"
    }
    this.updateButtonsEnabled()
}
;
canvas.app.manor.view.controls.UseKennel.prototype.updateButtonsEnabled = function() {
    if (!this.combo.selectedItem)
        return;
    var t = canvas.app.manor.model;
    var e = t.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    var a, i;
    if (!this.lockBeforeUpdate && e && t.kennelData.getFinishTime() < t.serverTime.getTime()) {
        a = t.kennelData.canKillTotal && t.kennelData.canKill;
        i = t.kennelData.canKillTotal > 9
    } else {
        a = false;
        i = false
    }
    if (this.leftButton.enabled != a)
        this.leftButton.enabled = a;
    if (this.rightButton.enabled != i)
        this.rightButton.enabled = i
}
;
canvas.app.manor.view.controls.UseKennel.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.lockBeforeUpdate = false;
    var e = new Array;
    var a, i = t.kennelData.bots.length;
    e.push({
        id: 0,
        title: canvas.Translator.getText(289)
    });
    for (a = 0; a < i; a++) {
        e.push({
            id: parseInt(t.kennelData.bots[a].id),
            title: t.kennelData.bots[a].nick
        })
    }
    this.combo.init(e);
    if (this.defaultBot)
        this.combo.setSelectedItem("id", this.defaultBot);
    this.leftText.text = canvas.Translator.getText(287) + ": <b><font color='#c20000'>" + t.kennelData.canKill + "</font></b>";
    this.bottomText.text = canvas.Translator.getText(507) + ": <b>" + t.kennelData.canKillTotal + "</b>";
    this.updateMonsterView();
    this.updateTime()
}
;
canvas.app.manor.view.controls.UseKennel.prototype.leftClickHandler = function() {
    var t = canvas.app.manor.model.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    if (t) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_ACTION, null, {
            object: {
                building_action: "use",
                kennel_bot_id: t.id,
                big_hunt: 0
            }
        });
        this.lockBeforeUpdate = true;
        this.updateButtonsEnabled()
    }
}
;
canvas.app.manor.view.controls.UseKennel.prototype.rightClickHandler = function() {
    var t = canvas.app.manor.model.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    if (t) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_ACTION, null, {
            object: {
                building_action: "use",
                kennel_bot_id: t.id,
                big_hunt: 1
            }
        });
        this.lockBeforeUpdate = true;
        this.updateButtonsEnabled()
    }
}
;
canvas.app.manor.view.controls.UseKennel.prototype.updateTime = function() {
    var t = canvas.app.manor.model;
    if (t.serverTime.getTime() > t.kennelData.getFinishTime()) {
        this.progress.setLabour(1, 1)
    } else {
        this.progress.setLabour(this.progress.progress == 1 ? 0 : t.serverTime.getTime() - t.kennelData.getStartTime(), t.kennelData.getFinishTime() - t.kennelData.getStartTime())
    }
    this.updateButtonsEnabled()
}
;
canvas.app.manor.view.controls.UseMine = function(t) {
    canvas.app.manor.view.UseBuilding.call(this);
    this.make = t;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    e.position.set(0, 97);
    this.title = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,204,20,"center"));
    this.title.position.set(107, 105);
    this.hint = new canvas.app.view.MappingHint;
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list.position.set(20, 135);
    this.list.setSize(350, 120);
    this.list._paddingV = 0;
    var a;
    for (var i = 0; i < canvas.app.manor.view.controls.UseMine.ON_PAGE; i++) {
        a = new canvas.app.manor.view.controls.elements.TaskItem2;
        this.list.add(a, false)
    }
    this.list.update();
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,true,true,this.list));
    this.pager.setSize(20, 120);
    this.pager.position.set(375, 135);
    e = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    e.width = e.height = 85;
    e.position.set(this.make ? 20 : 100, 8);
    if (this.make) {
        this.arrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_arrow")));
        this.arrow.position.set(109, 3)
    }
    this.button = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,true));
    this.button.position.set(this.make ? 120 : 200, 30);
    this.button.setSize(170);
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(true));
    this.item.position.set(this.make ? 27 : 107, 15);
    if (this.make) {
        e = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
        e.width = e.height = 85;
        e.position.set(310, 8);
        this.item2 = this.addChild(new canvas.app.manor.view.controls.elements.Item(true));
        this.item2.position.set(317, 15);
        this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(238))
    }
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
;
canvas.app.manor.view.controls.UseMine.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseMine.ON_PAGE = 4;
canvas.app.manor.view.controls.UseMine.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.updateRequests();
    this.pager.current = 0;
    this.item.data = t.craftData.item;
    if (this.item2 != null)
        this.item2.data = t.craftData.item2;
    this.button.setTitle(canvas.Translator.getText(this.make ? 236 : 235) + " " + t.craftData.price + " <img src='energy_icon' atlas='ui' yOffset='1'/>");
    this.button.enabled = t.craftData.requests.length + t.craftData.requestsCompleted.length < t.craftData.queueSizeMax;
    if (this.arrow != null)
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
            target: this.button
        });
    if (this.make && t.craftData.materialCount < t.craftData.item.count) {
        this.button.enabled = false;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
            target: this.button,
            params: new canvas.utils.HintParams(this.hint)
        })
    }
    this.title.text = canvas.Translator.getText(191) + " <b>(" + t.craftData.requests.length.toString() + "/" + t.craftData.queueSizeMax.toString() + ")</b>"
}
;
canvas.app.manor.view.controls.UseMine.prototype.pagerHandler = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s = 0;
    for (e = this.pager.current; e < this.pager.current + canvas.app.manor.view.controls.UseMine.ON_PAGE; e++) {
        a = this.list.items[s++];
        i = t.craftData.requests[e];
        a.name = (e + 1).toString();
        a.data = i
    }
}
;
canvas.app.manor.view.controls.UseMine.prototype.updateRequests = function() {
    var t = canvas.app.manor.model.craftData.requests.length - canvas.app.manor.view.controls.UseMine.ON_PAGE;
    if (t != this.pager.max) {
        this.pager.max = t
    }
    this.pagerHandler()
}
;
canvas.app.manor.view.controls.UseMine.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_ACTION, null, {
        object: {
            building_action: "produce"
        }
    })
}
;
canvas.app.manor.view.controls.UseMake = function() {
    canvas.app.manor.view.controls.UseMine.call(this, true)
}
;
canvas.app.manor.view.controls.UseMake.prototype = Object.create(canvas.app.manor.view.controls.UseMine.prototype);
canvas.app.manor.view.controls.UseMine2 = function() {
    canvas.app.manor.view.UseBuilding.call(this);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,false,false,null,true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 40);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1));
    this.list.position.set(34, 15);
    this.list.setSize(350, 80);
    this.list._paddingH = -1;
    var t;
    for (var e = 0; e < canvas.app.manor.view.controls.UseMine2.ON_PAGE; e++) {
        t = new canvas.app.manor.view.controls.elements.Item(false);
        t.click = this.selectHandler.bind(this);
        t.buttonMode = false;
        this.list.add(t, false)
    }
    this.list.update();
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(192));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.selectHandler, this)
}
;
canvas.app.manor.view.controls.UseMine2.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseMine2.ON_PAGE = 5;
canvas.app.manor.view.controls.UseMine2.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    this.pager.max = canvas.app.manor.model.craftData.requestsCompleted.length - canvas.app.manor.view.controls.UseMine2.ON_PAGE;
    this.pager.current = 0;
    this.pagerHandler()
}
;
canvas.app.manor.view.controls.UseMine2.prototype.pagerHandler = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s;
    var n;
    var r = 0;
    for (e = this.pager.current; e < this.pager.current + canvas.app.manor.view.controls.UseMine2.ON_PAGE; e++) {
        a = this.list.items[r++];
        a.data = null;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
            target: a
        });
        s = t.craftData.requestsCompleted[e];
        if (s != null) {
            i = new canvas.data.manor.DItem;
            i.image = s.item.image;
            i.title = s.item.title;
            i.count = s.item.count;
            i.id = s.id;
            a.data = i;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
                target: a,
                params: new canvas.utils.HintParams(this.hint)
            })
        }
    }
}
;
canvas.app.manor.view.controls.UseMine2.prototype.selectHandler = function(t) {
    var e = t.currentTarget;
    if (e.data) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_ACTION, null, {
            object: {
                building_action: "pick",
                craft_id: e.data.id
            }
        })
    }
}
;
canvas.app.manor.view.controls.UseObelisk = function() {
    canvas.app.manor.view.UseBuilding.call(this);
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,391,18,"center"));
    this.title.position.set(12, 19);
    this.title.text = canvas.Translator.getText(136);
    this.description = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,360,56,"left"));
    this.description.position.set(27, 105);
    this.description.text = canvas.Translator.getText(137);
    this.valour = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360));
    this.valour.position.set(29, 40);
    this.valour.setLabour(0, 0);
    this.modeButton = this.addChild(new canvas.app.view.MainButton);
    this.modeButton.position.set(130, 190);
    this.modeButton.enabled = false;
    this.checkContainer = new canvas.px.Container;
    this.checkContainer.y = 160;
    this.checkContainer.interactiveChildren = false;
    this.radioArray = [];
    this.checkMoney = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray));
    this.radioArray.push(this.checkMoney);
    this.checkMoney.position.set(110, 0);
    this.coins = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,40,null,null,null,false,0,0));
    this.coins.position.set(32, 8);
    this.checkMoney.checked = true;
    this.checkEnergy = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray));
    this.radioArray.push(this.checkEnergy);
    this.checkEnergy.position.set(228, 0);
    this.energy = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy);
    this.energy.position.set(32, 8);
    this.orField = this.checkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,40,18,"center"));
    this.orField.position.set(180, 8);
    this.orField.text = canvas.Translator.getText(206);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.modeButton, this.clickHandler, this)
}
;
canvas.app.manor.view.controls.UseObelisk.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseObelisk.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.valour.setLabour(t.valourCount, t.valourMax);
    if (t.valourUse) {
        this.valour.filters = [];
        this.modeButton.setTitle(canvas.Translator.getText(133));
        this.removeIfExist(this.checkContainer)
    } else {
        this.valour.filters = [canvas.Functions.getBlackAndWhite()];
        this.modeButton.setTitle(canvas.Translator.getText(115));
        this.addChild(this.checkContainer)
    }
    this.coins.money = t.valourCost * 100;
    this.energy.energy = Math.round(t.valourCost / canvas.app.manor.Const.ENERGY_COURSE);
    this.coins.visible = !t.valourUse;
    this.modeButton.enabled = true;
    this.checkContainer.interactiveChildren = true
}
;
canvas.app.manor.view.controls.UseObelisk.prototype.clickHandler = function() {
    var t = canvas.app.manor.model;
    var e, a;
    if (t.valourUse) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(138),
            object: {
                name: canvas.app.manor.Event.USE_VALOUR_ACTION,
                params: {
                    params: "store"
                }
            }
        })
    } else {
        if (this.checkEnergy.checked) {
            e = " <b>" + Math.round(t.valourCost / canvas.app.manor.Const.ENERGY_COURSE) + "</b> <img src='energy_icon' yOffset='2' atlas='ui'/>"
        } else {
            a = canvas.Functions.getMoneyForText(t.valourCost);
            e = " <b>" + a.value + "</b> <img src='" + a.icon + "' yOffset='2' atlas='ui'/>"
        }
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(139) + e,
            object: {
                name: canvas.app.manor.Event.USE_VALOUR_ACTION,
                params: {
                    params: "use",
                    flag: this.checkEnergy.checked
                }
            }
        })
    }
}
;
canvas.app.manor.view.controls.UsePets = function() {
    this._curPage = 0;
    Object.defineProperty(this, "curPage", {
        get: function() {
            return this._curPage
        },
        set: function(t) {
            this._curPage = t < 0 ? 0 : t >= this._numPages ? this._numPages - 1 : t;
            if (this._numPages < 2) {
                this.leftArrow.visible = this.rightArrow.visible = false
            } else if (this._curPage == 0) {
                this.leftArrow.visible = false;
                this.rightArrow.visible = true
            } else if (this._curPage == this._numPages - 1) {
                this.rightArrow.visible = false;
                this.leftArrow.visible = true
            } else {
                this.leftArrow.visible = this.rightArrow.visible = true
            }
            var e, a = 0;
            var i;
            for (e = this._curPage; e < this._curPage + canvas.app.manor.view.controls.UsePets.ON_PAGE; e++) {
                i = this.pets[a++];
                i.data = this.sortedPetsData[e];
                i.selector.visible = e == this._selectedPet;
                i.interactive = i.data != null
            }
            this.testTraining()
        }
    });
    this._selectedPet = 0;
    Object.defineProperty(this, "selectedPet", {
        get: function() {
            return this._selectedPet
        },
        set: function(t) {
            this._selectedPet = t;
            var e;
            var a;
            var i;
            for (a = 0; a < canvas.app.manor.view.controls.UsePets.ON_PAGE; a++) {
                e = this.pets[a];
                e.selector.visible = false;
                e.interactive = e.data != null
            }
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
                target: this.trainButton
            });
            i = this.sortedPetsData[this.selectedPet];
            e = this.pets[this.selectedPet - this.curPage];
            if (i) {
                this.titleField.text = i.title + " [" + i.level + "]";
                if (this.titleField.textWidth > 190) {
                    a = i.title.length - 1;
                    while (this.titleField.textWidth > 190) {
                        this.titleField.text = i.title.substr(0, --a) + "... [" + i.level + "]"
                    }
                }
                this.exp.setLabour(i.exp, i.expUp);
                canvas.app.manor.model.selectedPet = i.id;
                if (!this.isTrainingNow)
                    this.trainButton.enabled = true;
                this.petView.update({
                    src: i.swf
                });
                if (i.error) {
                    this.hint.update(i.error);
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
                        target: this.trainButton,
                        params: new canvas.utils.HintParams(this.hint)
                    });
                    this.trainButton.enabled = false
                }
                if (e) {
                    e.selector.visible = true;
                    e.interactive = false;
                    this.list.container.setChildIndex(e, this.list.container.numChildren - 1)
                }
            } else {
                this.exp.setLabour(0, 0);
                this.titleField.text = "";
                canvas.app.manor.model.selectedPet = "";
                this.trainButton.enabled = false;
                this.petView.update()
            }
        }
    });
    canvas.app.manor.view.UseBuilding.call(this);
    this.isTrainingNow = false;
    this._numPages = 1;
    this.container = this.addChild(new canvas.px.Container);
    this.titleField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD,7026733,210,20,"left"));
    this.titleField.position.set(200, 10);
    this.descField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,394,35,"left"));
    this.descField.position.set(12, 220);
    this.petView = this.container.addChild(new canvas.animation.Pet(null,canvas.app.manor.Event.ENTER_FRAME));
    this.petView.position.set(11, 20);
    this.petTop = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_top")));
    this.petTop.position.set(12, 20);
    this.hint = new canvas.app.view.MappingHint;
    this.exp = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200));
    this.exp.position.set(195, 35);
    this.exp.setLabour(0, 0);
    var t = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 192;
    t.height = 54;
    t.position.set(200, 72);
    var e = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,40,18,"left"));
    e.position.set(212, 84);
    e.text = canvas.Translator.getText(723) + ":";
    this.infoField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,200,18,"left"));
    this.infoField.position.set(212, 106);
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1));
    this.list._paddingH = 3;
    this.list.container.x = 10;
    this.list.setSize(360, 80);
    this.list.position.set(30, 205);
    for (var a = 0; a < canvas.app.manor.view.controls.UsePets.ON_PAGE; a++) {
        this.list.add(new canvas.app.manor.view.controls.elements.PetItem, false)
    }
    this.list.update();
    this.pets = this.list.items;
    this.leftArrow = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.leftArrow.position.set(10, 225);
    this.rightArrow = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.rightArrow.position.set(408, 225);
    this.rightArrow.scale.x = -1;
    this.trainButton = this.container.addChild(new canvas.app.view.MainButton);
    this.trainButton.setTitle(canvas.Translator.getText(143));
    this.trainButton.position.set(222, 135);
    this.filterSortControl = new canvas.app.manor.view.controls.elements.FilterSortControlPets([new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_DEFAULT,canvas.Translator.getText(282)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TITLE,canvas.Translator.getText(283)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_LEVEL,canvas.Translator.getText(284)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_COLOR,canvas.Translator.getText(273))],"",canvas.app.manor.model.localStorage.get("sortTypePets"),canvas.app.manor.model.localStorage.get("sortDirectionPets") == "1",canvas.Translator.getText(281));
    this.addChild(this.filterSortControl);
    this.filterSortControl.position.set(250, 175);
    this.combo = this.container.addChild(new canvas.app.manor.view.controls.elements.Combo(110,96));
    this.combo.position.set(266, 79);
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.trainButton, this.trainClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightClickHandler, this)
}
;
canvas.app.manor.view.controls.UsePets.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UsePets.ON_PAGE = 5;
canvas.app.manor.view.controls.UsePets.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    if (!canvas.app.manor.model.petTrainingTypes)
        return;
    this.updateFilterAndSort();
    this.testTraining();
    this._numPages = this.sortedPetsData.length - canvas.app.manor.view.controls.UsePets.ON_PAGE + 1;
    if (this._numPages < 1)
        this._numPages = 1;
    this.curPage = this._curPage;
    if (this.sortedPetsData.length > 0) {
        this.container.interactiveChildren = true
    } else {
        this.container.interactiveChildren = false
    }
    this.selectedPet = this.selectedPet;
    var t;
    var e;
    var a = 0;
    var i = new Array;
    for (a = 0; a < 4; a++) {
        e = canvas.app.manor.model.petTrainingTypes[a];
        if (e != null) {
            i.push({
                title: canvas.Functions.getNumberName(e.duration, canvas.Translator.getText(2023), canvas.Translator.getText(2024), canvas.Translator.getText(140)),
                value: a
            })
        }
    }
    this.combo.init(i);
    this.comboSelectHandler();
    if (this.petView.pet)
        this.petView.pet.play()
}
;
canvas.app.manor.view.controls.UsePets.prototype.updateFilterAndSort = function() {
    var t = canvas.app.manor.model;
    if (!t.pets)
        return;
    var e = new Array;
    var a = t.pets.length, i, s, n;
    var r;
    for (s = 0; s < a; s++)
        e.push(t.pets[s]);
    if (this.filterSortControl.filterText.length > 2) {
        this.sortedPetsData = new Array;
        i = e.length;
        for (n = 0; n < i; n++) {
            r = e[n];
            if (r.title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) >= 0)
                this.sortedPetsData.push(r)
        }
    } else {
        this.sortedPetsData = e
    }
    switch (this.filterSortControl.sortType) {
    case canvas.data.manor.DSortData.TYPE_DEFAULT:
        this.sortedPetsData.sort(this.sortOnReadyAndLevel.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_TITLE:
        this.sortedPetsData.sort(this.sortOnTitle.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_LEVEL:
        this.sortedPetsData.sort(this.sortOnLevel.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_COLOR:
        this.sortedPetsData.sort(this.sortOnColor.bind(this));
        break;
    default:
        if (this.filterSortControl.sortDirection)
            this.sortedPetsData.reverse()
    }
}
;
canvas.app.manor.view.controls.UsePets.prototype.sortOnReadyAndLevel = function(t, e) {
    var a = t.error == "" ? 1 : 0;
    var i = e.error == "" ? 1 : 0;
    if (a > i) {
        return -1
    } else if (a < i) {
        return 1
    } else {
        if (t.level > e.level) {
            return this.filterSortControl.sortDirection ? -1 : 1
        } else if (t.level < e.level) {
            return this.filterSortControl.sortDirection ? 1 : -1
        } else {
            return 0
        }
    }
}
;
canvas.app.manor.view.controls.UsePets.prototype.sortOnLevel = function(t, e) {
    if (t.level > e.level) {
        return this.filterSortControl.sortDirection ? -1 : 1
    } else if (t.level < e.level) {
        return this.filterSortControl.sortDirection ? 1 : -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.UsePets.prototype.sortOnTitle = function(t, e) {
    if (t.title.toLowerCase() > e.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? -1 : 1
    } else if (t.title.toLowerCase() < e.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? 1 : -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.UsePets.prototype.sortOnColor = function(t, e) {
    if (t.color > e.color) {
        return this.filterSortControl.sortDirection ? -1 : 1
    } else if (t.color < e.color) {
        return this.filterSortControl.sortDirection ? 1 : -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.UsePets.prototype.filterChangeHandler = function() {
    canvas.app.manor.model.localStorage.set("sortTypePets", this.filterSortControl.sortType);
    canvas.app.manor.model.localStorage.set("sortDirectionPets", this.filterSortControl.sortDirection ? "1" : "0");
    this.update()
}
;
canvas.app.manor.view.controls.UsePets.prototype.testTraining = function() {
    var t;
    this.isTrainingNow = false;
    var e, a = canvas.app.manor.model.pets.length;
    for (e = 0; e < a; e++) {
        t = canvas.app.manor.model.pets[e];
        if (t.time > 0) {
            this.isTrainingNow = true;
            break
        }
    }
    var i;
    for (e = 0; e < canvas.app.manor.view.controls.UsePets.ON_PAGE; e++) {
        i = this.pets[e];
        if (this.isTrainingNow && i.data != null && i.data.time == 0) {
            i.alpha = .5
        } else {
            i.alpha = 1
        }
    }
    this.trainButton.enabled = !this.isTrainingNow
}
;
canvas.app.manor.view.controls.UsePets.prototype.comboSelectHandler = function() {
    var t = canvas.app.manor.model.petTrainingTypes[this.combo.selectedIndex];
    if (t) {
        this.infoField.text = canvas.Translator.getText(141) + ": " + t.feedCost + "   " + canvas.Translator.getText(142) + ": " + t.exp
    } else {
        this.infoField.text = ""
    }
}
;
canvas.app.manor.view.controls.UsePets.prototype.listSelectHandler = function(t) {
    this.selectedPet = this.sortedPetsData.indexOf(t.params.data)
}
;
canvas.app.manor.view.controls.UsePets.prototype.trainClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PETS_ACTION, null, {
        object: {
            pet: this.sortedPetsData[this.selectedPet].id,
            type: this.combo.selectedIndex
        }
    })
}
;
canvas.app.manor.view.controls.UsePets.prototype.leftClickHandler = function() {
    this.curPage--;
    this.selectedPet = this.selectedPet
}
;
canvas.app.manor.view.controls.UsePets.prototype.rightClickHandler = function() {
    this.curPage++;
    this.selectedPet = this.selectedPet
}
;
canvas.app.manor.view.controls.UsePortal = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.updateContent()
        }
    });
    canvas.app.manor.view.UseBuilding.call(this);
    this.portalList = this.addChild(new canvas.app.manor.view.controls.elements.PortalList);
    this.portalList.position.set(15, 0);
    var t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_7"),48,0,48,0));
    t.width = 330;
    t.position.set(40, 115);
    this.statusField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,4594699,320,20,"center"));
    this.statusField.position.set(40, 120);
    this.disabledField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7092268,320,20,"center"));
    this.disabledField.position.set(40, 177);
    this.disabledField.text = canvas.Translator.getText(258);
    this.enabledContainer = this.addChild(new canvas.px.Container);
    this.enabledContainer.position.set(17, 143);
    t = this.enabledContainer.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 380;
    t.height = 60;
    this.search = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.Input("left",false,210,null,null,null,canvas.Translator.getText(259),false));
    this.search.position.set(8, 6);
    this.search.maxChars = 30;
    this.search.paddingLeft = 16;
    this.search.topField.x += 16;
    this.search.topField.font = canvas.Const.FONT_TAHOMA_11;
    t = this.search.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "search_icon")));
    t.position.set(2, 3);
    this.titleField = this.enabledContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7092268,320,20,"left"));
    this.titleField.position.set(5, 7);
    this.titleField.text = canvas.Translator.getText(260);
    this.combo = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.Combo(210,96));
    this.combo.position.set(8, 30);
    this.actionButton = this.enabledContainer.addChild(new canvas.app.view.MainButton);
    this.actionButton.position.set(225, 22);
    this.actionButton.setSize(150);
    this.cooldown = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200));
    this.cooldown.position.set(8, 25);
    this.cooldown.setLabour(0, 0);
    this.cooldown.setTitle();
    this.confirmField = this.enabledContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9788490,180,40,"left"));
    this.confirmField.position.set(5, 74);
    this.confirmField.text = canvas.Translator.getText(264);
    this.confirmCheck = this.enabledContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "checker_back"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker_front"))));
    this.confirmCheck.position.set(190, 77);
    this.confirmCheck.checked = canvas.app.manor.model.localStorage.get("portalConfirm") != "1";
    this.locationButton = this.enabledContainer.addChild(new canvas.app.view.MainButton(null,null,null,null,null,true));
    this.locationButton.position.set(225, 70);
    this.locationButton.setSize(150);
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.portalList, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionButton, this.actionClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.locationButton, this.locationClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.confirmCheck, this.checkClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.search, this.inputSearchHandler, this)
}
;
canvas.app.manor.view.controls.UsePortal.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UsePortal.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.portalList.data = t.portals;
    var e = new Array;
    var a;
    var i = new Array;
    e.push({
        id: 0,
        title: canvas.Translator.getText(268),
        description: ""
    });
    var s, n = t.portalLocations.length;
    for (s = 0; s < n; s++) {
        if (t.portalLocations[s])
            i.push(t.portalLocations[s])
    }
    i.sort(function(t, e) {
        return t.name - e.name
    });
    n = i.length;
    for (s = 0; s < n; s++) {
        a = i[s];
        if (this.search.text == "" || a.title.toLowerCase().search(this.search.text.toLowerCase()) >= 0) {
            e.push({
                id: a.id,
                title: a.title,
                description: a.error
            })
        }
    }
    this.combo.init(e);
    if (t.portalJumpCost > 0) {
        this.locationButton.setTitle(canvas.Translator.getText(265) + " " + t.portalJumpCost + " <img src='energy_icon' atlas='ui' yOffset='2'/>")
    } else {
        this.locationButton.setTitle(canvas.Translator.getText(270))
    }
    this.changeHandler(null)
}
;
canvas.app.manor.view.controls.UsePortal.prototype.updateContent = function() {
    var t = canvas.app.manor.model;
    var e = t.portalRebindTime - Math.round(Date.now() * .001);
    this.disabledField.visible = false;
    this.addChild(this.enabledContainer);
    this.actionButton.enabled = true;
    var a;
    if (this.data) {
        a = t.portalLocations[this.data.locationID];
        switch (this.data.status) {
        case 1:
            this.statusField.text = a ? a.title : "";
            this.actionButton.setTitle(canvas.Translator.getText(262));
            break;
        case -1:
            this.statusField.text = canvas.Translator.getText(255);
            this.actionButton.setTitle(canvas.Translator.getText(261));
            break;
        default:
            this.statusField.text = canvas.Translator.getText(256) + " " + this.data.level + " " + canvas.Translator.getText(249);
            this.disabledField.visible = true;
            this.removeIfExist(this.enabledContainer)
        }
        this.cooldown.visible = this.titleField.visible = e > 0 && this.data.status == 1;
        if (this.cooldown.visible) {
            this.enabledContainer.removeIfExist(this.search);
            this.enabledContainer.removeIfExist(this.combo);
            this.actionButton.setTitle(canvas.Translator.getText(263));
            this.updateTime()
        } else {
            this.enabledContainer.addChild(this.search);
            this.enabledContainer.addChild(this.combo);
            this.actionButton.enabled = this.combo.selectedIndex > 0 && !this.combo.selectedItem.description
        }
        this.locationButton.enabled = this.data.status == 1
    }
}
;
canvas.app.manor.view.controls.UsePortal.prototype.select = function(t) {
    this.portalList.select(t)
}
;
canvas.app.manor.view.controls.UsePortal.prototype.changeHandler = function() {
    this.data = this.portalList.selectedItem
}
;
canvas.app.manor.view.controls.UsePortal.prototype.updateTime = function() {
    var t = canvas.app.manor.model;
    var e = t.portalRebindTime - Math.round(Date.now() * .001);
    if (e > 0) {
        this.cooldown.setLabour(e, t.portalRebindCooldown);
        this.cooldown.setTitle(canvas.Functions.formatDate(e * 1e3, "00", 2, true))
    } else {
        if (this.cooldown.visible)
            this.updateContent()
    }
}
;
canvas.app.manor.view.controls.UsePortal.prototype.actionClickHandler = function() {
    if (this.cooldown.visible) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_PORTAL_RESET)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, {
            object: {
                building_action: "bind",
                area_id: this.combo.selectedItem.id,
                number: this.data.level
            }
        })
    }
}
;
canvas.app.manor.view.controls.UsePortal.prototype.locationClickHandler = function() {
    var t = canvas.app.manor.model;
    if (this.confirmCheck.checked) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(269) + " <b>" + this.statusField.text + "</b>?<br/>" + canvas.Translator.getText(271) + " " + t.portalJumpCost + " <img src='energy_icon' atlas='ui' yOffset='2'/>",
            object: {
                name: canvas.app.manor.Event.USE_PORTAL_ACTION,
                params: {
                    object: {
                        building_action: "teleport",
                        number: this.data.level
                    }
                }
            }
        })
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, {
            object: {
                building_action: "teleport",
                number: this.data.level
            }
        })
    }
}
;
canvas.app.manor.view.controls.UsePortal.prototype.checkClickHandler = function() {
    canvas.app.manor.model.localStorage.set("portalConfirm", this.confirmCheck.checked ? "" : "1")
}
;
canvas.app.manor.view.controls.UsePortal.prototype.comboSelectHandler = function() {
    this.updateContent()
}
;
canvas.app.manor.view.controls.UsePortal.prototype.inputSearchHandler = function() {
    this.update();
    this.combo.open()
}
;
canvas.app.manor.view.controls.UsePortal.prototype.activate = function() {
    this.isActive = true;
    this.search.input = canvas.app.manor.view.input6
}
;
canvas.app.manor.view.controls.UsePortal.prototype.deactivate = function() {
    this.isActive = false;
    this.search.input = null
}
;
canvas.app.manor.view.controls.UseWorkshop = function() {
    this._favoriteEnabled = false;
    Object.defineProperty(this, "favoriteEnabled", {
        get: function() {
            return this._favoriteEnabled
        },
        set: function(t) {
            this._favoriteEnabled = t;
            this.favoriteButton.baseTexture = this.favoriteButton.sprite.texture = canvas.ResourceLoader.getImage("ui", "favorite" + (t ? "" : "_disabled"));
            this.favoriteHint.update(canvas.Translator.getText(t ? 245 : 244));
            this.update()
        }
    });
    canvas.app.manor.view.UseBuilding.call(this);
    this.lastComboSelected = "";
    this.lastSearchValue = "";
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    t.position.set(0, 97);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,false,false,null,true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 160);
    t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 384;
    t.height = 80;
    t.position.set(15, 30);
    t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"),37,0,37,0));
    t.width = 220;
    t.position.set(97, 97);
    var e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,204,20,"center"));
    e.position.set(107, 105);
    e.text = canvas.Translator.getText(144);
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,132,18,"center"));
    e.position.set(143, 10);
    e.text = canvas.Translator.getText(145);
    this.recipeItem = this.addChild(new canvas.app.manor.view.controls.elements.Item);
    this.recipeItem.position.set(20, 35);
    this.recipeItem.buttonMode = false;
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center",false,40,null,null,null,null,true));
    this.input.position.set(100, 72);
    this.input.maxChars = 4;
    this.input.onlyNumbers = true;
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.search = this.addChild(new canvas.app.manor.view.controls.elements.Input("left",false,112,null,null,null,canvas.Translator.getText(227),false));
    this.search.position.set(15, 7);
    this.search.maxChars = 30;
    this.search.paddingLeft = 16;
    this.search.topField.x += 16;
    this.search.topField.font = canvas.Const.FONT_TAHOMA_11;
    t = this.search.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "search_icon")));
    t.position.set(2, 3);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1));
    this.list.position.set(34, 135);
    this.list.setSize(350, 90);
    this.list._paddingH = -1;
    var a;
    for (var i = 0; i < canvas.app.manor.view.controls.UseWorkshop.ON_PAGE; i++) {
        a = new canvas.app.manor.view.controls.elements.Item;
        a.buttonMode = false;
        this.list.add(a, false)
    }
    this.list.update();
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130));
    this.progress.position.set(272, 0);
    this.progress.setLabour(0, 0);
    this.progress.setTitle();
    this.maxButton = this.addChild(new canvas.app.view.MainButton);
    this.maxButton.position.set(295, 65);
    this.maxButton.setSize(100);
    this.maxButton.setTitle("MAX");
    this.goButton = this.addChild(new canvas.app.view.MainButton);
    this.goButton.position.set(134, 220);
    this.goButton.setTitle(canvas.Translator.getText(146));
    this.goButton.enabled = false;
    this.favoriteButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "favorite")));
    this.favoriteButton.position.set(375, 41);
    this.favoriteHint = new canvas.app.view.MappingHint(canvas.Translator.getText(245));
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.favoriteButton,
        params: new canvas.utils.HintParams(this.favoriteHint)
    });
    this.favoriteEnabled = false;
    this.combo = this.addChild(new canvas.app.manor.view.controls.elements.Combo(275,130));
    this.combo.position.set(95, 38);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_OPEN, this.combo, this.comboOpenHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this.combo, this.comboCloseHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.inputHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.search, this.inputSearchHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.maxButton, this.maxClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.goButton, this.goClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.favoriteButton, this.favoriteClickHandler, this)
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseWorkshop.ON_PAGE = 5;
canvas.app.manor.view.controls.UseWorkshop.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    if (!t.workShopReceptsArray)
        return;
    var e = new Array;
    var a;
    e.push({
        id: 0,
        title: canvas.Translator.getText(147)
    });
    var i, s = t.workShopReceptsArray.length;
    for (i = 0; i < s; i++) {
        a = t.workShopReceptsArray[i];
        if ((!this.favoriteEnabled || a.favorite) && a.title.toLowerCase().search(this.search.text.toLowerCase()) >= 0) {
            e.push({
                id: a.id,
                title: a.title
            })
        }
    }
    this.combo.init(e);
    this.combo.setSelectedItem("id", this.lastComboSelected);
    this.comboHandler()
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.comboHandler = function() {
    var t = canvas.app.manor.model;
    this.lastComboSelected = this.combo.selectedItem.id;
    t.workShopSelectedRecipe = null;
    var e;
    var a;
    var i;
    this.recipeItem.data = null;
    for (var s in t.workShopRecepts) {
        e = t.workShopRecepts[s];
        if (e.id == this.combo.selectedItem.id) {
            t.workShopSelectedRecipe = e;
            i = new canvas.data.manor.DItem;
            i.image = e.image;
            i.title = e.title;
            i.aid = e.resultAid;
            this.recipeItem.data = i;
            break
        }
    }
    this.updatePager()
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.updatePager = function() {
    var t = canvas.app.manor.model;
    if (t.workShopSelectedRecipe != null) {
        this.pager.max = t.workShopSelectedRecipe.items.length - canvas.app.manor.view.controls.UseWorkshop.ON_PAGE;
        this.pager.current = 0
    }
    this.pagerHandler(null)
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.pagerHandler = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s;
    var n = 0;
    var r = true;
    for (e = this.pager.current; e < this.pager.current + canvas.app.manor.view.controls.UseWorkshop.ON_PAGE; e++) {
        a = this.list.items[n];
        if (t.workShopSelectedRecipe != null) {
            i = t.workShopSelectedRecipe.items[e];
            if (i != null) {
                i = i.clone();
                i.count = i.count * parseInt(this.input.text);
                if (t.workShopBugArtefacts[i.id] != undefined && t.workShopBugArtefacts[i.id].count >= i.count) {
                    a.setColor(1)
                } else {
                    a.setColor(2);
                    r = false
                }
            } else {
                a.setColor(0)
            }
            a.data = i
        } else {
            a.data = null;
            a.setColor(0)
        }
        n++
    }
    if (t.workShopSelectedRecipe != null) {
        this.progress.setLabour(Math.round(t.workShopSelectedRecipe.duration * parseInt(this.input.text) * t.workShopReduceKoef), t.workShopTimeLeft);
        this.progress.tf.text = canvas.Functions.formatDate(Math.round(t.workShopSelectedRecipe.duration * parseInt(this.input.text) * t.workShopReduceKoef * 1e3), "00", 2, true) + " / " + (t.workShopTimeLeft == 0 ? "0" : canvas.Functions.formatDate(t.workShopTimeLeft * 1e3, "00", 2, true));
        this.progress.backImage.texture = canvas.ResourceLoader.getImage("ui", "labour4_progress" + (Math.round(t.workShopSelectedRecipe.duration * parseInt(this.input.text) * t.workShopReduceKoef) <= t.workShopTimeLeft ? "" : "_red"))
    } else {
        this.progress.setLabour(0, t.workShopTimeLeft);
        this.progress.tf.text = "";
        this.progress.backImage.texture = canvas.ResourceLoader.getImage("ui", "labour4_progress")
    }
    this.goButton.enabled = t.workShopSelectedRecipe == null ? false : Math.round(t.workShopSelectedRecipe.duration * parseInt(this.input.text) * t.workShopReduceKoef) > t.workShopTimeLeft ? false : r;
    if (this.recipeItem.data != null && t.workShopSelectedRecipe != null) {
        this.recipeItem.data.count = parseInt(this.input.text.toString()) * t.workShopSelectedRecipe.resultCount;
        this.recipeItem.data = this.recipeItem.data
    }
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.inputHandler = function() {
    if (this.input.text == "" || parseInt(this.input.text) < 2)
        this.input.text = "1";
    else if (parseInt(this.input.text) > 9999)
        this.input.text = "9999";
    this.updatePager()
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.inputSearchHandler = function() {
    if (this.lastSearchValue == this.search.text)
        return;
    this.lastSearchValue = this.search.text;
    this.update();
    this.combo.open()
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.maxClickHandler = function() {
    var t = canvas.app.manor.model;
    if (t.workShopSelectedRecipe != null) {
        this.input.text = "0";
        this.inputHandler();
        while (this.goButton.enabled) {
            this.input.text = (parseInt(this.input.text) + 1).toString();
            this.inputHandler()
        }
        this.input.text = (parseInt(this.input.text) - 1).toString();
        this.inputHandler(null)
    }
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.goClickHandler = function() {
    var t = canvas.app.manor.model;
    this.lastComboSelected = "";
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_ACTION, null, {
        object: {
            building_action: "craft",
            recipe_id: t.workShopSelectedRecipe == null ? "" : t.workShopSelectedRecipe.id,
            amount: this.input.text
        }
    });
    this.input.text = "1"
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.favoriteClickHandler = function() {
    this.favoriteEnabled = !this.favoriteEnabled
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.comboOpenHandler = function() {
    this.input.input = null
}
;
canvas.app.manor.view.controls.UseWorkshop.prototype.comboCloseHandler = function() {
    this.input.input = canvas.app.manor.view.input5;
    this.inputHandler()
}
;
canvas.app.manor.view.controls.UseWorkshop2 = function() {
    canvas.app.manor.view.UseBuilding.call(this);
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    t.position.set(0, 97);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,false,false,null,true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 40);
    this.title = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,204,20,"center"));
    this.title.position.set(107, 105);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1));
    this.list.position.set(34, 15);
    this.list.setSize(350, 80);
    this.list._paddingH = -1;
    var e;
    for (var a = 0; a < canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE; a++) {
        e = new canvas.app.manor.view.controls.elements.Item(false);
        e.click = this.selectHandler.bind(this);
        e.buttonMode = false;
        this.list.add(e, false)
    }
    this.list.update();
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(192));
    this.list2 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list2.position.set(20, 135);
    this.list2.setSize(350, 120);
    this.list2._paddingV = 0;
    for (var a = 0; a < canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2; a++) {
        e = new canvas.app.manor.view.controls.elements.TaskItem;
        this.list2.add(e, false)
    }
    this.list2.update();
    this.pager2 = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,true,true,this.list2));
    this.pager2.setSize(20, 120);
    this.pager2.position.set(375, 135);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager2, this.pager2Handler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.selectHandler, this)
}
;
canvas.app.manor.view.controls.UseWorkshop2.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE = 5;
canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2 = 4;
canvas.app.manor.view.controls.UseWorkshop2.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.pager.max = t.workShopRequestsCompleted.length - canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE;
    this.pager.current = 0;
    this.pagerHandler();
    this.updateRequests();
    this.pager2.current = 0;
    this.title.text = canvas.Translator.getText(191) + " <b>(" + t.workShopRequests.length + ")</b>"
}
;
canvas.app.manor.view.controls.UseWorkshop2.prototype.updateRequests = function() {
    var t = canvas.app.manor.model.workShopRequests.length - canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2;
    if (t != this.pager2.max) {
        this.pager2.max = t
    }
    this.pager2Handler()
}
;
canvas.app.manor.view.controls.UseWorkshop2.prototype.pagerHandler = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s;
    var n;
    var r = 0;
    for (e = this.pager.current; e < this.pager.current + canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE; e++) {
        a = this.list.items[r++];
        a.data = null;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
            target: a
        });
        s = t.workShopRequestsCompleted[e];
        if (s != null) {
            n = t.workShopRecepts[s.recipe];
            if (n != null) {
                i = new canvas.data.manor.DItem;
                i.image = n.image;
                i.title = n.title;
                i.count = s.count * n.resultCount;
                i.id = s.id;
                a.data = i;
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
                    target: a,
                    params: new canvas.utils.HintParams(this.hint)
                })
            }
        }
    }
}
;
canvas.app.manor.view.controls.UseWorkshop2.prototype.pager2Handler = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s = 0;
    for (e = this.pager2.current; e < this.pager2.current + canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2; e++) {
        a = this.list2.items[s++];
        i = t.workShopRequests[e];
        a.name = (e + 1).toString();
        a.data = i
    }
}
;
canvas.app.manor.view.controls.UseWorkshop2.prototype.selectHandler = function(t) {
    var e = t.currentTarget;
    if (e.data) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_ACTION, null, {
            object: {
                building_action: "pick",
                craft_request_id: e.data.id
            }
        })
    }
}
;
canvas.app.manor.view.controls.WorkWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,275,20,"center");
    t.text = canvas.Translator.getText(182) + ":";
    t.position.set(26, 51);
    this.addChild(t);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,128,20,"right");
    t.text = canvas.Translator.getText(183) + ":";
    t.position.set(26, 183);
    this.addChild(t);
    this.labourInput = new canvas.app.manor.view.controls.elements.LabourInput;
    this.addChild(this.labourInput);
    this.labourInput.position.set(75, 85);
    this.workButton = new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(151));
    this.addChild(this.workButton);
    this.workButton.position.set(Math.round((this.width - this.workButton.width) * .5), 252);
    this.coins = new canvas.app.view.Money;
    this.addChild(this.coins);
    this.coins.position.set(158, 183);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this.workHandler, this);
    if (canvas.app.manor.model.mapMode) {
        this.position.set(90, 130)
    }
}
;
canvas.app.manor.view.controls.WorkWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.WorkWin.prototype.update = function(t) {
    if (t == undefined)
        t = 0;
    var e = canvas.app.manor.model;
    var a = e.labourRequests[e.selectedRequest];
    e.selectedRequestID = a.id;
    if (a != null) {
        this.header.text = canvas.Translator.getText(184) + " " + a.user.login + " [" + a.user.level + "]"
    } else {
        header.text = ""
    }
    this.labourInput.update();
    this.labourInput.maxValue = Math.min(e.user.labour, a.labour);
    this.coins.money = a.price * parseInt(this.labourInput.input.input.text.toString()) * 100;
    this.workButton.enabled = this.labourInput.testRequires()
}
;
canvas.app.manor.view.controls.WorkWin.prototype.show = function(t) {
    this.labourInput.input.input = canvas.app.manor.view.input;
    this.labourInput.input.input.text = 0;
    this.labourInput.changeHandler();
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t)
}
;
canvas.app.manor.view.controls.WorkWin.prototype.hide = function(t) {
    this.labourInput.input.input = null;
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
;
canvas.app.manor.view.controls.WorkWin.prototype.activate = function(t) {
    this.labourInput.input.input = canvas.app.manor.view.input;
    canvas.app.manor.view.WindowManorBase.prototype.activate.call(this, t)
}
;
canvas.app.manor.view.controls.WorkWin.prototype.deactivate = function(t) {
    this.labourInput.input.input = null;
    canvas.app.manor.view.WindowManorBase.prototype.deactivate.call(this, t)
}
;
canvas.app.manor.view.controls.WorkWin.prototype.changeHandler = function() {
    this.update()
}
;
canvas.app.manor.view.controls.WorkWin.prototype.workHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.WORK_USE, null, this.labourInput.input.text);
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
}
;
canvas.app.manor.view.controls.WorkWin.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this.workHandler, this);
    canvas.px.Container.prototype.destroy.call(this, {
        children: true
    })
}
;
canvas.app.manor.view.controls.camp.Equipment = function() {
    canvas.px.Container.call(this);
    this.inited = this.visible = false
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES = 5;
canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE = 5;
canvas.app.manor.view.controls.camp.Equipment.prototype.init = function() {
    if (this.inited)
        return;
    this.inited = this.visible = true;
    var t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 400;
    t.height = 190;
    t.y = 22;
    t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 400;
    t.height = 190;
    t.y = 218;
    t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 400;
    t.height = 386;
    t.position.set(412, 22);
    this.title1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,200,20,"right"));
    this.title1.position.set(280, -3);
    this.title1.text = canvas.Translator.getText(299) + ":";
    this.image1 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image));
    this.image1.position.set(492, -8);
    this.image1.scale.set(.4, .4);
    this.title2 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title2.position.set(519, -3);
    this.title3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,400,20,"center"));
    this.title3.position.set(0, 72);
    this.title3.text = canvas.Translator.getText(324);
    this.title4 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"right"));
    this.title4.position.set(82, 112);
    this.title4.text = canvas.Translator.getText(121) + ":";
    this.image2 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image));
    this.image2.position.set(192, 108);
    this.image2.scale.set(.4, .4);
    this.title5 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title5.position.set(218, 112);
    this.button1 = this.addChild(new canvas.app.view.MainButton);
    this.button1.position.set(112, 136);
    this.button1.setTitle(canvas.Translator.getText(2034));
    this.button1.setSize(180);
    this.title6 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,400,20,"center"));
    this.title6.position.set(-30, 266);
    this.title6.text = canvas.Translator.getText(325);
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center",true,41,null,null,null,null,true));
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.input.onlyNumbers = true;
    this.input.maxChars = 2;
    this.input.position.set(this.title6._width - Math.round((this.title6._width - this.title6.textWidth) * .5) - 10, 264);
    this.title7 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"right"));
    this.title7.position.set(82, 308);
    this.title7.text = canvas.Translator.getText(121) + ":";
    this.image3 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image));
    this.image3.position.set(192, 304);
    this.image3.scale.set(.4, .4);
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title8.position.set(218, 308);
    this.button2 = this.addChild(new canvas.app.view.MainButton);
    this.button2.position.set(112, 332);
    this.button2.setTitle(canvas.Translator.getText(2034));
    this.button2.setSize(180);
    this.title9 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,400,20,"center"));
    this.title9.position.set(411, 30);
    this.title9.text = canvas.Translator.getText(326);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE));
    this.list._paddingV = this.list._paddingH = 0;
    this.list.position.set(435, 50);
    this.list.setSize(350, 350);
    var e = canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE * canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES;
    var a;
    for (var i = 0; i < e; i++) {
        a = new canvas.app.manor.view.controls.elements.Item(false,true,null,null,null,null,true);
        this.list.add(a, false);
        a.name = "item" + i
    }
    this.list.update();
    this.pager = new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,true,true,this.list.container,2);
    this.pager.position.set(830, 50);
    this.pager.setSize(20, 350);
    this.image1.mouseover = this.image2.mouseover = this.image3.mouseover = this.imageOverHandler.bind(this);
    this.image1.mouseout = this.image2.mouseout = this.image3.mouseout = this.imageOutHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button1, this.button1ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button2, this.button2ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    this.interactive = true;
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.updateScroll = function() {
    var t = canvas.app.manor.model.campData.forgeItems.length;
    this.pager.max = t <= canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE ? 0 : Math.ceil((t - canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE) / canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE);
    this.pagerHandler();
    if (this.pager.isDisabled()) {
        this.removeIfExist(this.pager)
    } else {
        this.addChild(this.pager)
    }
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.update = function() {
    var t = canvas.app.manor.model;
    if (!t.campData.forgeItems)
        return;
    this.init();
    this.updateScroll();
    this.title2.text = t.campData.fragmentItem.count.toString();
    this.title5.text = t.campData.forgeLevels[0] + " " + canvas.Translator.getText(2022);
    var e = t.campData.fragmentItem.count >= t.campData.forgeLevels[0];
    this.button1.enabled = e;
    this.title5.color = e ? 9526348 : 16711680;
    this.changeHandler()
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.updateData = function() {
    var t, e = this.list.items.length;
    for (t = 0; t < e; t++) {
        this.list.items[t].data = canvas.app.manor.model.campData.forgeItems[t + this.pager.current * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE]
    }
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.button1ClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
        object: {
            building_action: "buildItemRandom"
        }
    });
    this.button1.enabled = this.button2.enabled = false
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.button2ClickHandler = function() {
    canvas.app.manor.model.campData.currentForgeLevel = parseInt(this.input.text);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
        object: {
            building_action: "buildItemLevel",
            level: canvas.app.manor.model.campData.currentForgeLevel
        }
    });
    this.button1.enabled = this.button2.enabled = false
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.clickHandler = function(t) {
    item = canvas.Functions.findParentByName("item", t.target);
    if (item && item.data) {
        canvas.app.manor.model.campData.currentDestructItemAid = item.data.aid;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(334),
            object: {
                name: canvas.app.manor.Event.USE_HUNT_CAMP_ACTION,
                params: {
                    object: {
                        building_action: "destructItem",
                        artikul_id: item.data.aid
                    }
                }
            }
        })
    }
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.pagerHandler = function() {
    this.updateData()
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.changeHandler = function() {
    var t = canvas.app.manor.model;
    var e = parseInt(this.input.text);
    var a = t.campData.forgeLevels[e];
    if (e > 0 && !a) {
        this.input.text = (t.campData.forgeLevels.length - 1).toString();
        this.changeHandler();
        return
    }
    if (e == 0) {
        this.input.text = "1";
        this.changeHandler();
        return
    }
    var i = t.campData.fragmentItem.count >= a;
    this.button2.enabled = parseInt(this.input.text) > 0 && a && i;
    this.title8.text = (a ? a : 0) + " " + canvas.Translator.getText(2022);
    this.title8.color = i ? 9526348 : 16711680
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.imageOverHandler = function() {
    artifactAltSimple(canvas.app.manor.model.campData.fragmentItem.id, 2)
}
;
canvas.app.manor.view.controls.camp.Equipment.prototype.imageOutHandler = function() {
    artifactAltSimple(canvas.app.manor.model.campData.fragmentItem.id, 0)
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer = function(t) {
    this._pet = null;
    Object.defineProperty(this, "pet", {
        get: function() {
            return this._pet
        },
        set: function(t) {
            this._pet = t;
            this.update(false)
        }
    });
    canvas.ui.ListRenderer.call(this, null, 814, 122);
    this.state = 0;
    this.index = t;
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    this.back.width = this._width;
    this.back.height = this._height;
    this.petView = this.addChild(new canvas.app.manor.view.controls.camp.PetView(true));
    this.petView.position.set(26, 8);
    this.title3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,150,20,"left"));
    this.title3.position.set(150, 10);
    this.title3.text = canvas.Translator.getText(296);
    this.title4 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,150,20,"left"));
    this.title4.position.set(150, 60);
    this.title4.text = canvas.Translator.getText(297);
    this.combo2 = this.addChild(new canvas.app.manor.view.controls.elements.Combo(226,110));
    this.combo2.position.set(150, 75);
    this.combo2.list.scroll.step = 14;
    this.combo1 = this.addChild(new canvas.app.manor.view.controls.elements.Combo(226,80));
    this.combo1.position.set(150, 25);
    this.combo1.init([{
        title: canvas.Translator.getText(328),
        type: 1
    }, {
        title: canvas.Translator.getText(329),
        type: 2
    }, {
        title: canvas.Translator.getText(330),
        type: 3
    }]);
    this.item2 = this.addChild(new canvas.app.manor.view.controls.elements.Item(false,true,"","",false));
    this.item2.position.set(415, 26);
    this.title5 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,20,"center"));
    this.title5.position.set(389, 97);
    this.title6 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title6.position.set(525, 8);
    this.title6.text = canvas.Translator.getText(121) + ":";
    this.title7 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title7.position.set(555, 32);
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title8.position.set(555, 63);
    this.button = this.addChild(new canvas.app.view.MainButton);
    this.button.position.set(650, 56);
    this.button.setTitle(canvas.Translator.getText(2033));
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(131));
    this.progress.position.set(660, 22);
    this.progress.setLabour(0, 0);
    this.image1 = this.addChild(new canvas.ui.Image);
    this.image1.position.set(525, 27);
    this.image1.interactive = true;
    this.image1.scale.set(.4, .4);
    this.image2 = this.addChild(new canvas.ui.Image);
    this.image2.position.set(525, 58);
    this.image2.interactive = true;
    this.image2.scale.set(.4, .4);
    this.state = 0;
    this.clear();
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo1, this.combo1SelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo2, this.combo2SelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.petView.item.click = this.petClickHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.petView.crossButton, this.petCrossClickHandler, this);
    this.image1.mouseover = this.image1OverHandler.bind(this);
    this.image1.mouseout = this.image1OutHandler.bind(this);
    this.image2.mouseover = this.image2OverHandler.bind(this);
    this.image2.mouseout = this.image2OutHandler.bind(this)
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.update = function(t) {
    var e = canvas.app.manor.model;
    if (t == undefined)
        t = true;
    if (t && this.pet && !this.pet.mission)
        this.pet = null;
    var a = new Array;
    var i;
    var s;
    var n;
    var r;
    var o = this.combo1.selectedItem;
    var l = this.combo2.selectedItem;
    if (this.pet && this.pet.mission) {
        this.combo1.setSelectedItem("type", this.pet.mission.type);
        o = this.combo1.selectedItem;
        i = e.campData.missions[this.pet.mission.type];
        if (i) {
            for (r in i.objects) {
                n = parseInt(r);
                if (this.pet.mission.objectId == n && e.campData.artifacts[n]) {
                    a.push({
                        title: e.campData.artifacts[n].title,
                        id: e.campData.artifacts[n].aid
                    });
                    break
                }
            }
        }
    } else {
        i = e.campData.missions[parseInt(this.combo1.selectedItem.type)];
        if (i) {
            for (r in i.objects) {
                n = parseInt(r);
                if (!e.campData.artifacts[n])
                    continue;
                a.push({
                    title: e.campData.artifacts[n].title,
                    id: e.campData.artifacts[n].aid
                })
            }
        }
    }
    if (a.length > 0) {
        a.sort(this.sortOnTitle);
        this.combo2.init(a)
    } else {
        this.combo2.init([{
            title: "",
            id: 0
        }])
    }
    if (o)
        this.combo1.setSelectedItem("type", o.type);
    if (l)
        this.combo2.setSelectedItem("id", l.id);
    this.updateInfo()
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.sortOnTitle = function(t, e) {
    if (t.title.toLowerCase() > e.title.toLowerCase()) {
        return 1
    } else if (t.title.toLowerCase() < e.title.toLowerCase()) {
        return -1
    } else {
        return 0
    }
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateInfo = function() {
    var t = canvas.app.manor.model;
    var e = t.campData.missions[parseInt(this.combo1.selectedItem.type)];
    this.image1.clear();
    this.image2.clear();
    var a;
    if (e) {
        this.petView.index = parseInt(this.combo1.selectedItem.type);
        if (this.pet && this.combo2.selectedItem && this.combo2.selectedItem.id) {
            this.petView.data = this.pet;
            this.tmpPrice1 = Math.ceil(e.price1Amount * Math.max(.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE) / 1e3));
            this.title7.text = this.tmpPrice1 + " " + canvas.Translator.getText(2022);
            this.title7.color = t.campData.artifacts[e.price1Id].count < this.tmpPrice1 ? 16711680 : 9526348;
            this.image1.setImage(t.campData.artifacts[e.price1Id].image);
            this.tmpPrice2 = Math.ceil(e.price2Amount * Math.max(.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE) / 1e3));
            this.title8.text = this.tmpPrice2 + " " + canvas.Translator.getText(2022);
            if (e.price2Amount > 0) {
                this.title8.color = t.campData.artifacts[e.price2Id].count < this.tmpPrice2 ? 16711680 : 9526348
            } else {
                this.title8.color = 9526348
            }
            if (e.price2Amount > 0) {
                this.image2.setImage(t.campData.artifacts[e.price2Id].image)
            }
            this.title5.text = Math.floor(.8 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type)) / e.objects[this.combo2.selectedItem.id]) + "-" + Math.floor(1.2 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type)) / e.objects[this.combo2.selectedItem.id]) + " " + canvas.Translator.getText(2022);
            this.tmpTime = Math.ceil(e.duration * Math.max(.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_STEALTH) / 1e3));
            this.updateTime()
        } else {
            this.clear();
            this.petView.title1.text = canvas.Translator.getText(338) + ":";
            this.petView.updateTitle(true)
        }
        this.item2.data = t.campData.artifacts[parseInt(this.combo2.selectedItem.id)];
        this.item2.buttonMode = false
    } else {
        this.item2.data = null;
        this.clear()
    }
    this.updateButton()
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateButton = function() {
    var t = canvas.app.manor.model;
    var e;
    if (this.pet && this.pet.mission) {
        this.combo1.enabled = false;
        this.combo2.enabled = false;
        this.petView.interactiveChildren = false;
        this.button.enabled = this.pet.missionIsComplete();
        this.button.setTitle(canvas.Translator.getText(192))
    } else {
        this.combo1.enabled = true;
        this.combo2.enabled = true;
        this.petView.interactiveChildren = true;
        e = t.campData.missions[parseInt(this.combo1.selectedItem.type)];
        this.button.enabled = false;
        this.button.setTitle(canvas.Translator.getText(2033));
        if (e && this.pet) {
            if (t.campData.artifacts[e.price1Id].count >= this.tmpPrice1 && (e.price2Id == 0 || t.campData.artifacts[e.price2Id].count >= this.tmpPrice2)) {
                if (Math.floor(1.2 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type)) / e.objects[this.combo2.selectedItem.id]) > 0)
                    this.button.enabled = true
            }
        }
    }
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateTime = function() {
    var t = canvas.app.manor.model.serverTime.getTime();
    if (this.pet && this.pet.mission) {
        if (t >= this.pet.mission.dtime) {
            if (this.state != 2) {
                this.state = 2;
                this.progress.setLabour(1, 1);
                this.progress.setTitle();
                this.updateInfo()
            }
        } else {
            this.progress.setLabour(t - this.pet.mission.stime, this.pet.mission.dtime - this.pet.mission.stime);
            this.progress.setTitle(t >= this.pet.mission.dtime ? "" : canvas.Functions.formatDate((this.pet.mission.dtime - t) * 1e3, "00", 3, false, true));
            if (this.state != 1) {
                this.state = 1
            }
        }
    } else {
        if (this.state != 0) {
            this.state = 0
        }
        if (this.tmpTime) {
            this.progress.setLabour(0, 0);
            this.progress.setTitle(canvas.Functions.formatDate(this.tmpTime * 1e3, "00", 3, false, true))
        }
    }
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.clear = function() {
    this.tmpTime = 0;
    this.title7.text = "";
    this.title8.text = "";
    this.title5.text = "";
    this.progress.setLabour(0, 0);
    this.progress.setTitle();
    this.petView.data = null
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.combo1SelectHandler = function() {
    this.update(false)
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.combo2SelectHandler = function() {
    this.updateInfo()
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.petClickHandler = function() {
    if (parseInt(this.combo2.selectedItem.id) > 0) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CHOOSE_PET, null, {
            object: {
                index: this.index,
                excludePets: this.pet ? [this.pet.id] : null
            }
        })
    }
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.petCrossClickHandler = function() {
    canvas.utils.HintManager.instance.hide();
    this.pet = null;
    this.update()
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image1OverHandler = function(t) {
    if (t != 0)
        t = 2;
    var e = canvas.app.manor.model.campData.missions[parseInt(this.combo1.selectedItem.type)];
    if (!e)
        return;
    if (e.price1Id)
        artifactAltSimple(canvas.app.manor.model.campData.artifacts[e.price1Id].id, t)
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image1OutHandler = function() {
    this.image1OverHandler(0)
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image2OverHandler = function(t) {
    if (t != 0)
        t = 2;
    var e = canvas.app.manor.model.campData.missions[parseInt(this.combo1.selectedItem.type)];
    if (!e)
        return;
    if (e.price2Id)
        artifactAltSimple(canvas.app.manor.model.campData.artifacts[e.price2Id].id, t)
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image2OutHandler = function() {
    this.image2OverHandler(0)
}
;
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.buttonClickHandler = function() {
    var t = canvas.app.manor.model;
    var e = t.campData.missions[parseInt(this.combo1.selectedItem.type)];
    if (e && this.pet) {
        this.button.enabled = false;
        if (this.pet.mission) {
            t.campData.currentActiveMission = this.pet.mission;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
                object: {
                    building_action: "missionGetRewards",
                    id: this.pet.mission.id
                }
            })
        } else {
            t.campData.currentActiveMission = new canvas.data.manor.DCampActiveMission;
            t.campData.currentActiveMission.id = e.id;
            t.campData.currentActiveMission.type = e.type;
            t.campData.currentActiveMission.objectId = parseInt(this.combo2.selectedItem.id);
            t.campData.currentActiveMission.pet1 = this.pet.id;
            t.campData.currentActiveMission.stime = t.serverTime.getTime();
            t.campData.currentActiveMission.dtime = t.campData.currentActiveMission.stime + this.tmpTime;
            t.campData.waitChangeCountArtifacts = {};
            if (this.tmpPrice1 > 0)
                t.campData.waitChangeCountArtifacts[e.price1Id] = this.tmpPrice1;
            if (this.tmpPrice2 > 0)
                t.campData.waitChangeCountArtifacts[e.price2Id] = this.tmpPrice2;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
                object: {
                    building_action: "missionSendPets",
                    pet1: this.pet.id,
                    mission_id: e.id,
                    farm_id: parseInt(this.combo2.selectedItem.id)
                }
            })
        }
    }
}
;
canvas.app.manor.view.controls.camp.MineResources = function() {
    canvas.px.Container.call(this);
    this.inited = this.visible = false;
    var t = this.addChild(new canvas.px.Mask(850,410));
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list._paddingV = 7;
    this.list.reverseLayers = true;
    this.list.setSize(850, 445);
    this.info = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD,9526348,800,40,"left");
    this.info.text = canvas.Translator.getText(339)
}
;
canvas.app.manor.view.controls.camp.MineResources.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.MineResources.prototype.update = function() {
    var t = canvas.app.manor.model;
    if (!t.campData.haveResourceMission())
        return;
    this.inited = this.visible = true;
    if (t.campData.resourceSlots > 0) {
        this.removeIfExist(this.info)
    } else {
        this.addChild(this.info)
    }
    var e;
    var a = [];
    var i;
    for (i in t.campData.pets) {
        e = t.campData.pets[i];
        if (e.mission && e.mission.isResource()) {
            a.push(e)
        }
    }
    var s;
    for (var n = 0; n < t.campData.resourceSlots; n++) {
        if (!this.list.items[n]) {
            this.list.add(new canvas.app.manor.view.controls.camp.MineResourceRenderer(n))
        }
        this.list.items[n].pet = a.length > 0 ? a.shift() : null
    }
}
;
canvas.app.manor.view.controls.camp.MineResources.prototype.updateTime = function() {
    var t, e = this.list.items.length;
    for (t = 0; t < e; t++) {
        this.list.items[t].updateTime()
    }
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer = function(t) {
    this._activeMission = null;
    Object.defineProperty(this, "activeMission", {
        get: function() {
            return this._activeMission
        },
        set: function(t) {
            this._activeMission = t
        }
    });
    canvas.ui.ListRenderer.call(this, null, 814, 130);
    this.state = 0;
    this.type = t;
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_S_15_BOLD,9526348,300,20,"left"));
    this.title8.position.set(2, 0);
    switch (canvas.app.manor.model.campData.getTypeByIndex(this.type)) {
    case canvas.data.manor.DCampData.PET_S_ITEMS:
        this.title8.text = canvas.Translator.getText(333);
        break;
    case canvas.data.manor.DCampData.PET_S_TALISMANS:
        this.title8.text = canvas.Translator.getText(331);
        break;
    case canvas.data.manor.DCampData.PET_S_VALUE:
        this.title8.text = canvas.Translator.getText(332);
        break
    }
    this.container = this.addChild(new canvas.px.Container);
    this.container.y = 20;
    this.back = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    this.back.width = this._width;
    this.back.height = this._height - 12;
    this.pets = new Array;
    var e;
    for (var a = 0; a < canvas.data.manor.DCampData.ARTIFACT_PETS_MAX; a++) {
        e = this.container.addChild(new canvas.app.manor.view.controls.camp.PetView(true));
        e.position.set(26 + a * 90, 5);
        this.pets.push(e);
        e.index = this.type;
        e.item.click = this.petClickHandler.bind(this);
        e.crossButton.click = this.petCrossClickHandler.bind(this);
        e.hideSkill = a != 1
    }
    this.title4 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,20,"center"));
    this.title4.position.set(389, 10);
    this.title4.text = canvas.Translator.getText(298);
    this.item2 = this.container.addChild(new canvas.app.manor.view.controls.elements.Item(false,true,"","",false));
    this.item2.position.set(415, 26);
    this.title5 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,20,"center"));
    this.title5.position.set(389, 97);
    this.title6 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title6.position.set(525, 8);
    this.title6.text = canvas.Translator.getText(121) + ":";
    this.title7 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left"));
    this.title7.position.set(555, 32);
    this.button = this.container.addChild(new canvas.app.view.MainButton);
    this.button.position.set(650, 56);
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(131));
    this.progress.position.set(660, 22);
    this.progress.setLabour(0, 0);
    this.image1 = this.container.addChild(new canvas.ui.Image);
    this.image1.position.set(525, 27);
    this.image1.interactive = true;
    this.image1.scale.set(.4, .4);
    this.clear();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.image1.mouseover = this.image1OverHandler.bind(this);
    this.image1.mouseout = this.image1OutHandler.bind(this)
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.update = function() {
    var t = canvas.app.manor.model;
    var e;
    this.mission = t.campData.missions[this.type];
    this.selectedPets = [];
    this.petsCommonSkill = 0;
    this.petsCommonSkillDiscipline = 0;
    this.petsCommonSkillStealth = 0;
    var a;
    var i, s = this.pets.length;
    for (i = 0; i < s; i++) {
        a = this.pets[i];
        if (a.data && !a.locked) {
            if (this.selectedPets.indexOf(a.data) < 0) {
                this.selectedPets.push(a.data);
                this.petsCommonSkill += a.data.getSkillByIndex(this.type);
                this.petsCommonSkillDiscipline += a.data.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE);
                this.petsCommonSkillStealth += a.data.getSkill(canvas.data.manor.DCampData.PET_A_STEALTH)
            } else {
                a.data = null
            }
        }
    }
    this.updateInfo()
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateInfo = function() {
    var t = canvas.app.manor.model;
    this.image1.clear();
    var e;
    var a;
    this.tmpTime = 0;
    if (this.mission) {
        a = this.mission.getRewardBySkill(this.petsCommonSkill);
        if (a) {
            if (this.selectedPets.length) {
                this.pets[0].update();
                this.pets[1].title2.text = "<img src='" + this.pets[1].iconName + "' atlas='ui' yOffset='2'/> " + this.petsCommonSkill;
                this.tmpPrice = Math.ceil(this.mission.price1Amount * Math.max(.5, 1 - this.petsCommonSkillDiscipline / 1e3) * this.selectedPets.length);
                this.title7.text = this.tmpPrice + " " + canvas.Translator.getText(2022);
                this.title7.color = t.campData.artifacts[this.mission.price1Id].count < this.tmpPrice ? 16711680 : 9526348;
                this.image1.setImage(t.campData.artifacts[this.mission.price1Id].image);
                this.title5.text = Math.floor(.8 * this.petsCommonSkill / a.bonusDifficulty) + "-" + Math.floor(1.2 * this.petsCommonSkill / a.bonusDifficulty) + " " + canvas.Translator.getText(2022);
                this.tmpTime = Math.ceil(this.mission.duration * Math.max(.5, 1 - this.petsCommonSkillStealth / 1e3));
                this.updateTime()
            } else {
                this.clear();
                this.pets[0].title1.text = canvas.Translator.getText(338) + ":";
                this.pets[1].updateTitle(true)
            }
            this.item2.data = a.item;
            this.item2.buttonMode = false
        }
    } else {
        this.item2.data = null;
        this.clear()
    }
    this.updateButton()
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.clear = function() {
    this.title7.text = "";
    this.title5.text = "";
    this.progress.setLabour(0, 0);
    this.progress.setTitle();
    var t;
    var e, a = this.pets.length;
    for (e = 0; e < a; e++) {
        this.pets[e].data = null
    }
    this.pets[1].title2.text = ""
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateButton = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    var i;
    var s, n = this.pets.length;
    if (this.selectedPets.length && this.selectedPets[0].mission) {
        for (s = 0; s < n; s++) {
            this.pets[s].interactiveChildren = false
        }
        this.button.enabled = this.selectedPets[0].missionIsComplete();
        this.button.setTitle(canvas.Translator.getText(192))
    } else {
        for (s = 0; s < n; s++) {
            this.pets[s].interactiveChildren = !this.pets[s].locked
        }
        this.button.enabled = false;
        this.button.setTitle(canvas.Translator.getText(2033));
        if (this.mission && this.selectedPets.length) {
            i = this.mission.getRewardBySkill(this.petsCommonSkill);
            if (i && t.campData.artifacts[this.mission.price1Id].count >= this.tmpPrice) {
                if (Math.floor(1.2 * this.petsCommonSkill / i.bonusDifficulty) > 0)
                    this.button.enabled = true
            }
        }
    }
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateTime = function() {
    var t = canvas.app.manor.model.serverTime.getTime();
    if (this.activeMission) {
        if (t >= this.activeMission.dtime) {
            if (this.state != 2) {
                this.state = 2;
                this.progress.setLabour(1, 1);
                this.progress.setTitle();
                this.updateInfo()
            }
        } else {
            this.progress.setLabour(t - this.activeMission.stime, this.activeMission.dtime - this.activeMission.stime);
            this.progress.setTitle(t >= this.activeMission.dtime ? "" : canvas.Functions.formatDate((this.activeMission.dtime - t) * 1e3, "00", 3, false, true));
            if (this.state != 1) {
                this.state = 1
            }
        }
    } else {
        if (this.state != 0) {
            this.state = 0
        }
        if (this.tmpTime) {
            this.progress.setLabour(0, 0);
            this.progress.setTitle(canvas.Functions.formatDate(this.tmpTime * 1e3, "00", 3, false, true))
        }
    }
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.petClickHandler = function(t) {
    var e = null;
    var a, i = this.pets.length, s;
    for (a = 0; a < i; a++) {
        s = this.pets[a];
        if (s.data) {
            if (!e)
                e = new Array;
            e.push(s.data.id)
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CHOOSE_PET, null, {
        object: {
            index: this.pets.indexOf(t.currentTarget.parent),
            type: this.type,
            excludePets: e
        }
    })
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.petCrossClickHandler = function(t) {
    canvas.utils.HintManager.instance.hide();
    var e = t.currentTarget.parent.parent.parent;
    if (e) {
        e.data = null;
        this.update()
    }
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.image1OverHandler = function(t) {
    if (!this.mission)
        return;
    if (t != 0)
        t = 2;
    if (this.mission.price1Id)
        artifactAltSimple(canvas.app.manor.model.campData.artifacts[this.mission.price1Id].id, t)
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.image1OutHandler = function() {
    this.image1OverHandler(0)
}
;
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.buttonClickHandler = function() {
    var t = canvas.app.manor.model;
    var e;
    var a;
    if (this.mission && this.selectedPets.length) {
        this.button.enabled = false;
        if (this.activeMission) {
            t.campData.currentActiveMission = this.activeMission;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
                object: {
                    building_action: "missionGetRewards",
                    id: this.activeMission.id
                }
            })
        } else {
            t.campData.currentActiveMission = new canvas.data.manor.DCampActiveMission;
            t.campData.currentActiveMission.id = this.mission.id;
            t.campData.currentActiveMission.type = this.mission.type;
            t.campData.currentActiveMission.pet1 = this.selectedPets[0].id;
            t.campData.currentActiveMission.pet2 = this.selectedPets[1] ? this.selectedPets[1].id : 0;
            t.campData.currentActiveMission.pet3 = this.selectedPets[2] ? this.selectedPets[2].id : 0;
            t.campData.currentActiveMission.stime = t.serverTime.getTime();
            t.campData.currentActiveMission.dtime = t.campData.currentActiveMission.stime + this.tmpTime;
            t.campData.waitChangeCountArtifacts = {};
            if (this.tmpPrice > 0)
                t.campData.waitChangeCountArtifacts[this.mission.price1Id] = this.tmpPrice;
            e = {
                building_action: "missionSendPets",
                mission_id: this.mission.id
            };
            var i = this.selectedPets.length;
            for (a = 0; a < i; a++) {
                e["pet" + (a + 1).toString()] = this.selectedPets[a].id
            }
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
                object: e
            })
        }
    }
}
;
canvas.app.manor.view.controls.camp.MineTalismans = function() {
    canvas.px.Container.call(this);
    this.inited = this.visible = false;
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list._paddingV = 7;
    this.list.setSize(850, 415);
    for (var t = 0; t < canvas.data.manor.DCampData.ARTIFACT_TYPE_COUNT; t++) {
        this.list.add(new canvas.app.manor.view.controls.camp.MineTalismanRenderer(t + 4), false)
    }
    this.list.update()
}
;
canvas.app.manor.view.controls.camp.MineTalismans.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.MineTalismans.prototype.update = function() {
    var t = canvas.app.manor.model;
    if (!t.campData.haveArtifactMission())
        return;
    this.inited = this.visible = true;
    var e;
    var a;
    var i = {};
    for (var s in t.campData.pets) {
        a = t.campData.pets[s];
        if (a.mission && a.mission.isArtifact()) {
            if (!i[a.mission.type]) {
                i[a.mission.type] = []
            }
            i[a.mission.type].push(a)
        }
    }
    var n, r, o = this.list.items.length;
    for (n = 0; n < o; n++) {
        e = this.list.items[n];
        for (r = 0; r < canvas.data.manor.DCampData.ARTIFACT_PETS_MAX; r++) {
            e.pets[r].data = i[e.type] && i[e.type][r] ? i[e.type][r] : null;
            e.pets[r].locked = r >= t.campData.artifactSlots
        }
        e.activeMission = i[e.type] ? i[e.type][0].mission : null;
        e.update()
    }
}
;
canvas.app.manor.view.controls.camp.MineTalismans.prototype.updateTime = function() {
    var t, e = this.list.items.length;
    for (t = 0; t < e; t++) {
        this.list.items[t].updateTime()
    }
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer = function(t, e) {
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t;
            this.selector.x = this.fields[this._selectedIndex].x + 1
        }
    });
    canvas.ui.ListRenderer.call(this, null, t, 100);
    var a = this.addChild(new canvas.px.Mask(this._width - 20,this._height,0,0));
    this.overWall = new canvas.px.Mask(this._width - 20,this._height,16303994,1);
    a = this.addChild(new canvas.px.Mask(this._width - 20,1,14065526,1));
    a.y = this._height - 1;
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH,20,"left"));
    this.title.position.set(10, 8);
    this.imagesContainer = this.addChild(new canvas.px.Container);
    this.image = this.imagesContainer.addChild(new canvas.ui.Image);
    this.image.position.set(10, 26);
    this.images = new Array;
    var i;
    var s;
    for (i = 0; i < 4; i++) {
        s = this.imagesContainer.addChild(new canvas.ui.Image);
        s.position.set(i % 2 == 0 ? 80 : 110, i < 2 ? 26 : 56);
        s.scale.x = s.scale.y = .48;
        this.images.push(s);
        s.mouseover = this.imgOverHandler.bind(this);
        s.mouseout = this.imgOutHandler.bind(this)
    }
    this.selector = this.addChild(new canvas.px.Mask(canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH - 2,this._height - 2,16775110,1));
    this.selector.y = 1;
    this.fields = new Array;
    var n;
    var r;
    for (i = 0; i <= canvas.data.manor.DCampData.TYPE_COUNT; i++) {
        r = this.addChild(new canvas.px.Graphics);
        r.lineStyle(1, 14065526);
        r.moveTo(0, 0);
        r.lineTo(0, this._height - 1);
        r.x = canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH - 5 + i * canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH;
        if (i != canvas.data.manor.DCampData.TYPE_COUNT) {
            n = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH,20,"center"));
            n.position.set(r.x, 40);
            this.fields.push(n)
        }
    }
    this.buttonMode = true;
    this.data = e;
    this.interactiveChildren = true
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.update = function() {
    if (this.data) {
        this.title.text = this.data.title;
        this.image.setImage(this.data.image);
        var t, e, a = this.images.length;
        for (e = 0; e < a; e++) {
            t = this.images[e];
            if (this.data.artifacts[e]) {
                t.setImage(this.data.artifacts[e].image);
                t.name = this.data.artifacts[e].aid
            } else {
                t.clear();
                t.name = ""
            }
        }
        for (e = 0; e < canvas.data.manor.DCampData.TYPE_COUNT; e++) {
            this.fields[e].text = this.data.getSkillByIndex(e + 1)
        }
    }
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_CHOOSE_PET, null, {
        object: this.data
    });
    this.outHandler();
    this.imgOutHandler()
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.overHandler = function(t) {
    this.addChildAt(this.overWall, 0)
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.outHandler = function() {
    this.removeIfExist(this.overWall)
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.imgOverHandler = function(t) {
    if (t.currentTarget.name) {
        this.curOverImage = t.currentTarget.name;
        artifactAltSimple(this.curOverImage, 2)
    }
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.imgOutHandler = function(t) {
    if (this.curOverImage) {
        artifactAltSimple(this.curOverImage, 0);
        this.curOverImage = null
    }
}
;
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.destroy = function() {
    var t, e = this.images.length;
    for (t = 0; t < e; t++) {
        img = this.images[t];
        img.mouseover = null;
        img.mouseout = null
    }
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.camp.PetView = function(t) {
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = t;
            this.lockIcon.visible = this._locked;
            this.interactiveChildren = !this._locked
        }
    });
    this._hideSkill = false;
    Object.defineProperty(this, "hideSkill", {
        get: function() {
            return this._hideSkill
        },
        set: function(t) {
            this._hideSkill = t;
            if (this._hideSkill) {
                this.removeIfExist(this.title2)
            } else {
                this.addChild(this.title2)
            }
        }
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    this._index = 0;
    Object.defineProperty(this, "index", {
        get: function() {
            return this._index
        },
        set: function(t) {
            this._index = t;
            this.iconName = "camp_icons/camp_icon_" + (this._index - 1);
            this.updateTitle()
        }
    });
    canvas.px.Container.call(this);
    this.title1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,18,"center"));
    this.title1.position.set(-26, 2);
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(false,false));
    this.item.y = 18;
    this.title2 = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,9526348,108,18,"center"));
    this.title2.position.set(-18, 89);
    this.iconName = "";
    this.lockIcon = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "lock_icon")));
    this.lockIcon.position.set(-2, 14);
    this.lockIcon.visible = false;
    if (t) {
        this.crossButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button"));
        this.crossButton.position.set(43, 2);
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
            target: this.crossButton,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(1e3)))
        });
        this.item.container.mouseover = this.overHandler.bind(this);
        this.item.container.mouseout = this.outHandler.bind(this)
    }
    this.update()
}
;
canvas.app.manor.view.controls.camp.PetView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.PetView.prototype.update = function() {
    if (this.data) {
        this.item.data = this.data.item;
        this.title1.text = this.data.title
    } else {
        this.item.data = null;
        this.item.buttonMode = true;
        this.title1.text = "";
        this.outHandler()
    }
    this.updateTitle()
}
;
canvas.app.manor.view.controls.camp.PetView.prototype.updateTitle = function(t) {
    var e = "<img src='" + this.iconName + "' atlas='ui' yOffset='2'/> ";
    if (this.data) {
        this.title2.text = e + this.data.getSkillByIndex(this.index)
    } else {
        this.title2.text = (t ? e : "") + "0"
    }
}
;
canvas.app.manor.view.controls.camp.PetView.prototype.overHandler = function() {
    if (this.data)
        this.item.container.addChild(this.crossButton)
}
;
canvas.app.manor.view.controls.camp.PetView.prototype.outHandler = function() {
    if (this.crossButton)
        this.item.container.removeIfExist(this.crossButton)
}
;
canvas.app.manor.view.controls.camp.SortButtonRenderer = function(t) {
    this._sortValue = 0;
    Object.defineProperty(this, "sortValue", {
        get: function() {
            return this._sortValue
        },
        set: function(t) {
            this._sortValue = t;
            this.update()
        }
    });
    canvas.ui.ListRenderer.call(this, null, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH);
    this.id = t;
    this.selector = this.addChild(new canvas.px.Mask(canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH,60,16775110,1));
    this.selector.position.set(1, -2);
    this.selector.visible = false;
    this.button = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_base"),canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_over"),canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_down"),canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_disabled"));
    this.addChild(this.button);
    this.button.x = 8;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line_0")));
    if (this.id == canvas.data.manor.DCampData.TYPE_COUNT - 1) {
        e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line_0")));
        e.x = canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH
    }
    this.arrowUp = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow")));
    this.arrowUp.scale.y = -1;
    this.arrowUp.position.set(60, 48);
    this.arrowDown = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow")));
    this.arrowDown.position.set(60, 48);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.app.manor.model.campData.getTitleByIndex(this.id + 1)))
    })
}
;
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype.update = function() {
    switch (this.sortValue) {
    case 1:
        this.arrowUp.alpha = 1;
        this.arrowDown.alpha = .3;
        break;
    case -1:
        this.arrowUp.alpha = .3;
        this.arrowDown.alpha = 1;
        break;
    default:
        this.arrowUp.alpha = .3;
        this.arrowDown.alpha = .3;
        break
    }
    this.selector.visible = this.sortValue != 0
}
;
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype.changeSort = function() {
    this.sortValue = this.sortValue == 1 ? -1 : 1
}
;
canvas.app.manor.view.controls.elements.ButtonImage = function(t, e, a) {
    canvas.app.view.MainButton.call(this);
    if (a == undefined)
        a = 150;
    if (e == undefined)
        e = 1;
    this.button2 = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "button_0"),canvas.ResourceLoader.getImage("ui", "button_0_over"),canvas.ResourceLoader.getImage("ui", "button_0_down"));
    this.sprite.addChildAt(this.button2, 0);
    this.button2.sprite.mousedown = null;
    this.button2.sprite.mouseover = null;
    this.button2.sprite.mouseout = null;
    this.button2.sprite.mouseup = null;
    this.button2.sprite.click = null;
    this.setTitle(t);
    this.setSize(a);
    var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "manor_button_icon_" + e));
    this.addChild(e);
    e.interactive = false;
    this.button2.position.set(Math.round((a - this.button2.width) * .5), -40);
    e.position.set(this.button2.x + 11, this.button2.y + 2)
}
;
canvas.app.manor.view.controls.elements.ButtonImage.prototype = Object.create(canvas.app.view.MainButton.prototype);
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerOver = function(t) {
    canvas.ui.Button.prototype.handlerOver.call(this, t);
    this.button2.handlerOver(t)
}
;
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerOut = function(t) {
    canvas.ui.Button.prototype.handlerOut.call(this, t);
    this.button2.handlerOut(t)
}
;
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerDown = function(t) {
    canvas.ui.Button.prototype.handlerDown.call(this, t);
    this.button2.handlerDown(t)
}
;
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerUp = function(t) {
    canvas.ui.Button.prototype.handlerUp.call(this, t);
    this.button2.handlerUp(t)
}
;
canvas.app.manor.view.controls.elements.ButtonImage.prototype.update = function() {
    if (this.button2)
        this.button2.enabled = this.enabled
}
;
canvas.app.manor.view.controls.elements.CementInput = function(t) {
    canvas.px.Container.call(this);
    this.itemData = t;
    var e = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    e.width = 173;
    e.height = 81;
    var a = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,85,38,"left"));
    a.position.set(82, 11);
    a.text = this.itemData ? this.itemData.title : canvas.Translator.getText(169);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7026733,85,20,"left"));
    this.field.position.set(82, 55);
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(false,true));
    this.item.position.set(5, 5);
    this.item.data = this.itemData ? this.itemData : new canvas.data.manor.DItem({
        id: canvas.app.manor.model.cementID,
        picture: canvas.app.manor.model.cementImage,
        title: canvas.Translator.getText(169)
    });
    this.item.buttonMode = false;
    this.update(0, 0)
}
;
canvas.app.manor.view.controls.elements.CementInput.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.CementInput.prototype.clear = function() {
    this.update(0)
}
;
canvas.app.manor.view.controls.elements.CementInput.prototype.update = function(t, e) {
    this.value1 = t == undefined ? this.value1 : t;
    this.value2 = e == undefined ? canvas.app.manor.model.user.cement : e;
    this.field.text = "<b>" + this.value1 + "</b> " + canvas.Translator.getText(196) + " <font color='#" + (this.testRequires() || this.value1 == 0 ? "446c00" : "bc0000") + "'><b>" + this.value2 + "</b></font>"
}
;
canvas.app.manor.view.controls.elements.CementInput.prototype.testRequires = function() {
    var t = this.value1 > 0;
    if (this.value1 > this.value2) {
        t = false
    }
    return t
}
;
canvas.app.manor.view.controls.elements.CementInput.prototype.destroy = function() {
    if (this.parent)
        this.parent.removeChild(this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.manor.view.controls.elements.Checker = function() {
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t;
            this.filters = this._enabled ? null : [canvas.Functions.getBlackAndWhite()];
            this.interactiveChildren = this._enabled
        },
        configurable: true
    });
    this._checked = false;
    Object.defineProperty(this, "checked", {
        get: function() {
            return this._checked
        },
        set: function(t) {
            this._checked = t;
            this.current = this._checked ? 1 : 0
        }
    });
    var t = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_4"),6,0,6,0);
    var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, null, null, t, e);
    this.backPadding = 10;
    this.setSize(100, 13);
    this.max = 1;
    this.shape.buttonMode = true
}
;
canvas.app.manor.view.controls.elements.Checker.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.Checker.prototype.update = function() {
    canvas.ui.Scroll.prototype.update.call(this);
    var t = this.current > 0 ? true : false;
    if (t != this._checked) {
        this._checked = t;
        canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this)
    }
}
;
canvas.app.manor.view.controls.elements.ChoseBuildingItem = function(t) {
    canvas.ui.ListRenderer.call(this, null, 400, 200);
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"),20,20,20,20));
    this.back.width = 400;
    this.back.height = 200;
    this.image = this.addChild(new canvas.ui.Image);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,215,200,"left"));
    this.field.position.set(175, 4);
    this.buildButton = this.addChild(new canvas.app.view.MainButton);
    this.buildButton.setTitle(canvas.Translator.getText(153));
    this.buildButton.x = 205;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this);
    this.data = t
}
;
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype.update = function() {
    this.image.setImage(this.data.picture + ".png");
    this.field.text = "<font color='#B00101'><b>" + this.data.title + "</b></font><br/>" + this.data.desc + "<br/><br/><b><font face='" + canvas.Const.FONT_TAHOMA_11 + "'>" + canvas.Translator.getText(231) + ": <font face='" + canvas.Const.FONT_TAHOMA_11_BOLD + "' color='#0066cc'>" + this.data.cost + "</font></font></b> <img src='energy_icon' atlas='ui' yOffset='2'/>";
    this.buildButton.y = this.field.y + this.field.textHeight + 4;
    this._height = Math.max(150, this.buildButton.y + 40);
    this.back.height = this._height
}
;
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype.buildClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, {
        params: "chooser",
        object: this.data
    })
}
;
canvas.app.manor.view.controls.elements.Combo = function(t, e) {
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "combo_header"),[4, 0, 22, 0]);
    var i = new canvas.app.manor.view.controls.elements.ComboHeaderRenderer;
    var s = new canvas.px.RoundRect(16376749,1,t,e,5,5,false,true,0,.5);
    canvas.ui.ComboBox.call(this, a, i, s, canvas.app.manor.view.controls.elements.ComboListRenderer, canvas.ui.ComboBoxType.DOWN, scroll);
    this.list._scrollMaxAdd = 5;
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container);
    this.setSize(t || 190, e || 130);
    this.list.paddingV = 0;
    this.list.paddingH = -6
}
;
canvas.app.manor.view.controls.elements.Combo.prototype = Object.create(canvas.ui.ComboBox.prototype);
canvas.app.manor.view.controls.elements.ComboHeaderRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,100,16,"left",undefined,undefined,undefined,true);
    this.addChild(this.title);
    this.title.position.set(4, 6);
    this.interactive = false;
    this.msk = new canvas.px.Mask(100,20);
    this.addChild(this.msk);
    this.mask = this.msk
}
;
canvas.app.manor.view.controls.elements.ComboHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.ComboHeaderRenderer.prototype.update = function() {
    if (this.title) {
        this.title.text = this.data ? this.data.title : "";
        this.title.setSize(this._width);
        this.msk.setSize(this._width - 20)
    }
}
;
canvas.app.manor.view.controls.elements.ComboListRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,100,14,"left",undefined,undefined,undefined,true);
    this.addChild(this.title);
    this.title.position.set(4, 1);
    this._height = 14;
    this.selector = new canvas.px.Mask(100,20,13421772,1);
    this.buttonMode = true
}
;
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.update = function() {
    if (this.selector) {
        this.selector.setSize(this._width, 16)
    }
    if (this.title) {
        this.title.text = this.data ? this.data.title : "";
        this.title.setSize(this._width - 10)
    }
}
;
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.overHandler = function() {
    this.addChildAt(this.selector, 0)
}
;
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.outHandler = function() {
    if (this.selector.parent)
        this.removeChild(this.selector)
}
;
canvas.app.manor.view.controls.elements.Dragger = function(t) {
    var e = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_1"),4,0,4,0);
    var a = new canvas.px.Container;
    this.leftArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_minus"));
    this.rightArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_plus"));
    a.addChild(this.leftArrow);
    a.addChild(this.rightArrow);
    this.rightArrow.x = this.leftArrow.width - 5;
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, null, null, e, a, t);
    this.backPadding = 5;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusClick, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusClick, this)
}
;
canvas.app.manor.view.controls.elements.Dragger.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.Dragger.prototype.plusClick = function() {
    if (!this.wasDragged)
        this.plusClickHandler()
}
;
canvas.app.manor.view.controls.elements.Dragger.prototype.minusClick = function() {
    if (!this.wasDragged)
        this.minusClickHandler()
}
;
canvas.app.manor.view.controls.elements.Dragger.prototype.update = function() {
    canvas.ui.Scroll.prototype.update.call(this);
    this.dragView.visible = true
}
;
canvas.app.manor.view.controls.elements.Dragger.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusClick, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusClick, this);
    canvas.ui.Scroll.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.elements.Energy = function(t) {
    this._energy = 0;
    Object.defineProperty(this, "energy", {
        get: function() {
            return this._energy
        },
        set: function(t) {
            this.update(t)
        }
    });
    canvas.px.Container.call(this);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,26316,t ? t : 40,20,"left",null,0,0))
}
;
canvas.app.manor.view.controls.elements.Energy.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.Energy.prototype.update = function(t) {
    this._energy = t;
    this.field.text = t > 0 ? t + " <img src='energy_icon' atlas='ui' yOffset='2'/>" : ""
}
;
canvas.app.manor.view.controls.elements.FilterItemRenderer = function(t, e) {
    canvas.ui.ListRenderer.call(this, null, 213, 20);
    var a = 213;
    this.back = this.addChild(new canvas.px.Mask(a + 1,20,15585423,1));
    this.back.visible = false;
    this.back.x = -14;
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,a - 30,20,"left"));
    this.field.position.set(10, 2);
    this.arrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow")));
    this.arrow.pivot = new canvas.px.Point(Math.round(this.arrow.width * .5),Math.round(this.arrow.height * .5));
    this.arrow.y = 10;
    this.arrow.scale.y = e ? 1 : -1;
    this.data = t;
    this.buttonMode = true;
    this.selected = false;
    this.data = t
}
;
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.update = function() {
    this.field.text = this.data.title
}
;
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.updateSelection = function() {
    this.arrow.visible = this.selected
}
;
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.setSortDirection = function(t) {
    this.arrow.scale.y = t ? 1 : -1
}
;
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.overHandler = function() {
    this.back.visible = true;
    this.field.color = 10616832
}
;
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.outHandler = function() {
    this.back.visible = false;
    this.field.color = 7026733
}
;
canvas.app.manor.view.controls.elements.FilterSortControl = function(t, e, a, i, s, n) {
    this._filterText = "";
    Object.defineProperty(this, "filterText", {
        get: function() {
            return this._filterText
        },
        set: function(t) {
            this._filterText = t;
            this.input.text = this._filterText
        }
    });
    this._sortType = "";
    Object.defineProperty(this, "sortType", {
        get: function() {
            return this._sortType
        },
        set: function(t) {
            this._sortType = t
        }
    });
    this._sortDirection = "";
    Object.defineProperty(this, "sortDirection", {
        get: function() {
            return this._sortDirection
        },
        set: function(t) {
            this._sortDirection = t
        }
    });
    this._mode = "";
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    if (e == undefined)
        e = "";
    if (a == undefined)
        a = "";
    if (i == undefined)
        i = false;
    if (s == undefined)
        s = "Search here...";
    if (n == undefined)
        n = 199;
    this.sortType = a;
    this.sortDirection = i;
    var r;
    var o;
    var l;
    var c;
    this.container = this.addChild(new canvas.px.Container);
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1);
    this.list._paddingV = 0;
    this.list.container.x = 5;
    var p, h = t.length;
    for (p = 0; p < h; p++) {
        r = t[p];
        o = new canvas.app.manor.view.controls.elements.FilterItemRenderer(r,i);
        this.list.add(o, false);
        if (r.type == this.sortType)
            o.selected = true
    }
    this.list.update();
    this.list.position.set(-209, 30);
    this.list.setSize(213, h * 20);
    this.backFilter = this.container.addChild(new canvas.px.Container);
    c = this.backFilter.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_5"),8,5,29,9));
    c.width = 220;
    c.height = this.list.height + 11;
    l = this.backFilter.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tile_5_1")));
    l.x = c.width - l.width;
    c.y = l.height;
    this.backFilter.position.set(-this.backFilter.width + 3, -1);
    this.backFilter.visible = false;
    this.backSearch = this.container.addChild(new canvas.px.Container);
    c = this.backSearch.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_5"),8,5,29,9));
    c.width = 205;
    c.height = 30;
    l = this.backSearch.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tile_5_1")));
    l.x = c.width - l.width;
    c.y = l.height;
    this.backSearch.position.set(-this.backSearch.width - 25, -1);
    this.backSearch.visible = false;
    this.filterButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_sort_button"),canvas.ResourceLoader.getImage("ui", "filter_sort_button_over")));
    this.filterButton.x = -this.filterButton.width;
    this.searchButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_search_button"),canvas.ResourceLoader.getImage("ui", "filter_search_button_over")));
    this.searchButton.x = this.filterButton.x - this.searchButton.width - 5;
    this.container.addChild(this.list);
    this.input = this.container.addChild(new canvas.app.manor.view.controls.elements.Input("left",true,n,new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_base"),6,0,6,0),new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_down"),6,0,6,0),new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_over"),6,0,6,0),s,false));
    this.input._paddingRight = 20;
    this.searchClearButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_clear_button"),canvas.ResourceLoader.getImage("ui", "filter_clear_button_over")));
    this.input.position.set(-this.input.width - 28, 31);
    this.searchClearButton.position.set(this.input.x + this.input.width - this.searchClearButton.width - 2, 33);
    this.filterText = e;
    this.mode = "";
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.searchButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(277)))
    });
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.filterButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(278)))
    });
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.searchClearButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(279)))
    });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.filterButton, this.filterClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.searchButton, this.searchClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.searchClearButton, this.clearClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.inputSearchHandler, this);
    this.interactive = true
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER = "modeFilter";
canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH = "modeSearch";
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.update = function() {
    this.backSearch.visible = this.backFilter.visible = this.list.visible = false;
    this.container.removeIfExist(this.input);
    this.container.removeIfExist(this.searchClearButton);
    switch (this.mode) {
    case canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER:
        this.backFilter.visible = this.list.visible = true;
        break;
    case canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH:
        this.backSearch.visible = true;
        this.container.addChildAt(this.input, 0);
        this.updateClearButton();
        this.focus();
        break
    }
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.filterClickHandler = function() {
    this.mode = this.mode == canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER ? "" : canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.searchClickHandler = function() {
    this.mode = this.mode == canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH ? "" : canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.clearClickHandler = function() {
    this.input.clear();
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input);
    this.focus();
    canvas.utils.HintManager.instance.hide()
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.focus = function() {
    if (this.input.input.input)
        this.input.input.input.focus()
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.listSelectHandler = function(t) {
    var e = t.params;
    var a = e ? e.data : null;
    if (a) {
        if (this.sortType == a.type) {
            this.sortDirection = !this.sortDirection
        } else {
            this.sortType = a.type
        }
        e.setSortDirection(this.sortDirection)
    }
    canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this);
    this.mode = ""
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.inputSearchHandler = function() {
    this.filterText = this.input.text;
    canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this);
    this.updateClearButton()
}
;
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.updateClearButton = function() {
    if (this.input.parent) {
        if (this.filterText != "") {
            this.container.addChild(this.searchClearButton)
        } else {
            this.container.removeIfExist(this.searchClearButton)
        }
    } else {
        this.container.removeIfExist(this.searchClearButton)
    }
}
;
canvas.app.manor.view.controls.elements.FilterSortControlPets = function(t, e, a, i, s) {
    canvas.app.manor.view.controls.elements.FilterSortControl.call(this, t, e, a, i, s, 157);
    this.searchButton.interactiveChildren = false;
    this.filterButton.x += 142;
    this.list.x += 142;
    this.backFilter.x += 142;
    this.input.x += 146;
    this.input.y -= 30;
    this.searchClearButton.x += 144;
    this.searchClearButton.y -= 30;
    this.input._paddingLeft = 8;
    this.input._paddingRight = 26;
    this.input.topField.x += 8;
    this.container.addChild(this.searchButton);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.filterButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(285)))
    })
}
;
canvas.app.manor.view.controls.elements.FilterSortControlPets.prototype = Object.create(canvas.app.manor.view.controls.elements.FilterSortControl.prototype);
canvas.app.manor.view.controls.elements.FilterSortControlPets.prototype.update = function() {
    canvas.app.manor.view.controls.elements.FilterSortControl.prototype.update.call(this);
    this.container.addChildAt(this.input, 0)
}
;
canvas.app.manor.view.controls.elements.Input = function(t, e, a, i, s, n, r, o) {
    this._input = null;
    Object.defineProperty(this, "input", {
        get: function() {
            return this._input
        },
        set: function(t) {
            if (this._input) {
                this._input.parent = null;
                canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this._input, this.changeHandler, this)
            }
            this._input = t;
            if (this._input) {
                this._input.parent = this;
                this._input.color = "#6B382D";
                this._input.width = this.back.width - 4 - this._paddingRight;
                this._input.bold = true;
                this._input.align = this.align;
                this._input.x = 4 + this._paddingLeft;
                this._input.y = 11;
                canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this._input, this.changeHandler, this);
                this.changeHandler();
                if (this.backOver) {
                    this._input.input.onmouseover = this.overHandler.bind(this);
                    this._input.input.onmouseout = this.outHandler.bind(this)
                }
                if (this.backFocus) {
                    this._input.input.onfocus = this.focusinHandler.bind(this);
                    this._input.input.onblur = this.focusoutHandler.bind(this)
                }
            }
        }
    });
    Object.defineProperty(this, "text", {
        get: function() {
            return this.input ? this.input.text : ""
        },
        set: function(t) {
            if (this.input)
                this.input.text = t
        }
    });
    this._paddingRight = 0;
    Object.defineProperty(this, "paddingRight", {
        get: function() {
            return this._paddingRight
        },
        set: function(t) {
            this._paddingRight = t
        }
    });
    this._paddingLeft = 0;
    Object.defineProperty(this, "paddingLeft", {
        get: function() {
            return this._paddingLeft
        },
        set: function(t) {
            this._paddingLeft = t
        }
    });
    canvas.px.Container.call(this);
    if (t == undefined)
        t = "left";
    if (e == undefined)
        e = true;
    if (a == undefined)
        a = 30;
    if (r == undefined)
        r = "";
    if (o == undefined)
        o = false;
    this.back = i ? i : new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_2"),5,0,5,0);
    this.addChild(this.back);
    this.back.width = a;
    this.align = t;
    this.defaultText = r;
    this.lastValue = null;
    if (s != null) {
        this.backFocus = s;
        this.backFocus.width = a
    }
    if (n != null) {
        this.backOver = n;
        this.backOver.width = a
    }
    this.onlyNumbers = false;
    this.maxChars = 30;
    if (o) {
        this.leftArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_minus"));
        this.leftArrow.position.set(-this.leftArrow.width, 0);
        this.addChild(this.leftArrow);
        this.rightArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_plus"));
        this.rightArrow.position.set(a, 0);
        this.addChild(this.rightArrow);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusHandler, this);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusHandler, this)
    }
    if (this.defaultText) {
        this.topField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,a,20,this.align);
        this.topField.alpha = .6;
        this.topField.position.set(5, 2);
        this.addChild(this.topField);
        this.topField.text = this.defaultText
    }
}
;
canvas.app.manor.view.controls.elements.Input.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.Input.prototype.changeHandler = function(t) {
    if (this.lastValue == this.input.text)
        return;
    this.lastValue = this.input.text;
    if (this.onlyNumbers) {
        var e = parseInt(this.input.text) || 0;
        this.input.text = e
    }
    if (this.maxChars > 0 && this.input.text.length > this.maxChars) {
        this.input.text = this.input.text.substr(0, this.maxChars)
    }
    this.updateTop();
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.text)
}
;
canvas.app.manor.view.controls.elements.Input.prototype.clear = function() {
    this.input.text = "";
    this.changeHandler()
}
;
canvas.app.manor.view.controls.elements.Input.prototype.plusHandler = function() {
    var t = parseInt(this.input.text) + 1;
    t = t > 9999999999 ? 9999999999 : t;
    this.input.text = t;
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.input.text)
}
;
canvas.app.manor.view.controls.elements.Input.prototype.minusHandler = function() {
    var t = parseInt(this.input.text) - 1;
    t = t < 0 ? 0 : t;
    this.input.text = t;
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.input.text)
}
;
canvas.app.manor.view.controls.elements.Input.prototype.hideAll = function() {
    if (this.back)
        back.visible = false;
    if (this.backFocus)
        backFocus.visible = false;
    if (this.backOver)
        backOver.visible = false
}
;
canvas.app.manor.view.controls.elements.Input.prototype.updateTop = function() {
    if (this.topField) {
        this.topField.visible = this.input.text == ""
    }
}
;
canvas.app.manor.view.controls.elements.Input.prototype.overHandler = function() {
    if (this.backFocus && this.input && this.input.input && this.input.input === document.activeElement)
        return;
    if (this.back)
        this.removeIfExist(this.back);
    if (this.backFocus)
        this.removeIfExist(this.backFocus);
    if (this.backOver)
        this.addChildAt(this.backOver, 0)
}
;
canvas.app.manor.view.controls.elements.Input.prototype.outHandler = function() {
    if (this.backFocus && this.input && this.input.input && this.input.input === document.activeElement)
        return;
    if (this.backOver)
        this.removeIfExist(this.backOver);
    if (this.backFocus)
        this.removeIfExist(this.backFocus);
    if (this.back)
        this.addChildAt(this.back, 0)
}
;
canvas.app.manor.view.controls.elements.Input.prototype.focusinHandler = function() {
    if (this.back)
        this.removeIfExist(this.back);
    if (this.backOver)
        this.removeIfExist(this.backOver);
    if (this.backFocus)
        this.addChildAt(this.backFocus, 0)
}
;
canvas.app.manor.view.controls.elements.Input.prototype.focusoutHandler = function() {
    this.outHandler()
}
;
canvas.app.manor.view.controls.elements.Input.prototype.destroy = function() {
    this.input = null;
    if (this.leftArrow)
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusHandler, this);
    if (this.rightArrow)
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusHandler, this);
    canvas.px.Container.prototype.destroy.call(this, {
        children: true
    })
}
;
canvas.app.manor.view.controls.elements.Item = function(t, e, a, i, s, n, r) {
    this._mode = "";
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t;
            canvas.Functions.clearChildren(this.overContainer);
            var e;
            switch (this._mode) {
            case canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET:
            case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET:
                e = this.overContainer.addChild(new canvas.app.manor.view.controls.elements.BankContent(canvas.Translator.getText(1e3)));
                break;
            case canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT:
            case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT:
                e = this.overContainer.addChild(new canvas.app.manor.view.controls.elements.BankContent(canvas.Translator.getText(242)));
                break
            }
        }
    });
    canvas.ui.ListRenderer.call(this, null, 70, 70);
    if (t == undefined)
        t = true;
    if (e == undefined)
        e = true;
    if (a == undefined)
        a = "";
    if (i == undefined)
        i = "";
    if (s == undefined)
        s = true;
    if (n == undefined)
        n = false;
    if (r == undefined)
        r = false;
    this.container = this.addChild(new canvas.px.Container);
    this.lockedMessage = i;
    this.showCount = s;
    this.red = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_red")));
    this.red.position.set(-1, 64);
    this.green = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_green")));
    this.green.position.set(0, 65);
    this.bottomTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,16765254,64,17,"center"));
    this.bottomTitle.position.set(4, 68);
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    this.back.position.set(5, 5);
    this.imageContainer = this.container.addChild(new canvas.px.Container);
    this.imageContainer.position.set(6, 5);
    this.image = this.imageContainer.addChild(new canvas.ui.Image);
    this.lockedImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_locked")));
    this.lockedImage.position.set(6, 5);
    this.lockedImage.visible = false;
    this.count = this.container.addChild(new canvas.px.Mask(34,16,7230284,1));
    this.count.position.set(7, 48);
    this.count.visible = false;
    this.count.interactiveChildren = false;
    this.countField = this.count.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,16177574,36,18,"center"));
    this.countField.position.set(-1, 1);
    this.border = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")));
    this.timeField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD_STROKE,15587444,66,20,"center"));
    this.timeField.position.set(4, 8);
    if (n) {
        this.progressor = this.container.addChildAt(new canvas.px.RoundProgress(60,0,.8), this.container.getChildIndex(this.timeField));
        this.progressor.position.set(35, 35);
        this.progressor.scale.x = -1;
        this.msk = this.addChild(new canvas.px.Mask(60,60));
        this.msk.position.set(6, 5);
        this.progressor.mask = this.msk;
        this.setProgress(1)
    }
    this.setColor(0);
    this.overContainer = new canvas.px.Container;
    this.buttonMode = true;
    this.click = this.mouseover = this.mouseout = null;
    if (e) {
        this.container.mouseover = this.overHandler.bind(this);
        this.container.mouseout = this.outHandler.bind(this)
    }
    if (t) {
        this.container.click = this.clickHandler.bind(this)
    }
    this.mode = a;
    this.container.interactive = this.interactive = true;
    this.container.hitArea = new canvas.px.Rectangle(4,4,60,60)
}
;
canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT = "bankPut";
canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET = "bankGet";
canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT = "storagePut";
canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET = "storageGet";
canvas.app.manor.view.controls.elements.Item.overedItem = null;
canvas.app.manor.view.controls.elements.Item.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.Item.prototype.update = function() {
    if (this.oldData == null || this.oldData.id == "empty")
        this.outHandler(null);
    var t;
    this.image.clear();
    canvas.Functions.clearChildren(this.imageContainer);
    this.lockedImage.visible = false;
    this.imageContainer.addChild(this.image);
    if (this._data && this._data.id != "empty") {
        this.image.setImage(this._data.image);
        this.setProgress(this._data.timeFull == 0 ? 1 : 1 - this._data.time / this._data.timeFull);
        this.timeField.text = canvas.Functions.formatDate(this._data.time * 1e3, "00", 2, true);
        if (this.showCount && this._data.count > 1) {
            this.count.visible = true;
            this.countField.text = this._data.count
        } else {
            this.count.visible = false
        }
        this.buttonMode = true;
        if (this._data.enchant3 > 0) {
            t = this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_hole")));
            t.y = 40
        }
        if (this._data.enchantQuality > 0 || this._data.enchantParam > 0) {
            t = this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_" + (parseInt(this._data.enchantQuality) * 10 + parseInt(this._data.enchantParam)))));
            t.position.set(2, 42)
        }
        if (this._data.enchant3 > 0) {
            t = this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_oprava")));
            t.y = 40
        }
    } else {
        this.setProgress(1);
        this.timeField.text = "";
        this.count.visible = false;
        this.buttonMode = false;
        if (this.lockedMessage != "" && (this._data == null || this._data.id != "empty")) {
            this.lockedImage.visible = true
        }
        this.outHandler()
    }
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: this
    });
    this.timeField.visible = this.timeField.text != ""
}
;
canvas.app.manor.view.controls.elements.Item.prototype.setProgressExp = function(t) {}
;
canvas.app.manor.view.controls.elements.Item.prototype.setProgress = function(t) {
    if (this.progressor)
        this.progressor.progress = 1 - t
}
;
canvas.app.manor.view.controls.elements.Item.prototype.clone = function() {
    var t = new canvas.app.manor.view.controls.elements.Item;
    t.data = this._data;
    t.name = this.name;
    return t
}
;
canvas.app.manor.view.controls.elements.Item.prototype.removeHints = function() {
    this.outHandler();
    canvas.utils.HintManager.instance.hide()
}
;
canvas.app.manor.view.controls.elements.Item.prototype.overHandler = function(t) {
    canvas.app.manor.view.controls.elements.Item.overedItem = this;
    if (canvas.app.manor.model.globalDrag) {
        t.stopPropagation();
        return
    }
    if (this.data != null && this.data.id != "empty" && this.data.id != "") {
        if (!this.mouseover && artifactAltSimple(this.data.id, 2) != "1") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
                target: this,
                params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(this.data.title))
            });
            canvas.utils.HintManager.instance.show(this)
        }
        this.container.addChild(this.overContainer)
    }
}
;
canvas.app.manor.view.controls.elements.Item.prototype.outHandler = function(t) {
    if (this.useOutTest && canvas.app.manor.view.controls.elements.Item.overedItem != this)
        return;
    if (this.data != null && this._data.id != "empty" && this.data.id != "") {
        artifactAltSimple(this.data.id, 0)
    }
    this.container.removeIfExist(this.overContainer);
    canvas.app.manor.view.controls.elements.Item.overedItem = null
}
;
canvas.app.manor.view.controls.elements.Item.prototype.clickHandler = function(t) {
    var e;
    if (this._data == null || this._data.id == "empty")
        return;
    switch (this.mode) {
    case canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET:
        if (!t.target.parent || t.target.parent.name != "info") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, {
                object: {
                    from: this.data,
                    toArea: "0"
                }
            });
            return
        }
        break;
    case canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT:
        if (!t.target.parent || t.target.parent.name != "info") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, {
                object: {
                    from: this.data,
                    toArea: "firstFree"
                }
            });
            return
        }
        break;
    case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET:
        if (!t.target.parent || t.target.parent.name != "info") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                object: {
                    getItem: this.data
                }
            });
            return
        }
        break;
    case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT:
        if (!t.target.parent || t.target.parent.name != "info") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                object: {
                    putItem: this.data
                }
            });
            return
        }
        break
    }
    if (this._data.id != "" && this._data.aid != "" && this._data.id == this._data.aid)
        canvas.Functions.navigateToURL("artifact_info.php?artikul_id=" + this._data.aid, "_blank");
    else if (this._data.id != "")
        canvas.Functions.navigateToURL("artifact_info.php?artifact_id=" + this._data.id, "_blank");
    else if (this._data.aid != "")
        canvas.Functions.navigateToURL("artifact_info.php?artikul_id=" + this._data.aid, "_blank")
}
;
canvas.app.manor.view.controls.elements.Item.prototype.setColor = function(t) {
    switch (t) {
    case 0:
        this.bottomTitle.visible = false;
        this.green.visible = false;
        this.red.visible = false;
        break;
    case 1:
        this.bottomTitle.visible = true;
        this.bottomTitle.text = canvas.Translator.getText(194);
        this.green.visible = true;
        this.red.visible = false;
        break;
    case 2:
        this.bottomTitle.visible = true;
        this.bottomTitle.text = canvas.Translator.getText(195);
        this.green.visible = false;
        this.red.visible = true;
        break
    }
}
;
canvas.app.manor.view.controls.elements.Item.prototype.destroy = function() {
    this.container.mouseover = null;
    this.container.mouseout = null;
    this.container.click = null;
    this.data = null;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: this
    });
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.elements.BankContent = function(t) {
    canvas.px.Container.call(this);
    this.title = t;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_plane")));
    e.position.set(6, 30);
    this.info = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "item_info")));
    this.info.name = "info";
    this.info.position.set(46, 5);
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,2564379,64,16,"center"));
    this.field.text = this.title;
    this.field.position.set(4, 30);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.info, this.infoOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.info, this.infoOutHandler, this)
}
;
canvas.app.manor.view.controls.elements.BankContent.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.BankContent.prototype.infoOverHandler = function() {
    this.field.text = canvas.Translator.getText(243)
}
;
canvas.app.manor.view.controls.elements.BankContent.prototype.infoOutHandler = function() {
    this.field.text = this.title
}
;
canvas.app.manor.view.controls.elements.BankContent.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }]);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.info, this.infoOverHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.info, this.infoOutHandler, this)
}
;
canvas.app.manor.view.controls.elements.Labour = function(t, e) {
    if (e == undefined) {
        e = new Object;
        e.back = "labour_progress_back";
        e.backSlicedArray = null;
        e.backSize = 0;
        e.front = "labour_progress";
        e.frontSlicedArray = null;
        e.frontSize = 0;
        e.font = canvas.Const.FONT_TAHOMA_9;
        e.color = 16777215;
        e.pos = new canvas.px.Point(30,12);
        e.textPos = new canvas.px.Point(0,1)
    }
    this.title = t || "";
    this.params = e;
    canvas.ui.Progress.call(this, canvas.ResourceLoader.getImage("ui", this.params.front), this.params.frontSlicedArray);
    if (this.params.backSlicedArray) {
        var a = this.addChildAt(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", this.params.back),this.params.backSlicedArray[0],this.params.backSlicedArray[1],this.params.backSlicedArray[2],this.params.backSlicedArray[3]), 0);
        a.width = this.params.backSize
    } else {
        this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.params.back)), 0)
    }
    if (this.params.frontSize)
        this.setSize(this.params.frontSize);
    if (this.backImage)
        this.backImage.position.set(this.params.pos.x, this.params.pos.y);
    this.sprite.position.set(this.params.pos.x, this.params.pos.y);
    this.tf = this.addChild(new canvas.ui.Text(this.params.font,this.params.color,this.sprite.width,20,"center"));
    this.tf.position.set(this.params.pos.x + this.params.textPos.x, this.params.pos.y + this.params.textPos.y)
}
;
canvas.app.manor.view.controls.elements.Labour.prototype = Object.create(canvas.ui.Progress.prototype);
canvas.app.manor.view.controls.elements.Labour.prototype.setLabour = function(t, e, a) {
    if (canvas.EventManager.hasEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this))
        this.animated = true;
    if (t == 0)
        this.animated = false;
    this.tf.text = (this.title == "" ? "" : this.title + ": ") + t + "/" + e;
    t = t < 0 ? 0 : t > e ? e : t;
    e = e;
    this.targetValue = e == 0 ? 0 : t / e;
    if (this.animated) {
        canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this)
    } else {
        canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this);
        this.progress = this.targetValue
    }
}
;
canvas.app.manor.view.controls.elements.Labour.prototype.setTitle = function(t) {
    this.tf.text = t || ""
}
;
canvas.app.manor.view.controls.elements.Labour.prototype.updateHandler = function() {
    if (this.progress < this.targetValue) {
        this.progress = Math.min(this.progress + .05, this.targetValue)
    } else if (this.progress > this.targetValue) {
        this.progress = Math.max(this.progress - .05, this.targetValue)
    } else {
        canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this)
    }
}
;
canvas.app.manor.view.controls.elements.LabourGreen = function(t) {
    if (t == undefined)
        t = 130;
    var e = new Object;
    e.back = "labour4_progress_back";
    e.backSlicedArray = [20, 0, 20, 0];
    e.backSize = t;
    e.front = "labour4_progress";
    e.frontSlicedArray = [6, 0, 6, 0];
    e.frontSize = t - 30;
    e.font = canvas.Const.FONT_TAHOMA_10;
    e.color = 16777215;
    e.pos = new canvas.px.Point(15,9);
    e.textPos = new canvas.px.Point(0,0);
    canvas.app.manor.view.controls.elements.Labour.call(this, null, e)
}
;
canvas.app.manor.view.controls.elements.LabourGreen.prototype = Object.create(canvas.app.manor.view.controls.elements.Labour.prototype);
canvas.app.manor.view.controls.elements.LabourInput = function() {
    this._maxValue = 1e4;
    Object.defineProperty(this, "maxValue", {
        get: function() {
            return this._maxValue
        },
        set: function(t) {
            this._maxValue = t;
            this.dragger.max = this._maxValue
        }
    });
    this._buildingMaxValue = 1e4;
    Object.defineProperty(this, "buildingMaxValue", {
        get: function() {
            return this._buildingMaxValue
        },
        set: function(t) {
            this._buildingMaxValue = t
        }
    });
    canvas.px.Container.call(this);
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"),4,4,4,4);
    this.back.width = 173;
    this.back.height = 81;
    this.addChild(this.back);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,63,18,"left");
    t.position.set(12, 19);
    t.text = canvas.Translator.getText(107);
    this.addChild(t);
    this.fieldLabourMax = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7026733,60,20,"left");
    this.fieldLabourMax.position.set(110, 19);
    this.addChild(this.fieldLabourMax);
    this.input = new canvas.app.manor.view.controls.elements.Input(canvas.app.manor.view.input);
    this.addChild(this.input);
    this.input.onlyNumbers = true;
    this.input.maxChars = 4;
    this.input.position.set(70, 15);
    this.input.text = "0";
    this.dragger = new canvas.app.manor.view.controls.elements.Dragger(this);
    this.addChild(this.dragger);
    this.dragger.position.set(10, 50);
    this.dragger.setSize(150, 5);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.dragger, this.draggerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this)
}
;
canvas.app.manor.view.controls.elements.LabourInput.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.LabourInput.prototype.update = function() {
    var t = canvas.app.manor.model;
    this.fieldLabourMax.text = canvas.Translator.getText(196) + "  <b>" + this._buildingMaxValue + "</b>";
    this.testRequires()
}
;
canvas.app.manor.view.controls.elements.LabourInput.prototype.testRequires = function() {
    var t = canvas.app.manor.model;
    var e = parseInt(this.input.text);
    var a = e > 0;
    if (e > t.user.labour) {
        if (this.input.input)
            this.input.input.color = "#bc0000";
        a = false
    } else {
        if (this.input.input)
            this.input.input.color = "#446c00"
    }
    return a
}
;
canvas.app.manor.view.controls.elements.LabourInput.prototype.changeHandler = function() {
    this.setInputValue(this.input.text || 0)
}
;
canvas.app.manor.view.controls.elements.LabourInput.prototype.draggerHandler = function() {
    this.setInputValue(this.dragger.current)
}
;
canvas.app.manor.view.controls.elements.LabourInput.prototype.setInputValue = function(t) {
    t = parseInt(t);
    var e = canvas.app.manor.model;
    var a = this.maxValue >= e.user.labour ? e.user.labour : this.maxValue;
    t = t > a ? a : t < 0 ? 0 : t;
    this.input.text = t;
    this.dragger.current = t;
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.text)
}
;
canvas.app.manor.view.controls.elements.LabourInput.prototype.clear = function() {
    var t = canvas.app.manor.model;
    setTimeout(this.setInputValue.bind(this), 10, t.user.labour)
}
;
canvas.app.manor.view.controls.elements.LabourInput.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.dragger, this.draggerHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    canvas.px.Container.prototype.destroy.call(this, {
        children: true
    })
}
;
canvas.app.manor.view.controls.elements.Level = function() {
    Object.defineProperty(this, "level", {
        get: function() {
            return parseInt(this.levelField.text)
        },
        set: function(t) {
            this.levelField.text = t
        }
    });
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "level_back")));
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,16777215,60,23,"center"));
    this.title.text = canvas.Translator.getText(172);
    this.title.position.set(46, 11);
    this.levelField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD,16777215,31,23,"center"));
    this.levelField.position.set(12, 9)
}
;
canvas.app.manor.view.controls.elements.Level.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.MenuItemRenderer = function(t) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(200, t.title ? 20 : 10);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,15250952,this._width,this._height,"left"));
    this.buttonMode = true;
    this.data = t
}
;
canvas.app.manor.view.MenuItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.MenuItemRenderer.prototype.update = function() {
    var t = canvas.app.manor.model;
    if (this.data) {
        this.field.text = this.data.title ? "<img src='menu_icon' atlas='ui' yOffset='1'/>  " + this.data.title : ""
    }
}
;
canvas.app.manor.view.MenuItemRenderer.prototype.clickHandler = function() {
    var t = canvas.app.manor.model;
    if (this.data.link == "exit") {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.EXIT)
    } else if (this.data.link.substr(0, 3) == "prt") {
        var e = {
            object: {
                building_action: "teleport",
                number: this.data.link.substr(3)
            }
        };
        if (t.localStorage.get("portalConfirm") != "1") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                params: canvas.Translator.getText(269) + " <b>" + this.data.title + "</b>?" + (t.portalJumpCost > 0 ? "<br/>" + canvas.Translator.getText(271) + " <b><font color='#0066cc'>" + t.portalJumpCost + "</font></b> <img src='energy_icon' yOffset='2' atlas='ui'/>" : ""),
                object: {
                    name: canvas.app.manor.Event.USE_PORTAL_ACTION,
                    params: e
                }
            })
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, e)
        }
    } else {
        canvas.EventManager.dispatchEvent(this.data.event, null, {
            params: this.data.link
        })
    }
}
;
canvas.app.manor.view.MenuItemRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
;
canvas.app.manor.view.MenuItemRenderer.prototype.outHandler = function() {
    this.filters = null
}
;
canvas.app.manor.view.MenuItemRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.elements.MyRequestLine = function(t) {
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"),4,0,4,0);
    this.back.width = 370;
    this.back.height = 24;
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7092753,224,18,"left");
    this.title.position.set(7, 5);
    var e = new Object;
    e.back = "labour2_progress_back";
    e.front = "labour2_progress";
    e.font = canvas.Const.FONT_TAHOMA_9;
    e.color = 6499081;
    e.pos = new canvas.px.Point(6,5);
    e.textPos = new canvas.px.Point(0,1);
    this.progress = new canvas.app.manor.view.controls.elements.Labour("",e);
    this.progress.position.set(150, 0);
    this.fieldEnergy = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,30,18,"right");
    this.fieldEnergy.position.set(243, 5);
    this.fieldPrice = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,26,18,"right");
    this.fieldPrice.position.set(272, 5);
    this.back2 = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4);
    this.back2.width = 370;
    this.back2.height = 72;
    var a = this.back2.addChild(new canvas.px.Graphics);
    a.lineStyle(1, 14922592);
    for (var i = 0; i < 184; i += 2) {
        a.moveTo(i * 2, 0);
        a.lineTo((i + 1) * 2, 0)
    }
    a.position.set(2, 28);
    this.fieldComment = this.back2.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,362,37,"left"));
    this.fieldComment.position.set(6, 35);
    canvas.ui.ListRenderer.call(this, null, 380, 24);
    this.addChild(this.back);
    this.addChild(this.title);
    this.addChild(this.progress);
    this.addChild(this.fieldEnergy);
    this.addChild(this.fieldPrice);
    var s = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "money_silver")));
    s.position.set(300, 6);
    this.editButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "edit_button")));
    this.editButton.position.set(322, 0);
    this.deleteButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button")));
    this.deleteButton.position.set(346, 0);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.editButton, this.editClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.deleteButton, this.deleteClickHandler, this);
    this.data = t
}
;
canvas.app.manor.view.controls.elements.MyRequestLine.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.update = function() {
    if (this.data) {
        var t = canvas.app.manor.model;
        var e = this.data, a, i;
        a = t.user.buildings[e.building];
        i = t.buildings[a.name][a.level + 1];
        this.title.text = i.title;
        this.progress.setLabour(a.labour, i.cost);
        this.fieldEnergy.text = e.labour;
        this.fieldPrice.text = e.price;
        if (a.hireTimeLeft > 0) {
            this.removeIfExist(this.back);
            this.addChildAt(this.back2, 0);
            this.fieldComment.text = canvas.Translator.getText(165) + " <b>" + a.hireTimeLeft + " " + canvas.Translator.getText(2001) + ".</b><br/>" + canvas.Translator.getText(166);
            this._height = 99
        } else {
            this.removeIfExist(this.back2);
            this.addChildAt(this.back, 0);
            this._height = 24
        }
    }
}
;
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.editClickHandler = function() {
    canvas.app.manor.model.requestToRemove = this.data.id;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, {
        params: this.data.id,
        object: this.data
    })
}
;
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.deleteClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(164),
        object: {
            name: canvas.app.manor.Event.REMOVE_WORK_REQUEST,
            params: {
                params: this.data.id
            }
        }
    })
}
;
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.editButton, this.editClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.deleteButton, this.deleteClickHandler, this);
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.elements.Pager = function() {
    canvas.ui.Pager.call(this, canvas.ResourceLoader.getImage("ui", "pager_home"), canvas.ResourceLoader.getImage("ui", "pager_end"), canvas.ResourceLoader.getImage("ui", "pager_minus"), canvas.ResourceLoader.getImage("ui", "pager_plus"), new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,12713984,10,16,"left"));
    this._paddingNumbersLeft = 7
}
;
canvas.app.manor.view.controls.elements.Pager.prototype = Object.create(canvas.ui.Pager.prototype);
canvas.app.manor.view.controls.elements.PagerSimple = function(t, e, a, i, s) {
    if (s == undefined)
        s = 2;
    if (t == canvas.ui.ScrollType.HORIZONTAL) {
        var n = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"));
        var r = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"));
        r.scale.x = -1;
        r.pivot = new canvas.px.Point(-25,0);
        var o = null;
        if (e) {
            o = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_6"),4,4,4,4);
            o.height = 28
        }
        var l = null;
        if (a) {
            l = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "drag_h"))
        }
        canvas.ui.Scroll.call(this, t, n, r, o, l, i, false, true, null, s);
        this._padding = 18;
        this._backPadding = 10
    } else {
        var n = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_top"));
        var r = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_top"));
        r.scale.y = -1;
        r.pivot = new canvas.px.Point(0,-25);
        var o = null;
        if (e) {
            o = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_6"),4,4,4,4);
            o.width = 28
        }
        var l = null;
        if (a) {
            l = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "drag_v"))
        }
        canvas.ui.Scroll.call(this, t, n, r, o, l, i, false, true, null, s);
        this._padding = 18;
        this._backPadding = 10
    }
    this.max = 0
}
;
canvas.app.manor.view.controls.elements.PagerSimple.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.PanelHeaderRenderer = function(t) {
    canvas.ui.ListRenderer.call(this);
    this.type = t;
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"),37,0,37,0));
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,100,20,"center"));
    this.field.position.set(20, 6)
}
;
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.init = function(t, e) {
    this.title = e;
    this.field.text = t
}
;
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.update = function() {
    this.back.width = this._width;
    this.field.setSize(this._width - 40)
}
;
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.updateSelection = function() {
    switch (this.type) {
    case 1:
        this.back.texture = this.selected ? canvas.ResourceLoader.getImage("ui", "tab_white") : canvas.ResourceLoader.getImage("ui", "tab_red");
        this.field.color = this.selected ? 7092753 : 16118721;
        break;
    default:
        this.field.color = this.selected ? 7092753 : 9243401
    }
    this.buttonMode = !this.selected
}
;
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.clickHandler = function() {
    this.parent.parent.path = this.title;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.PANELS_CLICK, this.parent.parent)
}
;
canvas.app.manor.view.controls.elements.Panels = function(t, e, a, i, s, n, r) {
    this._path = "";
    Object.defineProperty(this, "path", {
        get: function() {
            return this._path
        },
        set: function(t) {
            this._path = this.titles.indexOf(t) < 0 ? this.titles[0] : t;
            var e, a = this.content.length, i;
            canvas.Functions.clearChildren(this.contentContainer);
            for (e = 0; e < a; e++) {
                i = this.items[e];
                if (i.title == this._path) {
                    this.contentContainer.addChild(this.content[e]);
                    this.headerContainer.addChild(this.back);
                    this.headerContainer.addChild(this.items[e]);
                    i.selected = true
                } else {
                    i.selected = false
                }
            }
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.PANELS_PATH, this)
        }
    });
    canvas.ui.Component.call(this);
    this.headerContainer = this.addChild(new canvas.px.Container);
    this.back = this.headerContainer.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"),20,20,20,20));
    this.back.y = 27;
    this.contentContainer = this.addChild(new canvas.px.Container);
    this.contentContainer.y = this.back.y;
    this.type = i ? i : 0;
    this.leftPadding = n || 0;
    this.rightPadding = r || 0;
    this.maxSize = s ? s : 220;
    this.items = [];
    this._height = 265;
    this.init(t, e, a)
}
;
canvas.app.manor.view.controls.elements.Panels.prototype = Object.create(canvas.ui.Component.prototype);
canvas.app.manor.view.controls.elements.Panels.prototype.init = function(t, e, a) {
    this.content = t;
    this.titles = e;
    this.labels = a;
    var i, s = this.content.length, n;
    if (s > this.items.length) {
        for (i = this.items.length; i < s; i++) {
            this.items.push(new canvas.app.manor.view.controls.elements.PanelHeaderRenderer(this.type))
        }
    }
    canvas.Functions.clearChildren(this.headerContainer);
    for (i = 0; i < s; i++) {
        n = this.items[i];
        this.headerContainer.addChild(n);
        n.init(this.labels[i], this.titles[i])
    }
    this.update();
    if (this._path)
        this.path = this._path
}
;
canvas.app.manor.view.controls.elements.Panels.prototype.update = function() {
    this.back.width = this._width;
    this.back.height = this._height;
    var t, e = this.content.length, a;
    var i = Math.min(this.maxSize, Math.round((this._width - this.rightPadding - this.leftPadding - 40 + 20 * (e - 1)) / e));
    for (t = 0; t < e; t++) {
        a = this.items[t];
        a.setSize(i);
        a.x = 20 + this.leftPadding + t * (i - 20)
    }
}
;
canvas.app.manor.view.controls.elements.Panels.prototype.getEnabled = function(t) {
    var e, a = this.content.length;
    for (e = 0; e < a; e++) {
        if (this.items[e].title == t)
            return true
    }
    return false
}
;
canvas.app.manor.view.controls.elements.Panels.prototype.setDefaultPath = function(t) {
    this.path = this.titles.length > 1 && this.getEnabled(this.titles[1]) ? this.titles[1] : this.titles[0]
}
;
canvas.app.manor.view.controls.elements.PetItem = function() {
    canvas.ui.ListRenderer.call(this, null, 64, 64);
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    t.position.set(6, 5);
    this.image = this.addChild(new canvas.ui.Image);
    this.image.position.set(6, 5);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_item_border")));
    this.progress = this.addChild(new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "pet_item_progress")));
    this.progress.position.set(6, 68);
    this.progress.progress = .5;
    this.progressRound = this.addChild(new canvas.px.RoundProgress(60,0,.8));
    this.progressRound.position.set(35, 35);
    this.progressRound.scale.x = -1;
    this.msk = this.addChild(new canvas.px.Mask(60,60));
    this.msk.position.set(6, 5);
    this.progressRound.mask = this.msk;
    this.timeField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD_STROKE,15587444,64,20,"center"));
    this.timeField.position.set(4, 43);
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_item_selector")));
    this.selector.position.set(-9, -7);
    this.buttonMode = true;
    this.hitArea = new canvas.px.Rectangle(0,0,64,80)
}
;
canvas.app.manor.view.controls.elements.PetItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.PetItem.prototype.update = function() {
    if (this.data) {
        this.image.setImage(this.data.image);
        this.setProgressExp(this.data.exp / this.data.expUp);
        this.setProgress(1 - (this.data.timeFull == this.data.time ? 0 : this.data.time / this.data.timeFull));
        this.timeField.text = this.data.time > 0 ? canvas.Functions.formatDate(this.data.time * 1e3, "00", 2, true) : ""
    } else {
        this.setProgressExp(0);
        this.setProgress(1);
        this.timeField.text = "";
        this.image.clear()
    }
}
;
canvas.app.manor.view.controls.elements.PetItem.prototype.setProgressExp = function(t) {
    this.progress.progress = t
}
;
canvas.app.manor.view.controls.elements.PetItem.prototype.setProgress = function(t) {
    this.progressRound.progress = 1 - t
}
;
canvas.app.manor.view.controls.elements.PortalList = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            var e = this._data == null;
            this._data = t;
            if (this._data == null)
                return;
            var a = this._data.length;
            var i;
            var s;
            if (a > this.items.length) {
                for (i = this.items.length; i < a; i++) {
                    s = new canvas.app.manor.view.controls.elements.PortalListItem;
                    s.y = 50;
                    s.alpha = 0;
                    this.items.push(s)
                }
            }
            a = this.items.length;
            for (i = 0; i < a; i++)
                this.items[i].data = this._data[i];
            this.update(e);
            this.currentIndex = this._currentIndex
        }
    });
    this._currentIndex = 0;
    Object.defineProperty(this, "currentIndex", {
        get: function() {
            return this._currentIndex
        },
        set: function(t) {
            var e = this._data.length;
            this._currentIndex = t < 0 ? 0 : t >= e ? e - 1 : t;
            this.leftArrow.visible = e > canvas.app.manor.view.controls.elements.PortalList.ON_PAGE - 2 && this.currentIndex > 0;
            this.rightArrow.visible = e > canvas.app.manor.view.controls.elements.PortalList.ON_PAGE - 2 && this.currentIndex < e - 1;
            this.update();
            canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this)
        }
    });
    Object.defineProperty(this, "selectedItem", {
        get: function() {
            return this.data[this.currentIndex]
        }
    });
    canvas.px.Container.call(this);
    this.items = new Array;
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(2, 8);
    this.leftArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.leftArrow.y = 38;
    this.rightArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.rightArrow.position.set(385, 38);
    this.rightArrow.scale.x = -1;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this)
}
;
canvas.app.manor.view.controls.elements.PortalList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.PortalList.ON_PAGE = 3;
canvas.app.manor.view.controls.elements.PortalList.prototype.update = function(t) {
    var e = this.data.length;
    var a;
    var i;
    if (e == 0)
        return;
    for (a = 0; a < e; a++) {
        i = this.items[a];
        if (a < this.currentIndex - 1) {
            i.targetAlpha = 0;
            i.targetScale = 0;
            i.targetPoint.x = 60;
            i.targetPoint.y = 50;
            if (i.alpha > 0)
                this.container.addChildAt(i, 0)
        } else if (a == this.currentIndex - 1) {
            i.targetAlpha = .6;
            i.targetScale = 1;
            i.targetPoint.x = 120;
            i.targetPoint.y = 50;
            this.container.addChild(i)
        } else if (a == this.currentIndex) {
            i.targetAlpha = 1;
            i.targetScale = 1;
            i.targetPoint.x = 190;
            i.targetPoint.y = 50
        } else if (a == this.currentIndex + 1) {
            i.targetAlpha = .6;
            i.targetScale = 1;
            i.targetPoint.x = 260;
            i.targetPoint.y = 50;
            this.container.addChild(i)
        } else {
            i.targetAlpha = 0;
            i.targetScale = 0;
            i.targetPoint.x = 320;
            i.targetPoint.y = 50;
            if (i.alpha > 0)
                this.container.addChildAt(i, 0)
        }
        if (t) {
            i.alpha = i.targetAlpha;
            i.scale.x = i.scale.y = i.targetScale;
            i.x = i.targetPoint.x;
            i.y = i.targetPoint.y
        }
    }
    this.container.addChild(this.items[this.currentIndex])
}
;
canvas.app.manor.view.controls.elements.PortalList.prototype.leftArrowClickHandler = function() {
    this.currentIndex--
}
;
canvas.app.manor.view.controls.elements.PortalList.prototype.rightArrowClickHandler = function() {
    this.currentIndex++
}
;
canvas.app.manor.view.controls.elements.PortalList.prototype.select = function(t) {
    this.currentIndex = this.items.indexOf(t)
}
;
canvas.app.manor.view.controls.elements.PortalList.prototype.updateHandler = function() {
    if (this.parent && this.parent.parent && this.parent.isActive) {
        var t;
        var e;
        var a, i = this.items.length;
        for (a = 0; a < i; a++) {
            t = this.items[a];
            if (t.targetAlpha != t.alpha) {
                e = t.targetAlpha > t.alpha;
                t.alpha += e ? .15 : -.15;
                if (t.targetAlpha > t.alpha != e)
                    t.alpha = t.targetAlpha
            } else if (t.alpha == 0)
                this.container.removeIfExist(t);
            if (t.targetPoint.x != t.x) {
                e = t.targetPoint.x > t.x;
                t.x += e ? 10 : -10;
                if (t.targetPoint.x > t.x != e)
                    t.x = t.targetPoint.x
            }
            if (t.targetPoint.y != t.y) {
                e = t.targetPoint.y > t.y;
                t.y += e ? 3 : -3;
                if (t.targetPoint.y > t.y != e)
                    t.y = t.targetPoint.y
            }
            if (t.targetScale != t.scale.x) {
                e = t.targetScale > t.scale.x;
                t.scale.x += e ? .2 : -.2;
                if (t.targetScale > t.scale.x != e)
                    t.scale.x = t.targetScale;
                t.scale.y = t.scale.x
            }
        }
    }
}
;
canvas.app.manor.view.controls.elements.PortalListItem = function() {
    canvas.ui.ListRenderer.call(this);
    this.targetPoint = new canvas.px.Point(300);
    this.targetAlpha = 0;
    this.targetScale = 0;
    this.container = this.addChild(new canvas.px.Container);
    this.image = this.container.addChild(new canvas.ui.Image);
    this.image.y = 10;
    this.imageMask = this.container.addChild(new canvas.px.Graphics);
    this.imageMask.beginFill(0, 1);
    this.imageMask.drawEllipse(90, 48, 90, 48);
    this.imageMask.endFill();
    this.imageMask.position.set(3, 6);
    this.image.mask = this.imageMask;
    this.frontImage = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.container.position.set(-94, -53)
}
;
canvas.app.manor.view.controls.elements.PortalListItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.PortalListItem.prototype.update = function() {
    if (this.data) {
        switch (this.data.status) {
        case -1:
            this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_1");
            break;
        case 1:
            this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_2");
            break;
        default:
            this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_3");
            break
        }
        var t = canvas.app.manor.model.portalLocations[this.data.locationID];
        if (t && t.picture && this.image.url != t.picture) {
            this.image.setImage(t.picture)
        }
    }
}
;
canvas.app.manor.view.controls.elements.Scroll = function(t, e) {
    if (e == undefined)
        e = true;
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    i.scale.y = -1;
    i.sprite.y = 18;
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5]);
    var n = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "scroll_back"),0,4,0,4);
    n.x = -1;
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, a, i, n, s, t, e, true);
    this._padding = 15;
    this._backPadding = 10;
    this._step = 50;
    this.setSize(22)
}
;
canvas.app.manor.view.controls.elements.Scroll.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.TaskItem = function() {
    canvas.ui.ListRenderer.call(this, null, 360, 29);
    this.container = new canvas.px.Container;
    this.title = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,10354945,188,20,"left"));
    this.title.position.set(0, 7);
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130));
    this.progress.position.set(190, 0);
    this.progress.setLabour(0, 0);
    this.removeButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button")));
    this.removeButton.position.set(318, 3);
    this.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this)
}
;
canvas.app.manor.view.controls.elements.TaskItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.TaskItem.prototype.update = function() {
    if (this.data) {
        this.addChild(this.container);
        var t = canvas.app.manor.model.workShopRecepts[this.data.recipe];
        if (t) {
            this.title.text = "<font color='#6c3a11'>" + this.name + ". </font>" + t.title + (t.resultCount * this.data.count > 1 ? " (" + (t.resultCount * this.data.count).toString() + ")" : "")
        }
        this.progress.setLabour(this.data.duration, this.data.durationMax);
        this.progress.tf.text = (this.data.duration == 0 ? "" : canvas.Functions.formatDate(this.data.duration * 1e3, "00", 2, true) + " / ") + canvas.Functions.formatDate(this.data.durationMax * 1e3, "00", 2, true)
    } else {
        this.removeIfExist(this.container)
    }
}
;
canvas.app.manor.view.controls.elements.TaskItem.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(193) + "?",
        object: {
            name: canvas.app.manor.Event.USE_WORKSHOP_ACTION,
            params: {
                object: {
                    building_action: "cancel",
                    craft_request_id: this.data.id
                }
            }
        }
    })
}
;
canvas.app.manor.view.controls.elements.TaskItem2 = function() {
    canvas.ui.ListRenderer.call(this, null, 360, 29);
    this.container = new canvas.px.Container;
    this.title = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,10354945,208,20,"left"));
    this.title.position.set(0, 7);
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130));
    this.progress.position.set(215, 0);
    this.progress.setLabour(0, 0);
    this.click = null;
    this.mouseover = null;
    this.mouseout = null
}
;
canvas.app.manor.view.controls.elements.TaskItem2.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.TaskItem2.prototype.update = function() {
    if (this.data) {
        this.addChild(this.container);
        this.title.text = "<font color='#6c3a11'>" + this.name + ". </font>" + this.data.item.title + (this.data.item.count * this.data.count > 1 ? " (" + (this.data.item.count * this.data.count).toString() + ")" : "");
        this.progress.setLabour(this.data.duration, this.data.durationMax);
        this.progress.tf.text = (this.data.duration == 0 ? "" : canvas.Functions.formatDate(this.data.duration * 1e3, "00", 2, true) + " / ") + canvas.Functions.formatDate(this.data.durationMax * 1e3, "00", 2, true)
    } else {
        this.removeIfExist(this.container)
    }
}
;
canvas.app.manor.view.controls.elements.Tree = function() {
    canvas.ui.List.call(this, canvas.ui.ListType.VERTICAL, 1)
}
;
canvas.app.manor.view.controls.elements.Tree.prototype = Object.create(canvas.ui.List.prototype);
canvas.app.manor.view.controls.elements.Tree.prototype.openAll = function(t) {
    if (t == undefined)
        t = true;
    var e, a = this.items.length;
    for (e = 0; e < a; e++) {
        this.items[e].opened = t
    }
}
;
canvas.app.manor.view.controls.elements.Tree.prototype.init = function(t, e, a) {
    if (a == undefined)
        a = true;
    var i;
    var s = new Array;
    var n, r = this.items.length;
    if (a) {
        for (n = 0; n < r; n++) {
            s.push(this.items[n].opened)
        }
    }
    this.clear(false);
    this.titles = t;
    this.containers = e;
    r = t.length;
    for (n = 0; n < r; n++) {
        i = new canvas.app.manor.view.controls.elements.TreeItem({
            title: t[n],
            content: e[n]
        });
        this.add(i, false);
        if (a)
            i.opened = s[n]
    }
    this.update()
}
;
canvas.app.manor.view.controls.elements.TreeItem = function(t) {
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            this._opened = t;
            if (t) {
                this.addChild(this.contentContainer)
            } else {
                this.removeIfExist(this.contentContainer)
            }
            this.setSize(this._width, Math.max(30, this.height));
            if (this.parent && this.parent.parent.parent && this.parent.parent.parent.update) {
                this.parent.parent.parent.update()
            }
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", t ? "minus_icon" : "plus_icon")
        }
    });
    canvas.ui.ListRenderer.call(this, null, 330, 50);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.px.TextureEmpty));
    this.title = this.button.sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,10354945,305,18,"left"));
    this.title.position.set(28, 5);
    this.contentContainer = this.addChild(new canvas.px.Container);
    this.contentContainer.position.set(28, 25);
    this.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    this.data = t
}
;
canvas.app.manor.view.controls.elements.TreeItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.TreeItem.prototype.update = function() {
    canvas.Functions.clearChildren(this.contentContainer);
    if (this.data) {
        this.contentContainer.addChild(this.data.content);
        this.title.text = this.data.title
    } else {
        this.title.text = ""
    }
}
;
canvas.app.manor.view.controls.elements.TreeItem.prototype.clickHandler = function() {
    this.opened = !this.opened
}
;
canvas.app.manor.view.controls.elements.TreeItem.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.elements.UserLine = function() {
    canvas.px.Container.call(this);
    this.nickField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,12713984,200,18,"left");
    this.addChild(this.nickField);
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info_button_0"));
    this.addChild(this.infoButton);
    this.infoButton.y = 2;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this)
}
;
canvas.app.manor.view.controls.elements.UserLine.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.UserLine.prototype.init = function(t) {
    this._login = t.login;
    this.nickField.text = t.login + " [" + t.level + "]";
    this.infoButton.x = this.nickField.textWidth + 3
}
;
canvas.app.manor.view.controls.elements.UserLine.prototype.infoClickHandler = function() {
    showUserInfo(this._login)
}
;
canvas.app.manor.view.controls.elements.UserLine.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.manor.view.controls.elements.WorkRequestLine = function(t, e, a) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    if (a == undefined)
        a = "money_silver";
    this.index = t;
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"),4,0,4,0);
    this.back.width = 335;
    this.addChild(this.back);
    this.back.position.set(30, 0);
    this.priceField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,29,18,"left");
    this.addChild(this.priceField);
    this.priceField.position.set(314, 5);
    this.labourField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,34,18,"left");
    this.addChild(this.labourField);
    this.labourField.position.set(259, 5);
    var i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", a));
    this.addChild(i);
    i.position.set(345, 7);
    this.check = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),e);
    this.addChild(this.check);
    this.check.position.set(0, -4);
    this.userLine = new canvas.app.manor.view.controls.elements.UserLine;
    this.addChild(this.userLine);
    this.userLine.position.set(37, 5);
    this.back.interactive = true;
    this.back.click = this.clickHandler.bind(this)
}
;
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.update = function() {
    if (this.data) {
        this.priceField.text = this.data.price ? this.data.price : "";
        this.labourField.text = this.data.labour ? this.data.labour : "";
        this.userLine.init(this.data.user)
    }
}
;
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.clickHandler = function() {
    this.check.select()
}
;
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.destroy = function() {
    this.back.click = null;
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.manor.view.controls.throne.ItemsWindow = function() {
    canvas.px.Window.call(this);
    this._compactModey = true;
    Object.defineProperty(this, "compactMode", {
        get: function() {
            return this._compactMode
        },
        set: function(t) {
            this._compactMode = t;
            if (this._compactMode) {
                this.panels.setSize(305, 320);
                this.list.setSize(250, 280);
                this.list.cellsCount = 3;
                this.arrow.scale.x = -1
            } else {
                this.panels.setSize(470, 320);
                this.list.setSize(420, 280);
                this.list.cellsCount = 5;
                this.arrow.scale.x = 1
            }
            this.closeButton.position.set(this.panels._width - 25, 15)
        }
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            if (!t)
                return;
            this._data = t;
            this.update()
        }
    });
    this.panels = this.addChild(new canvas.app.manor.view.controls.elements.Panels([new canvas.px.Container, new canvas.px.Container],["shop", "my"],[canvas.Translator.getText(1502), canvas.Translator.getText(253)],1));
    this.header = this.panels;
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,3));
    this.list.position.set(20, 40);
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this,false);
    this.list._scrollPadding = 20;
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "main_window_close_base"),canvas.ResourceLoader.getImage("ui", "main_window_close_over"),canvas.ResourceLoader.getImage("ui", "main_window_close_down"),null));
    this.arrow = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "throne_room_arrow_base"),canvas.ResourceLoader.getImage("ui", "throne_room_arrow_over"),canvas.ResourceLoader.getImage("ui", "throne_room_arrow_down")));
    this.arrow.pivot = new canvas.px.Point(9,10);
    this.arrow.position.set(20, 325);
    this.compactMode = true;
    this.panels.path = "shop";
    this.interactive = true;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrow, this.arrowClickHandler, this)
}
;
canvas.app.manor.view.controls.throne.ItemsWindow.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t);
    if (this.parent) {
        this.parent.addChild(this)
    }
}
;
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.arrowClickHandler = function() {
    this.compactMode = !this.compactMode
}
;
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.update = function() {
    this.list.clear(false);
    var t, e = this.data.length;
    for (t = 0; t < e; t++) {
        this.list.add(new canvas.app.manor.view.controls.throne.ThroneItemRenderer(this.data[t]), false)
    }
    this.list.update()
}
;
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.updateTime = function() {
    var t, e = this.list.items.length;
    for (t = 0; t < e; t++) {
        this.list.items[t].updateTime()
    }
}
;
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.deactivate = function() {}
;
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.hide = function() {}
;
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t);
    if (canvas.Functions.findParent(this.closeButton, t.target)) {
        canvas.app.manor.model.throneRoomData.currentType = 0;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.THRONE_ROOM_UPDATE)
    }
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, null, 76, 125);
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(2, 2);
    this.shopBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "throne_room_item_back")));
    var e = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    e.position.set(8, 7);
    this.image = this.container.addChild(new canvas.ui.Image);
    this.image.position.set(8, 7);
    this.image.interactive = true;
    e = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")));
    e.position.set(2, 2);
    this.money = this.container.addChild(new canvas.app.view.Money(null,null,null,76,null,"center"));
    this.money.y = 76;
    this.buyButton = this.container.addChild(new canvas.app.view.SmallButton);
    this.buyButton.setTitle(canvas.Translator.getText(167));
    this.buyButton.position.set(7, 100);
    this.actionPanel = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "item_plane")));
    this.actionPanel.position.set(8, 30);
    this.actionTitle = this.actionPanel.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,3419170,60,14,"center"));
    this.actionTitle.position.set(0, -2);
    this.actionPanel.interactive = true;
    this.actionPanel.buttonMode = true;
    this.activeImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "green_check")));
    this.activeImage.position.set(24, 52);
    this.expiryField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,15521651,74,18,"center"));
    this.expiryField.position.set(0, 9);
    this.hint = new canvas.app.view.MappingHint;
    if (t.mode != canvas.data.manor.throne.ItemData.MODE_SHOP)
        this._height = 72;
    this.data = t;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionPanel, this.actionClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    this.image.mouseover = this.overHandler.bind(this);
    this.image.mouseout = this.outHandler.bind(this);
    this.mouseover = null;
    this.mouseout = null;
    this.click = null
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.update = function() {
    var t = canvas.app.manor.model.throneRoomData;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: this.buyButton
    });
    this.expiryField.text = "";
    var e = this.data;
    if (e && e.artifact) {
        this.image.setImage(e.artifact.picture);
        this.updateMoney();
        this.activeImage.visible = e.isActive;
        this.buyButton.enabled = !e.isActive;
        if (e.mode == canvas.data.manor.throne.ItemData.MODE_SHOP) {
            this.actionTitle.text = canvas.Translator.getText(e.artikulID == t.userData.redressItemID ? 1e3 : 1508);
            if (!e.isActive && t.userData.restrictions && t.userData.restrictions[e.id] != undefined) {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
                    target: this.buyButton,
                    params: new canvas.utils.HintParams(this.hint)
                });
                this.hint.update(t.userData.restrictions[e.id]);
                this.buyButton.enabled = false
            }
            this.addChildAt(this.shopBack, 0);
            this.container.addChild(this.money);
            this.container.addChild(this.buyButton);
            this.expiryField.text = e.expiry > 0 ? canvas.Functions.formatDate(e.expiry * 1e3, "00", 2, true) : ""
        } else {
            this.actionTitle.text = canvas.Translator.getText(e.isActive ? 1e3 : 1506);
            this.removeIfExist(this.shopBack);
            this.container.removeIfExist(this.money);
            this.container.removeIfExist(this.buyButton);
            this.updateTime()
        }
    } else {
        this.image.visible = false;
        this.activeImage.visible = false;
        this.removeIfExist(this.shopBack);
        this.container.removeIfExist(this.money);
        this.container.removeIfExist(this.buyButton)
    }
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.updateTime = function() {
    var t = this.data;
    if (!t || t.mode == canvas.data.manor.throne.ItemData.MODE_SHOP)
        return;
    var e = t.expiry - canvas.app.manor.model.serverTime.getTime();
    this.expiryField.text = e > 0 ? canvas.Functions.formatDate(e * 1e3, "00", 2, true) : ""
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.updateMoney = function() {
    this.money.reset();
    if (!this.data.money)
        return;
    var t = this.data.money.getBageArtikul();
    if (t) {
        var e = canvas.data.manor.throne.Prototypes.artifactPrototypes[t];
        if (e) {
            this.money.image = e.picture;
            this.money.imageCount = this.data.money.getBageCount()
        }
    } else {
        switch (this.data.money.priceType) {
        case canvas.data.manor.throne.ItemData.TYPE_MONEY:
            this.money.money = this.data.money.price * 100;
            break;
        case canvas.data.manor.throne.ItemData.TYPE_DIAMONDS:
            this.money.gems = this.data.money.price;
            break
        }
    }
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.actionClickHandler = function() {
    var t = canvas.app.manor.model.throneRoomData;
    var e = this.data;
    if (e.mode == canvas.data.manor.throne.ItemData.MODE_MY) {
        canvas.EventManager.dispatchEvent(e.isActive ? canvas.app.manor.Event.THRONE_ROOM_REMOVE : canvas.app.manor.Event.THRONE_ROOM_INSTALL, null, {
            id: e.id
        })
    } else {
        if (e.artikulID == t.userData.redressItemID) {
            t.userData.redressItemID = 0
        } else {
            t.userData.redressItemID = e.artikulID
        }
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.THRONE_ROOM_UPDATE)
    }
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.buyClickHandler = function(t) {
    t.params.stopPropagation();
    if (this.data.mode == canvas.data.manor.throne.ItemData.MODE_SHOP) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(1507) + " <a href='/artifact_info.php?artikul_id=" + this.data.artifact.id + "'>" + this.data.artifact.title + "</a> " + canvas.Translator.getText(2021).toLowerCase() + " " + this.money.field.text + " ?",
            object: {
                name: canvas.app.manor.Event.THRONE_ROOM_BUY,
                params: this.data
            }
        })
    }
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.overHandler = function() {
    if (this.data && this.data.artifact) {
        artifactAltSimple(this.data.artifact.id, 2)
    }
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.outHandler = function() {
    if (this.data && this.data.artifact) {
        artifactAltSimple(this.data.artifact.id, 0)
    }
}
;
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionPanel, this.actionClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    this.image.mouseover = null;
    this.image.mouseout = null;
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.manor.view.controls.throne.ThroneRoomRenderer = function(t) {
    canvas.ui.ListRenderer.call(this);
    this.container = this.addChild(new canvas.px.Container);
    this.image = this.container.addChild(new canvas.ui.Image);
    this.sensor = this.addChild(new canvas.px.Graphics);
    this.sensor.interactive = true;
    this.sensor.mouseover = this.overHandler.bind(this);
    this.sensor.mouseout = this.outHandler.bind(this);
    this.image.interactiveChildren = false;
    this.image.interactive = false;
    this.mc = null;
    this.lastURL = null;
    this.data = t
}
;
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.update = function() {
    var t = canvas.app.manor.model.throneRoomData;
    this.filters = [];
    var e;
    var a;
    if (this.data) {
        if (this.data.artikulID > 0) {
            a = canvas.data.manor.throne.Prototypes.getTypePrototype(this.data.proto.type);
            e = this.data.proto.picture
        } else {
            if (!t.watchMode) {
                a = canvas.data.manor.throne.Prototypes.getTypePrototype(this.data.id);
                e = a.imageURL
            } else {
                this.clear();
                this.lastURL = ""
            }
        }
        if (e) {
            this.createSensor(a.id, e);
            if (this.lastURL != e) {
                this.clear();
                var i = e.split(".");
                if (i[i.length - 1] == "swf") {
                    var s = canvas.Functions.extractSwfName(e);
                    this.mc = this.container.addChild(new canvas.px.MovieClip(canvas.Config.throneRoomPath + s + "/" + s));
                    this.mc.frameEvent = canvas.app.manor.Event.ENTER_FRAME;
                    this.mc.interactiveChildren = false;
                    this.mc.interactive = false;
                    if (!this.mc.ready) {
                        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this)
                    } else {
                        this.readyHandler()
                    }
                } else {
                    this.image.setImage(e)
                }
            }
            this.position.set(a.posX, a.posY);
            this.lastURL = e;
            if (t.currentType == a.id && (!a || !a.disabled)) {
                this.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 15521651, .1)]
            }
        }
    }
}
;
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.createSensor = function(t) {
    this.sensor.clear();
    this.sensor.beginFill(0, 0);
    switch (t) {
    case 1:
        this.sensor.drawPolygon(new canvas.px.Point(190,190), new canvas.px.Point(370,70), new canvas.px.Point(630,70), new canvas.px.Point(810,190));
        break;
    case 2:
        this.sensor.drawEllipse(170, 130, 100, 50);
        break;
    case 3:
        this.sensor.drawRect(15, 15, 40, 180);
        this.sensor.drawRect(945, 15, 40, 180);
        this.sensor.drawRect(170, 40, 25, 125);
        this.sensor.drawRect(803, 40, 25, 125);
        this.sensor.drawRect(270, 60, 10, 90);
        this.sensor.drawRect(720, 60, 10, 90);
        this.sensor.drawRect(314, 68, 7, 72);
        this.sensor.drawRect(679, 68, 7, 72);
        break;
    case 4:
        this.sensor.drawRect(20, 20, 260, 130);
        break;
    case 5:
        this.sensor.drawRect(16, 5, 16, 120);
        this.sensor.drawRect(320, 5, 16, 120);
        break;
    case 6:
        this.sensor.drawEllipse(80, 90, 60, 30);
        break;
    case 7:
        this.sensor.drawEllipse(50, 50, 40, 20);
        break;
    case 8:
        this.sensor.drawEllipse(30, 32, 20, 10);
        break;
    case 9:
        this.sensor.drawEllipse(78, 80, 60, 30);
        break;
    case 10:
        this.sensor.drawEllipse(50, 60, 40, 20);
        break;
    case 11:
        this.sensor.drawEllipse(25, 32, 20, 10);
        break;
    case 12:
        this.sensor.drawRect(156, 90, 40, 50);
        break;
    case 13:
        this.sensor.drawRect(21, 90, 40, 50);
        break;
    case 14:
        this.sensor.drawEllipse(74, 90, 20, 25);
        break;
    case 15:
        this.sensor.drawEllipse(50, 78, 15, 17);
        break;
    case 16:
        this.sensor.drawEllipse(33, 40, 10, 12);
        break;
    case 17:
        this.sensor.drawEllipse(61, 78, 20, 25);
        break;
    case 18:
        this.sensor.drawEllipse(39, 66, 15, 17);
        break;
    case 19:
        this.sensor.drawEllipse(31, 40, 10, 12);
        break;
    case 20:
        this.sensor.drawEllipse(80, 50, 10, 15);
        this.sensor.drawEllipse(195, 68, 9, 11);
        this.sensor.drawEllipse(260, 80, 5, 7);
        this.sensor.drawEllipse(838, 49, 10, 15);
        this.sensor.drawEllipse(725, 69, 9, 11);
        this.sensor.drawEllipse(661, 80, 5, 7);
        break;
    case 21:
        this.sensor.drawEllipse(37, 38, 16, 20);
        break;
    case 23:
        this.sensor.drawEllipse(46, 78, 26, 34);
        break
    }
    this.sensor.endFill()
}
;
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.readyHandler = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
    if (this.mc.totalFrames > 1) {
        this.mc.loop = true
    }
    this.mc.playChildren()
}
;
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.clear = function() {
    this.image.clear();
    if (this.mc) {
        this.mc.destroy();
        this.mc = null
    }
}
;
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.overHandler = function() {
    if (canvas.app.manor.model.throneRoomData.watchMode)
        return;
    this.container.filters = [canvas.Functions.getBrightness(1.2)]
}
;
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.outHandler = function() {
    this.container.filters = null
}
;
canvas.app.manor.view.controls.throne.ThroneRoomView = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    this._bMode = true;
    Object.defineProperty(this, "bMode", {
        get: function() {
            return this._bMode
        },
        set: function(t) {
            this._bMode = t;
            this.updateButtonMode()
        }
    });
    canvas.px.Container.call(this);
    this.items = []
}
;
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.update = function() {
    if (this.data) {
        var t = this.data.length;
        var e;
        for (var a = 0; a < t; a++) {
            e = this.items[a];
            if (!e) {
                e = this.addChild(new canvas.app.manor.view.controls.throne.ThroneRoomRenderer(this.data[a]));
                e.name = "item";
                this.items.push(e);
                e.sensor.buttonMode = this.bMode
            } else {
                e.data = this.data[a]
            }
        }
    }
}
;
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.updateButtonMode = function() {
    var t = this.items.length;
    var e;
    for (var a = 0; a < t; a++) {
        e = this.items[a];
        e.sensor.buttonMode = e.sensor.interactive = this.bMode
    }
}
;
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.stopAndPlay = function(t) {
    var e, a = this.items.length, i;
    for (e = 0; e < a; e++) {
        i = this.items[e];
        if (i.mc) {
            if (t) {
                i.mc.stopChildren()
            } else {
                i.mc.playChildren()
            }
        }
    }
}
;
canvas.app.world.Const = {};
canvas.app.world.Event = {
    ENTER_FRAME: "World.ENTER_FRAME",
    HINT_ADD: "World.HINT_ADD",
    HINT_REMOVE: "World.HINT_REMOVE"
};
canvas.app.world.Main = function(t, e, a) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = e;
    this.windowsManager = a;
    if (this.model.isModule) {
        canvas.app.world.Event.HINT_ADD = canvas.app.location.Event.HINT_ADD;
        canvas.app.world.Event.HINT_REMOVE = canvas.app.location.Event.HINT_REMOVE
    } else {
        canvas.EventManager.addEventListener(canvas.app.world.Event.HINT_ADD, null, this.handlerHintAdd, this);
        canvas.EventManager.addEventListener(canvas.app.world.Event.HINT_REMOVE, null, this.handlerHintRemove, this)
    }
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.handlerOpenWindow, this);
    this.view = new canvas.app.world.View(this);
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.windowsContainer = new canvas.px.Container;
    this.addChild(this.windowsContainer);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.flag_timer = setInterval(this.flag_timer_tic.bind(this), this.model.UpdInterval);
    this.loadFrontsData()
}
;
canvas.app.world.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.Main.prototype.handlerKey = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    var e = t.params.globalKeyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    case canvas.Const.KEYS.L:
        if (s) {
            canvas.Log.show(canvas.Log.WORLD)
        }
        break;
    case canvas.Const.KEYS.LEFT_ARROW:
    case canvas.Const.KEYS.UP_ARROW:
    case canvas.Const.KEYS.RIGHT_ARROW:
    case canvas.Const.KEYS.DOWN_ARROW:
        this.model.keyData[e] = true;
        if (!this.model.keyProcssor) {
            this.model.keyProcssor = true;
            canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.repeatKeyHandler, this)
        }
        break
    }
}
;
canvas.app.world.Main.prototype.handlerKeyUp = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    t.params.preventDefault();
    var e = t.params.keyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    case canvas.Const.KEYS.LEFT_ARROW:
    case canvas.Const.KEYS.UP_ARROW:
    case canvas.Const.KEYS.RIGHT_ARROW:
    case canvas.Const.KEYS.DOWN_ARROW:
        if (this.model.keyData[e]) {
            delete this.model.keyData[e]
        }
        break
    }
}
;
canvas.app.world.Main.prototype.handlerOpenWindow = function() {
    this.hintManager.hide()
}
;
canvas.app.world.Main.prototype.resize = function(t, e) {
    var a = this.get_ww(t);
    var i = this.get_hh(e);
    this.hintManager.init(this.hintContainer, a, i);
    this.model.width = a;
    this.model.height = i;
    this.view.resize(a, i)
}
;
canvas.app.world.Main.prototype.get_ww = function(t) {
    var e = this.model;
    if (t < e.min_stage_width) {
        return e.min_stage_width
    } else if (t > e.max_stage_width) {
        return e.max_stage_width
    }
    return t
}
;
canvas.app.world.Main.prototype.get_hh = function(t) {
    var e = this.model;
    if (t < e.min_stage_height) {
        return e.min_stage_height
    } else if (t > e.max_stage_height) {
        return e.max_stage_height
    }
    return t
}
;
canvas.app.world.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.world.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.world.Main.prototype.swfObject = function(t) {
    var e;
    var a = canvas.app.world.model;
    if (t) {
        for (e in t) {
            switch (e) {
            case "fronts":
                var i = t["fronts"];
                a.parseFronts(i);
                this.view.updateFronts();
                if (this.view.label2.frontsContent.fdata != null) {
                    this.view.label2.frontsContent.fdata = a.frontsData[this.view.label2.frontsContent.fdata.id]
                }
                break
            }
        }
    }
}
;
canvas.app.world.Main.prototype.timerHandler = function() {
    var t = this.model;
    if (t.treasureLocation > 0 && t.treasureFinishTime * 1e3 <= Date.now()) {
        t.treasureArea = t.treasureLocation = 0;
        this.view.updateTreasure()
    } else {
        this.view.label2.updateTreasureTime()
    }
    var e;
    var a;
    var i = false;
    for (var s in t.frontsData) {
        e = t.frontsData[s];
        a = e.cooldown - Date.now();
        e.displayTime = canvas.Functions.formatDate(a);
        if (a <= 0)
            i = true
    }
    if (i) {
        this.loadFrontsData()
    } else {
        this.view.label2.frontsContent.updateTime()
    }
}
;
canvas.app.world.Main.prototype.loadFrontsData = function(t, e) {
    front_locations()
}
;
canvas.app.world.Main.prototype.setPoint = function(t) {
    try {
        if (t == 0) {
            canvas.Functions.deleteSessTarget()
        } else {
            setCookie("sess_target", String(t))
        }
    } catch (t) {
        canvas.app.world.log("setPoint: " + t)
    }
}
;
canvas.app.world.Main.prototype.flag_timer_tic = function() {
    var t = this.model;
    if (t.locked_flag_update) {
        return
    }
    var e = Date.now() - t.startTime;
    var a = e - t.last_flag_update;
    if (a > 2500 || this.isFastUpdate) {
        this.isFastUpdate = false;
        if (this.flag_timer)
            clearInterval(this.flag_timer);
        t.last_flag_update = e;
        t.locked_flag_update = true;
        try {
            var i = getCookie("sess_location");
            var s = canvas.Functions.getSessTarget().target;
            if (t.FinishLocation != s) {
                t.FinishLocation = s;
                this.view.map1.refresh_pers_finish_flag();
                this.view.map2.refresh_pers_finish_flag()
            }
            if (t.parse_my_flag_js(i)) {
                if (t.isModule) {
                    this.view.refresh_my_flag()
                }
            }
            t.locked_flag_update = false;
            this.flag_timer = setInterval(this.flag_timer_tic.bind(this), this.model.UpdInterval)
        } catch (t) {
            console.log(t)
        }
    } else {}
}
;
canvas.app.world.Main.prototype.fastUpdateFlag = function() {
    this.isFastUpdate = true;
    this.flag_timer_tic()
}
;
canvas.app.world.Main.prototype.repeatKeyHandler = function() {
    var t;
    var e = 0;
    for (t in this.model.keyData) {
        switch (parseInt(t)) {
        case canvas.Const.KEYS.LEFT_ARROW:
            this.view.scroll_H.minusClickHandler();
            e++;
            break;
        case canvas.Const.KEYS.UP_ARROW:
            this.view.scroll_V.minusClickHandler();
            e++;
            break;
        case canvas.Const.KEYS.RIGHT_ARROW:
            this.view.scroll_H.plusClickHandler();
            e++;
            break;
        case canvas.Const.KEYS.DOWN_ARROW:
            this.view.scroll_V.plusClickHandler();
            e++;
            break;
        default:
            break
        }
    }
    if (e == 0) {
        this.model.keyProcssor = false;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.repeatKeyHandler, this)
    }
}
;
canvas.app.world.Model = function(t) {
    Object.defineProperty(this, "stageWidth", {
        get: function() {
            return this.isModule ? this.ModuleStageWidth : this.width
        }
    });
    Object.defineProperty(this, "stageHeight", {
        get: function() {
            return this.isModule ? canvas.app.location.model.hh : this.height
        }
    });
    this.findWay = new canvas.app.world.engine.FindWay;
    this.isModule = false;
    this.startTime = Date.now();
    this.IsBold = true;
    this.min_stage_width = 199;
    this.min_stage_height = 283;
    this.max_stage_width = 2054;
    this.max_stage_height = 1344;
    this.manorMode = false;
    this.lastManorMode = false;
    this.userLevel = 0;
    this.AREALOC = [];
    this.treasureLocation = 0;
    this.treasureArea = 0;
    this.treasureFinishTime = 0;
    this.way_conf = {};
    this.lng = {};
    this.keyData = {};
    this.CfgLink = t.CfgLink ? t.CfgLink : "world_conf.xml";
    this.UpdLink = t.UpdLink ? t.UpdLink : "my_flag.xml";
    this.NavLink = t.NavLink ? t.NavLink : "compass_conf.xml";
    this.requestURL = t.RequestUrl ? t.RequestUrl : "estate_conf.php";
    this.IsBold = t.nobold != null ? t.nobold != 1 : true;
    this.UpdInterval = parseInt(t.UpdInterval) * 1e3;
    this.locked_flag_update = false;
    this.last_flag_update = 0;
    if (this.UpdInterval < 3e3)
        this.UpdInterval = 3e3;
    this.World1_Path = t.World1_Path ? t.World1_Path : "world_res/world1/";
    this.World2_Path = t.World2_Path ? t.World2_Path : "world_res/world2/";
    this.AreasXML_Path = t.AreasXML_Path ? t.AreasXML_Path : "world_xml/";
    this.race = t.race ? t.race : "1";
    this.race = this.race == "1" ? "hum" : "mag";
    this.myLocVerge = {};
    this.LOC_LIST_AR = [];
    this.ls_ww = 0;
    this.ls_hh = 0;
    var e = "";
    try {
        var e = getCookie("sess_location");
        this.FinishLocation = canvas.Functions.getSessTarget().target
    } catch (t) {}
    if (e)
        this.parse_my_flag_first_js(e);
    this.FlagArea = this.ActiveArea;
    this.FlagLocation = this.ActiveLocation;
    this.focusedAreaId = this.ActiveArea;
    this.focusedLocationId = this.ActiveLocation;
    this.userLevel = t.level == undefined ? 0 : parseInt(t.level.toString());
    this.treasureLocation = t.treasureAreaId == undefined ? 0 : parseInt(t.treasureAreaId.toString());
    this.treasureFinishTime = Math.round(Date.now() * .001) + (t.treasureTime == undefined ? 0 : parseInt(t.treasureTime));
    this.frontsURL = t.frontsURL != undefined ? t.frontsURL : ""
}
;
canvas.app.world.Model.prototype.get_area_xml_link = function(t) {
    return this.AreasXML_Path + "area_" + t + ".xml"
}
;
canvas.app.world.Model.prototype.parseFronts = function(t) {
    if (!t)
        return;
    this.frontsData = new Object;
    var e;
    var a;
    for (var i in t) {
        e = t[i];
        a = new canvas.data.location.DFrontsLoc;
        a.cooldown = Date.now() + (e.nextEvent <= 0 ? 5 : e.nextEvent) * 1e3;
        a.cooldownStart = Date.now();
        a.owner = this.parseRace(parseInt(e.owner));
        a.status = parseInt(e.status);
        a.title = e.title;
        a.id = e.area_id;
        this.frontsData[a.id] = a
    }
}
;
canvas.app.world.Model.prototype.parseRace = function(t) {
    return t > 1 ? -1 : t
}
;
canvas.app.world.Model.prototype.findFrontLoc = function(t) {
    var e;
    var a;
    var i = "";
    var s = this.AREAS[t];
    if (!s)
        return i;
    var n = s.locations_ids.length;
    for (var r = 0; r < n; r++) {
        e = s.locations_ids[r];
        if (i == "") {
            for (a in this.frontsData) {
                if (a == e) {
                    i = a;
                    break
                }
            }
        }
    }
    return i
}
;
canvas.app.world.Model.prototype.initModule = function(t, e) {
    this.isModule = t;
    if (this.isModule) {
        var a = canvas.app.location.model;
        this.CfgLink = a.MapCfgLink;
        this.NavLink = a.MapNavLink;
        this.UpdLink = a.MapUpdLink;
        this.World1_Path = a.World1_Path;
        this.World2_Path = a.World2_Path;
        this.AreasXML_Path = a.AreasXML_Path;
        this.race = a.mRace;
        this.SelectWay = e["selectWay"].bind(e);
        this.UnSelectWay = e["unSelectWay"].bind(e);
        this.GoToWay = e["goToWay"].bind(e);
        this.ZoomMode = e["zoomModeAnswer"].bind(e)
    }
}
;
canvas.app.world.Model.prototype.initConfig = function() {
    var t = canvas.ResourceLoader.get("config").data;
    this.parseWaysXML(t);
    this.AREAS = {};
    this.areas_xml = [];
    this.parse_world_confing(t)
}
;
canvas.app.world.Model.prototype.initAreas = function() {
    for (var t = 0; t < this.areas_xml.length; t++) {
        this.parse_area_config(canvas.ResourceLoader.get(this.areas_xml[t]).data)
    }
}
;
canvas.app.world.Model.prototype.parseWaysXML = function(t) {
    var e;
    var a = t.getElementsByTagName("way");
    var i = a.length;
    for (var s = 0; s < i; s++) {
        e = {};
        e.name = a[s].attributes.name.value;
        e.xx = parseInt(a[s].attributes.xx.value);
        e.yy = parseInt(a[s].attributes.yy.value);
        this.way_conf[e.name] = e
    }
}
;
canvas.app.world.Model.prototype.parse_world_confing = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    s = t.childNodes;
    for (e = 0; e < s.length; e++) {
        if (s[e].nodeName == "world") {
            n = s[e].childNodes;
            for (a = 0; a < n.length; a++) {
                switch (n[a].nodeName) {
                case "area":
                    this.parse_area(n[a]);
                    break;
                case "areas_xml":
                    r = n[a].childNodes;
                    for (i = 0; i < r.length; i++) {
                        if (r[i].nodeName == "file") {
                            if (r[i].attributes.src != null) {
                                this.areas_xml.push(this.AreasXML_Path + r[i].attributes.src.value)
                            }
                        }
                    }
                    break
                }
            }
        }
    }
}
;
canvas.app.world.Model.prototype.parse_area_config = function(t) {
    var e = t;
    var a;
    var i;
    var s;
    var n;
    a = e.childNodes;
    for (s = 0; s < a.length; s++) {
        if (a[s].nodeName == "areas") {
            i = a[s].childNodes;
            for (n = 0; n < i.length; n++) {
                if (i[n].nodeName == "area") {
                    this.parse_area(i[n])
                }
            }
        }
    }
}
;
canvas.app.world.Model.prototype.parse_area = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    var h;
    var d;
    var v;
    var u;
    var m;
    var f;
    var _;
    var g = [];
    var w;
    l = t.attributes;
    if (l.src != null) {
        if (l.id != null) {
            if (l.rect != null) {
                d = l.rect.value.split(",");
                if (d.length == 4) {
                    this.AREAS[l.id.value] = {};
                    e = this.AREAS[l.id.value];
                    e.src = l.src.value;
                    e.id = l.id.value;
                    e.rect_x1 = parseInt(d[0]);
                    e.rect_y1 = parseInt(d[1]);
                    e.rect_x2 = parseInt(d[2]);
                    e.rect_y2 = parseInt(d[3]);
                    this.pre_calc_item(e);
                    e.locations = {};
                    e.locations_list = [];
                    e.locations_ids = [];
                    e.objects = [];
                    r = t.childNodes;
                    for (s = 0; s < r.length; s++) {
                        if (r[s].nodeName == "title") {
                            e.title = r[s].childNodes[0].nodeValue;
                            if (!e.title) {
                                e.title = "no title"
                            }
                        } else if (r[s].nodeName == "location") {
                            c = r[s].attributes;
                            if (c.id != null) {
                                if (c.inner_flag_pos != null) {
                                    v = c.inner_flag_pos.value.split(",");
                                    if (v.length == 2) {
                                        e.locations[c.id.value] = {};
                                        a = e.locations[c.id.value];
                                        g.push(c.id.value);
                                        a.id = c.id.value;
                                        if (this.treasureLocation == parseInt(a.id))
                                            this.treasureArea = parseInt(e.id);
                                        a.flag_pos_x = parseInt(v[0]);
                                        a.flag_pos_y = parseInt(v[1]);
                                        o = r[s].childNodes;
                                        for (n = 0; n < o.length; n++) {
                                            if (o[n].nodeName == "object") {
                                                this.parse_object(e, o[n], "global", a.id)
                                            } else if (o[n].nodeName == "title") {
                                                a.title = o[n].childNodes[0].nodeValue
                                            } else if (o[n].nodeName == null) {}
                                        }
                                        e.locations_list.push(a.title);
                                        e.locations_ids.push(a.id)
                                    } else {}
                                } else {}
                                if (c.inner_manor_pos != null) {
                                    u = c.inner_manor_pos.value.split(",");
                                    if (u.length == 2) {
                                        a.manor_pos_x = parseInt(u[0]);
                                        a.manor_pos_y = parseInt(u[1])
                                    }
                                } else {}
                                if (c.inner_front_pos != null) {
                                    m = c.inner_front_pos.value.split(",");
                                    if (m.length == 2) {
                                        a.front_pos_x = parseInt(m[0]);
                                        a.front_pos_y = parseInt(m[1])
                                    }
                                } else {}
                                if (c.inner_popup_pos != null) {
                                    f = c.inner_popup_pos.value.split(",");
                                    if (f.length == 2) {
                                        a.popup_pos_x = parseInt(f[0]);
                                        a.popup_pos_y = parseInt(f[1])
                                    }
                                } else {}
                            } else {}
                        } else if (r[s].nodeName == "object") {
                            this.parse_object(e, r[s], "area")
                        }
                    }
                } else {}
            } else {}
        } else {}
    } else {}
    this.AREALOC.push([l.id.value, g])
}
;
canvas.app.world.Model.prototype.pre_calc_item = function(t) {
    var e;
    if (t.rect_x1 > t.rect_x2) {
        e = t.rect_x1;
        t.rect_x1 = t.rect_x2;
        t.rect_x2 = e
    }
    if (t.rect_y1 > t.rect_y2) {
        e = t.rect_y1;
        t.rect_y1 = t.rect_y2;
        t.rect_y2 = e
    }
    t.rect_w = t.rect_x2 - t.rect_x1;
    t.rect_h = t.rect_y2 - t.rect_y1;
    t.center_x = Math.floor(t.rect_w / 2) + t.rect_x1;
    t.center_y = Math.floor(t.rect_h / 2) + t.rect_y1;
    t.rect_x1_3 = Math.round(t.rect_x1 / 3);
    t.rect_x2_3 = Math.round(t.rect_x2 / 3);
    t.rect_y1_3 = Math.round(t.rect_y1 / 3);
    t.rect_y2_3 = Math.round(t.rect_y2 / 3);
    t.rect_w_3 = t.rect_x2_3 - t.rect_x1_3;
    t.rect_h_3 = t.rect_y2_3 - t.rect_y1_3
}
;
canvas.app.world.Model.prototype.parse_object = function(t, e, a, i) {
    var s = e.attributes;
    if (s.id != null) {
        if (s.inner_pos != null) {
            var n = s.inner_pos.value.split(",");
            if (n.length == 2) {
                var r = {};
                t.objects.push(r);
                r.id = s.id.value;
                r.xx = parseInt(n[0]);
                r.yy = parseInt(n[1]);
                r.type = a;
                r.location_id = i;
                r.items = [];
                var o = e.childNodes;
                for (var l = 0; l < o.length; l++) {
                    switch (o[l].nodeName) {
                    case "title":
                        r.title = o[l].childNodes[0].nodeValue;
                        break;
                    case "text":
                        r.text = o[l].childNodes[0].nodeValue;
                        break;
                    case "item":
                        r.items.push(o[l].childNodes[0].nodeValue);
                        break;
                    case "linkage":
                        var c = o[l].attributes;
                        if (c.area_id != null) {
                            r.linkage_area_id = c.area_id.value
                        } else if (c.locations != null) {
                            r.linkage_locations = c.locations.value.split(",")
                        } else {}
                        r.linkage_location_id = c.location_id.value;
                        break;
                    case null:
                        break
                    }
                }
            } else {}
        } else {}
    } else {}
}
;
canvas.app.world.Model.prototype.parse_my_flag = function(t) {
    var e = this;
    var a = (new DOMParser).parseFromString(t, "text/xml");
    var i;
    var s = a.childNodes;
    var n;
    for (i = 0; i < s.length; i++) {
        if (s[i].nodeName == "flag") {
            n = s[i].attributes;
            if (n.area != null && n.location != null && n.target != null) {
                if (n.area.value != e.FlagArea || n.location.value != e.FlagLocation || n.target.value != e.FinishLocation) {
                    if (e.AREAS != null) {
                        if (e.AREAS[n.area.value] != null) {
                            if (e.AREAS[n.area.value].locations != null) {
                                if (e.AREAS[n.area.value].locations[n.location.value] != null) {
                                    if (e.main) {
                                        e.FlagArea = n.area.value;
                                        e.FlagLocation = n.location.value;
                                        e.FinishLocation = n.target.value;
                                        e.main.view.update_my_flag()
                                    } else {}
                                } else {}
                            } else {}
                        } else {}
                    } else {}
                }
            } else {}
        }
    }
}
;
canvas.app.world.Model.prototype.parse_my_flag_js = function(t) {
    var e = this;
    if (t == null) {
        return false
    }
    var a = t.split("|");
    if (a.length == 2) {
        var i = a[0];
        var s = a[1]
    } else {
        return false
    }
    if (i != e.FlagArea || s != e.FlagLocation) {
        if (e.AREAS != null) {
            if (e.AREAS[i] != null) {
                if (e.AREAS[i].locations != null) {
                    if (e.AREAS[i].locations[s] != null) {
                        if (e.main != null) {
                            e.FlagArea = i;
                            e.FlagLocation = s;
                            e.main.view.update_my_flag();
                            return true
                        } else {}
                    } else {}
                } else {}
            } else {}
        } else {}
    }
    return false
}
;
canvas.app.world.Model.prototype.parse_my_flag_first_js = function(t) {
    if (t == null) {
        return
    }
    var e = t.split("|");
    if (e.length == 2) {
        var a = e[0];
        var i = e[1]
    } else {
        return
    }
    this.ActiveArea = a;
    this.ActiveLocation = i
}
;
canvas.app.world.Model.prototype.parse_compass_config = function(t) {
    var e = this;
    var a = t;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    i = a.childNodes;
    for (r = 0; r < i.length; r++) {
        if (i[r].nodeName == "locations") {
            s = i[r].childNodes;
            for (o = 0; o < s.length; o++) {
                if (s[o].nodeName == "title") {
                    if (s[o].attributes.name != null) {
                        e.LOC_LIST_AR.push([s[o].nodeName, s[o].attributes.name.value])
                    }
                }
                if (s[o].nodeName == "loc") {
                    if (s[o].attributes.id != null && s[o].attributes.name != null && s[o].attributes.verges != null) {
                        var c = true;
                        if (s[o].attributes.race != null) {
                            if (s[o].attributes.race.value != e.race) {
                                c = false
                            }
                        }
                        if (c) {
                            var p = [];
                            var h = s[o].attributes.verges.value.split("|");
                            var d = [];
                            for (var v = 0; v < h.length; v++) {
                                d = h[v].split(",");
                                if (d.length == 2) {
                                    p[v] = [d[0], d[1]]
                                }
                            }
                            e.myLocVerge[s[o].attributes.id.value] = p;
                            e.LOC_LIST_AR.push([parseInt(s[o].attributes.id.value), s[o].attributes.name.value])
                        }
                    }
                }
            }
        }
    }
}
;
canvas.app.world.Model.prototype.parseConfig = function(t) {
    this.locations = new Object;
    var e = canvas.app.manor.model;
    var a;
    var i;
    if (!canvas.Functions.hasChildNode(t, "costs"))
        return;
    var s = t.getElementsByTagName("costs")[0].childNodes;
    var n;
    var r = s.length;
    for (var o = 0; o < r; o++) {
        i = {};
        i.id = canvas.Functions.hasChildNode(s[o], "id") ? s[o].getElementsByTagName("id")[0].childNodes[0].nodeValue : 0;
        i.price1 = canvas.Functions.hasChildNode(s[o], "gov_cost") ? parseInt(s[o].getElementsByTagName("gov_cost")[0].childNodes[0].nodeValue) : 0;
        n = s[o].getElementsByTagName("market_cost");
        i.price2 = n.length > 0 ? parseInt(n[0].childNodes[0].nodeValue) : 0;
        i.user = canvas.Functions.hasChildNode(s[o], "user") ? parseInt(s[o].getElementsByTagName("user")[0].childNodes[0].nodeValue) : 0;
        i.isSelling = canvas.Functions.hasChildNode(s[o], "for_sell") ? parseInt(s[o].getElementsByTagName("for_sell")[0].childNodes[0].nodeValue) == 1 : false;
        i.sellEnable = canvas.Functions.hasChildNode(s[o], "hand_buy_enable") ? s[o].getElementsByTagName("hand_buy_enable")[0].childNodes[0].nodeValue == "1" : false;
        if (this.locations[i.id] == undefined)
            this.locations[i.id] = i
    }
    e.user = new canvas.data.manor.DUser;
    var l = canvas.Functions.hasChildNode(t, "current_work") ? t.getElementsByTagName("current_work")[0].childNodes[0] : null;
    e.user.labour = l ? parseInt(l.nodeValue) : 0;
    l = canvas.Functions.hasChildNode(t, "work_max") ? t.getElementsByTagName("work_max")[0].childNodes[0] : null;
    e.user.labourMax = l ? parseInt(l.nodeValue) : 0;
    l = canvas.Functions.hasChildNode(t, "move_price") ? t.getElementsByTagName("move_price")[0].childNodes[0] : null;
    this.movePrice = l ? parseInt(l.nodeValue) : 0;
    this.userHaveManor = e.user.labourMax > 0;
    l = canvas.Functions.hasChildNode(t, "buy_enable") ? t.getElementsByTagName("buy_enable")[0].childNodes[0] : null;
    this.buyEnable = l ? l.nodeValue == "1" : false
}
;
canvas.app.world.Model.prototype.parseSellRequests = function(t, e) {
    if (e == undefined)
        e = "";
    this["sellRequests" + e] = new Array;
    if (!canvas.Functions.hasChildNode(t, "sell_requests"))
        return;
    var a = t.getElementsByTagName("sell_requests")[0].childNodes;
    var i;
    var s = a.length;
    for (var n = 0; n < s; n++) {
        i = new canvas.data.manor.DSellRequest;
        i.id = canvas.Functions.hasChildNode(a[n], "id") ? a[n].getElementsByTagName("id")[0].childNodes[0].nodeValue : 0;
        i.price = canvas.Functions.hasChildNode(a[n], "price") ? parseInt(a[n].getElementsByTagName("price")[0].childNodes[0].nodeValue) : 0;
        i.user = new canvas.data.manor.DUserGame;
        i.user.id = "3434";
        i.user.level = canvas.Functions.hasChildNode(a[n], "level") ? parseInt(a[n].getElementsByTagName("level")[0].childNodes[0].nodeValue) : 0;
        i.user.login = canvas.Functions.hasChildNode(a[n], "nick") ? a[n].getElementsByTagName("nick")[0].childNodes[0].nodeValue : "";
        this["sellRequests" + e].push(i)
    }
    this["sellPagesCount" + e] = t.getElementsByTagName("pages").length > 0 ? parseInt(t.getElementsByTagName("pages")[0].childNodes[0].nodeValue) : 1
}
;
canvas.app.world.Model.prototype.parseSellRequests2 = function(t) {
    this.parseSellRequests(t, "2")
}
;
canvas.app.world.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.world.model;
    this.main = t;
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.container.interactive = true;
    this.map_cont = new canvas.px.Container;
    this.map_cont.position.set(19, 14);
    this.container.addChild(this.map_cont);
    this.map_cont.interactive = true;
    this.map1 = new canvas.app.world.view.MapWorldParts(this,2e3,1300,3,e.World1_Path + "world1_");
    this.map2 = new canvas.app.world.view.MapWorldParts(this,6e3,3900,1,e.World2_Path + "world2_");
    this.map_state = new canvas.app.world.engine.MapStateObject(this);
    this.map_state.focus_map(this.map2, 1);
    this.msk = new canvas.px.Mask(100,100);
    this.msk.position.set(19, 14);
    this.addChild(this.msk);
    this.map_cont.mask = this.msk;
    this.scroll_V = new canvas.app.world.view.ScrollV(this.map_state,this.container);
    if (e.isModule)
        this.addChild(this.scroll_V.shape);
    else
        this.addChild(this.scroll_V);
    this.scroll_H = new canvas.app.world.view.ScrollH(this.map_state,this.map_cont);
    if (e.isModule)
        this.addChild(this.scroll_H.shape);
    else
        this.addChild(this.scroll_H);
    this.scroll_null = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_scroll_null"));
    if (!e.isModule)
        this.addChild(this.scroll_null);
    this.borders = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "curl"),100,142,100,142);
    if (!e.isModule)
        this.addChild(this.borders);
    this.zoom = new canvas.app.world.view.ZoomView(this);
    if (!e.isModule)
        this.addChild(this.zoom);
    this.zoom.x = 33;
    this.zoom.set_mode(2);
    this.set_labels();
    if (!e.isModule) {
        this.manorLayer = new canvas.app.world.manor.Manor(this);
        this.addChild(this.manorLayer);
        this.manorLayer.position.set(20, 70)
    }
    this.firstResize = true;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_H, this.scrollHandlerH, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_V, this.scrollHandlerV, this)
}
;
canvas.app.world.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.View.prototype.resize = function(t, e) {
    var a = canvas.app.world.model;
    var i = a.width;
    var s = a.height;
    this.borders.width = i;
    this.borders.height = s;
    var n = false;
    if (a.ls_ww != i) {
        a.ls_ww = i;
        n = true;
        this.scroll_V.position.set(i - 35, 14);
        this.scroll_H.setSize(i - 37, 16);
        this.map_state.set_visible_width(i - 32);
        this.msk.setSize(this.map_state.map_visible_width);
        this.scroll_H.refresh();
        this.scroll_null.x = i - 35;
        this.label2.pos(i)
    }
    if (a.ls_hh != s) {
        a.ls_hh = s;
        n = true;
        this.scroll_H.position.set(18, s - 30);
        this.scroll_V.setSize(16, s - 28);
        this.map_state.set_visible_height(s - 28);
        this.msk.setSize(-1, this.map_state.map_visible_height);
        this.scroll_V.refresh();
        this.scroll_null.y = s - 30;
        if (a.isModule) {
            this.zoom.x = Math.round((i - this.zoom.width) / 2) - 6
        }
        this.zoom.y = s - (a.isModule ? 85 : 99)
    }
    if (n) {
        this.map_state.map_check()
    }
    if (this.firstResize) {
        this.firstResize = false;
        this.map2.focus_on_active_area()
    }
    if (!a.isModule)
        this.main.windowsManager.init(this.main.windowsContainer, i, s, this)
}
;
canvas.app.world.View.prototype.set_labels = function() {
    var t = canvas.app.world.model;
    this.label1 = new canvas.app.world.view.TopTextLeft;
    this.label1.position.set(28, 21);
    if (!t.isModule)
        this.addChild(this.label1);
    var e = "unknown";
    var a = "unknown";
    var i = t.AREAS[t.ActiveArea];
    if (i != null) {
        e = i.title;
        if (i.locations[t.ActiveLocation] != null) {
            a = i.locations[t.ActiveLocation].title
        }
    }
    this.label1.set_line0(canvas.Translator.getText(207) + ":", e, a);
    this.label2 = new canvas.app.world.view.TopTextRight;
    this.label2.position.set(400, 21);
    this.addChild(this.label2)
}
;
canvas.app.world.View.prototype.testUpdate = function() {
    var t = canvas.app.world.model;
    if (t.treasureArea == parseInt(t.focusedAreaId))
        this.updateTreasure();
    if (t.findFrontLoc(t.focusedAreaId) != "")
        this.updateFronts()
}
;
canvas.app.world.View.prototype.updateTreasure = function() {
    var t = canvas.app.world.model;
    var e;
    var a;
    for (var i in t.AREAS) {
        e = t.AREAS[i];
        if (e.sen != null) {
            if (t.treasureArea == parseInt(e.id)) {
                e.sen.setSelection(true, 12592164, "chest")
            } else {
                if (!e.sen.isManorable)
                    e.sen.setSelection()
            }
            for (var s in e.locations) {
                a = e.locations[s];
                if (a.lnk != null) {
                    if (parseInt(a.id) == t.treasureLocation) {
                        a.lnk.setSelection(true, 12592164, "chest")
                    } else {
                        if (!a.lnk.isManorable)
                            a.lnk.setSelection()
                    }
                }
            }
        }
    }
}
;
canvas.app.world.View.prototype.updateFronts = function() {
    var t = canvas.app.world.model;
    var e;
    var a;
    var i;
    var s;
    for (var n in t.AREAS) {
        e = t.AREAS[n];
        if (e.sen != null) {
            for (var r in e.locations) {
                a = e.locations[r];
                if (a.lnk != null) {
                    for (i in t.frontsData) {
                        if (parseInt(a.id) == parseInt(i)) {
                            s = t.frontsData[i];
                            if (s != null) {
                                switch (s.status) {
                                case 0:
                                    switch (s.owner) {
                                    case 1:
                                        a.lnk.setFrontsIcon("timer_blue");
                                        break;
                                    case -1:
                                        a.lnk.setFrontsIcon("timer_red");
                                        break;
                                    default:
                                        a.lnk.setFrontsIcon("timer_gray")
                                    }
                                    break;
                                default:
                                    a.lnk.setFrontsIcon("timer_gray")
                                }
                            } else {
                                a.lnk.setFrontsIcon()
                            }
                        } else {
                            a.lnk.setFrontsIcon()
                        }
                    }
                }
            }
        }
    }
}
;
canvas.app.world.View.prototype.updateManorMode = function() {
    var t = canvas.app.world.model;
    if (t.manorMode) {
        this.map2.popupsContainer.visible = true;
        if (this.manorLayer != null)
            this.manorLayer.update()
    } else {
        this.map2.popupsContainer.visible = false;
        if (this.manorLayer != null)
            this.manorLayer.update()
    }
}
;
canvas.app.world.View.prototype.area_exit = function() {
    var t = canvas.app.world.model;
    this.label1.deactivate();
    this.zoom.set_mode(1);
    this.map_state.focus_map(this.map1, 3);
    this.map_state.set_visible_width(t.width - (19 + 35));
    this.map_state.set_visible_height(t.height - (14 + 30));
    this.refresh_scrollers();
    this.map1_focus();
    this.map_state.map_check()
}
;
canvas.app.world.View.prototype.area_enter = function(t) {
    var e = canvas.app.world.model;
    e.focusedAreaId = t.id;
    this.map_state.focus_map(this.map2, 1);
    this.map_state.set_visible_width(e.width - (19 + 35));
    this.map_state.set_visible_height(e.height - (14 + 30));
    this.refresh_scrollers();
    this.zoom.set_mode(2);
    this.map2.focus_on_active_area();
    this.map_state.map_check()
}
;
canvas.app.world.View.prototype.area_switch = function(t) {
    var e = canvas.app.world.model;
    e.focusedAreaId = t.id;
    this.map_state.set_visible_width(e.width - (19 + 35));
    this.map_state.set_visible_height(e.height - (14 + 30));
    this.refresh_scrollers();
    this.map2.focus_on_active_area();
    this.map_state.map_check();
    if (this.manorLayer != null)
        this.manorLayer.loadConfig()
}
;
canvas.app.world.View.prototype.refresh_scrollers = function() {
    this.scroll_H.refresh();
    this.scroll_V.refresh();
    this.scrollHandlerH();
    this.scrollHandlerV()
}
;
canvas.app.world.View.prototype.refresh_my_flag = function() {
    var t = canvas.app.world.model;
    t.focusedAreaId = t.FlagArea;
    t.focusedLocationId = t.FlagLocation;
    t.ActiveArea = t.FlagArea;
    t.ActiveLocation = t.FlagLocation;
    if (t.isModule) {
        this.map_state.mapLnk.focus_on_active_area_in_motion()
    } else {
        this.map_state.mapLnk.focus_on_active_area()
    }
    this.testUpdate();
    this.updateManorMode()
}
;
canvas.app.world.View.prototype.scrollHandlerH = function() {
    if (!this.scroll_H.isDisabled()) {
        this.map_state.delta_map_x(this.scroll_H.current)
    }
}
;
canvas.app.world.View.prototype.scrollHandlerV = function() {
    if (!this.scroll_V.isDisabled()) {
        this.map_state.delta_map_y(this.scroll_V.current)
    }
}
;
canvas.app.world.View.prototype.map1_focus = function() {
    var t = canvas.app.world.model;
    if (t.AREAS[t.ActiveArea] != null) {
        var e = t.AREAS[t.ActiveArea];
        var a = t.width - (19 + 35);
        var i = t.height - (14 + 30);
        var s = this.map_state.map_complete_width - a;
        var n = this.map_state.map_complete_width - a;
        var r = -Math.round(e.center_x / 3 - a / 2);
        var o = -Math.round(e.center_y / 3 - i / 2);
        if (r > 0) {
            r = 0
        } else if (r < -s) {
            r = -s
        }
        if (o > 0) {
            o = 0
        } else if (o < -n) {
            o = -n
        }
        this.scroll_H.current = -r;
        this.scroll_V.current = -o;
        this.scrollHandlerV();
        this.scrollHandlerH()
    }
}
;
canvas.app.world.View.prototype.update_my_flag = function() {
    var t = canvas.app.world.model;
    var e = t.AREAS[t.FlagArea];
    if (e == null) {
        return
    }
    var a = e.locations[t.FlagLocation];
    if (a == null) {
        return
    }
    this.label1.set_line0(canvas.Translator.getText(207) + ":", e.title, a.title);
    this.label1.redraw_bg();
    this.map1.refresh_pers_flag();
    this.map2.refresh_pers_flag();
    this.map1.refresh_pers_finish_flag();
    this.map2.refresh_pers_finish_flag()
}
;
canvas.app.world.engine.FindWay = function() {}
;
canvas.app.world.engine.FindWay.prototype.finder = function(t, e) {
    var a = canvas.app.world.model;
    this.p1 = t;
    this.p2 = e;
    if (String(this.p1) == String(this.p2)) {
        return [0]
    }
    this.p2_tmp = this.p2;
    this.p1_tmp = this.p2_tmp;
    this.arr_tmp = [];
    this.arr_trash = [];
    this.cache_cont = {};
    this.arr_loc = [];
    this.arr_tmp.push(this.p1);
    this.arr_trash = this.arr_trash.concat(this.arr_tmp);
    var i = 0;
    var s = a.LOC_LIST_AR.length;
    t: while (i < s) {
        i++;
        var n = [];
        for (var r = this.arr_tmp.length - 1; r >= 0; r--) {
            var o = [];
            o = this.getNearLoc(this.arr_tmp[r]);
            this.clearArr(o, this.arr_trash);
            this.cache_cont[this.arr_tmp[r]] = o;
            if (this.find(o, this.p2)) {
                break t
            }
            this.arr_trash = this.arr_trash.concat(o);
            n = n.concat(o)
        }
        this.arr_tmp = [];
        this.arr_tmp = this.arr_tmp.concat(n);
        if (this.arr_tmp.length == 0) {
            return [-1]
        }
    }
    this.arr_loc.push(this.p1_tmp);
    while (this.p1_tmp != this.p1) {
        this.p2_tmp = this.getNextCacheLoc(this.p2_tmp);
        this.p1_tmp = this.p2_tmp;
        this.arr_loc.push(this.p1_tmp)
    }
    return this.arr_loc
}
;
canvas.app.world.engine.FindWay.prototype.getNextCacheLoc = function(t) {
    for (var e in this.cache_cont) {
        var a = this.cache_cont[e];
        for (var i = a.length - 1; i >= 0; i--) {
            if (a[i] == t) {
                return parseInt(e)
            }
        }
    }
    return 1
}
;
canvas.app.world.engine.FindWay.prototype.getNearLoc = function(t) {
    var e = canvas.app.world.model;
    var a = [];
    for (var i in e.myLocVerge) {
        var s = e.myLocVerge[i];
        t: for (var n = s.length - 1; n >= 0; n--) {
            if (s[n])
                for (var r = s[n].length - 1; r >= 0; r--) {
                    if (s[n][r] == t) {
                        a.push(i);
                        break t
                    }
                }
        }
    }
    return a
}
;
canvas.app.world.engine.FindWay.prototype.find = function(t, e) {
    for (var a = t.length - 1; a >= 0; a--) {
        if (t[a] == e) {
            return true
        }
    }
    return false
}
;
canvas.app.world.engine.FindWay.prototype.clearArr = function(t, e) {
    for (var a = e.length - 1; a >= 0; a--) {
        for (var i = t.length - 1; i >= 0; i--) {
            if (t[i] == e[a]) {
                t.splice(i, 1);
                i++
            }
        }
    }
}
;
canvas.app.world.engine.MapStateObject = function(t) {
    this.baseLnk = t;
    this.map_cont = t.map_cont
}
;
canvas.app.world.engine.MapStateObject.prototype.focus_map = function(t, e) {
    if (this.mapLnk != null) {
        this.map_cont.removeChild(this.mapLnk)
    }
    this.mapLnk = t;
    this.devisor = e;
    this.map_complete_width = this.mapLnk.gw;
    this.map_complete_height = this.mapLnk.gh;
    this.map_pos_x = 0;
    this.map_pos_y = 0;
    this.map_cont.addChild(this.mapLnk)
}
;
canvas.app.world.engine.MapStateObject.prototype.set_visible_width = function(t) {
    this.map_visible_width = t;
    this.map_invisible_width = this.map_complete_width - this.map_visible_width;
    this.map_pos_x = -this.mapLnk.x / this.map_invisible_width;
    if (this.map_pos_x > 1) {
        this.mapLnk.x = -this.map_invisible_width;
        this.map_pos_x = 1
    }
}
;
canvas.app.world.engine.MapStateObject.prototype.set_visible_height = function(t) {
    this.map_visible_height = t;
    this.map_invisible_height = this.map_complete_height - this.map_visible_height;
    this.map_pos_y = -this.mapLnk.y / this.map_invisible_height;
    if (this.map_pos_y > 1) {
        this.mapLnk.y = -this.map_invisible_height;
        this.map_pos_y = 1
    }
}
;
canvas.app.world.engine.MapStateObject.prototype.delta_map_x = function(t) {
    var e = t;
    if (e < 0) {
        e = 0
    } else if (e > this.map_invisible_width) {
        e = this.map_invisible_width
    }
    this.set_pos_x(e / this.map_invisible_width)
}
;
canvas.app.world.engine.MapStateObject.prototype.delta_map_y = function(t) {
    var e = t;
    if (e < 0) {
        e = 0
    } else if (e > this.map_invisible_height) {
        e = this.map_invisible_height
    }
    this.set_pos_y(e / this.map_invisible_height)
}
;
canvas.app.world.engine.MapStateObject.prototype.set_pos_x = function(t) {
    this.map_pos_x = t;
    this.mapLnk.x = -Math.round(this.map_invisible_width * this.map_pos_x);
    this.map_check()
}
;
canvas.app.world.engine.MapStateObject.prototype.set_pos_y = function(t) {
    this.map_pos_y = t;
    this.mapLnk.y = -Math.round(this.map_invisible_height * this.map_pos_y);
    this.map_check()
}
;
canvas.app.world.engine.MapStateObject.prototype.map_check = function() {
    var t = canvas.app.world.model;
    this.mapLnk.check_parts(this.map_visible_width, this.map_visible_height);
    var e = new canvas.px.Rectangle(-this.mapLnk.x,-this.mapLnk.y,this.map_visible_width,this.map_visible_height);
    var a;
    var i;
    for (var s in t.AREAS) {
        i = t.AREAS[s];
        if (i.source == null) {
            if (this.devisor == 1) {
                a = new canvas.px.Rectangle(i.rect_x1,i.rect_y1,i.rect_w,i.rect_h)
            } else if (this.devisor == 3) {
                a = new canvas.px.Rectangle(i.rect_x1_3,i.rect_y1_3,i.rect_w_3,i.rect_h_3)
            } else {
                a = null
            }
            if (a != null && e.intersects(a)) {
                if (i.source == null) {
                    i.source = new canvas.app.world.view.AreaLoader(this.baseLnk,i,null);
                    i.source.init()
                }
            }
        }
    }
    this.baseLnk.testUpdate()
}
;
canvas.app.world.engine.MapStateObject.prototype.refresh_xy_pos = function() {
    this.map_pos_x = -Math.round(this.mapLnk.x / this.map_invisible_width);
    this.map_pos_y = -Math.round(this.mapLnk.y / this.map_invisible_height)
}
;
canvas.app.world.manor.Manor = function(t) {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.baseLnk = t;
    this.addChild(this.container);
    this.market = new canvas.app.manor.view.controls.MarketWin;
    this.labourWin = new canvas.app.manor.view.controls.LabourWin(true);
    this.workWin = new canvas.app.manor.view.controls.WorkWin;
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow;
    this.messageWin = new canvas.app.manor.view.controls.MessageWindow;
    this._controller = new canvas.app.world.manor.ManorController(this,this.baseLnk);
    this.loadConfig()
}
;
canvas.app.world.manor.Manor.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.manor.Manor.prototype.loadConfig = function() {
    var t = canvas.app.world.model;
    if (t.userLevel >= 5)
        this._controller.loadConfig()
}
;
canvas.app.world.manor.Manor.prototype.update = function() {
    var t = canvas.app.world.model;
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    canvas.Functions.destroyChildren(this.baseLnk.map2.popupsContainer);
    e = t.AREAS[t.focusedAreaId];
    if (e != null && e.locations != null) {
        for (c in e.locations) {
            a = e.locations[c];
            if (a.popup != null && a.popup.parent != null) {
                a.popup.parent.removeChild(a.popup);
                a.popup = null
            }
            s = t.locations[a.id];
            if (s != null) {
                s.areaTitle = e.title;
                s.locTitle = a.title;
                i = new canvas.app.world.manor.popup.PopupBuy(s.id,s.price1,s.price2,s.user,s.isSelling,s.sellEnable);
                a.popup = i;
                this.baseLnk.map2.popupsContainer.addChild(i);
                i.x = e.rect_x1 + (!a.popup_pos_x || a.popup_pos_x < 0 ? a.flag_pos_x : a.popup_pos_x);
                i.y = e.rect_y1 + (!a.popup_pos_x || a.popup_pos_y < 0 ? a.flag_pos_y : a.popup_pos_y);
                if (s.user >= 1) {
                    if (!this["manorIcon" + s.user]) {
                        n = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", s.user == 1 ? "manor/manor2" : "manor/manor3"));
                        o = new canvas.px.Container;
                        o.addChild(n);
                        n.x = -Math.round(n.width * .5);
                        n.y = -Math.round(n.height * .5);
                        o.scale.set(.7, .7);
                        o.buttonMode = true;
                        o.interactive = true;
                        o.hitArea = new canvas.px.Circle(0,0,o.width * .5);
                        this.baseLnk.map2.popupsContainer2.addChild(o);
                        o.mouseover = this._rollOverHandler.bind(this);
                        o.mouseout = this._rollOutHandler.bind(this);
                        o.click = this._clickHandler.bind(this);
                        o.name = s.user == 1 ? "manor" : "";
                        this["manorIcon" + s.user] = o
                    }
                    this.baseLnk.map2.popupsContainer2.addChild(this["manorIcon" + s.user]);
                    this["manorIcon" + s.user].x = e.rect_x1 + (a.manor_pos_x == undefined || a.manor_pos_x < 0 ? a.flag_pos_x : a.manor_pos_x);
                    this["manorIcon" + s.user].y = e.rect_y1 + (a.manor_pos_y == undefined || a.manor_pos_y < 0 ? a.flag_pos_y : a.manor_pos_y)
                }
                if (a.lnk != null) {
                    if (!a.lnk.selected) {
                        if (t.manorMode) {
                            a.lnk.setSelection(true, s.user > 0 ? 2458659 : 12592164);
                            a.lnk.isManorable = true;
                            a.lnk.selected = false
                        } else {
                            a.lnk.setSelection();
                            a.lnk.isManorable = false
                        }
                    }
                }
            }
        }
    }
    this.baseLnk.zoom.btn_manor.visible = t.userLevel >= 5;
    this.baseLnk.zoom.btn_work.visible = t.userLevel >= 5 && t.userHaveManor
}
;
canvas.app.world.manor.Manor.prototype._clickHandler = function(t) {
    var e = canvas.app.world.model;
    var a;
    var i;
    switch (t.target.name) {
    case "manor":
        break;
    default:
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            text: canvas.Translator.getText(225) + " <b>" + e.movePrice.toString() + "</b> <img src='money_gold' atlas='world' yOffset='1'/> !",
            event: {
                name: canvas.app.manor.Event.MOVE_AREA
            }
        })
    }
}
;
canvas.app.world.manor.Manor.prototype._rollOverHandler = function(t) {
    switch (t.target.name) {
    case "manor":
        this.baseLnk.label2.set_data(canvas.Translator.getText(218), "", null);
        break;
    default:
        this.baseLnk.label2.set_data(canvas.Translator.getText(224), "", null);
        break
    }
    this.currentIcon = t.target;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this)
}
;
canvas.app.world.manor.Manor.prototype._rollOutHandler = function(t) {
    this.baseLnk.label2.deactivate();
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this);
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerDown, this)
}
;
canvas.app.world.manor.Manor.prototype._enterFrameHandlerUp = function() {
    var t = this.currentIcon.scale.x + .1;
    if (t >= 1) {
        t = 1;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this)
    }
    this.currentIcon.scale.set(t, t)
}
;
canvas.app.world.manor.Manor.prototype._enterFrameHandlerDown = function() {
    var t = this.currentIcon.scale.x - .1;
    if (t <= .7) {
        t = .7;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerDown, this)
    }
    this.currentIcon.scale.set(t, t)
}
;
canvas.app.world.manor.ManorController = function(t, e) {
    this._view = t;
    this._baseLnk = e;
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_MARKET, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_MARKET_BUY, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_MARKET_SELL, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_WORK, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_WORK, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_SELL_REQUESTS, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_SELL_REQUESTS2, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.BUY_AREA, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELL_AREA, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELL_AREA_CANCEL, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_CONFIRM, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELECT_LOCATION, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_LABOUR, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_LABOUR, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.WORK_USE, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_WORK_REQUESTS, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.MOVE_AREA, null, this._thisHandler, this);
    this._urlLoader = new canvas.utils.URLRequest(canvas.app.world.model.requestURL);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this._urlLoader, this._completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this._urlLoader, this._errorHandler, this)
}
;
canvas.app.world.manor.ManorController.prototype._thisHandler = function(t) {
    var e;
    var a = canvas.app.world.model;
    switch (t.name) {
    case canvas.app.manor.Event.CLOSE_MARKET:
        canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
        break;
    case canvas.app.manor.Event.OPEN_MARKET_BUY:
        canvas.utils.WindowsManager.instance.openWindow(this._view.market, true, true, false);
        this._view.market.panel.path = "buy";
        this._view.market.buyArea.update([], 1, a.areaCurTitle, a.locationCurTitle);
        this.loadSellRequests();
        break;
    case canvas.app.manor.Event.OPEN_MARKET_SELL:
        canvas.utils.WindowsManager.instance.openWindow(this._view.market, true, true, false);
        this._view.market.panel.path = "sell";
        break;
    case canvas.app.manor.Event.LOAD_SELL_REQUESTS:
        this.loadSellRequests();
        break;
    case canvas.app.manor.Event.LOAD_SELL_REQUESTS2:
        this.loadSellRequests2();
        break;
    case canvas.app.manor.Event.BUY_AREA:
        this.buyArea(t.params.areaId, t.params.requestId, t.params.price);
        break;
    case canvas.app.manor.Event.SELL_AREA:
        this.sellArea();
        break;
    case canvas.app.manor.Event.SELL_AREA_CANCEL:
        this.sellAreaCancel();
        break;
    case canvas.app.manor.Event.OPEN_CONFIRM:
        this._view.confirmWin.init(t.params.text, t.params.event, t.params.okText);
        canvas.utils.WindowsManager.instance.openWindow(this._view.confirmWin);
        break;
    case canvas.app.manor.Event.SELECT_LOCATION:
        a.curLocId = t.params;
        e = a.locations[a.curLocId];
        a.areaCurTitle = e.areaTitle;
        a.locationCurTitle = e.locTitle;
        break;
    case canvas.app.manor.Event.CLOSE_LABOUR:
        canvas.utils.WindowsManager.instance.closeWindow(this._view.labourWin);
        break;
    case canvas.app.manor.Event.OPEN_LABOUR:
        canvas.utils.WindowsManager.instance.openWindow(this._view.labourWin, true, true, false);
        this._view.labourWin.panel.path = "all";
        this.loadUserRequests();
        break;
    case canvas.app.manor.Event.CLOSE_WORK:
        canvas.utils.WindowsManager.instance.closeWindow(this._view.workWin);
        break;
    case canvas.app.manor.Event.OPEN_WORK:
        canvas.utils.WindowsManager.instance.openWindow(this._view.workWin, true, true, false);
        break;
    case canvas.app.manor.Event.WORK_USE:
        this.workUse(t.params);
        break;
    case canvas.app.manor.Event.LOAD_WORK_REQUESTS:
        this.loadUserRequests();
        break;
    case canvas.app.manor.Event.MOVE_AREA:
        this.moveArea();
        break
    }
}
;
canvas.app.world.manor.ManorController.prototype._errorHandler = function() {}
;
canvas.app.world.manor.ManorController.prototype._completeHandler = function() {
    var t = canvas.app.world.model;
    var e = canvas.app.manor.model;
    this._view.iteractiveChildren = true;
    var a;
    var i;
    var s;
    var n;
    var r = (new DOMParser).parseFromString(this._urlLoader.request.responseText, "text/xml");
    if (r.getElementsByTagName("error").length > 0) {
        this._view.messageWin.init(r.getElementsByTagName("error")[0].childNodes[0].nodeValue);
        canvas.utils.WindowsManager.instance.openWindow(this._view.messageWin);
        if (this._urlLoader.info == "loadUserRequests")
            canvas.utils.WindowsManager.instance.instance.closeWindow(this._view.labourWin);
        return
    }
    switch (this._urlLoader.info) {
    case "loadConfig":
        t.parseConfig(r);
        this._view.update();
        break;
    case "sellRequests":
        t.parseSellRequests(r);
        this._view.market.buyArea.update(t.sellRequests, t.sellPagesCount, t.areaCurTitle, t.locationCurTitle);
        break;
    case "sellRequests2":
        t.parseSellRequests2(r);
        a = t.locations[t.curLocId];
        this._view.market.sellArea.update(t.sellRequests2, t.sellPagesCount2, t.areaCurTitle, t.locationCurTitle, a.user > 0);
        break;
    case "buyArea":
        canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
        if (r.getElementsByTagName("current_cost").length > 0 && r.getElementsByTagName("current_cost")[0].childNodes[0].nodeValue != "") {
            t.lastBuyParams.price = parseInt(r.getElementsByTagName("current_cost")[0].childNodes[0].nodeValue);
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                text: canvas.Translator.getText(199) + " <b>" + t.lastBuyParams.price + "</b> <img src='money_gold' atlas='ui' yOffset='1'/> ?",
                event: {
                    name: canvas.app.manor.Event.BUY_AREA,
                    params: t.lastBuyParams
                }
            })
        }
        break;
    case "sellArea":
        canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
        break;
    case "loadUserRequests":
        n = JSON.parse(this._urlLoader.request.responseText)["estate|work_requests"];
        e.parseUserRequests(n);
        this._view.labourWin.allRequests.update();
        break;
    case "workUse":
        n = JSON.parse(this._urlLoader.request.responseText)["estate|work"];
        var o;
        var l = e.labourRequests.length;
        for (var c = 0; c < l; c++) {
            o = e.labourRequests[c];
            if (o.id == e.selectedRequestID) {
                e.user.labour -= o.labour - n.amount;
                o.labour = n.amount;
                this._view.labourWin.update();
                break
            }
        }
        break;
    case "moveArea":
        this._baseLnk.map2.popupsContainer2.removeChildren();
        break
    }
    if (r.getElementsByTagName("reload").length > 0 && r.getElementsByTagName("reload")[0].childNodes[0].nodeValue == "1")
        this.loadConfig();
    if (n && n.reload == 1)
        this.loadConfig()
}
;
canvas.app.world.manor.ManorController.prototype.loadConfig = function() {
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=map_info", null, "loadConfig");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.loadSellRequests = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_requests&area_id=" + t.curLocId + "&page=" + (this._view.market.buyArea.requestCurPage + 1) + "&on_page=" + canvas.app.manor.Const.REQUESTS_ON_PAGE, null, "sellRequests");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.loadSellRequests2 = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_requests&area_id=" + t.curLocId + "&page=" + (this._view.market.sellArea.requestCurPage + 1) + "&on_page=" + canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT, null, "sellRequests2");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.buyArea = function(t, e, a) {
    if (e == undefined)
        e = "";
    if (a == undefined)
        a = 0;
    var i = canvas.app.world.model;
    i.lastBuyParams = {
        areaId: t,
        requestId: e,
        price: a
    };
    var s = canvas.app.world.model.requestURL + "?mode=buy_estate&area_id=" + (t == "" ? i.curLocId : t);
    if (a != 0) {
        s += "&flash_cost=" + a
    }
    if (e != "") {
        s += "&sell_request_id=" + e;
        var n = i.sellRequests[e];
        if (n != null)
            s += "&flash_cost=" + n.price
    }
    this._urlLoader.load(s, null, "buyArea");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.sellArea = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_estate&area_id=" + t.curLocId + "&price=" + canvas.app.manor.view.input.text, null, "sellArea");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.sellAreaCancel = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_request_cancel&area_id=" + t.curLocId, null, "sellAreaCancel");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.loadUserRequests = function() {
    var t = canvas.app.manor.model;
    this._urlLoader.load(canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=work_requests&page=" + (t.requestCurPage + 1), null, "loadUserRequests");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.workUse = function(t) {
    var e = canvas.app.manor.model;
    this._urlLoader.load(canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=work&work_request_id=" + e.selectedRequestID + "&amount=" + t, null, "workUse");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.ManorController.prototype.moveArea = function() {
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=move_estate", null, "moveArea");
    this._view.iteractiveChildren = false
}
;
canvas.app.world.manor.Popup = function() {
    canvas.px.Container.call(this);
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.container.position.set(-80, -105)
}
;
canvas.app.world.manor.Popup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.manor.Popup.prototype.overHandler = function() {
    if (this.parent)
        this.parent.setChildIndex(this, this.parent.numChildren - 1)
}
;
canvas.app.world.manor.popup.PopupBuy = function(t, e, a, i, s, n) {
    canvas.app.world.manor.Popup.call(this);
    if (i == undefined)
        i = 0;
    if (s == undefined)
        s = false;
    if (n == undefined)
        n = false;
    if (a == undefined)
        a = 0;
    this.id = t;
    this._price = e;
    this._isSelling = s;
    var r;
    var o;
    var l = canvas.app.world.model;
    this.flag = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/03"));
    this.flag.position.set(-65, -72);
    this.addChild(this.flag);
    this.flag.interactive = true;
    this.molotok = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/04"));
    this.molotok.position.set(-63, -46);
    this.addChild(this.molotok);
    this.molotok.interactive = true;
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.flag,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(219)))
    });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.molotok,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(220)))
    });
    r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "money_gold"));
    this.addChild(r);
    r.position.set(-33, -66);
    o = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,62,18,"left");
    o.position.set(-18, -67);
    o.text = e;
    this.addChild(o);
    if (l.buyEnable) {
        r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/05"));
        this.addChild(r);
        r.position.set(42, -74);
        o = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,11141377,50,18,"left");
        o.position.set(70, -69);
        o.text = "<a href='event:buyNew'>" + canvas.Translator.getText(200) + "</a>";
        this.addChild(o)
    }
    if (a == 0) {
        o = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7026733,144,20,"left");
        this.addChild(o);
        o.text = canvas.Translator.getText(201);
        this.addChild(o);
        o.position.set(-31, -43)
    } else {
        r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "money_gold"));
        this.addChild(r);
        r.position.set(-33, -41);
        o = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,62,18,"left");
        o.position.set(-18, -42);
        o.text = a;
        this.addChild(o);
        if (l.buyEnable) {
            r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/05"));
            this.addChild(r);
            r.position.set(42, -49);
            o = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,11141377,50,18,"left");
            o.position.set(70, -44);
            o.text = "<a href='event:buyUser'>" + canvas.Translator.getText(200) + "</a>";
            this.addChild(o)
        }
    }
    if (i == 0 || !n) {
        var r = this.container.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/06")), 0);
        r.y = 23
    } else {
        this.container.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/07")), 0);
        r = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"),4,0,4,0);
        r.width = 145;
        r.position.set(43, 7);
        this.container.addChild(r);
        r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/02"));
        r.position.set(-65, -100);
        this.addChild(r);
        o = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,11141377,100,18,"left");
        o.position.set(-30, -94);
        o.text = "<a href='event:sell'>" + (this._isSelling ? canvas.Translator.getText(202) : canvas.Translator.getText(203)) + "</a>";
        this.addChild(o)
    }
    r = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"),4,0,4,0);
    r.width = 145;
    r.position.set(43, 32);
    this.container.addChild(r);
    r = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"),4,0,4,0);
    r.width = 145;
    r.position.set(43, 57);
    this.container.addChild(r);
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, null, this._linkHandler, this)
}
;
canvas.app.world.manor.popup.PopupBuy.prototype = Object.create(canvas.app.world.manor.Popup.prototype);
canvas.app.world.manor.popup.PopupBuy.prototype._linkHandler = function(t) {
    if (!canvas.Functions.findParent(this, t.target))
        return;
    switch (t.params) {
    case "buyNew":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            text: canvas.Translator.getText(168) + " <b>" + this._price + "</b> <img src='money_gold' atlas='world' yOffset='1'/> ?",
            event: {
                name: canvas.app.manor.Event.BUY_AREA,
                params: {
                    areaId: this.id,
                    requestId: "",
                    price: this._price
                }
            }
        });
        break;
    case "buyUser":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_LOCATION, null, this.id);
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MARKET_BUY);
        break;
    case "sell":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_LOCATION, null, this.id);
        if (this._isSelling) {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                text: canvas.Translator.getText(204),
                event: {
                    name: canvas.app.manor.Event.SELL_AREA_CANCEL
                }
            })
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MARKET_SELL)
        }
        break
    }
}
;
canvas.app.world.manor.popup.PopupBuy.prototype.destroy = function() {
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_REMOVE, null, {
        target: this.flag
    });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_REMOVE, null, {
        target: this.molotok
    });
    canvas.EventManager.removeEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, null, this._linkHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.world.view.AreaLoader = function(t, e, a, i) {
    canvas.px.Container.call(this);
    if (i == undefined)
        i = false;
    this.isInst = i;
    this.baseLnk = t;
    this.itemLnk = e;
    this.completeFunc = a;
    this.cached_sprites = {}
}
;
canvas.app.world.view.AreaLoader.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.AreaLoader.prototype.init = function() {
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    var t = this.itemLnk.src.split(".")[0];
    this.imageLink = canvas.Config.worldPath + t + "/" + t + ".png";
    this.mciLink = canvas.Config.worldPath + t + "/" + t + ".mci";
    canvas.ResourceLoader.add(this.isInst ? [this.mciLink] : [this.imageLink, this.mciLink])
}
;
canvas.app.world.view.AreaLoader.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.data = canvas.ResourceLoader.get(this.mciLink).data;
    if (!this.isInst) {
        this.cached_sprites["fog"] = new canvas.px.Polygon(this.data.fog,1,.5);
        this.cached_sprites["fog"].beginFill(1, .5);
        this.cached_sprites["fog"].drawRect(0, this.cached_sprites["fog"].height, this.cached_sprites["fog"].width, 1);
        this.cached_sprites["fog"].endFill();
        this.cached_sprites["borders"] = new canvas.px.Sprite(canvas.ResourceLoader.getTexture(this.imageLink));
        this.baseLnk.map1.add_area_sensor(this.itemLnk)
    }
    this.itemLnk.swf_ready = true;
    var t = this.data.conf;
    if (t != null) {
        var e;
        var a;
        var i = t.length;
        for (var s = 0; s < i; s++) {
            e = t[s];
            a = {};
            this.itemLnk.objects.push(a);
            a.id = e.id;
            a.xx = e.xx;
            a.yy = e.yy;
            a.type = "area";
            a.exit_flag = e.exit;
            a.linkage_area_id = e.area;
            if (a.linkage_area_id && e.loc) {
                a.linkage_locations = null;
                a.linkage_area_loc = e.loc
            } else {
                a.linkage_locations = e.loc
            }
        }
    }
    if (this.completeFunc != null) {
        this.completeFunc.call()
    }
}
;
canvas.app.world.view.AreaLoader.prototype.get_sprite = function(t) {
    if (this.cached_sprites[t] != null) {
        return this.cached_sprites[t]
    }
    if (t == "sen_area") {
        return new canvas.px.Polygon(this.data.sen_area,16777215,.15)
    }
    if (t.substr(0, 7) == "sen_loc") {
        return new canvas.px.Polygon(this.data.sen_loc[t.substr(8)],16777215,.15)
    }
    return new canvas.px.Sprite(canvas.px.TextureEmpty)
}
;
canvas.app.world.view.AreaLoader.prototype.get_way_sen = function(t) {
    return new canvas.px.Polygon(this.data.sen_way[t.split("_")[1]])
}
;
canvas.app.world.view.AreaLoader.prototype.get_bmp = function(t) {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "area/" + this.itemLnk.src.split(".")[0] + "/" + t) || new canvas.px.Sprite(canvas.px.TextureEmpty))
}
;
canvas.app.world.view.FrontsContent = function() {
    this._fdata = null;
    Object.defineProperty(this, "fdata", {
        get: function() {
            return this._fdata
        },
        set: function(t) {
            this._fdata = t;
            this.update()
        }
    });
    canvas.px.Container.call(this);
    this.showHeader = true;
    var t = canvas.app.world.model;
    var e = t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE;
    this.glowContainer = new canvas.px.Container;
    this.addChild(this.glowContainer);
    this.list_header_tf = new canvas.ui.Text(e,16769442,200,18,"left");
    this.list_header_tf.position.set(5, 2);
    this.list_header_tf.text = canvas.Translator.getText(251) + ":";
    this.glowContainer.addChild(this.list_header_tf);
    this.text_header_point = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "red_point"));
    this.text_header_point.position.set(5, 20);
    this.addChild(this.text_header_point);
    this.text_header_tf = new canvas.ui.Text(e,16762368,200,16,"left");
    this.text_header_tf.position.set(21, 18);
    this.text_header_tf.text = "Заголовок текста";
    this.glowContainer.addChild(this.text_header_tf);
    this.status_tf = new canvas.ui.Text(e,16769442,200,18,"left");
    this.status_tf.position.set(21, 34);
    this.status_tf.text = canvas.Translator.getText(251) + ":";
    this.glowContainer.addChild(this.status_tf);
    this.timer_icon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.timer_icon.position.set(19, 50);
    this.addChild(this.timer_icon);
    this.timer_tf = new canvas.ui.Text(e,16769442,200,18,"left");
    this.timer_tf.position.set(32, 48);
    this.timer_tf.text = "10:12";
    this.glowContainer.addChild(this.timer_tf);
    this.update()
}
;
canvas.app.world.view.FrontsContent.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.FrontsContent.prototype.update = function() {
    this.visible = this.fdata != null;
    if (this.fdata == null)
        return;
    if (this.showHeader) {
        if (!this.glowContainer.contains(this.list_header_tf))
            this.glowContainer.addChild(this.list_header_tf)
    } else {
        if (this.glowContainer.contains(this.list_header_tf))
            this.glowContainer.removeChild(this.list_header_tf)
    }
    var t = 16769442;
    var e;
    switch (this.fdata.status) {
    case 0:
        switch (this.fdata.owner) {
        case 1:
            e = 724;
            t = 1210068;
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_hum");
            break;
        case -1:
            e = 725;
            t = 11730944;
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_mag");
            break;
        default:
            e = 726;
            t = 16769442;
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none")
        }
        break;
    case 1:
        e = 727;
        this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
        break;
    case 2:
        e = 728;
        this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
        break;
    case 3:
        e = 710;
        this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
        break
    }
    this.status_tf.text = canvas.Translator.getText(e);
    this.text_header_tf.text = this.fdata.title;
    this.updateTime()
}
;
canvas.app.world.view.FrontsContent.prototype.updateTime = function() {
    this.timer_tf.text = this.fdata == null || this.fdata.status == 3 || this.fdata.displayTime == null ? "--" : this.fdata.displayTime
}
;
canvas.app.world.view.InnerObject = function(t, e, a) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.itemLnk = e;
    this.objLnk = a;
    var i = canvas.app.world.model;
    var s = this.itemLnk.rect_x1 + this.objLnk.xx;
    var n = this.itemLnk.rect_y1 + this.objLnk.yy;
    var r;
    if (this.objLnk.type == "area") {
        r = this.objLnk.id;
        this.bmp = this.itemLnk.source.get_bmp(r);
        this.v_color = 1;
        this.bmp.position.set(s, n);
        this.addChild(this.bmp);
        this.sen = this.itemLnk.source.get_way_sen(this.objLnk.id);
        this.sen.buttonMode = true;
        this.sen.interactive = true;
        this.sen.mouseover = this.senMouseOverhandler_color.bind(this);
        this.sen.mouseout = this.senMouseOuthandler_color.bind(this);
        this.addChild(this.sen);
        this.sen.position.set(s, n);
        if (this.objLnk.linkage_area_id != null || this.objLnk.linkage_locations != null) {
            this.sen.click = this.senMouseClickHandler.bind(this)
        }
    } else if (this.objLnk.type == "global") {
        r = "ico_" + this.objLnk.id + "_bmp";
        this.bmpc = new canvas.px.Container;
        var o = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", r));
        this.baseTexture = o.texture;
        o.position.set(-Math.round(o.width * .5), -Math.round(o.height * .5));
        this.bmpc.addChild(o);
        this.bmpc.position.set(s, n);
        this.bmpc.scale.set(.7, .7);
        this.addChild(this.bmpc);
        if (this.objLnk.id == "players") {
            this.bmpFlag = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "user_flag"));
            this.bmpFlag.position.set(o.x + 30, o.y);
            var l = new canvas.px.Mask(30,30,0,0);
            l.position.set(-10, 0);
            this.bmpFlag.addChild(l);
            this.bmpFlag.interactive = true;
            this.mark_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_mark2"));
            this.mark_bmp.position.set(this.objLnk.xx - 21, this.objLnk.yy - 21);
            this.mark_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,0,18,19,"center");
            this.mark_tf.text = "?";
            this.mark_tf.position.set(this.objLnk.xx - 20, this.objLnk.yy - 18);
            this.mark_tf.interactive = false;
            this.addChild(this.mark_tf)
        }
        this.v_scale = .7;
        this.bmpc.buttonMode = true;
        this.bmpc.interactive = true;
        this.bmpc.hitArea = new canvas.px.Circle(0,0,this.bmpc.width * .5);
        this.bmpc.mouseover = this.senMouseOverhandler_scale.bind(this);
        this.bmpc.mouseout = this.senMouseOuthandler_scale.bind(this);
        if (this.objLnk.linkage_area_id != null || this.objLnk.linkage_locations != null) {
            this.bmpc.click = this.senMouseClickHandler.bind(this);
            if (!i.isModule) {
                if (this.objLnk.linkage_area_id != null) {
                    var c = i.AREAS[this.objLnk.linkage_area_id];
                    if (c != null) {
                        if (!c.swf_ready) {
                            if (c.source == null) {
                                c.source = new canvas.app.world.view.AreaLoader(this.baseLnk,c,null);
                                c.source.init()
                            }
                        }
                    }
                }
            }
        }
        this.addChild(this.bmpc);
        if (this.mark_bmp) {
            this.addChild(this.mark_bmp)
        }
        if (this.mark_tf) {
            this.addChild(this.mark_tf)
        }
    }
}
;
canvas.app.world.view.InnerObject.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.InnerObject.prototype.senMouseOverhandler_color = function() {
    var t = canvas.app.world.model;
    this.filters = [canvas.Functions.getBrightness(1.2)];
    if (this.objLnk.linkage_locations != null) {
        if (this.itemLnk.locations[this.objLnk.linkage_locations[0]] && this.itemLnk.locations[this.objLnk.linkage_locations[1]]) {
            this.baseLnk.label2.set_data(canvas.Translator.getText(208) + ":", "", [this.itemLnk.locations[this.objLnk.linkage_locations[0]].title, this.itemLnk.locations[this.objLnk.linkage_locations[1]].title], undefined, undefined, undefined, t.W_BOTS != undefined ? t.W_BOTS[this.objLnk.id] : undefined)
        }
        this.baseLnk.label2.sender = this;
        if (t.isModule) {
            t.SelectWay(this.objLnk.linkage_locations)
        }
    } else if (this.objLnk.linkage_area_id != null) {
        this.baseLnk.label2.set_data(canvas.Translator.getText(209) + ":", t.AREAS[this.objLnk.linkage_area_id].title, null);
        this.baseLnk.label2.sender = this;
        var e = [];
        for (var a = 0; a < t.AREALOC.length; a++) {
            if (t.AREALOC[a][0] == this.objLnk.linkage_area_id) {
                e = e.concat(t.AREALOC[a][1]);
                break
            }
        }
        if (t.isModule) {
            if (this.objLnk.linkage_area_loc) {
                t.SelectWay(e, this.objLnk.linkage_area_loc)
            } else {
                t.SelectWay(e)
            }
        }
    } else if (this.objLnk.exit_flag == 2) {
        this.baseLnk.label2.set_data(canvas.Translator.getText(1800) + ":", "", [t.AREA.exit_title]);
        this.baseLnk.label2.sender = this
    } else if (this.objLnk.exit_flag == 1) {
        this.baseLnk.label2.set_data(canvas.Translator.getText(1801) + ":", "", [t.AREA.enter_title]);
        this.baseLnk.label2.sender = this
    }
}
;
canvas.app.world.view.InnerObject.prototype.senMouseOuthandler_color = function() {
    var t = canvas.app.world.model;
    this.filters = null;
    if (t.isModule) {
        t.UnSelectWay()
    }
    if (this.baseLnk.label2.sender == this)
        this.baseLnk.label2.deactivate()
}
;
canvas.app.world.view.InnerObject.prototype.senMouseOverhandler_scale = function() {
    var t = canvas.app.world.model;
    if (this.objLnk.location_id != null) {
        this.itemLnk.locations[this.objLnk.location_id].lnk.force_over();
        if (t.isModule) {
            if (this.objLnk.linkage_locations != null) {
                t.SelectWay(this.objLnk.linkage_locations, "location")
            } else if (this.objLnk.linkage_area_id != null) {
                var e = [];
                for (var a = 0; a < t.AREALOC.length; a++) {
                    if (t.AREALOC[a][0] == this.objLnk.linkage_area_id,
                    "area") {
                        e = e.concat(t.AREALOC[a][1]);
                        break
                    }
                }
                if (t.isModule) {
                    if (this.objLnk.linkage_area_loc) {
                        t.SelectWay(e, this.objLnk.linkage_area_loc)
                    } else {
                        t.SelectWay(e)
                    }
                }
            }
        }
    }
    if (this.objLnk.title != null) {
        this.baseLnk.label2.set_data(this.objLnk.title, this.objLnk.text, this.objLnk.items);
        this.baseLnk.label2.sender = this
    } else if (this.objLnk.id == "players") {
        if (this.pl_list != null) {
            var i = [];
            for (var a = 0; a < this.pl_list.length; a++) {
                i.push(this.pl_list[a].nick)
            }
            this.baseLnk.label2.set_data(canvas.Translator.getText(1802), "", i);
            this.baseLnk.label2.sender = this
        } else {}
    }
    this.frameDelta_scale(.3 / 3)
}
;
canvas.app.world.view.InnerObject.prototype.senMouseOuthandler_scale = function() {
    var t = canvas.app.world.model;
    this.frameDelta_scale(-.3 / 3);
    if (this.baseLnk.label2.sender == this)
        this.baseLnk.label2.deactivate();
    if (this.objLnk.location_id != null) {
        this.itemLnk.locations[this.objLnk.location_id].lnk.force_out()
    }
    if (t.isModule) {
        t.UnSelectWay()
    }
}
;
canvas.app.world.view.InnerObject.prototype.frameDelta_scale = function(t) {
    this.v_delta = t;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this)
}
;
canvas.app.world.view.InnerObject.prototype.frameHandler_scale = function() {
    this.v_scale += this.v_delta;
    this.bmpc.scale.set(this.v_scale, this.v_scale);
    if (this.v_delta < 0 && this.v_scale <= .7 || this.v_delta > 0 && this.v_scale >= 1) {
        if (this.v_delta < 0) {
            this.v_scale = .7;
            this.bmpc.scale.set(.7, .7)
        } else {
            this.v_scale = 1;
            this.bmpc.scale.set(1, 1)
        }
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this)
    }
}
;
canvas.app.world.view.InnerObject.prototype.senMouseClickHandler = function() {
    var t = canvas.app.world.model;
    if (this.objLnk.linkage_area_id != null) {
        var e = [];
        for (var a = 0; a < t.AREALOC.length; a++) {
            if (t.AREALOC[a][0] == this.objLnk.linkage_area_id) {
                e = e.concat(t.AREALOC[a][1]);
                break
            }
        }
        if (t.isModule) {
            if (this.objLnk.linkage_area_loc) {
                t.GoToWay(e, this.objLnk.linkage_area_loc)
            } else if (this.objLnk.linkage_location_id) {
                t.GoToWay(e, [this.objLnk.linkage_location_id])
            } else {
                t.GoToWay(e)
            }
            return
        }
        var i = t.AREAS[this.objLnk.linkage_area_id];
        if (i != null) {
            if (i.swf_ready) {
                t.focusedLocationId = this.objLnk.linkage_location_id;
                this.baseLnk.area_switch(i)
            } else {
                if (i.source == null) {
                    i.source = new canvas.app.world.view.AreaLoader(this.baseLnk,i,null);
                    i.source.init()
                }
            }
        }
    }
    if (this.objLnk.linkage_locations != null) {
        if (t.isModule) {
            t.GoToWay(this.objLnk.linkage_locations)
        }
    }
}
;
canvas.app.world.view.InnerObject.prototype.pl_update_mark = function() {
    if (this.mark_tf == null || this.pl_list == null) {
        return
    }
    this.mark_tf.text = this.pl_list.length
}
;
canvas.app.world.view.InnerObject.prototype.showFlag = function(t, e, a) {
    if (t == undefined)
        t = false;
    if (e == undefined)
        e = false;
    this.flagUser = a;
    if (this.bmpFlag == null)
        return;
    if (e) {
        if (this.bmpFlag.parent) {
            this.bmpFlag.parent.removeChild(this.bmpFlag)
        }
    } else {
        if (t) {
            this.bmpc.addChild(this.bmpFlag);
            this.bmpc.getChildAt(0).texture = this.baseTexture
        } else {
            this.bmpc.getChildAt(0).texture = this.bmpFlag.texture
        }
    }
}
;
canvas.app.world.view.MapWorldParts = function(t, e, a, i, s, n) {
    canvas.px.Container.call(this);
    if (n == undefined)
        n = false;
    this.isInst = n;
    this.popupsContainer = new canvas.px.Container;
    this.popupsContainer2 = new canvas.px.Container;
    this.container = new canvas.px.Container;
    this.baseLnk = t;
    this.cells = new canvas.px.Graphics;
    this.addChild(this.cells);
    this.addChild(this.container);
    this.addChild(this.popupsContainer);
    this.gw = e;
    this.gh = a;
    this.devisor = i;
    this.prefix = s;
    if (this.isInst) {
        this.ww = canvas.app.world.model.ww;
        this.hh = canvas.app.world.model.hh
    } else {
        this.ww = 20;
        this.hh = 13
    }
    this.iw = Math.floor(e / this.ww);
    this.ih = Math.floor(a / this.hh);
    this.parts = {};
    this.cont_parts = new canvas.px.Container;
    this.container.addChild(this.cont_parts);
    this.cont_areas = new canvas.px.Container;
    this.container.addChild(this.cont_areas);
    if (this.devisor == 1) {
        this.inner = new canvas.px.Graphics;
        this.container.addChild(this.inner)
    }
    this.cont_way = new canvas.px.Container;
    this.container.addChild(this.cont_way);
    this.put_pers_flag();
    this.put_pers_finish_flag();
    this.cells.beginFill(0, 1);
    this.cells.drawRect(0, 0, this.gw, this.gh);
    this.cells.endFill();
    this.cells.lineStyle(5, 16777215, .5);
    this.cells.moveTo(0, 0);
    this.cells.lineTo(this.gw, this.gh);
    this.cells.moveTo(this.gw, 0);
    this.cells.lineTo(0, this.gh);
    this.cells.lineStyle(1, 16776960, .5);
    for (var r = this.iw; r < this.gw; r += this.iw) {
        this.cells.moveTo(r, 0);
        this.cells.lineTo(r, this.gh)
    }
    for (var o = this.ih; o < this.gh; o += this.ih) {
        this.cells.moveTo(0, o);
        this.cells.lineTo(this.gw, o)
    }
    this.bool_dragger = false;
    this.bool_moving = false;
    this.drag_lx = 1;
    this.drag_ly = 1
}
;
canvas.app.world.view.MapWorldParts.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.MapWorldParts.prototype.put_pers_flag = function() {
    var t = canvas.app.world.model;
    var e = t.AREAS[t.FlagArea];
    if (e == null) {
        return
    }
    var a = this.isInst ? e.locations[t.ActiveLocation] : e.locations[t.FlagLocation];
    if (a == null) {
        return
    }
    this.flag_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_flag"));
    if (this.devisor == 1) {
        this.flag_bmp.position.set(e.rect_x1 + a.flag_pos_x - Math.round(this.flag_bmp.width / 2), e.rect_y1 + a.flag_pos_y - Math.round(this.flag_bmp.height / 2))
    } else if (this.devisor == 3) {
        this.flag_bmp.position.set(e.rect_x1_3 + Math.round(a.flag_pos_x / 3) - Math.round(this.flag_bmp.width / 2), e.rect_y1_3 + Math.round(a.flag_pos_y / 3) - Math.round(this.flag_bmp.height / 2))
    }
    this.container.addChild(this.popupsContainer2);
    this.container.addChild(this.flag_bmp);
    if (this.devisor == 1) {
        this.flag_location = a;
        this.flag_bmp.hitArea = new canvas.px.Circle(14,18,18);
        this.flag_bmp.interactive = true;
        this.flag_bmp.buttonMode = true;
        this.flag_bmp.mouseover = this.flagMouseOverHandler.bind(this);
        this.flag_bmp.mouseout = this.flagMouseOutHandler.bind(this)
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_flag_inst = function() {
    var t = canvas.app.world.model;
    if (t.ActiveLocation == null) {
        if (this.flag_bmp.parent)
            this.container.removeChild(this.flag_bmp);
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", t.AREA.title);
        return
    }
    var e = t.AREA;
    if (e == null) {
        return
    }
    var a = e.locations[t.ActiveLocation];
    if (a == null) {
        return
    }
    if (this.flag_bmp == null) {
        this.put_pers_flag()
    }
    this.flag_bmp.x = a.flag_pos_x - Math.floor(this.flag_bmp.width / 2);
    this.flag_bmp.y = a.flag_pos_y - Math.floor(this.flag_bmp.height / 2);
    this.flag_location = a;
    var i = "unknown area";
    var s = "unknown location";
    i = e.title;
    if (e.locations[t.ActiveLocation] != null) {
        s = e.locations[t.ActiveLocation].title
    }
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", i, s);
    this.container.addChild(this.flag_bmp)
}
;
canvas.app.world.view.MapWorldParts.prototype.put_pers_finish_flag = function() {
    var t = canvas.app.world.model;
    if (!this.finish_flag_bmp) {
        this.finish_flag_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_finish_flag"));
        this.finish_flag_bmp.position.set(-100, -100);
        this.container.addChild(this.finish_flag_bmp);
        if (this.devisor == 1) {
            this.finish_flag_bmp.hitArea = new canvas.px.Circle(14,18,18);
            this.finish_flag_bmp.interactive = true;
            this.finish_flag_bmp.buttonMode = true;
            this.finish_flag_bmp.mouseover = this.finishFlagMouseOverHandler.bind(this);
            this.finish_flag_bmp.mouseout = this.finishFlagMouseOutHandler.bind(this)
        }
    }
    if (t.FinishLocation == t.FlagLocation || t.FinishLocation == null) {
        this.cont_way.removeChildren();
        this.baseLnk.main.setPoint(0);
        this.finish_flag_bmp.position.set(-100, -100);
        return
    }
    var e = this.getArea(t.FinishLocation);
    if (e == "err") {
        return
    }
    var a = t.AREAS[e];
    if (a == null) {
        return
    }
    var i = a.locations[t.FinishLocation];
    if (i == null) {
        return
    }
    if (this.devisor == 1) {
        this.finish_flag_bmp.position.set(a.rect_x1 + i.flag_pos_x - Math.round(this.finish_flag_bmp.width / 2), a.rect_y1 + i.flag_pos_y - Math.round(this.finish_flag_bmp.height / 2) + 10);
        this.setWay()
    } else if (this.devisor == 3) {
        this.finish_flag_bmp.position.set(a.rect_x1_3 + Math.round(i.flag_pos_x / 3) - Math.round(this.finish_flag_bmp.width / 2), a.rect_y1_3 + Math.round(i.flag_pos_y / 3) - Math.round(this.finish_flag_bmp.height / 2) + 3);
        this.setWay()
    }
    this.container.addChild(this.finish_flag_bmp);
    if (this.devisor == 1) {
        this.finish_flag_location = i
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_flag = function() {
    if (this.isInst) {
        this.refresh_pers_flag_inst();
        return
    }
    var t = canvas.app.world.model;
    var e = t.AREAS[t.FlagArea];
    if (e == null) {
        return
    }
    var a = e.locations[t.FlagLocation];
    var i = e.locations[t.FinishLocation];
    if (a == null) {
        return
    }
    if (this.flag_bmp == null) {
        return
    }
    if (this.devisor == 1) {
        this.flag_bmp.position.set(e.rect_x1 + a.flag_pos_x - Math.round(this.flag_bmp.width / 2), e.rect_y1 + a.flag_pos_y - Math.round(this.flag_bmp.height / 2))
    } else if (this.devisor == 3) {
        this.flag_bmp.position.set(e.rect_x1_3 + Math.round(a.flag_pos_x / 3) - Math.round(this.flag_bmp.width / 2), e.rect_y1_3 + Math.round(a.flag_pos_y / 3) - Math.round(this.flag_bmp.height / 2))
    }
    if (this.devisor == 1) {
        this.flag_location = a
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_finish_flag = function() {
    var t = canvas.app.world.model;
    if (t.FinishLocation == t.FlagLocation || t.FinishLocation == null) {
        this.cont_way.removeChildren();
        this.baseLnk.main.setPoint(0);
        this.finish_flag_bmp.position.set(-100, -100);
        return
    }
    var e = this.getArea(t.FinishLocation);
    if (e == "err") {
        return
    }
    var a = t.AREAS[e];
    if (a == null) {
        return
    }
    var i = a.locations[t.FinishLocation];
    if (i == null) {
        return
    }
    if (this.finish_flag_bmp == null) {
        return
    }
    if (this.devisor == 1) {
        this.finish_flag_bmp.position.set(a.rect_x1 + i.flag_pos_x - Math.round(this.finish_flag_bmp.width / 2), a.rect_y1 + i.flag_pos_y - Math.round(this.finish_flag_bmp.height / 2) + 10);
        this.setWay()
    } else if (this.devisor == 3) {
        this.finish_flag_bmp.position.set(a.rect_x1_3 + Math.round(i.flag_pos_x / 3) - Math.round(this.finish_flag_bmp.width / 2), a.rect_y1_3 + Math.round(i.flag_pos_y / 3) - Math.round(this.finish_flag_bmp.height / 2) + 3);
        this.setWay()
    }
    if (this.devisor == 1) {
        this.finish_flag_location = i
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.flagMouseOverHandler = function() {
    this.baseLnk.label2.set_data(canvas.Translator.getText(211), canvas.Translator.getText(212), null);
    if (this.flag_location != null) {
        if (this.flag_location.lnk != null) {
            this.flag_location.lnk.force_over()
        }
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.finishFlagMouseOverHandler = function() {
    this.baseLnk.label2.set_data(canvas.Translator.getText(217), canvas.Translator.getText(216), null);
    if (this.finish_flag_location != null) {
        if (this.finish_flag_location.lnk != null) {
            this.finish_flag_location.lnk.force_over()
        }
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.flagMouseOutHandler = function() {
    this.baseLnk.label2.deactivate();
    if (this.flag_location != null) {
        if (this.flag_location.lnk != null) {
            this.flag_location.lnk.force_out()
        }
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.finishFlagMouseOutHandler = function() {
    this.baseLnk.label2.deactivate();
    if (this.finish_flag_location != null) {
        if (this.finish_flag_location.lnk != null) {
            this.finish_flag_location.lnk.force_out()
        }
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.check_parts = function(t, e) {
    var a = Math.floor(-this.y / this.ih);
    var i = Math.ceil((-this.y + e - this.ih) / this.ih);
    var s = Math.floor(-this.x / this.iw);
    var n = Math.ceil((-this.x + t - this.iw) / this.iw);
    if (a < 0)
        a = 0;
    if (i > this.hh - 1)
        i = this.hh - 1;
    if (s < 0)
        s = 0;
    if (n > this.ww - 1)
        n = this.ww - 1;
    var r;
    var o;
    var l;
    var c = [];
    for (r = a; r <= i; r++) {
        for (o = s; o <= n; o++) {
            l = r * this.ww + o + 1;
            c.push(l);
            if (this.parts[l] == null) {
                this.parts[l] = new canvas.ui.Image(this.part_link(l));
                this.parts[l].position.set(o * this.iw, r * this.ih)
            }
        }
    }
    for (var p in this.parts) {
        l = parseInt(p);
        if (c.indexOf(l) < 0) {
            this.cont_parts.removeChild(this.parts[l])
        } else {
            this.cont_parts.addChild(this.parts[l])
        }
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.part_link = function(t) {
    var e = String(t);
    if (t < 10)
        e = "0" + e;
    return this.prefix + e + ".jpg"
}
;
canvas.app.world.view.MapWorldParts.prototype.add_area_sensor = function(t) {
    t.sen = new canvas.app.world.view.WorldSensor(this.baseLnk,t,"sen_area",3,null);
    this.cont_areas.addChild(t.sen);
    this.baseLnk.updateTreasure()
}
;
canvas.app.world.view.MapWorldParts.prototype.focus_on_active_area = function() {
    var t = canvas.app.world.model;
    var e = t.AREAS[t.focusedAreaId];
    if (e != null) {
        this.baseLnk.label1.deactivate();
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", e.title);
        this.baseLnk.label1.redraw_bg();
        if (!this.isInst) {
            var a = t.width - (19 + 35);
            var i = t.height - (14 + 30);
            var s = this.gw - a;
            var n = this.gh - i;
            var r;
            var o;
            if (t.focusedAreaId != t.FlagArea) {
                r = e.center_x;
                o = e.center_y
            } else {
                var l = e.locations[t.FlagLocation];
                if (l != null) {
                    r = l.flag_pos_x + e.rect_x1;
                    o = l.flag_pos_y + e.rect_y1
                } else {
                    r = e.center_x;
                    o = e.center_y
                }
            }
            var c = -Math.round(r / this.devisor - a / 2);
            var p = -Math.round(o / this.devisor - i / 2);
            if (c > 0) {
                c = 0
            } else if (c < -s) {
                c = -s
            }
            if (p > 0) {
                p = 0
            } else if (p < -n) {
                p = -n
            }
            this.baseLnk.scroll_H.current = -c;
            this.baseLnk.scroll_V.current = -p;
            this.baseLnk.scrollHandlerV();
            this.baseLnk.scrollHandlerH()
        }
        if (this.devisor == 1) {
            this.init_inner_objects(e)
        }
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.focus_on_active_area_in_motion = function() {
    var t = canvas.app.world.model;
    if (t.AREAS[t.focusedAreaId] == null) {
        return
    }
    this.baseLnk.label1.deactivate();
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", t.AREAS[t.focusedAreaId].title);
    this.baseLnk.label1.redraw_bg();
    if (this.devisor == 1) {
        this.init_inner_objects(t.AREAS[t.focusedAreaId])
    }
    if (!this.bool_moving) {
        this.bool_moving = true;
        canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.movingHandler, this)
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.movingHandler = function() {
    var t = canvas.app.world.model;
    var e = t.AREAS[t.focusedAreaId];
    var a = t.ls_ww - (19 + 35);
    var i = t.ls_hh - (14 + 30);
    var s = this.gw - a;
    var n = this.gh - i;
    var r;
    var o;
    if (t.focusedAreaId != t.FlagArea) {
        if (e.locations[t.FlagLocation] != null) {
            var l = e.locations[t.FlagLocation];
            if (this.devisor == 1) {
                r = l.flag_pos_x + e.rect_x1;
                o = l.flag_pos_y + e.rect_y1
            } else {
                r = Math.round(l.flag_pos_x / 3) + e.rect_x1_3;
                o = Math.round(l.flag_pos_y / 3) + e.rect_y1_3
            }
        } else {
            if (this.devisor == 1) {
                r = e.center_x;
                o = e.center_y
            } else {
                r = Math.round(e.center_x / 3);
                o = Math.round(e.center_y / 3)
            }
        }
    } else {
        var c = e.locations[t.FlagLocation];
        if (this.devisor == 1) {
            r = c.flag_pos_x + e.rect_x1;
            o = c.flag_pos_y + e.rect_y1
        } else {
            r = Math.round(c.flag_pos_x / 3) + e.rect_x1_3;
            o = Math.round(c.flag_pos_y / 3) + e.rect_y1_3
        }
    }
    var p = -Math.round(r - a / 2);
    var h = -Math.round(o - i / 2);
    if (p > 0) {
        p = 0
    } else if (p < -s) {
        p = -s
    }
    if (h > 0) {
        h = 0
    } else if (h < -n) {
        h = -n
    }
    var d = Math.round((this.baseLnk.scroll_H.current + p) / 7) + 1;
    var v = Math.round((this.baseLnk.scroll_V.current + h) / 7) + 1;
    if (d * d > 1 || v * v > 1) {
        this.baseLnk.scroll_H.current -= d;
        this.baseLnk.scroll_V.current -= v;
        this.baseLnk.scrollHandlerV();
        this.baseLnk.scrollHandlerH()
    } else {
        this.bool_moving = false;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.movingHandler, this)
    }
    this.baseLnk.map_state.refresh_xy_pos();
    this.baseLnk.refresh_scrollers();
    this.baseLnk.map_state.map_check()
}
;
canvas.app.world.view.MapWorldParts.prototype.init_inner_objects = function(t) {
    if (this.isInst) {
        this.init_inner_objects_inst(t);
        return
    }
    var e = canvas.app.world.model;
    var a = t;
    if (a == null) {
        a = e.AREAS[e.focusedAreaId]
    }
    this.inner.removeChildren();
    this.draw_fog(a.rect_x1, a.rect_y1, a.rect_x2, a.rect_y2);
    if (a.swf_ready) {
        var i = a.source.get_sprite("fog");
        i.x = a.rect_x1;
        i.y = a.rect_y1;
        this.inner.addChild(i);
        var s = a.source.get_sprite("borders");
        s.x = a.rect_x1;
        s.y = a.rect_y1;
        this.inner.addChild(s);
        var n;
        for (var r in a.locations) {
            n = a.locations[r];
            if (!n.lnk) {
                n.lnk = new canvas.app.world.view.WorldSensor(this.baseLnk,a,"sen_loc_" + String(n.id),1,n.id)
            }
            this.inner.addChild(n.lnk)
        }
        var o;
        var l;
        var c = a.objects.length;
        for (var p = 0; p < c; p++) {
            l = a.objects[p];
            o = false;
            if (l.linkage_area_id != null) {
                if (e.AREAS[l.linkage_area_id] == null) {
                    o = true
                }
            }
            if (!o) {
                if (!l.lnk) {
                    l.lnk = new canvas.app.world.view.InnerObject(this.baseLnk,a,l)
                }
                this.inner.addChild(l.lnk)
            }
        }
    } else {
        if (a.source == null) {
            a.source = new canvas.app.world.view.AreaLoader(this.baseLnk,a,this.init_inner_objects.bind(this));
            a.source.init()
        } else {
            a.source.completeFunc = this.init_inner_objects.bind(this)
        }
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.init_inner_objects_inst = function(t) {
    var e = canvas.app.world.model;
    var a = t;
    if (a == null) {
        a = e.AREA
    }
    this.inner.removeChildren();
    var i;
    var s;
    if (a.source == undefined) {
        a.source = new canvas.app.world.view.AreaLoader(this.baseLnk,a,this.init_inner_objects_inst.bind(this),this.isInst);
        a.source.init();
        return
    }
    for (var n in a.locations) {
        i = a.locations[n];
        s = new canvas.app.world.view.WorldSensor(this.baseLnk,a,"sen_loc_" + String(i.id),1,i.id);
        i.lnk = s;
        this.inner.addChild(s);
        var r = {};
        r.xx = i.players_x;
        r.yy = i.players_y;
        r.type = "global";
        r.id = "players";
        r.location_id = i.id;
        i.players_object = new canvas.app.world.view.InnerObject(this.baseLnk,a,r)
    }
    var o = a.objects.length;
    for (var l = 0; l < o; l++) {
        objI = a.objects[l];
        this.inner.addChild(new canvas.app.world.view.InnerObject(this.baseLnk,a,objI))
    }
    canvas.EventManager.dispatchEvent(canvas.app.inst.Event.UPDATE_USERS)
}
;
canvas.app.world.view.MapWorldParts.prototype.draw_fog = function(t, e, a, i) {
    this.inner.clear();
    this.inner.beginFill(0, .5);
    this.inner.drawRect(0, 0, this.gw, e);
    this.inner.drawRect(0, e, t, i - e);
    this.inner.drawRect(a, e, this.gw, i - e);
    this.inner.drawRect(0, i, this.gw, this.gh);
    this.inner.endFill()
}
;
canvas.app.world.view.MapWorldParts.prototype.getArea = function(t) {
    var e = canvas.app.world.model;
    var a = "";
    for (var i = e.AREALOC.length; i--; ) {
        var s = e.AREALOC[i][1];
        for (var n = s.length; n--; ) {
            if (String(s[n]) == t) {
                a = e.AREALOC[i][0]
            }
        }
    }
    if (a != "") {
        return a
    }
    return "err"
}
;
canvas.app.world.view.MapWorldParts.prototype.setWay = function(t) {
    var e = canvas.app.world.model;
    this.cont_way.removeChildren();
    var a = e.findWay.finder(parseInt(e.FlagLocation), parseInt(e.FinishLocation));
    var i = 2312;
    var s = 250;
    for (var n = 0; n < a.length - 2; n++) {
        var r;
        if (a[n] == 20 && a[n + 2] == 21 || a[n] == 21 && a[n + 2] == 20) {
            r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", "way_" + a[n + 2] + "_" + a[n]));
            r.scale.set(1 / this.devisor, 1 / this.devisor);
            if (e.way_conf["way_" + a[n + 2] + "_" + a[n]].xx != undefined) {
                r.position.set(Math.round(e.way_conf["way_" + a[n + 2] + "_" + a[n]].xx / this.devisor + i / this.devisor), e.way_conf["way_" + a[n + 2] + "_" + a[n]].yy / this.devisor + s / this.devisor)
            } else {
                return
            }
        } else {
            var o = a[n] > a[n + 2] ? "way_" + a[n] + "_" + a[n + 2] : "way_" + a[n + 2] + "_" + a[n];
            r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", o));
            if (r.texture == canvas.px.TextureEmpty) {
                o = "way_" + a[n] + "_" + a[n + 2];
                o += "_" + a[n + 1];
                r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", o));
                if (r.texture == canvas.px.TextureEmpty) {
                    o = "way_" + a[n + 2] + "_" + a[n];
                    o += "_" + a[n + 1];
                    r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", o))
                }
            }
            r.scale.set(1 / this.devisor, 1 / this.devisor);
            if (e.way_conf[o] != undefined) {
                r.position.set(Math.round(e.way_conf[o].xx / this.devisor + i / this.devisor), Math.round(e.way_conf[o].yy / this.devisor + s / this.devisor))
            } else {
                if (a[n] > a[n + 2]) {
                    if (e.way_conf["way_" + a[n] + "_" + a[n + 2]] != undefined) {
                        r.position.set(Math.round(e.way_conf["way_" + a[n] + "_" + a[n + 2]].xx / this.devisor + i / this.devisor), Math.round(e.way_conf["way_" + a[n] + "_" + a[n + 2]].yy / this.devisor + s / this.devisor))
                    } else if (e.way_conf["way_" + a[n] + "_" + a[n + 2] + "_" + a[n + 1]] != undefined) {
                        r.position.set(Math.round(e.way_conf["way_" + a[n] + "_" + a[n + 2] + "_" + a[n + 1]].xx / this.devisor + i / this.devisor), Math.round(e.way_conf["way_" + a[n] + "_" + a[n + 2] + "_" + a[n + 1]].yy / this.devisor + s / this.devisor))
                    } else {
                        return
                    }
                } else {
                    if (e.way_conf["way_" + a[n + 2] + "_" + a[n]] != undefined) {
                        r.position.set(Math.round(e.way_conf["way_" + a[n + 2] + "_" + a[n]].xx / this.devisor + i / this.devisor), Math.round(e.way_conf["way_" + a[n + 2] + "_" + a[n]].yy / this.devisor + s / this.devisor))
                    } else if (e.way_conf["way_" + a[n + 2] + "_" + a[n] + "_" + a[n + 1]] != undefined) {
                        r.position.set(Math.round(e.way_conf["way_" + a[n + 2] + "_" + a[n] + "_" + a[n + 1]].xx / this.devisor + i / this.devisor), Math.round(e.way_conf["way_" + a[n + 2] + "_" + a[n] + "_" + a[n + 1]].yy / this.devisor + s / this.devisor))
                    } else {
                        return
                    }
                }
            }
        }
        r.filters = [canvas.Functions.getDropShadow(90, 2, 1, 5977886, 1)];
        this.cont_way.addChild(r)
    }
}
;
canvas.app.world.view.MapWorldParts.prototype.add_inner_object = function(t) {
    if (t == null) {
        return
    }
    this.inner.addChild(t)
}
;
canvas.app.world.view.ScrollH = function(t, e) {
    this.map_state = t;
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_left"));
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_right"));
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_drag"),[3, 0, 3, 0]);
    s.setSize(40, 0);
    this.drag = s;
    var n = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("world", "png_scroll_bg"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, a, i, n, s, e, true, false);
    this.padding = 15;
    this.step = 50;
    this.max = 600
}
;
canvas.app.world.view.ScrollH.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.world.view.ScrollH.prototype.refresh = function() {
    this.max = this.map_state.map_complete_width - this.map_state.map_visible_width;
    var t = this.map_state.map_visible_width / this.map_state.map_complete_width;
    this.visible = t < 1;
    this.drag.setSize(Math.round((this.map_state.map_visible_width - (16 + 16)) * t), 0);
    this.current = this.current
}
;
canvas.app.world.view.ScrollV = function(t, e) {
    this.map_state = t;
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_up"));
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_down"));
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_drag"),[0, 3, 0, 3]);
    s.setSize(0, 40);
    this.drag = s;
    var n = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("world", "png_scroll_bg"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, a, i, n, s, e, true, true);
    this.padding = 15;
    this.step = 50;
    this.max = 600
}
;
canvas.app.world.view.ScrollV.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.world.view.ScrollV.prototype.refresh = function() {
    this.max = this.map_state.map_complete_height - this.map_state.map_visible_height;
    var t = this.map_state.map_visible_height / this.map_state.map_complete_height;
    this.visible = t < 1;
    this.drag.setSize(0, Math.round((this.map_state.map_visible_height - (16 + 16)) * t));
    this.current = this.current
}
;
canvas.app.world.view.TopTextLeft = function() {
    canvas.px.Graphics.call(this);
    var t = canvas.app.world.model;
    this.field = new canvas.ui.HtmlText(t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,400,200,"left");
    this.field.lineSpace = 4;
    this.addChild(this.field);
    this.field.position.set(6, 4);
    this.line0 = "";
    this.line1 = "";
    this.line2 = "";
    this.interactiveChildren = false
}
;
canvas.app.world.view.TopTextLeft.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.world.view.TopTextLeft.prototype.set_line0 = function(t, e, a) {
    this.line0 = t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + " <img src='red_point' yOffset='1' atlas='world'/> " + a + "</font>";
    this.update()
}
;
canvas.app.world.view.TopTextLeft.prototype.set_line1 = function(t, e) {
    this.line1 = t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + "</font>";
    this.update()
}
;
canvas.app.world.view.TopTextLeft.prototype.set_line2 = function(t, e) {
    this.line2 = t ? t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + "</font>" : "";
    this.update()
}
;
canvas.app.world.view.TopTextLeft.prototype.update = function() {
    this.field.text = this.line0 + "<br/>" + this.line1 + "<br/>" + this.line2;
    this.redraw_bg();
    if (this.field.text != "") {
        this.addChild(this.field);
        this.visible = true
    }
}
;
canvas.app.world.view.TopTextLeft.prototype.deactivate = function() {
    this.removeChild(this.field);
    this.visible = false
}
;
canvas.app.world.view.TopTextLeft.prototype.redraw_bg = function() {
    this.clear();
    this.beginFill(0, 1 / 3);
    this.drawRoundedRect(0, 0, this.field.textWidth + 12, this.field.textHeight + 8, 6);
    this.endFill()
}
;
canvas.app.world.view.TopTextRight = function() {
    canvas.px.Graphics.call(this);
    var t = canvas.app.world.model;
    this.field = new canvas.ui.HtmlText(t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,215,600,"left");
    this.field.lineSpace = 4;
    this.addChild(this.field);
    this.field.position.set(6, 4);
    this.treasureActivated = false;
    this.line0 = "";
    this.line1 = "";
    this.line2 = "";
    this.lineBottom = "";
    this.frontsContent = new canvas.app.world.view.FrontsContent;
    this.interactiveChildren = false
}
;
canvas.app.world.view.TopTextRight.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.world.view.TopTextRight.prototype.set_data = function(t, e, a, i, s, n) {
    var r = canvas.app.world.model;
    if (i == undefined)
        i = "";
    if (s == undefined)
        s = "";
    if (n == undefined)
        n = true;
    if (a != undefined && a.length == 0)
        a = null;
    this.deactivate();
    this.line0 = t ? a ? t : "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + t + "</font>" : "";
    this.line1 = e ? "     <font color='#" + (a ? "FFC600" : "FFE1A2") + "'>" + e + "</font>" : "";
    this.line2 = "";
    if (a) {
        for (var o = 0; o < a.length; o++) {
            this.line2 += (o == 0 ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + a[o] + "</font>"
        }
    }
    if (i) {
        this.lineBottom = "   <font color='#FFC600'>" + i + "</font>"
    } else {
        this.lineBottom = ""
    }
    this.update();
    if (n) {
        this.frontsContent.showHeader = true;
        this.frontsContent.y = this.field.textHeight + 5
    } else {
        this.frontsContent.showHeader = false;
        this.frontsContent.y = -10
    }
    if (r.frontsData != null)
        this.frontsContent.fdata = r.frontsData[s];
    if (this.frontsContent.fdata != null)
        this.addChild(this.frontsContent);
    else if (this.contains(this.frontsContent))
        this.removeChild(this.frontsContent);
    if (this.frontsContent.parent) {
        this.x = this.ww - Math.max(this.frontsContent.width, this.field.textWidth) - 52;
        this.visible = true
    }
    this.redraw_bg()
}
;
canvas.app.world.view.TopTextRight.prototype.deactivate = function() {
    this.removeChild(this.field);
    this.visible = false;
    this.treasureActivated = false
}
;
canvas.app.world.view.TopTextRight.prototype.update = function() {
    this.field.text = this.line0 + (this.line0 ? "<br/>" : "") + this.line1 + (this.line1 ? "<br/>" : "") + this.line2 + (this.line2 ? "<br/>" : "") + this.lineBottom;
    if (this.field.text != "" || this.frontsContent.parent) {
        this.addChild(this.field);
        this.visible = true
    }
    this.x = this.ww - this.field.textWidth - 52
}
;
canvas.app.world.view.TopTextRight.prototype.redraw_bg = function() {
    this.clear();
    this.beginFill(0, 1 / 3);
    if (this.frontsContent.parent) {
        this.drawRoundedRect(0, 0, Math.max(this.frontsContent.width, this.field.textWidth) + 12, this.frontsContent.height + this.field.textHeight + 10, 6)
    } else {
        this.drawRoundedRect(0, 0, this.field.textWidth + 12, this.field.textHeight + 8, 6)
    }
    this.endFill()
}
;
canvas.app.world.view.TopTextRight.prototype.pos = function(t) {
    this.ww = t
}
;
canvas.app.world.view.TopTextRight.prototype.showTreasureInfo = function() {
    this.treasureActivated = true;
    this.updateTreasureTime()
}
;
canvas.app.world.view.TopTextRight.prototype.hideTreasureInfo = function() {
    this.treasureActivated = false;
    this.lineBottom = "";
    this.update();
    if (this.line0 == "" && this.line1 == "" && this.line2 == "" && !this.frontsContent.parent) {
        this.deactivate()
    }
}
;
canvas.app.world.view.TopTextRight.prototype.updateTreasureTime = function() {
    var t = canvas.app.world.model;
    if (this.treasureActivated) {
        if (t.treasureFinishTime * 1e3 <= Date.now()) {
            this.deactivate()
        } else {
            this.lineBottom = canvas.Translator.getText(239) + "<br/>" + canvas.Functions.formatDate(t.treasureFinishTime * 1e3 - Date.now(), "00:00", 0, true);
            this.update();
            this.redraw_bg()
        }
    }
}
;
canvas.app.world.view.WorldSensor = function(t, e, a, i, s) {
    canvas.px.Container.call(this);
    this.isManorable = false;
    this.selected = false;
    this.baseLnk = t;
    this.itemLnk = e;
    this.devisor = i;
    this.loc_id = s;
    this.v_scale = .7;
    var n = this.itemLnk.locations[this.loc_id];
    this.sen = this.itemLnk.source.get_sprite(a);
    if (this.devisor == 1) {
        this.sen.position.set(this.itemLnk.rect_x1, this.itemLnk.rect_y1)
    } else if (this.devisor == 3) {
        this.sen.x = this.itemLnk.rect_x1_3;
        this.sen.y = this.itemLnk.rect_y1_3;
        this.sen.scale.x = 1 / 3;
        this.sen.scale.y = 1 / 3;
        this.click = this.mouseClickHandler.bind(this)
    }
    this.sen.blendMode = canvas.px.BlendMode.OVERLAY;
    this.sen.alpha = 0;
    this.sen.buttonMode = true;
    this.sen.interactive = true;
    this.addChild(this.sen);
    var r = this.sen.getBounds(this);
    this.selectionContainer = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.selectionContainer.x = Math.round((r.x + Math.round(r.width * .5)) / this.devisor);
    this.selectionContainer.y = Math.round((r.y + Math.round(r.height * .5)) / this.devisor);
    this.frontsContainer = new canvas.px.Container;
    if (n != null) {
        if (n.front_pos_x > 0) {
            this.frontsContainer.x = r.x + n.front_pos_x
        } else {
            this.frontsContainer.x = r.x + Math.round(r.width * .5) + 30
        }
        if (n.front_pos_y > 0) {
            this.frontsContainer.y = r.y + n.front_pos_y
        } else {
            this.frontsContainer.y = r.y + Math.round(r.height * .5) + 30
        }
    }
    this.frontsContainer.interactive = true;
    this.frontsContainer.buttonMode = true;
    this.frontsImageContainer = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.frontsContainer.scale.set(.7, .7);
    this.frontsContainer.addChild(this.frontsImageContainer);
    this.mouseover = this.mouseOverHandler.bind(this);
    this.mouseout = this.mouseOutHandler.bind(this);
    this.frontsContainer.mouseover = this._frontsOverHandler.bind(this);
    this.frontsContainer.mouseout = this._frontsOutHandler.bind(this);
    this.interactive = true;
    this.skip_out_event = false;
    this.addChild(this.selectionContainer);
    this.addChild(this.frontsContainer);
    this.frontsContainer.x += this.sen.x;
    this.frontsContainer.y += this.sen.y;
    this.selectionContainer.x += this.sen.x;
    this.selectionContainer.y += this.sen.y
}
;
canvas.app.world.view.WorldSensor.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.WorldSensor.prototype._frontsOverHandler = function() {
    this.baseLnk.label2.set_data("", null, [], "", this.loc_id, false);
    this.force_over();
    this.frameDelta_scale(.3 / 3)
}
;
canvas.app.world.view.WorldSensor.prototype._frontsOutHandler = function() {
    this.baseLnk.label2.deactivate();
    this.force_out();
    this.frameDelta_scale(-.3 / 3)
}
;
canvas.app.world.view.WorldSensor.prototype.frameDelta_scale = function(t) {
    this.v_delta = t;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this)
}
;
canvas.app.world.view.WorldSensor.prototype.frameHandler_scale = function() {
    this.v_scale += this.v_delta;
    this.frontsContainer.scale.set(this.v_scale, this.v_scale);
    if (this.v_delta < 0 && this.v_scale <= .7 || this.v_delta > 0 && this.v_scale >= 1) {
        if (this.v_delta < 0) {
            this.v_scale = .7;
            this.frontsContainer.scale.set(.7, .7)
        } else {
            this.v_scale = 1;
            this.frontsContainer.scale.set(1, 1)
        }
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this)
    }
}
;
canvas.app.world.view.WorldSensor.prototype.setSelection = function(t, e, a) {
    if (t == undefined)
        t = false;
    if (e == undefined)
        e = 12592164;
    var i;
    if (t) {
        this.sen.tint = e;
        this.sen.alpha = 1;
        if (a != null) {
            this.selectionContainer.texture = canvas.ResourceLoader.getImage("world", a)
        }
    } else {
        this.sen.tint = 16777215;
        this.sen.alpha = 0;
        this.selectionContainer.texture = canvas.px.TextureEmpty
    }
    this.selected = t
}
;
canvas.app.world.view.WorldSensor.prototype.setFrontsIcon = function(t) {
    if (t != undefined) {
        this.frontsImageContainer.texture = canvas.ResourceLoader.getImage("world", t);
        this.frontsImageContainer.position.set(-Math.round(this.frontsImageContainer.width * .5), -Math.round(this.frontsImageContainer.height * .5))
    }
}
;
canvas.app.world.view.WorldSensor.prototype.mouseOverHandler = function() {
    var t = canvas.app.world.model;
    if (t.manorMode && this.isManorable || this.selected) {
        this.sen.blendMode = canvas.px.BlendMode.ADD
    } else {
        this.sen.blendMode = canvas.px.BlendMode.ADD;
        this.frameDelta(1 / 3)
    }
    if (this.loc_id != null) {
        this.baseLnk.label1.deactivate();
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title);
        this.baseLnk.label1.set_line2(canvas.Translator.getText(214) + ":", this.itemLnk.locations[this.loc_id].title);
        this.baseLnk.label1.redraw_bg();
        if (parseInt(this.loc_id) == t.treasureLocation) {
            this.baseLnk.label2.set_data("", null, null);
            this.baseLnk.label2.showTreasureInfo()
        }
        t.overedLocation = this.loc_id
    } else if (this.devisor == 3) {
        this.baseLnk.label1.deactivate();
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title);
        this.baseLnk.label1.redraw_bg();
        this.baseLnk.label2.set_data(canvas.Translator.getText(215) + ":", null, this.itemLnk.locations_list, "", t.findFrontLoc(this.itemLnk.id));
        if (parseInt(this.itemLnk.id) == t.treasureArea) {
            this.baseLnk.label2.showTreasureInfo()
        }
        t.overedLocation = this.itemLnk.id
    }
}
;
canvas.app.world.view.WorldSensor.prototype.mouseOutHandler = function() {
    if (this.lockOver)
        return;
    var t = canvas.app.world.model;
    if (t.manorMode && this.isManorable || this.selected) {
        this.sen.blendMode = canvas.px.BlendMode.OVERLAY
    } else {
        this.sen.blendMode = canvas.px.BlendMode.OVERLAY;
        this.frameDelta(-1 / 3)
    }
    if (this.skip_out_event) {
        this.skip_out_event = false;
        return
    }
    if (this.loc_id != null) {
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title);
        if (t.overedLocation == this.loc_id) {
            this.baseLnk.label1.set_line2("");
            if (parseInt(this.loc_id) == t.treasureLocation) {
                this.baseLnk.label2.hideTreasureInfo()
            }
        }
    } else if (this.devisor == 3) {
        if (t.overedLocation == this.itemLnk.id) {
            this.baseLnk.label1.deactivate();
            this.baseLnk.label2.deactivate()
        }
    }
}
;
canvas.app.world.view.WorldSensor.prototype.frameDelta = function(t) {
    this.delta = t;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.world.view.WorldSensor.prototype.frameHandler = function() {
    this.sen.alpha += this.delta;
    var t = 0;
    if (this.delta < 0 && this.sen.alpha <= t || this.delta > 0 && this.sen.alpha >= 1) {
        this.sen.alpha = this.delta < 0 ? t : 1;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.world.view.WorldSensor.prototype.mouseClickHandler = function() {
    if (this.baseLnk.scroll_H.wasDragged || this.baseLnk.scroll_V.wasDragged)
        return;
    var t = canvas.app.world.model;
    this.baseLnk.label2.deactivate();
    this.skip_out_event = true;
    this.baseLnk.area_enter(this.itemLnk)
}
;
canvas.app.world.view.WorldSensor.prototype.force_over = function() {
    this.mouseOverHandler();
    this.lockOver = true
}
;
canvas.app.world.view.WorldSensor.prototype.force_out = function() {
    this.mouseOutHandler();
    this.lockOver = false
}
;
canvas.app.world.view.ZoomView = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_zoom_bg"));
    this.addChild(this.bg);
    this.buttonsContainer = new canvas.px.Container;
    this.addChild(this.buttonsContainer);
    this.btn_zoom_out = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_zoom_off_out"));
    this.btn_zoom_in = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_zoom_off_in"));
    this.btn_map = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "map"));
    this.btn_manor = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "manor/manor"));
    this.btn_work = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "work"));
    this.btn_refresh = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "refresh"));
    this.addChild(this.btn_zoom_out);
    this.addChild(this.btn_zoom_in);
    this.buttonsContainer.addChild(this.btn_map);
    this.buttonsContainer.addChild(this.btn_manor);
    this.buttonsContainer.addChild(this.btn_work);
    this.buttonsContainer.addChild(this.btn_refresh);
    this.btn_zoom_out.position.set(17, 6);
    this.btn_zoom_in.position.set(91, 6);
    this.btn_map.position.set(145, 6);
    this.btn_manor.position.set(185, 6);
    this.btn_work.position.set(225, 0);
    this.btn_refresh.position.set(53, 6);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_zoom_out, this.mouseClickZoomOut, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_zoom_in, this.mouseClickZoomIn, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_map, this.mapClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_manor, this.manorClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_work, this.workClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_refresh, this.mouseClickRefreshHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.btn_map,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(221)))
    });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.btn_manor,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(222)))
    });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.btn_work,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(151)))
    });
    this.setManorMode(false);
    this.btn_manor.visible = false;
    this.btn_work.visible = false
}
;
canvas.app.world.view.ZoomView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.ZoomView.prototype.setManorMode = function(t) {
    var e = canvas.app.world.model;
    e.manorMode = t;
    if (t) {
        this.btn_manor.enabled = false;
        this.btn_map.enabled = true
    } else {
        this.btn_manor.enabled = true;
        this.btn_map.enabled = false
    }
    this.baseLnk.updateManorMode()
}
;
canvas.app.world.view.ZoomView.prototype.mouseClickZoomOut = function() {
    this.baseLnk.area_exit()
}
;
canvas.app.world.view.ZoomView.prototype.mouseClickZoomIn = function() {
    var t = canvas.app.world.model;
    var e = t.AREAS[t.focusedAreaId];
    if (e != null) {
        this.baseLnk.area_enter(e)
    }
}
;
canvas.app.world.view.ZoomView.prototype.mapClickHandler = function() {
    this.setManorMode(false)
}
;
canvas.app.world.view.ZoomView.prototype.manorClickHandler = function() {
    this.setManorMode(true)
}
;
canvas.app.world.view.ZoomView.prototype.workClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_LABOUR)
}
;
canvas.app.world.view.ZoomView.prototype.mouseClickRefreshHandler = function() {
    this.baseLnk.refresh_my_flag()
}
;
canvas.app.world.view.ZoomView.prototype.zoomMode = function(t) {
    if (t == 1) {
        this.mouseClickZoomOut()
    } else {
        this.mouseClickZoomIn()
    }
}
;
canvas.app.world.view.ZoomView.prototype.set_mode = function(t) {
    var e = canvas.app.world.model;
    if (e.isModule) {
        e.ZoomMode(t)
    }
    if (t == 1) {
        this.btn_zoom_out.alpha = 1;
        this.btn_zoom_out.interactiveChildren = false;
        this.btn_zoom_in.alpha = 0;
        this.btn_zoom_in.interactiveChildren = true;
        this.buttonsContainer.visible = false;
        e.lastManorMode = e.manorMode;
        this.setManorMode(false)
    } else {
        this.btn_zoom_out.alpha = 0;
        this.btn_zoom_out.interactiveChildren = true;
        this.btn_zoom_in.alpha = 1;
        this.btn_zoom_in.interactiveChildren = false;
        this.buttonsContainer.visible = true;
        this.setManorMode(e.lastManorMode)
    }
}
;
canvas.app.hunt.Const = {
    CAPTCHA_WIDTH: 3,
    CAPTCHA_HEIGHT: 2,
    CAPTCHA_CELL_SIZE: 128,
    TREASURE_BEACON_STATUS_NONE: 0,
    TREASURE_BEACON_STATUS_RED: 1,
    TREASURE_BEACON_STATUS_ORANGE: 2,
    TREASURE_BEACON_STATUS_YELLOW: 3,
    TREASURE_BEACON_STATUS_GREEN: 4
};
canvas.app.hunt.Event = {
    ENTER_FRAME: "Hunt.ENTER_FRAME",
    HINT_ADD: "Hunt.HINT_ADD",
    HINT_REMOVE: "Hunt.HINT_REMOVE",
    TREASURE_DIG: "Hunt.TREASURE_DIG",
    TREASURE_COLLECT: "Hunt.TREASURE_COLLECT",
    COLOR_CHANGE: "Hunt.COLOR_CHANGE",
    COMPLETE_OBJECT: "Hunt.COMPLETE_OBJECT",
    FILTER_CHANGE: "Hunt.FILTER_CHANGE"
};
canvas.app.hunt.Main = function(t, e, a) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = e;
    this.windowsManager = a;
    if (this.model.mapFile) {
        this.model.mapData.parseData(this.model.mapData.TYPE_BOT, canvas.ResourceLoader.get("map_bot").data);
        this.model.mapData.parseData(this.model.mapData.TYPE_PLANT, canvas.ResourceLoader.get("map_plant").data);
        this.model.mapData.parseData(this.model.mapData.TYPE_STONE, canvas.ResourceLoader.get("map_stone").data);
        this.model.mapData.parseData(this.model.mapData.TYPE_FISH, canvas.ResourceLoader.get("map_fish").data)
    }
    canvas.app.location.Event.HINT_ADD = canvas.app.hunt.Event.HINT_ADD;
    canvas.app.location.Event.HINT_REMOVE = canvas.app.hunt.Event.HINT_REMOVE;
    canvas.app.location.Event.ENTER_FRAME = canvas.app.hunt.Event.ENTER_FRAME;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.handlerOpenWindow, this);
    this.windowsContainer = new canvas.px.Container;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.view = new canvas.app.hunt.View(this);
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.addChild(this.windowsContainer);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.TREASURE_DIG, null, this.treasureDigHandler, this);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.TREASURE_COLLECT, null, this.treasureColectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.FILTER_CHANGE, null, this.handlerFilterChange, this);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.treasureRequest = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.treasureRequest, this.treasureCompleteHandler, this)
}
;
canvas.app.hunt.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.Main.prototype.handlerKey = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    var e = t.params.globalKeyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    case canvas.Const.KEYS.ESC:
        canvas.utils.WindowsManager.instance.closeWindow(this.view.popup);
        break;
    case canvas.Const.KEYS.L:
        if (s) {
            canvas.Log.show(canvas.Log.HUNT)
        }
        break
    }
    this.view.keyDown(e)
}
;
canvas.app.hunt.Main.prototype.handlerKeyUp = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    t.params.preventDefault();
    var e = t.params.keyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    this.view.keyUp(e)
}
;
canvas.app.hunt.Main.prototype.handlerOpenWindow = function() {
    this.hintManager.hide()
}
;
canvas.app.hunt.Main.prototype.resize = function(t, e) {
    var a = t;
    var i = e;
    this.hintManager.init(this.hintContainer, a, i);
    this.model.width = a;
    this.model.height = i;
    this.view.resize(a, i)
}
;
canvas.app.hunt.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.hunt.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.hunt.Main.prototype.swfObject = function(t) {
    var e;
    var a = canvas.app.hunt.model;
    if (t) {
        for (e in t) {
            switch (e) {
            case "farm|minigame":
                var i = t[e]["minigame"];
                if (i) {
                    var s = parseInt(i["time_left"]);
                    if (s > 0) {
                        this.view.showCaptcha(s)
                    }
                }
                break
            }
        }
    }
}
;
canvas.app.hunt.Main.prototype.timerHandler = function() {
    this.view.updateTreasureControl()
}
;
canvas.app.hunt.Main.prototype.treasureDigHandler = function(t) {
    this.model.treasureLastPoint.x = t.params.x;
    this.model.treasureLastPoint.y = t.params.y;
    this.treasureRequest.name = canvas.app.hunt.Event.TREASURE_DIG;
    this.treasureRequest.load("/entry_point.php?object=farm&action=treasure_dig&json_mode_on=1&x=" + t.params.x + "&y=" + t.params.y)
}
;
canvas.app.hunt.Main.prototype.treasureColectHandler = function() {
    this.treasureRequest.name = canvas.app.hunt.Event.TREASURE_COLLECT;
    this.treasureRequest.load("/entry_point.php?object=farm&action=treasure_dig&json_mode_on=1&x=" + this.model.treasureLastPoint.x + "&y=" + this.model.treasureLastPoint.y + "&collect=1")
}
;
canvas.app.hunt.Main.prototype.treasureCompleteHandler = function(t) {
    var e;
    var a = JSON.parse(this.treasureRequest.request.responseText)["farm|treasure_dig"];
    if (a.error != undefined && a.error != "") {
        this.view.popup.set_header(canvas.Translator.getText(4));
        this.view.popup.show_message(a.error, 16711680)
    } else {
        if (this.treasureRequest.name == canvas.app.hunt.Event.TREASURE_COLLECT) {
            this.view.fld_current.showTreasure(false);
            return
        }
        e = parseInt(a.treasure_status);
        this.model.treasureStatus = e;
        switch (e) {
        case 4:
            this.model.treasureLastPoint.x = parseInt(a.treasure_x);
            this.model.treasureLastPoint.y = parseInt(a.treasure_y);
            this.view.fld_current.showTreasure();
            break;
        default:
            this.view.fld_current.updateTreasureLocator(e)
        }
    }
}
;
canvas.app.hunt.Main.prototype.handlerFilterChange = function() {
    this.model.saveFilterData();
    this.view.resFilterPanel.update()
}
;
canvas.app.hunt.Model = function(t) {
    this.par = t;
    this._filterValue = 1;
    Object.defineProperty(this, "filterValue", {
        get: function() {
            return this._filterValue
        },
        set: function(t) {
            if (this._filterValue === t)
                return;
            this._filterValue = t;
            this.localStorage.set("filterValue", t.toString());
            this.objects_updater.updateFarm()
        }
    });
    this._popupPos = null;
    Object.defineProperty(this, "popupPos", {
        get: function() {
            return this._popupPos
        },
        set: function(t) {
            this._popupPos = t;
            this.localStorage.set("popupPos", t.x + "," + t.y)
        }
    });
    this.Objects = {};
    this.reqURL = t.reqURL;
    this.reqConfURL = t.reqConfURL;
    this.reqInterval = parseInt(t.reqInterval);
    this.reqConfInterval = parseInt(t.reqConfInterval);
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.HUNT);
    this.colorManager = new canvas.app.hunt.engine.ColorManager;
    this.mapData = new canvas.app.hunt.engine.MapData;
    this._filterValue = this.localStorage.get("filterValue") ? parseInt(this.localStorage.get("filterValue")) : 31;
    var e, a = this.localStorage.get("popupPos");
    if (a) {
        e = a.split(",");
        this._popupPos = new canvas.px.Point(parseFloat(e[0]),parseFloat(e[1]))
    } else {
        this._popupPos = new canvas.px.Point(.5,.5)
    }
    this.FILTER_VALUES = [1, 2, 4, 8, 16];
    this.IsBold = true;
    this.OBJ_EVENT = {
        tasks: {}
    };
    this.OBJECTS_DATA = {};
    this.OBJECTS_PICS = {};
    this.NUM_BIG_FIGHT = 0;
    this.max_width = 735;
    this.max_height = 280;
    this.min_width = 735;
    this.min_height = 280;
    this.firstTimeData = null;
    this.MAX_ANIMATION_SIZE = "41775e02da98ddb63c980dee";
    this.selectObjectType = "";
    this.captchaFinishTime = 0;
    this.treasureFinishTime = 0;
    this.treasureLastPoint = new canvas.px.Point;
    this.treasureStatus = 0;
    this.treasureTextTips = false;
    this.needConfirm = false;
    this.startRandom = t["start_random"] == "1";
    if (t.treasureTextTips != undefined)
        this.treasureTextTips = t.treasureTextTips == "1";
    if (this.reqInterval < 2)
        this.reqInterval = 2;
    if (this.reqConfInterval < 2)
        this.reqConfInterval = 2;
    this.sizeX = parseInt(t.sizeX);
    this.sizeY = parseInt(t.sizeY);
    if (this.sizeX == 0)
        this.sizeX = 1500;
    if (this.sizeY == 0)
        this.sizeY = 1500;
    this.sizeX = this.clean_val(this.sizeX, this.min_width);
    this.sizeY = this.clean_val(this.sizeY, this.min_height);
    this.BotsPath = t.BotsPath;
    this.PicPath = t.PicPath;
    this.FarmPicPath = t.FarmPicPath;
    this.FarmSwfPath = t.FarmSwfPath;
    this.farming = t.farming;
    if (this.farming == null)
        this.farming = "0";
    this.mapFile = t.mapFile;
    this.mapName = canvas.Functions.extractSwfName(this.mapFile);
    this.IsBold = t.nobold != null ? t.nobold == 1 ? false : true : true;
    this.PksPath = t.PksPath;
    this.needConfirm = parseInt(t.need_confirm) != 0;
    this.half_width = parseInt(this.sizeX / 2);
    this.half_height = parseInt(this.sizeY / 2);
    this.max_width = this.sizeX + 27;
    this.max_height = this.sizeY;
    this.m_time = 0;
    this.m_awardUrl = t.bannerurl;
    this.award_msg = t.bannermsg;
    this.brilliant_msg = t.br_msg;
    this.brilliant_link = t.br_link;
    var i = 36;
    this.sector_borders = [{
        x1: 0,
        y1: 0,
        x2: this.sizeX,
        y2: this.sizeY,
        pers_x: this.sizeX - i,
        pers_y: this.sizeY - i,
        pers_rot: 0,
        vert_pc: 1
    }];
    this.CfgFight = t.fight_conf;
    this.colorManager.init(t.bot_color_min ? parseInt(t.bot_color_min) : 0, t.bot_color_max ? parseInt(t.bot_color_max) : 0, t.bot_transparensy_min ? parseInt(t.bot_transparensy_min) * .01 : 1, t.bot_transparensy_max ? parseInt(t.bot_transparensy_max) * .01 : 1, t.bot_period ? parseInt(t.bot_period) : 0);
    if (this.CfgFight != null) {
        this.unpackFightConf(this.CfgFight)
    }
    this.areaId = "";
    var s = this.reqConfURL.split("&");
    for (var n = 0; n < s.length; n++) {
        var e = s[n].split("=");
        if (e[0] == "area_id")
            this.areaId = e[1]
    }
    this.loadFilterData()
}
;
canvas.app.hunt.Model.prototype.init = function(t) {
    this.objects_updater = new canvas.app.hunt.engine.ObjectsUpdater(t.view,this.Objects);
    this.farm = new canvas.app.hunt.engine.FarmingUpdater(t.view)
}
;
canvas.app.hunt.Model.prototype.loadFilterData = function() {
    var t = this.localStorage.get("filterHunt");
    if (t) {
        var e = JSON.parse(t);
        this.filterBots = e.bots;
        this.filterFarm = e.farm;
        this.filterArea = e.area;
        if (this.areaId != this.filterArea)
            this.clearAreaFilterData()
    } else {
        this.clearAreaFilterData()
    }
}
;
canvas.app.hunt.Model.prototype.saveFilterData = function() {
    var t = {};
    var e = {};
    for (var a in this.filterBots) {
        t[this.filterBots[a].id] = {
            id: this.filterBots[a].id,
            checked: this.filterBots[a].checked
        }
    }
    for (var a in this.filterFarm) {
        e[this.filterFarm[a].id] = {
            id: this.filterFarm[a].id,
            checked: this.filterFarm[a].checked
        }
    }
    var i = {
        area: this.filterArea,
        bots: t,
        farm: e
    };
    this.localStorage.set("filterHunt", JSON.stringify(i))
}
;
canvas.app.hunt.Model.prototype.clearAreaFilterData = function() {
    this.filterBots = {};
    this.filterFarm = {};
    this.filterArea = this.areaId
}
;
canvas.app.hunt.Model.prototype.haveFilterData = function() {
    for (var t in this.filterBots) {
        if (!this.filterBots[t].checked)
            return true
    }
    for (var t in this.filterFarm) {
        if (!this.filterFarm[t].checked)
            return true
    }
    return false
}
;
canvas.app.hunt.Model.prototype.clearFilterData = function() {
    for (var t in this.filterBots) {
        this.filterBots[t].checked = true
    }
    for (var t in this.filterFarm) {
        this.filterFarm[t].checked = true
    }
    this.saveFilterData()
}
;
canvas.app.hunt.Model.prototype.addBotToFilter = function(t) {
    if (!this.isObjectInsideMap(parseInt(t.x.value), parseInt(t.y.value)))
        return {
            checked: true
        };
    if (parseInt(t.hidden.value) > 0)
        return {
            checked: true
        };
    var e = this.filterBots[t.artikul_id.value];
    if (!e) {
        e = {
            checked: true
        };
        this.filterBots[t.artikul_id.value] = e
    }
    e.id = t.artikul_id.value;
    e.name = t.name.value;
    e.level = t.level.value;
    return e
}
;
canvas.app.hunt.Model.prototype.addFarmToFilter = function(t) {
    if (!this.isObjectInsideMap(parseInt(t.x.value), parseInt(t.y.value)))
        return {
            checked: true
        };
    var e = this.filterFarm[t.artikul_id.value];
    if (!e) {
        e = {
            checked: true
        };
        this.filterFarm[t.artikul_id.value] = e
    }
    e.id = t.artikul_id.value;
    e.name = t.name.value;
    e.quality = t.quality.value;
    return e
}
;
canvas.app.hunt.Model.prototype.isObjectInsideMap = function(t, e, a) {
    return t >= 0 && t <= this.sizeX && e >= 0 && e <= this.sizeY
}
;
canvas.app.hunt.Model.prototype.prep_language = function() {
    this.farm_data = {
        0: {
            header: canvas.Translator.getText(441),
            success: canvas.Translator.getText(442),
            faled: canvas.Translator.getText(443)
        },
        1: {
            header: canvas.Translator.getText(234),
            success: canvas.Translator.getText(402),
            faled: canvas.Translator.getText(403)
        },
        2: {
            header: canvas.Translator.getText(234),
            success: canvas.Translator.getText(402),
            faled: canvas.Translator.getText(403)
        },
        4: {
            header: canvas.Translator.getText(234),
            success: canvas.Translator.getText(402),
            faled: canvas.Translator.getText(403)
        }
    };
    this.agrlevelAr = [canvas.Translator.getText(405), canvas.Translator.getText(406), canvas.Translator.getText(407), canvas.Translator.getText(408), canvas.Translator.getText(409)];
    this.farm_conf = [[13421772, canvas.Translator.getText(410)], [47872, canvas.Translator.getText(411)], [187, canvas.Translator.getText(412)], [10027263, canvas.Translator.getText(413)], [12255232, canvas.Translator.getText(414)]];
    this.STRINGS_ARR = {};
    this.S_GREAT_FIGHT = "S_GREAT_FIGHT";
    this.S_TO_YOU = "S_TO_YOU";
    this.S_TO_ALL = "S_TO_ALL";
    this.STRINGS_ARR[this.S_GREAT_FIGHT] = canvas.Translator.getText(3e3);
    this.STRINGS_ARR[this.S_TO_YOU] = canvas.Translator.getText(429);
    this.STRINGS_ARR[this.S_TO_ALL] = canvas.Translator.getText(430)
}
;
canvas.app.hunt.Model.prototype.clean_val = function(t, e) {
    if (t < e) {
        t = e
    } else if (t % 2 != 0) {
        t += 1
    }
    return t
}
;
canvas.app.hunt.Model.prototype.getBotnameColor = function(t) {
    var e = t < 50;
    var a = e ? Math.round(255 * (t / 50)) : 255;
    var i = e ? 255 : Math.round(255 * ((100 - t) / 50));
    return a << 16 ^ i << 8
}
;
canvas.app.hunt.Model.prototype.getAgrlevelText = function(t) {
    if (t >= 100) {
        t = 99
    }
    if (this.agrlevelAr == null) {
        return "none"
    }
    return this.agrlevelAr[Math.floor(t / 20)]
}
;
canvas.app.hunt.Model.prototype.unpackFightConf = function(t) {
    var e = (new DOMParser).parseFromString(t, "text/xml");
    var a;
    var i;
    var s;
    var n;
    a = e.childNodes;
    this.NUM_BIG_FIGHT = 0;
    for (s = 0; s < a.length; s++) {
        if (a[s].nodeName == "fight") {
            if (a[s].attributes.in_process != null)
                this.NUM_BIG_FIGHT = a[s].attributes.in_process.value
        }
    }
}
;
canvas.app.hunt.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.hunt.model;
    this.main = t;
    this.currentKeys = [];
    this.container = new canvas.px.Container;
    this.frontContainer = new canvas.px.Container;
    this.addChild(this.container);
    this.flds_cont = new canvas.px.Container;
    this.flds_msk = new canvas.px.Mask(100,100);
    this.prepare_field();
    this.prepare_scroll();
    this.border = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "border"),100,4,100,23);
    this.border.y = 60;
    this.addChild(this.border);
    this.bor_T = new canvas.app.hunt.view.FrameBorT(this);
    this.addChild(this.bor_T);
    this.resFilterPanel = new canvas.app.hunt.view.ResFilterPanel;
    this.addChild(this.resFilterPanel);
    this.corner_TL = new canvas.app.hunt.view.FrameCornerTL(this);
    this.addChild(this.corner_TL);
    this.corner_TR = new canvas.app.hunt.view.FrameCornerTR(this);
    this.addChild(this.corner_TR);
    this.popupsContainer = new canvas.app.location.view.popups.Popups(canvas.app.hunt.Event);
    this.popupsContainer.position.set(5, 63);
    if (e.award_msg) {
        this.awardMsg = new canvas.app.hunt.view.elements.AwardMsg(e.award_msg,e.m_awardUrl);
        this.frontContainer.addChild(this.awardMsg)
    }
    if (e.brilliant_msg != null) {
        this.brilliantMsg = new canvas.app.hunt.view.elements.BrilliantMsg(e.brilliant_msg,e.brilliant_link);
        this.frontContainer.addChild(this.brilliantMsg)
    }
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scr_horz, this.scrollHandlerH, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scr_vert, this.scrollHandlerV, this);
    this.addChild(this.frontContainer);
    this.checkObjects(false);
    this.popup = new canvas.app.hunt.view.FarmWindow(this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_DRAG_FINISH, this.popup, this.popupDragFinishHandler, this);
    this.buildEvent();
    this.buildFight();
    this.techBtn = new canvas.app.location.view.popups.TechBtn(e.par,canvas.app.hunt.Event.ENTER_FRAME);
    this.infoBtn = new canvas.app.location.view.popups.InfoBtn(e.par);
    this.addChild(this.techBtn);
    this.addChild(this.infoBtn);
    this.infoBtn.y = 90;
    this.frontContainer.addChild(this.popupsContainer);
    this.winCaptcha = new canvas.app.hunt.view.WinCaptcha(this);
    this.filterPanel = new canvas.app.hunt.view.FilterPanel;
    this.filterPanel.y = 32;
    this.addChild(this.filterPanel);
    this.listBottomLeft = new canvas.px.Container;
    this.listBottomLeft.x = 10;
    this.addChild(this.listBottomLeft);
    this.treasureControl = new canvas.app.hunt.view.TreasureControl;
    this.updateTreasureControl();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_DOWN, this.treasureControl, this.treasureDownHandler, this);
    if (e.par.time_bonus_online != undefined) {
        this.popupsContainer.init(canvas.app.location.Const.POPUP_ZERO_LEVEL, e.par)
    }
    this.firstResize = true
}
;
canvas.app.hunt.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.View.prototype.init = function() {
    var t = canvas.app.hunt.model;
    if (t.farming == "1") {
        this.field_lock();
        this.corner_TL.deactivate();
        t.farm.main_iteration()
    }
}
;
canvas.app.hunt.View.prototype.resize = function(t, e) {
    var a = canvas.app.hunt.model;
    if (t == undefined)
        t = a.width;
    if (e == undefined)
        e = a.height;
    var i = t;
    var s = e;
    this.ww = i;
    this.hh = s;
    if (i < a.min_width) {
        this.x = 0;
        i = a.min_width
    } else if (i > a.max_width) {
        i = a.max_width
    }
    this.x = Math.round((t - i) * .5);
    if (s < a.min_height) {
        this.y = 0;
        s = a.min_height
    } else if (s > a.max_height) {
        this.y = Math.round(s / 2 - a.max_height / 2);
        s = a.max_height
    }
    this.wwReal = i;
    this.hhReal = s;
    this.bor_T.x = Math.round(i / 2 - 268 / 2) - (i > 1050 ? 38 : 38 + Math.round((1050 - i) * .5));
    if (this.eventBtn) {
        this.eventBtn.position.set(i - this.eventBtn.width - 16, 61)
    }
    if (this.eventPanel) {
        this.eventPanel.position.set(i - 12 - this.eventPanel.width, 63)
    }
    this.corner_TR.x = this.bor_T.x + 260;
    this.corner_TL.x = this.bor_T.x - 210;
    this.resFilterPanel.x = this.corner_TL.x - this.resFilterPanel.width + 36;
    this.scr_vert.x = i - 21;
    this.scr_horz.y = s - 35;
    this.fld_visible_HE = s - 83 - (i < a.max_width ? 16 : 0);
    this.fld_invisible_HE = a.sizeY - this.fld_visible_HE;
    this.fld_visible_WI = i - 27;
    this.fld_invisible_WI = a.sizeX - this.fld_visible_WI;
    this.scr_vert.set_visible_height(this.fld_visible_HE);
    this.scr_horz.set_visible_width(this.fld_visible_WI);
    this.scrollNull.visible = this.scr_horz.visible = i < a.max_width;
    this.flds_msk.setSize(i - 27, s - 83);
    this.border.width = i;
    this.border.height = s - 60;
    if (this.fld_current != null) {
        this.fld_current.check_position()
    }
    if (this.awardMsg) {
        this.awardMsg.position.set(Math.round((i - this.awardMsg.width) * .5) - 20, 62)
    }
    if (this.brilliantMsg) {
        this.brilliantMsg.position.set(Math.round((i - this.brilliantMsg._width) * .5) - 24, 62)
    }
    this.scrollNull.position.set(this.scr_horz._width + 5, this.scr_vert._height + 63);
    this.bor_T.update(this.fld_visible_WI, this.fld_visible_HE);
    this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y);
    this.techBtn.position.set(i - 30, s - 45);
    this.infoBtn.position.set(i - 12, 100 + (this.eventPanel && this.eventPanel.parent ? this.eventPanel.height : 0));
    this.filterPanel.x = i - this.filterPanel.width - 30;
    this.updateLists();
    if (this.firstResize) {
        this.firstResize = false;
        this.scr_vert.current = canvas.Functions.random(this.scr_vert.max);
        this.scr_horz.current = canvas.Functions.random(this.scr_horz.max)
    }
    this.scrollHandlerH();
    this.scrollHandlerV();
    this.main.windowsManager.init(this.main.windowsContainer, i, s, this.flds_cont);
    this.main.windowsContainer.position.set(this.x, this.y)
}
;
canvas.app.hunt.View.prototype.popupDragFinishHandler = function() {
    var t = canvas.app.hunt.model;
    var e = this.popup.x + this.popup.width * .5;
    var a = this.popup.y + this.popup.height * .5;
    t.popupPos = new canvas.px.Point(e / this.wwReal,a / this.hhReal)
}
;
canvas.app.hunt.View.prototype.updateTreasureControl = function() {
    var t = canvas.app.hunt.model;
    if (t.treasureFinishTime * 1e3 > Date.now() && t.treasureStatus != 4) {
        this.listBottomLeft.addChild(this.treasureControl);
        this.treasureControl.update();
        this.updateLists()
    } else {
        if (this.listBottomLeft.contains(this.treasureControl))
            this.listBottomLeft.removeChild(this.treasureControl);
        this.fld_current.updateTreasureLocator(0)
    }
}
;
canvas.app.hunt.View.prototype.prepare_field = function() {
    var t = canvas.app.hunt.model;
    this.full_map = new canvas.px.Container;
    var e = canvas.ResourceLoader.get("map_mci").data;
    var a = e[canvas.px.MovieClipProps.children];
    var i = a.length;
    var s;
    var n;
    for (var r = 0; r < i; r++) {
        n = canvas.ResourceLoader.getImage("map", a[r].name);
        n.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST;
        s = new canvas.px.Sprite(n);
        if (a[r][canvas.px.MovieClipProps.matrix]) {
            s.transform.localTransform = new canvas.px.Matrix(a[r][canvas.px.MovieClipProps.matrix].a,a[r][canvas.px.MovieClipProps.matrix].b,a[r][canvas.px.MovieClipProps.matrix].c,a[r][canvas.px.MovieClipProps.matrix].d,a[r][canvas.px.MovieClipProps.matrix].tx,a[r][canvas.px.MovieClipProps.matrix].ty)
        }
        s.alpha = a[r][canvas.px.MovieClipProps.alpha] == undefined ? 1 : a[r][canvas.px.MovieClipProps.alpha];
        this.full_map.addChild(s)
    }
    this.fld_north = new canvas.app.hunt.view.Field(this,this.full_map,0);
    this.flds_cont.addChild(this.fld_north);
    this.fld_locker = new canvas.px.Mask(t.half_width,t.half_height,0,.3);
    this.flds_cont.position.set(5, 63);
    this.container.addChild(this.flds_cont);
    this.flds_msk.position.set(5, 63);
    this.addChild(this.flds_msk);
    this.flds_cont.mask = this.flds_msk;
    this.fld_current = this.fld_north;
    this.current_object = null;
    this.current_sector = 0
}
;
canvas.app.hunt.View.prototype.prepare_scroll = function() {
    var t = canvas.app.hunt.model;
    this.scr_vert = new canvas.app.hunt.view.ScrollV(this,this.container);
    this.addChild(this.scr_vert);
    this.scr_vert.y = 63;
    this.scr_vert.set_full_height(t.sizeY);
    this.scr_horz = new canvas.app.hunt.view.ScrollH(this.flds_cont);
    this.scr_horz.x = 5;
    this.scr_horz.set_full_width(t.sizeX);
    this.addChild(this.scr_horz);
    this.scrollNull = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_scroll_null"));
    this.addChild(this.scrollNull)
}
;
canvas.app.hunt.View.prototype.scrollHandlerH = function() {
    if (!this.scr_horz.isDisabled()) {
        this.flds_cont.x = 5 - this.scr_horz.current;
        this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y)
    } else {
        this.flds_cont.x = 5
    }
    this.updateVisibleObjects()
}
;
canvas.app.hunt.View.prototype.scrollHandlerV = function() {
    if (!this.scr_vert.isDisabled()) {
        this.flds_cont.y = 63 - this.scr_vert.current;
        this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y)
    } else {
        this.flds_cont.y = 63
    }
    this.updateVisibleObjects()
}
;
canvas.app.hunt.View.prototype.updateVisibleObjects = function() {
    this.fld_current.updateVisibleObjects(new canvas.px.Rectangle(-this.flds_cont.x - 40,-this.flds_cont.y,this.fld_visible_WI + 100,this.fld_visible_HE + 140))
}
;
canvas.app.hunt.View.prototype.updateLists = function() {
    this.listBottomLeft.y = this.hh - Math.round(this.listBottomLeft.height) - 40
}
;
canvas.app.hunt.View.prototype.buildEvent = function() {
    canvas.app.location.View.prototype.buildEvent.call(this)
}
;
canvas.app.hunt.View.prototype.buildFight = function() {
    canvas.app.location.View.prototype.buildFight.call(this);
    if (this.fightBtn) {
        this.fightBtn.position.set(-3, 53)
    }
}
;
canvas.app.hunt.View.prototype.refreshEventHandler = function() {
    canvas.app.location.View.prototype.refreshEventHandler.call(this)
}
;
canvas.app.hunt.View.prototype.field_lock = function() {
    this.flds_cont.interactiveChildren = false
}
;
canvas.app.hunt.View.prototype.field_unlock = function() {
    this.flds_cont.interactiveChildren = true
}
;
canvas.app.hunt.View.prototype.showCaptcha = function(t) {
    if (t < 1)
        t = 60;
    var e = canvas.app.hunt.model;
    e.captchaFinishTime = Date.now() + t * 1e3;
    canvas.utils.WindowsManager.instance.openWindow(this.winCaptcha, false, false, true, true)
}
;
canvas.app.hunt.View.prototype.checkObjects = function(t, e) {
    if (e == undefined)
        e = "";
    var a = canvas.app.hunt.model;
    var i;
    var s;
    var n;
    for (var r in a.Objects) {
        i = a.Objects[r];
        if (e && i.type != e)
            continue;
        if (t) {
            if (i.old_flag) {
                if (i.mc != null) {
                    i.mc.remove()
                }
                continue
            }
        }
        var o = a.sector_borders[0];
        if (i.x >= o.x1 && i.x <= o.x2 && i.y >= o.y1 && i.y <= o.y2) {
            if (i.mc == null) {
                if (i.type == "bot") {
                    var l = new canvas.app.hunt.view.FieldObject(this,this.fld_current,i)
                } else if (i.type == "farm") {
                    var c = new canvas.app.hunt.view.FieldObject(this,this.fld_current,i)
                } else {}
            } else {
                if (i.new_pos) {
                    s = parseInt(i.x);
                    n = parseInt(i.y);
                    i.mc.moving(s, n);
                    delete i.new_pos
                } else {}
                if (i.type == "farm") {
                    i.mc.update_mark_tf(i.farming)
                }
            }
        } else {
            if (i.mc != null) {
                i.mc.remove()
            } else {
                i.old_flag = true
            }
        }
        if (t == true) {
            if (i.mc != null) {
                i.old_flag = true
            }
        }
    }
    this.buildEvent();
    this.buildFight()
}
;
canvas.app.hunt.View.prototype.select_obj = function(t) {
    var e = canvas.app.hunt.model;
    e.selectObjectType = t.type;
    if (this.current_object != null) {
        if (this.current_object.mc != null) {
            this.current_object.mc.unFocus()
        }
    }
    this.current_object = t;
    this.current_object.mc.inFocus();
    this.corner_TR.update_obj_info(t);
    this.refresh_controls()
}
;
canvas.app.hunt.View.prototype.refresh_controls = function() {
    this.corner_TL.deactivate();
    if (this.current_object == null) {
        return
    }
    if (this.current_object.type == "bot") {
        this.corner_TL.activate(3)
    } else if (this.current_object.type == "farm") {
        var t = this.current_object.prof;
        if ((t & 0) == 0)
            this.corner_TL.activate(0, this.current_object.action_title);
        if ((t & 1) == 1)
            this.corner_TL.activate(1, this.current_object.action_title);
        if ((t & 2) == 2)
            this.corner_TL.activate(2, this.current_object.action_title);
        if ((t & 4) == 4)
            this.corner_TL.activate(4, this.current_object.action_title)
    } else {}
}
;
canvas.app.hunt.View.prototype.apply_control_btn = function(t, e) {
    var a = canvas.app.hunt.model;
    if (this.current_object == null) {
        return
    }
    if (t == 3 && this.current_object.type == "bot") {
        this.field_lock();
        this.corner_TL.deactivate();
        if (a.needConfirm) {
            this.sendHuntCheck(this.current_object.id, e)
        } else {
            this.sendAttack({
                rtype: "bot",
                rid: this.current_object.id,
                et: e
            })
        }
    } else if ((t >= 0 && t <= 2 || t == 4) && this.current_object.type == "farm") {
        this.field_lock();
        this.corner_TL.deactivate();
        a.farm.begin_farming(this.current_object.num, this.current_object.t, e)
    } else {}
}
;
canvas.app.hunt.View.prototype.sendHuntCheck = function(t, e) {
    var a = new canvas.utils.URLRequest("/entry_point.php?object=fight&action=HuntCheck&bot_id=" + t + "&json_mode_on=1");
    a.dat = {
        botId: t,
        endType: e
    };
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, a, this.huntCheckCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, a, this.huntCheckCompleteHandler, this);
    a.load()
}
;
canvas.app.hunt.View.prototype.huntCheckCompleteHandler = function(t) {
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, t.target, this.huntCheckCompleteHandler, this);
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, t.target, this.huntCheckCompleteHandler, this);
    var e = JSON.parse(t.target.request.responseText)["fight|HuntCheck"];
    if (e.confirm) {
        this.field_unlock();
        showBotConfirmDialog(String(e.confirm))
    } else {
        this.sendAttack({
            rtype: "bot",
            rid: t.target.dat.botId,
            et: t.target.dat.endType
        })
    }
}
;
canvas.app.hunt.View.prototype.sendAttack = function(t) {
    canvas.utils.ABController.sendRequest(canvas.utils.ABCAbout.REQUEST_URL_DWAR, t);
    this.field_unlock();
    huntAttack(String(this.current_object.id))
}
;
canvas.app.hunt.View.prototype.unselect_obj = function() {
    if (this.current_object != null) {
        if (this.current_object.mc != null) {
            this.current_object.mc.unFocus()
        }
    }
    this.current_object = null;
    this.refresh_controls()
}
;
canvas.app.hunt.View.prototype.keyDown = function(t) {
    switch (t) {
    case canvas.Const.KEYS.UP_ARROW:
        if (this.currentKeys.indexOf("up") < 0)
            this.currentKeys.push("up");
        break;
    case canvas.Const.KEYS.RIGHT_ARROW:
        if (this.currentKeys.indexOf("right") < 0)
            this.currentKeys.push("right");
        break;
    case canvas.Const.KEYS.LEFT_ARROW:
        if (this.currentKeys.indexOf("left") < 0)
            this.currentKeys.push("left");
        break;
    case canvas.Const.KEYS.DOWN_ARROW:
        if (this.currentKeys.indexOf("down") < 0)
            this.currentKeys.push("down");
        break
    }
    this.testFrameListener()
}
;
canvas.app.hunt.View.prototype.keyUp = function(t) {
    var e;
    switch (t) {
    case canvas.Const.KEYS.UP_ARROW:
        e = this.currentKeys.indexOf("up");
        if (e >= 0)
            this.currentKeys.splice(e, 1);
        break;
    case canvas.Const.KEYS.RIGHT_ARROW:
        e = this.currentKeys.indexOf("right");
        if (e >= 0)
            this.currentKeys.splice(e, 1);
        break;
    case canvas.Const.KEYS.LEFT_ARROW:
        e = this.currentKeys.indexOf("left");
        if (e >= 0)
            this.currentKeys.splice(e, 1);
        break;
    case canvas.Const.KEYS.DOWN_ARROW:
        e = this.currentKeys.indexOf("down");
        if (e >= 0)
            this.currentKeys.splice(e, 1);
        break
    }
    this.testFrameListener()
}
;
canvas.app.hunt.View.prototype.testFrameListener = function() {
    if (this.currentKeys.length > 0) {
        canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
    } else {
        canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.hunt.View.prototype.frameHandler = function() {
    var t;
    var e = this.currentKeys.length;
    var a = false;
    var i = false;
    for (var s = 0; s < e; s++) {
        switch (this.currentKeys[s]) {
        case "up":
            this.scr_vert.current -= 20;
            i = true;
            break;
        case "down":
            this.scr_vert.current += 20;
            i = true;
            break;
        case "left":
            this.scr_horz.current -= 20;
            a = true;
            break;
        case "right":
            this.scr_horz.current += 20;
            a = true;
            break
        }
    }
    if (a)
        this.scrollHandlerH();
    if (i)
        this.scrollHandlerV()
}
;
canvas.app.hunt.View.prototype.treasureDownHandler = function(t) {
    this.fld_current.startTreasureSearch()
}
;
canvas.app.hunt.engine.ColorManager = function() {
    this.COLOR_MAX = 255;
    this.ALPHA_MAX = 1;
    this.COLOR_DIFF = 1;
    this.ALPHA_DIFF = .01;
    this.colorSign = 1;
    this.alphaSign = 1;
    this.colorMin = 0;
    this.colorMax = 0;
    this.alphaMin = 0;
    this.alphaMax = 0;
    this.period = 1e3;
    this._color = 0;
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t > this.colorMax ? this.colorMax : t < this.colorMin ? this.colorMin : t
        }
    });
    this._alpha = 1;
    Object.defineProperty(this, "alpha", {
        get: function() {
            return this._alpha
        },
        set: function(t) {
            this._alpha = t > this.alphaMax ? this.alphaMax : t < this.alphaMin ? this.alphaMin : t
        }
    });
    this._colorIndex = 0;
    Object.defineProperty(this, "colorIndex", {
        get: function() {
            return this._colorIndex
        }
    })
}
;
canvas.app.hunt.engine.ColorManager.prototype.init = function(t, e, a, i, s) {
    this.colorMin = t < 0 ? 0 : t > this.COLOR_MAX ? this.COLOR_MAX : t;
    this.colorMax = e < 0 ? 0 : e > this.COLOR_MAX ? this.COLOR_MAX : e;
    this.alphaMin = a < 0 ? 0 : a > this.ALPHA_MAX ? this.ALPHA_MAX : a;
    this.alphaMax = i < 0 ? 0 : i > this.ALPHA_MAX ? this.ALPHA_MAX : i;
    this.period = s;
    if (this.timer) {
        clearInterval(this.timer)
    }
    if (this.period > 0 && (this.colorMin != this.colorMax || this.alphaMin != this.alphaMax)) {
        this.timer = setInterval(this.timerHandler.bind(this), this.period)
    }
    this._color = this.colorMin;
    this._alpha = this.alphaMax;
    this._colorIndex = canvas.Functions.random(3)
}
;
canvas.app.hunt.engine.ColorManager.prototype.timerHandler = function() {
    if (this.colorMin != this.colorMax) {
        this.color += this.COLOR_DIFF * this.colorSign;
        if (this.color == this.colorMax || this.color == this.colorMin) {
            this.colorSign = -this.colorSign
        }
    }
    if (this.alphaMin != this.alphaMax) {
        this.alpha += this.ALPHA_DIFF * this.alphaSign;
        if (this.alpha == this.alphaMax || this.alpha == this.alphaMin) {
            this.alphaSign = -this.alphaSign
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.COLOR_CHANGE)
}
;
canvas.app.hunt.engine.FarmingUpdater = function(t) {
    Object.defineProperty(this, "farmSnum", {
        set: function(t) {
            this._snum = t
        }
    });
    var e = canvas.app.hunt.model;
    this.baseLnk = t;
    this._snum = 0;
    this.reqBegin = e.reqURL + "?mode=farm&action=chek&xy=%xy%&sig=%sig%&num=%num%";
    this.reqCheck = e.reqURL + "?mode=farm&action=chek&xy=%xy%&end=1";
    this.reqCancel = e.reqURL + "?mode=farm&action=cancel";
    this.aLoader = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this);
    this.tikHandlerBinded = this.tikHandler.bind(this)
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.start = function() {
    this.stop();
    this.tik = setTimeout(this.tikHandlerBinded, 2e3)
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.stop = function() {
    if (this.tik)
        clearTimeout(this.tik)
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.tikHandler = function() {
    this.stop();
    this.main_iteration()
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.completeHandler = function() {
    var t = this.aLoader.request.responseText;
    if (this.canceling) {
        return
    }
    var e = (new DOMParser).parseFromString(t, "text/xml");
    if (e.firstChild.attributes.time_left) {
        this.baseLnk.field_lock();
        this.baseLnk.showCaptcha(parseInt(e.firstChild.attributes.time_left.value));
        return
    }
    var a = e.childNodes;
    for (var i = 0; i < a.length; i++) {
        if (a[i].nodeName == "req") {
            this.parse_attr(a[i].attributes);
            break
        }
    }
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.parse_attr = function(t) {
    var e = canvas.app.hunt.model;
    if (t.status == null) {
        return
    }
    if (t.status.value == "1") {
        if (!this.checking) {
            if (t.ctime == null || t.ftime == null) {
                this.baseLnk.popup.show_message(canvas.Translator.getText(424), 16711680);
                return
            }
        }
        if (t.stime == null) {
            t.stime = t.ctime
        }
        if (t.farm == null) {
            t.farm = {
                value: "0"
            }
        }
        var a = e.farm_data[t.prof.value];
        if (a == null) {
            a = e.farm_data["0"]
        }
        if (t.farm.value == "0") {
            t.ctime.value = parseInt(t.ctime.value) * 1e3;
            t.ftime.value = parseInt(t.ftime.value) * 1e3;
            t.stime.value = parseInt(t.stime.value) * 1e3;
            if (t.ctime.value > t.ftime.value) {
                t.ctime.value = t.ftime.value
            }
            if (t.stime.value > t.ftime.value) {
                t.stime.value = t.ftime.value
            }
            if (!this.checking || t.stime.value != t.ftime.value) {
                this.baseLnk.popup.set_progress(t)
            } else {
                this.start()
            }
            this.baseLnk.popup.set_header(a.header)
        } else if (t.farm.value == "-1") {
            this.baseLnk.unselect_obj();
            this.baseLnk.popup.show_message(a.faled, 16711680);
            return
        } else if (t.farm.value == "1") {
            this.baseLnk.unselect_obj();
            if (this.baseLnk.popup.parent) {
                canvas.utils.WindowsManager.instance.closeWindow(this.baseLnk.popup)
            }
            this.baseLnk.field_unlock();
            this.baseLnk.refresh_controls();
            return
        } else {
            this.baseLnk.popup.set_header(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(4)));
            this.baseLnk.popup.show_message(canvas.Translator.getText(425), 16711680);
            return
        }
    } else {
        this.baseLnk.popup.set_header(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(4)));
        if (t.msg != null) {
            this.baseLnk.popup.show_message(t.msg.value, 16711680)
        } else {
            this.baseLnk.popup.show_message(canvas.Translator.getText(426), 16711680)
        }
    }
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.errorHandler = function() {
    this.start()
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.main_iteration = function() {
    this.checking = true;
    this.canceling = false;
    var t = this.reqCheck.replace(/%xy%/g, this._snum.toString());
    this.aLoader.load(t)
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.begin_farming = function(t, e, a) {
    var i = canvas.app.hunt.model;
    this.checking = false;
    this.canceling = false;
    var s = this.reqBegin.replace(/%num%/g, String(t)).replace(/%sig%/g, md5(this._snum.toString() + t.toString() + i.MAX_ANIMATION_SIZE));
    s = s.replace(/%xy%/g, this._snum.toString());
    s += "&t=" + e;
    this.aLoader.method = "POST";
    this.aLoader.load(s, {
        m: canvas.utils.ABController.toString({
            rtype: "farm",
            rid: t,
            et: a
        })
    });
    this.aLoader.method = "GET"
}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.fieldClick = function(t) {}
;
canvas.app.hunt.engine.FarmingUpdater.prototype.cancel_farming = function() {
    this.stop();
    this.canceling = true;
    this.aLoader.load(this.reqCancel)
}
;
canvas.app.hunt.engine.MapData = function() {
    this._data = {};
    this.TYPE_BOT = "bot";
    this.TYPE_PLANT = "plant";
    this.TYPE_STONE = "stone";
    this.TYPE_FISH = "fish";
    this.TYPE_USE = "use";
    this.OVERLAY_WIDTH = 75
}
;
canvas.app.hunt.engine.MapData.prototype.parseData = function(t, e) {
    var a = 0;
    var i;
    var s;
    var n;
    var r = [];
    var o;
    var l;
    var c = new Uint8Array(e);
    if (c) {
        this._data[t] = r;
        while (a < c.length) {
            s = c[a];
            n = a * 8;
            for (i = 0; i < 8; i++) {
                o = (n + i) % this.OVERLAY_WIDTH;
                l = parseInt((n + i) / this.OVERLAY_WIDTH);
                if (!r[o])
                    r[o] = [];
                r[o][l] = !(s >> i & 1)
            }
            a++
        }
    }
}
;
canvas.app.hunt.engine.MapData.prototype.testPoint = function(t, e, a) {
    if (a == this.TYPE_USE)
        return true;
    var i;
    var s = Math.floor(t / 20);
    var n = Math.floor(e / 20);
    if (this._data[a]) {
        i = this._data[a];
        return i[s] && i[s][n]
    } else {
        return false
    }
}
;
canvas.app.hunt.engine.MapData.prototype.getTypeByProf = function(t) {
    switch (t) {
    case 1:
        return this.TYPE_PLANT;
    case 2:
        return this.TYPE_STONE;
    case 4:
        return this.TYPE_FISH;
    default:
        return this.TYPE_USE
    }
}
;
canvas.app.hunt.engine.ObjLoader = function(t, e) {
    this.src = t;
    this.movies = [];
    this.ready = false;
    this.smoothing = e ? true : false;
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    canvas.ResourceLoader.add([t + ".mci", t + ".png", t + ".json"])
}
;
canvas.app.hunt.engine.ObjLoader.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.ready = true;
    var t = this.movies ? this.movies.length : 0;
    if (t > 0) {
        for (var e = 0; e < t; e++) {
            this.processMovie(this.movies[e])
        }
    }
    this.movies = null;
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.COMPLETE_OBJECT, this)
}
;
canvas.app.hunt.engine.ObjLoader.prototype.getMovie = function() {
    var t = new canvas.px.MovieClip(this.src,"",this.smoothing);
    t.frameEvent = canvas.app.hunt.Event.ENTER_FRAME;
    if (this.ready) {
        this.processMovie(t)
    } else {
        this.movies.push(t)
    }
    return t
}
;
canvas.app.hunt.engine.ObjLoader.prototype.processMovie = function(t) {}
;
canvas.app.hunt.engine.ObjectsUpdater = function(t, e) {
    this.baseLnk = t;
    this.Objects = e;
    this.aLoader = new canvas.utils.URLRequest;
    this.aConfLoader = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aConfLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aConfLoader, this.errorHandler, this);
    this.send_req_binded = this.send_req.bind(this);
    this.send_req_conf_binded = this.send_req_conf.bind(this);
    this.completeHandler(null);
    this.send_req()
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.send_req = function() {
    this.aLoader.load(canvas.app.hunt.model.reqURL)
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.send_req_conf = function() {
    this.aConfLoader.load(canvas.app.hunt.model.reqConfURL)
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.completeHandler = function(t) {
    var e = canvas.app.hunt.model;
    var a = false;
    var i = true;
    if (t != null) {
        a = t.target == this.aLoader;
        i = t.target == this.aConfLoader
    }
    if (this.baseLnk.winCaptcha != null && this.baseLnk.winCaptcha.isActive) {
        this.setReqTimeOut(a, i);
        return
    }
    var s = t == null ? (new DOMParser).parseFromString(canvas.ResourceLoader.get("first_data").data, "text/xml") : (new DOMParser).parseFromString(t.target.request.responseText, "text/xml");
    if (s.firstChild.attributes.time_left) {
        this.baseLnk.field_lock();
        this.baseLnk.showCaptcha(parseInt(s.firstChild.attributes.time_left.value));
        this.setReqTimeOut(a, i);
        return
    }
    var n = false;
    var r = s.childNodes;
    var o;
    var l;
    for (var c = 0; c < r.length; c++) {
        if (r[c].nodeName == "hunt") {
            o = r[c].childNodes;
            for (var p = 0; p < o.length; p++) {
                l = o[p].nodeName;
                if (l == "bots") {
                    this.lastBots = o[p].childNodes
                } else if (l == "farm") {
                    this.lastFarm = o[p].childNodes
                } else if (l == "event") {
                    n = true;
                    var h = o[p].attributes.id != null ? o[p].attributes.id.value : 0;
                    var d = o[p].attributes.title != null ? o[p].attributes.title.value : "";
                    var v = o[p].attributes.point_title != null ? o[p].attributes.point_title.value : "";
                    this.parse_event(h, d, v, o[p].childNodes)
                } else if (l == "fight") {
                    e.NUM_BIG_FIGHT = o[p].attributes.in_process != null ? o[p].attributes.in_process.value : 0
                } else if (l == "treasure") {
                    e.treasureFinishTime = o[p].childNodes[0] && o[p].childNodes[0].nodeValue ? Math.round(Date.now() * .001) + parseInt(o[p].childNodes[0].nodeValue) : 0
                }
            }
        }
    }
    if (a && !n)
        e.OBJ_EVENT = {
            tasks: {}
        };
    if (this.lastBots)
        this.parse_bots(this.lastBots);
    if (this.lastFarm)
        this.parse_farm(this.lastFarm);
    this.baseLnk.checkObjects(true);
    if (a)
        this.baseLnk.updateVisibleObjects();
    this.setReqTimeOut(a, i)
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_bots = function(t) {
    var e;
    var a;
    var i;
    var s;
    for (var n = 0; n < t.length; n++) {
        if (t[n].nodeName == "bot") {
            e = t[n].attributes;
            if (!canvas.app.hunt.model.addBotToFilter(e).checked) {
                continue
            }
            i = "b" + e.id.value;
            if (this.Objects[i] == null) {
                this.Objects[i] = {};
                this.Objects[i].type = "bot";
                s = true
            } else {
                s = false
            }
            a = this.Objects[i];
            if (s) {} else if (a.x != e.x.value || a.y != e.y.value) {
                a.new_pos = true
            }
            if (a.mc != null) {
                if (a.fight_id != e.fight_id.value) {
                    if (e.fight_id == null || e.fight_id.value == "0") {
                        a.mc.mark.visible = false
                    } else {
                        a.mc.mark.visible = true
                    }
                }
            }
            delete a.fight_id;
            delete a.old_flag;
            for (var r in e) {
                if (e[r].value != undefined) {
                    a[e[r].name] = e[r].value
                }
            }
        }
    }
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_farm = function(t) {
    var e = canvas.app.hunt.model;
    var a;
    var i;
    var s;
    var n;
    for (var r = 0; r < t.length; r++) {
        if (t[r].nodeName == "item") {
            a = t[r].attributes;
            var o = parseInt(a.quality.value);
            if (!canvas.Functions.testFlag(e.filterValue, e.FILTER_VALUES[o])) {
                continue
            }
            if (!canvas.app.hunt.model.addFarmToFilter(a).checked) {
                continue
            }
            s = "f" + a.num.value;
            if (this.Objects[s] == null) {
                this.Objects[s] = {};
                this.Objects[s].type = "farm";
                n = true
            } else {
                n = false
            }
            i = this.Objects[s];
            if (n) {} else if (i.mc != null) {
                if (i.x != a.x.value || i.y != a.y.value) {
                    i.new_pos = true
                }
                if (i.farming != a.farming.value) {
                    if (a.farming == null || a.farming.value == "0") {
                        i.mc.mark.visible = false
                    } else {
                        i.mc.mark.visible = true
                    }
                }
            }
            delete i.farming;
            delete i.old_flag;
            for (var l in a) {
                if (a[l].value != undefined) {
                    i[a[l].name] = a[l].value
                }
            }
        }
    }
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_event = function(t, e, a, i) {
    var s = canvas.app.hunt.model;
    s.OBJ_EVENT.id = t;
    s.OBJ_EVENT.title = e;
    s.OBJ_EVENT.point_title = a;
    var n;
    var r = 0;
    for (n = 0; n < i.length; n++) {
        if (i[n].nodeName == "task") {
            s.OBJ_EVENT.tasks[r] = {
                title: i[n].attributes.title != null ? i[n].attributes.title.value : "---",
                max_value: i[n].attributes.max_value != null ? i[n].attributes.max_value.value : 0,
                max_user_value: i[n].attributes.max_user_value != null ? i[n].attributes.max_user_value.value : 0,
                user_value: i[n].attributes.user_value != null ? i[n].attributes.user_value.value : 0,
                value: i[n].attributes.value != null ? i[n].attributes.value.value : 0,
                noUserValue: i[n].attributes.no_user_value && i[n].attributes.no_user_value.value == "1"
            };
            r++
        }
    }
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.errorHandler = function(t) {
    this.setReqTimeOut()
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.updateFarm = function() {
    if (this.lastFarm)
        this.parse_farm(this.lastFarm);
    this.baseLnk.checkObjects(true, "farm")
}
;
canvas.app.hunt.engine.ObjectsUpdater.prototype.setReqTimeOut = function(t, e) {
    var a = canvas.app.hunt.model;
    if (t == undefined)
        t = true;
    if (e == undefined)
        e = true;
    if (t) {
        if (this.timer)
            clearTimeout(this.timer);
        this.timer = setTimeout(this.send_req_binded, a.reqInterval * 1e3)
    }
    if (e) {
        if (this.timerConf)
            clearTimeout(this.timerConf);
        this.timerConf = setTimeout(this.send_req_conf_binded, a.reqConfInterval * 1e3)
    }
}
;
canvas.app.hunt.view.FarmWindow = function(t) {
    canvas.app.manor.view.WindowManorBase.call(this, 392, 102);
    this.baseLnk = t;
    var e = canvas.app.hunt.model;
    this.cancel_tf = new canvas.ui.Text(e.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16771494,73,18,"center");
    this.cancel_tf.text = canvas.Translator.getText(11);
    this.cancel_tf.position.set(159, 63);
    this.message_tf = new canvas.ui.Text(e.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,1346315,370,18,"center");
    this.message_tf.position.set(10, 89);
    this.cont_progress = new canvas.px.Container;
    this.progressBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "popup_line_red"));
    this.progressBack.position.set(22, 34);
    this.cont_progress.addChild(this.progressBack);
    this.progress = new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "popup_line_green"));
    this.progress.position.set(22, 37);
    this.cont_progress.addChild(this.progress);
    this.cancel_btn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "popup_close_btn"));
    this.cancel_btn.position.set(150, 62);
    this.cont_progress.addChild(this.cancel_btn);
    this.cont_progress.addChild(this.cancel_tf);
    this.cont_progress.addChild(this.message_tf);
    this.cont_finish = new canvas.px.Container;
    this.body_tf = new canvas.ui.Text(e.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,0,320,34,"center");
    this.body_tf.position.set(36, 24);
    this.cont_finish.addChild(this.body_tf);
    this.exit_btn = new canvas.app.view.MainButton;
    this.exit_btn.setTitle(canvas.Translator.getText(310));
    this.cont_finish.addChild(this.exit_btn);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.show, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.hide, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancel_btn, this.cancelMouseClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.exit_btn, this.exitMouseClickHandler, this);
    this.update()
}
;
canvas.app.hunt.view.FarmWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.hunt.view.FarmWindow.prototype.cont_switcher = function(t, e) {
    var a = canvas.app.hunt.model;
    if (!this.parent) {
        canvas.utils.WindowsManager.instance.openWindow(this, false, false, false, true);
        this.position.set(Math.round(a.popupPos.x * this.baseLnk.wwReal - this.width * .5), Math.round(a.popupPos.y * this.baseLnk.hhReal - this.height * .5))
    }
    if (this.contains(e)) {
        this.removeChild(e)
    }
    if (!this.contains(t)) {
        this.addChild(t)
    }
}
;
canvas.app.hunt.view.FarmWindow.prototype.switch_progress_mode = function() {
    this.cont_switcher(this.cont_progress, this.cont_finish);
    this.baseLnk.fld_current.pers.visible = false
}
;
canvas.app.hunt.view.FarmWindow.prototype.switch_finish_mode = function() {
    this.cont_switcher(this.cont_finish, this.cont_progress);
    this.baseLnk.fld_current.pers.visible = true
}
;
canvas.app.hunt.view.FarmWindow.prototype.show = function(t) {
    if (t != undefined && t.params == this) {}
}
;
canvas.app.hunt.view.FarmWindow.prototype.hide = function(t) {
    this.cancelMouseClickHandler(null, true);
    if (t != undefined && t.params == this) {
        this.baseLnk.fld_current.pers.visible = true;
        this.setBackground()
    }
}
;
canvas.app.hunt.view.FarmWindow.prototype.setBackground = function(t) {
    if (t == undefined)
        t = 1;
    switch (t) {
    case 2:
        this.setSize(392, 137);
        break;
    default:
        this.setSize(392, 102)
    }
}
;
canvas.app.hunt.view.FarmWindow.prototype.cancelMouseClickHandler = function(t, e) {
    if (!this.parent && !e)
        return;
    var a = canvas.app.hunt.model;
    a.farm.cancel_farming();
    this.baseLnk.field_unlock();
    this.baseLnk.refresh_controls();
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (!e)
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
}
;
canvas.app.hunt.view.FarmWindow.prototype.exitMouseClickHandler = function() {
    this.baseLnk.field_unlock();
    this.baseLnk.refresh_controls();
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
}
;
canvas.app.hunt.view.FarmWindow.prototype.set_header = function(t) {
    this.header.text = t
}
;
canvas.app.hunt.view.FarmWindow.prototype.set_progress = function(t) {
    var e = Date.now();
    var a = t.stime.value - e;
    this.ctime = t.ctime.value - a;
    this.ftime = t.ftime.value - a;
    this.switch_progress_mode();
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (t.first_farmer != undefined) {
        this.message_tf.color = parseInt(t.first_farmer.value) == 1 ? 1346315 : 16711680;
        this.message_tf.text = parseInt(t.first_farmer.value) == 1 ? canvas.Translator.getText(436) : canvas.Translator.getText(437);
        this.setBackground(2)
    } else {
        this.message_tf.text = ""
    }
    this.frameHandler()
}
;
canvas.app.hunt.view.FarmWindow.prototype.frameHandler = function() {
    var t = Date.now();
    var e = canvas.app.hunt.model;
    this.progress.progress = (t - this.ctime) / (this.ftime - this.ctime);
    if (this.progress.progress >= 1) {
        canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
        e.farm.main_iteration()
    }
}
;
canvas.app.hunt.view.FarmWindow.prototype.show_message = function(t, e) {
    this.switch_finish_mode();
    this.setBackground();
    this.set_body_text(t, e)
}
;
canvas.app.hunt.view.FarmWindow.prototype.set_body_text = function(t, e) {
    this.body_tf.color = e;
    this.body_tf.text = t;
    this.body_tf.y = 42 - Math.round(this.body_tf.textHeight / 2)
}
;
canvas.app.hunt.view.FarmWindow.prototype.setSize = function(t, e) {
    canvas.app.manor.view.WindowManorBase.prototype.setSize.call(this, t, e);
    this._width = t;
    this._height = e;
    this.update()
}
;
canvas.app.hunt.view.FarmWindow.prototype.update = function() {
    if (this.exit_btn) {
        this.exit_btn.position.set(Math.round((this._width - this.exit_btn.width) * .5), this._height - 50)
    }
}
;
canvas.app.hunt.view.Field = function(t, e, a) {
    canvas.px.Container.call(this);
    var i = canvas.app.hunt.model;
    this.baseLnk = t;
    this.interactive = true;
    this.addChild(e);
    this.obj_cont = new canvas.px.Container;
    this.addChild(this.obj_cont);
    this.pers = new canvas.app.hunt.view.elements.MapPers;
    this.pers.position.set(Math.round(i.sizeX * .5), Math.round(i.sizeY * .5));
    this.addChild(this.pers);
    this.treasureSearch = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_lupa"));
    this.treasureLocator = new canvas.px.Container;
    this.treasureImage = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "treasure_chest"));
    this.treasureField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,16777215,80,20,"center");
    this.treasureField.position.set(-40, -40);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.treasureImage, this.treasureClickHandler, this)
}
;
canvas.app.hunt.view.Field.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.Field.prototype.treasureClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.TREASURE_COLLECT)
}
;
canvas.app.hunt.view.Field.prototype.setPos = function(t, e) {
    var a;
    if (t > 0)
        t = 0;
    if (e > 0)
        e = 0;
    var i = e;
    if (i != this.last_Y) {
        this.last_Y = i;
        a = -this.last_Y / this.baseLnk.fld_invisible_HE;
        this.baseLnk.scr_vert.current = this.baseLnk.scr_vert.max * a;
        canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this.baseLnk.scr_vert)
    }
    var s = t;
    if (s != this.last_X) {
        this.last_X = s;
        a = -this.last_X / this.baseLnk.fld_invisible_WI;
        this.baseLnk.scr_horz.current = this.baseLnk.scr_vert.max * a;
        canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this.baseLnk.scr_horz)
    }
}
;
canvas.app.hunt.view.Field.prototype.moveHandler = function(t) {
    var e;
    var a = this.pers.toGlobal(new canvas.px.Point(0,0));
    if (t.params.x >= a.x) {
        e = 180 + Math.atan((t.params.y - a.y) / (t.params.x - a.x)) * 180 / Math.PI
    } else {
        e = Math.atan((t.params.y - a.y) / (t.params.x - a.x)) * 180 / Math.PI
    }
    if (!isNaN(e)) {
        this.pers.rotation = canvas.Functions.degToRad(e - 45)
    }
}
;
canvas.app.hunt.view.Field.prototype.clear_obj_cont = function() {
    var t;
    while (this.obj_cont.numChildren > 0) {
        t = this.obj_cont.getChildAt(0);
        t.remove()
    }
}
;
canvas.app.hunt.view.Field.prototype.startTreasureSearch = function() {
    this.baseLnk.addChild(this.treasureSearch);
    this.treasureSearch.startDrag(new canvas.px.Point(20,20), null, canvas.app.CanvasHunt.App.renderer.plugins.interaction.mouse.global);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this)
}
;
canvas.app.hunt.view.Field.prototype.upHandler = function(t) {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this);
    this.treasureSearch.stopDrag();
    if (this.baseLnk.contains(this.treasureSearch))
        this.baseLnk.removeChild(this.treasureSearch);
    if (t.name != canvas.Event.STAGE_MOUSE_OUT) {
        var e = this.toLocal(new canvas.px.Point(t.params.x,t.params.y));
        canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.TREASURE_DIG, null, {
            x: Math.round(e.x),
            y: Math.round(e.y)
        })
    }
}
;
canvas.app.hunt.view.Field.prototype.updateTreasureLocator = function(t) {
    var e = canvas.app.hunt.model;
    if (this.treasureField.parent)
        this.treasureLocator.removeChild(this.treasureField);
    canvas.Functions.destroyChildren(this.treasureLocator);
    var a;
    var i = [16056320, 16087296, 16113920];
    switch (t) {
    case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_RED:
    case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_ORANGE:
    case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_YELLOW:
        a = new canvas.px.MovieClip(canvas.Config.effectsPath + "treasure" + t.toString());
        a.frameEvent = canvas.app.hunt.Event.ENTER_FRAME;
        a.loop = true;
        this.treasureField.text = canvas.Translator.getText(443 + t);
        this.treasureField.color = i[t - 1];
        break
    }
    if (a != null) {
        this.treasureLocator.addChild(a);
        if (e.treasureTextTips)
            this.treasureLocator.addChild(this.treasureField);
        if (!this.contains(this.treasureLocator))
            this.addChild(this.treasureLocator);
        this.treasureLocator.position.set(e.treasureLastPoint.x, e.treasureLastPoint.y)
    } else {
        if (this.contains(this.treasureLocator))
            this.removeChild(this.treasureLocator)
    }
}
;
canvas.app.hunt.view.Field.prototype.showTreasure = function(t) {
    var e = canvas.app.hunt.model;
    if (t == undefined)
        t = true;
    if (t) {
        if (!this.contains(this.treasureImage)) {
            this.addChild(this.treasureImage);
            canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
                target: this.treasureImage,
                params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(192)))
            })
        }
        this.treasureImage.position.set(e.treasureLastPoint.x, e.treasureLastPoint.y)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_REMOVE, null, {
            target: this.treasureImage
        });
        if (this.contains(this.treasureImage))
            this.removeChild(this.treasureImage)
    }
}
;
canvas.app.hunt.view.Field.prototype.check_position = function() {}
;
canvas.app.hunt.view.Field.prototype.updateVisibleObjects = function(t) {
    var e = canvas.app.hunt.model;
    var a;
    for (var i in e.Objects) {
        a = e.Objects[i];
        if (a.mc) {
            if (canvas.Functions.pointInRect(a.mc.position, t)) {
                if (!this.obj_cont.contains(a.mc))
                    this.obj_cont.addChild(a.mc);
                a.mc.locked = false
            } else {
                if (this.obj_cont.contains(a.mc))
                    this.obj_cont.removeChild(a.mc);
                a.mc.locked = true
            }
        }
    }
}
;
canvas.app.hunt.view.FieldObject = function(t, e, a) {
    canvas.px.Container.call(this);
    Object.defineProperty(this, "Bot", {
        get: function() {
            return this.curObj.type == "bot"
        }
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            if (this._locked == t)
                return;
            this._locked = t;
            this.updateLocked()
        }
    });
    var i = canvas.app.hunt.model;
    this.num = 0;
    this.col_hi = 16777215;
    this.clickTime = Date.now();
    this.baseLnk = t;
    this.rootLnk = e;
    this.curObj = a;
    this.position.set(parseInt(this.curObj.x), parseInt(this.curObj.y));
    this.mark = new canvas.px.Container;
    this.mark.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_mark2")));
    this.mark_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,0,18,19,"center");
    this.mark_tf.position.set(1, 3);
    this.mark.addChild(this.mark_tf);
    var s;
    var n;
    var r;
    var o = false;
    if (this.curObj.type == "bot") {
        r = "bot" + this.curObj.sk + "_sm";
        s = canvas.Config.huntBotsPath + r + "/" + r;
        n = i.PicPath + this.curObj.pic;
        this.obj_data_key = "sk_" + this.curObj.sk;
        this.obj_data_pic_key = "pic_" + this.curObj.pic;
        this.col_hi = i.getBotnameColor(this.curObj.agrlevel)
    } else if (this.curObj.type == "farm") {
        r = this.curObj.swf.split(".")[0];
        s = canvas.Config.huntResPath + r + "/" + r;
        n = i.FarmPicPath + this.curObj.pic;
        this.obj_data_key = "swf_" + this.curObj.swf;
        this.obj_data_pic_key = "pic_" + this.curObj.pic;
        this.col_hi = i.farm_conf[this.curObj.quality][0];
        if (this.curObj.swf == "fish_blue.swf" || this.curObj.swf == "fish_red.swf") {
            var l = "red";
            if (this.col_hi == 10027263)
                l = "violet";
            else if (this.col_hi == 13421772)
                l = "gray";
            else if (this.col_hi == 187)
                l = "blue";
            else if (this.col_hi == 47872)
                l = "green";
            s = canvas.Config.huntResPath + "fish/" + l + "/" + l;
            this.obj_data_key = "swf_fish_" + l;
            o = true
        }
    } else {
        return
    }
    var c;
    if (this.obj_data_key != null) {
        if (i.OBJECTS_DATA[this.obj_data_key] == null) {
            i.OBJECTS_DATA[this.obj_data_key] = new canvas.app.hunt.engine.ObjLoader(s,o)
        }
        if (i.OBJECTS_DATA[this.obj_data_key].ready) {
            this.complete_object()
        } else {
            canvas.EventManager.addEventListener(canvas.app.hunt.Event.COMPLETE_OBJECT, i.OBJECTS_DATA[this.obj_data_key], this.complete_object, this)
        }
    }
    this.rootLnk.obj_cont.addChild(this);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.COLOR_CHANGE, null, this.handlerColorChange);
    this.curObj.mc = this
}
;
canvas.app.hunt.view.FieldObject.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FieldObject.prototype.updateLocked = function() {
    if (this.mc) {
        this.mc.locked = this._locked;
        if (this.mc.mcChildsCache) {
            for (var t in this.mc.mcChildsCache) {
                this.mc.mcChildsCache[t].locked = this._locked
            }
        }
    }
    if (!this.locked && this.num)
        this.goFrame(this.num)
}
;
canvas.app.hunt.view.FieldObject.prototype.handlerColorChange = function() {
    var t = canvas.app.hunt.model;
    if (this.curObj.type == "bot") {
        var e = new canvas.utils.RGB(this.col_hi);
        switch (t.colorManager.colorIndex) {
        case 0:
            e.r = e.r + (e.r > 128 ? -t.colorManager.color : t.colorManager.color);
            break;
        case 1:
            e.g = e.g + (e.g > 128 ? -t.colorManager.color : t.colorManager.color);
            break;
        default:
            e.b = e.b + (e.b > 128 ? -t.colorManager.color : t.colorManager.color)
        }
        this.name_tf.color = e.toHex();
        this.name_tf.alpha = t.colorManager.alpha
    }
}
;
canvas.app.hunt.view.FieldObject.prototype.goFrame = function(t) {
    this.num = t;
    if (this.curObj.type == "bot") {
        this.mc.gotoAndStop(t);
        if (this.mc.mcChildsCache["mc" + t]) {
            this.mc.mcChildsCache["mc" + t].loop = true;
            this.mc.mcChildsCache["mc" + t].play();
            if (!this.mc.mcChildsCache["mc" + t].frameEvent) {
                this.mc.mcChildsCache["mc" + t].frameEvent = canvas.app.hunt.Event.ENTER_FRAME
            }
        }
    } else if (this.curObj.type == "farm") {
        if (this.mc.maxTotalFrames < 2) {
            this.mc.gotoAndStop(1)
        } else {
            this.mc.loop = true;
            this.mc.play();
            this.mc.stop = function() {}
        }
    }
}
;
canvas.app.hunt.view.FieldObject.prototype.complete_object = function() {
    var t = canvas.app.hunt.model;
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.COMPLETE_OBJECT, t.OBJECTS_DATA[this.obj_data_key], this.complete_object, this);
    this.mc = t.OBJECTS_DATA[this.obj_data_key].getMovie();
    this.updateLocked();
    this.goFrame(1);
    if (this.curObj.rndRotation) {
        this.mc.rotation = this.curObj.rndRotation
    } else {
        this.mc.rotation = this.curObj.rndRotation = canvas.Functions.degToRad(Math.random() * 360)
    }
    var e = 10;
    if (t.startRandom) {
        if (this.curObj.rndX && this.curObj.rndY) {
            this.mc.position.set(this.curObj.rndX, this.curObj.rndY)
        } else {
            while (e--) {
                var a = Math.PI * 2 * Math.random();
                var i = Math.sqrt(this.mc.width * this.mc.width / 4 + this.mc.height * this.mc.height / 4);
                this.mc.x = i * Math.cos(a);
                this.mc.y = i * Math.sin(a);
                if (t.mapData.testPoint(parseInt(this.curObj.x) + this.mc.x, parseInt(this.curObj.y) + this.mc.y, this.curObj.type == "bot" ? t.mapData.TYPE_BOT : t.mapData.getTypeByProf(parseInt(this.curObj.prof)))) {
                    break
                } else {
                    this.mc.position.set(0, 0)
                }
            }
            this.curObj.rndX = this.mc.x;
            this.curObj.rndY = this.mc.y
        }
        if (this.curObj.swf == "fish_blue.swf" || this.curObj.swf == "fish_red.swf") {
            this.mc.container.x = -27;
            this.mc.container.y = -27
        }
    }
    if (this.curObj.ghost == "1") {
        this.mc.container.filters = [canvas.Functions.getGlow(10, 3, 0, 16777215, .1), canvas.Functions.getAlpha(.4)]
    } else if (this.curObj.sk_half_moroc_light == "1") {
        this.mc.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 6737100, .1)];
        this.mc.alpha = .6
    } else if (this.curObj.sk_half_moroc_dark == "1") {
        this.mc.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 10066176, .1)];
        this.mc.alpha = .6
    }
    this.addChild(this.mc);
    this.mc.interactive = true;
    this.mc.buttonMode = true;
    this.mc.click = this.sensorClickHandler.bind(this);
    this.mc.hitArea = new canvas.px.Ellipse(0,0,Math.round(this.mc.width * .4),this.mc.height * .4);
    var s;
    var n;
    var r;
    s = Math.max(this.mc.width, this.mc.height, 55);
    n = Math.floor(s / 2);
    r = n + 12;
    this.circle = new canvas.app.hunt.view.elements.CircleBorder(Math.round(s * .3),Math.round(s * .06),this.col_hi);
    this.circle.x = Math.round(this.mc.x);
    this.circle.y = Math.round(this.mc.y);
    this.unFocus();
    this.addChild(this.circle);
    if (this.curObj.type == "bot") {
        this.name_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,16777215,200,20,"center");
        this.name_tf.text = this.curObj.name + "[" + this.curObj.level + "]";
        this.name_tf.color = this.col_hi;
        this.name_tf.x = this.name_tf.xBase = Math.round(this.mc.x + Math.floor(-this.name_tf._width / 2));
        this.name_tf.y = this.name_tf.yBase = Math.round(this.mc.y + n - 10);
        this.addChild(this.name_tf)
    }
    if (this.mark) {
        this.mark.position.set(this.circle.x, this.circle.y);
        this.addChild(this.mark)
    }
    if (this.curObj.type == "bot") {
        this.mark_tf.text = "!";
        if (this.curObj.fight_id == "0") {
            this.mark.visible = false
        }
    } else {
        this.update_mark_tf(this.curObj.farming)
    }
    this.handlerColorChange()
}
;
canvas.app.hunt.view.FieldObject.prototype.update_mark_tf = function(t) {
    if (t == "0") {
        this.mark.visible = false
    } else {
        this.mark_tf.text = String(Math.min(9, Math.max(0, parseInt(t))))
    }
}
;
canvas.app.hunt.view.FieldObject.prototype.sensorClickHandler = function(t) {
    if (this.baseLnk.scr_horz.wasDragged || this.baseLnk.scr_vert.wasDragged)
        return;
    canvas.app.hunt.model.farm.fieldClick(this.mc);
    this.select(1);
    if (Date.now() - this.clickTime < 500) {
        this.sensorDoubleClickHandler()
    }
    this.clickTime = Date.now()
}
;
canvas.app.hunt.view.FieldObject.prototype.select = function(t) {
    this.curObj["t"] = t;
    this.baseLnk.select_obj(this.curObj);
    this.rootLnk.obj_cont.setChildIndex(this, this.rootLnk.obj_cont.numChildren - 1)
}
;
canvas.app.hunt.view.FieldObject.prototype.sensorDoubleClickHandler = function() {
    if (this.curObj.type == "bot") {
        this.baseLnk.apply_control_btn(3, 2)
    }
    if (this.curObj.type == "farm") {
        this.baseLnk.apply_control_btn(0, 2)
    }
}
;
canvas.app.hunt.view.FieldObject.prototype.inFocus = function() {
    this.circle.visible = true
}
;
canvas.app.hunt.view.FieldObject.prototype.unFocus = function() {
    this.circle.visible = false
}
;
canvas.app.hunt.view.FieldObject.prototype.moving = function(t, e) {
    var a = canvas.app.hunt.model;
    if (this.curObj.type == "bot") {
        var i = this.x - t;
        var s = this.y - e;
        var n = Math.atan2(s, i);
        var r = Math.sqrt(i * i + s * s);
        var o = n + Math.PI;
        this.qi = a.reqInterval * 25;
        this.qx = Math.cos(o) * (r / this.qi);
        this.qy = Math.sin(o) * (r / this.qi);
        this.mc.rotation = canvas.Functions.degToRad(n * (180 / Math.PI) + 180);
        this.goFrame(2);
        canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this)
    } else if (this.curObj.type == "farm") {
        this.x = t;
        this.y = e;
        this.mc.rotation = canvas.Functions.degToRad(Math.random() * 360)
    } else {}
}
;
canvas.app.hunt.view.FieldObject.prototype.frameMovingHandler = function() {
    if (this.qi > 0) {
        this.x += this.qx;
        this.y += this.qy;
        this.name_tf.position.set(this.name_tf.xBase - (this.x - Math.round(this.x)), this.name_tf.yBase - (this.y - Math.round(this.y)));
        this.qi--
    } else {
        this.goFrame(1);
        canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this)
    }
}
;
canvas.app.hunt.view.FieldObject.prototype.getHistoryId = function() {
    return this.curObj["type"] == "bot" ? this.curObj["sk"] : this.curObj["artikul_id"]
}
;
canvas.app.hunt.view.FieldObject.prototype.remove = function() {
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.COLOR_CHANGE, null, this.handlerColorChange);
    this.rootLnk.obj_cont.removeChild(this);
    delete this.curObj.mc;
    canvas.Functions.destroyChildren(this)
}
;
canvas.app.hunt.view.FilterPanel = function() {
    canvas.px.Container.call(this);
    this.arrows = new Array;
    for (var t = 0; t < 5; t++) {
        this.createButton(t);
        this.createArrow(t)
    }
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(447)))
    });
    this.interactive = true;
    this.update();
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.hunt.view.FilterPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FilterPanel.prototype.createButton = function(t) {
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "filter_" + t));
    e.name = "filter" + t;
    e.x = t * 18;
    this.addChild(e)
}
;
canvas.app.hunt.view.FilterPanel.prototype.createArrow = function(t) {
    var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_arrow"));
    e.position.set(t * 18 + 2, 15);
    this.addChild(e);
    this.arrows.push(e)
}
;
canvas.app.hunt.view.FilterPanel.prototype.clickHandler = function(t) {
    var e = canvas.app.hunt.model;
    if (t.target.parent.name.substr(0, 6) == "filter") {
        var a = parseInt(t.target.parent.name.substr(6));
        if (canvas.Functions.testFlag(e.filterValue, e.FILTER_VALUES[a])) {
            e.filterValue &= ~e.FILTER_VALUES[a]
        } else {
            e.filterValue |= e.FILTER_VALUES[a]
        }
        this.update()
    }
}
;
canvas.app.hunt.view.FilterPanel.prototype.update = function() {
    var t = canvas.app.hunt.model;
    for (var e = 0; e < 5; e++) {
        this.arrows[e].visible = canvas.Functions.testFlag(t.filterValue, t.FILTER_VALUES[e])
    }
}
;
canvas.app.hunt.view.FrameBorT = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.WIDTH = 92;
    this.HEIGHT = 40;
    this._lastW = 0;
    this._lastH = 0;
    this.shiftX = 18;
    this.heightKoeff = 0;
    var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bottom_decor"));
    e.position.set(20 + this.shiftX, 19);
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top_decor"));
    a.position.set(5 + this.shiftX, 5);
    this.container = new canvas.px.Sprite(canvas.ResourceLoader.getImage("map", "distortMap"));
    this.container.position.set(72, 9);
    this.addChild(e);
    this.addChild(this.container);
    this.addChild(a);
    this.selector = new canvas.px.Graphics;
    this.addChild(this.selector);
    this.container.interactive = true;
    this.container.buttonMode = true;
    this.container.mousedown = this.downHandler.bind(this);
    this.updatePos(0, 0)
}
;
canvas.app.hunt.view.FrameBorT.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FrameBorT.prototype.update = function(t, e) {
    var a = canvas.app.hunt.model;
    this.heightKoeff = this.selector.y / this.HEIGHT;
    this._trapezeSize = e / 60;
    var i = this.HEIGHT * (e / a.sizeY);
    var s = this.WIDTH * (t / a.sizeX) + this.heightKoeff * 50;
    this.selector.clear();
    this.selector.lineStyle(1, 16375860);
    this.selector.moveTo(0, 0);
    this.selector.lineTo(s, 0);
    this.selector.lineTo(s + this._trapezeSize, i);
    this.selector.lineTo(-this._trapezeSize, i);
    this.selector.lineTo(0, 0);
    this._lastW = t;
    this._lastH = e
}
;
canvas.app.hunt.view.FrameBorT.prototype.updatePos = function(t, e) {
    var a = canvas.app.hunt.model;
    this.selector.y = 9 - this.HEIGHT * (e / a.sizeY);
    this.heightKoeff = this.selector.y / this.HEIGHT;
    this.selector.x = 87 - this.heightKoeff * 25 + this.shiftX - this.WIDTH * (t / a.sizeX);
    this.update(this._lastW, this._lastH)
}
;
canvas.app.hunt.view.FrameBorT.prototype.downHandler = function(t) {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this);
    this.moveHandler({
        params: {
            mouseData: t
        }
    })
}
;
canvas.app.hunt.view.FrameBorT.prototype.upHandler = function() {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this)
}
;
canvas.app.hunt.view.FrameBorT.prototype.moveHandler = function(t) {
    var e;
    if (t.params.mouseData.data) {
        e = t.params.mouseData.data.getLocalPosition(this.container)
    } else {
        e = this.container.toGlobal(new canvas.px.Point(0,0));
        e.x = t.params.x - e.x;
        e.y = t.params.y - e.y
    }
    e.x += 46;
    e.y += 12;
    this._xms = Math.round(e.x - this.selector.width * .5) + this._trapezeSize;
    this._yms = Math.round(e.y - this.selector.height * .5);
    this.updateFocus()
}
;
canvas.app.hunt.view.FrameBorT.prototype.updateFocus = function() {
    var t = canvas.app.hunt.model;
    this.baseLnk.fld_current.setPos(Math.round((87 - this.heightKoeff * 25 - this._xms) / this.WIDTH * t.sizeX), Math.round((9 - this._yms) / this.HEIGHT * t.sizeY))
}
;
canvas.app.hunt.view.FrameCornerTL = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_corner_back")));
    e.y = 13;
    this.addChild(e);
    this.info = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,5255716,170,18,"center");
    this.info.position.set(52, 36);
    this.addChild(this.info);
    this.button = new canvas.ui.SimpleButton(canvas.px.TextureEmpty);
    this.button.position.set(3, 12);
    this.hint = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16770730,170,18,"center");
    this.hint.position.set(-60, 62);
    this.hint.alpha = 0;
    this.addChild(this.hint);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.outHandler, this);
    this.deactivate()
}
;
canvas.app.hunt.view.FrameCornerTL.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FrameCornerTL.prototype.deactivate = function() {
    if (this.contains(this.button))
        this.removeChild(this.button);
    this.info.text = canvas.Translator.getText(417);
    this.id = -1;
    this.outHandler()
}
;
canvas.app.hunt.view.FrameCornerTL.prototype.activate = function(t, e) {
    if (!this.contains(this.button))
        this.addChild(this.button);
    switch (t) {
    case 0:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_use");
        this.hint.text = this.info.text = e ? e : canvas.Translator.getText(440);
        break;
    case 1:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_cut");
        this.hint.text = this.info.text = e ? e : canvas.Translator.getText(420);
        break;
    case 2:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_mine");
        this.hint.text = this.info.text = e ? e : canvas.Translator.getText(419);
        break;
    case 3:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_attack");
        this.hint.text = this.info.text = e ? e : canvas.Translator.getText(422);
        break;
    case 4:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_fish");
        this.hint.text = this.info.text = e ? e : canvas.Translator.getText(421);
        break;
    default:
        this.button.baseTexture = this.button.sprite.texture = canvas.px.TextureEmpty;
        this.hint.text = this.info.text = ""
    }
    this.id = t
}
;
canvas.app.hunt.view.FrameCornerTL.prototype.overHandler = function() {
    this.direction = true;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.hunt.view.FrameCornerTL.prototype.outHandler = function() {
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.hunt.view.FrameCornerTL.prototype.frameHandler = function() {
    if (this.direction) {
        this.hint.alpha += .2;
        if (this.hint.alpha >= 1) {
            this.hint.alpha = 1;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    } else {
        this.hint.alpha -= .2;
        if (this.hint.alpha <= 0) {
            this.hint.alpha = 0;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    }
}
;
canvas.app.hunt.view.FrameCornerTL.prototype.clickHandler = function() {
    this.baseLnk.apply_control_btn(this.id, 1)
}
;
canvas.app.hunt.view.FrameCornerTR = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.red = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_corner_back_red"));
    this.red.position.set(212, 5);
    this.addChild(this.red);
    this.pic_mask = new canvas.px.Graphics;
    this.pic_mask.beginFill(65535, 1);
    this.pic_mask.drawCircle(239, 32, 26);
    this.addChild(this.pic_mask);
    this.pic_btn = new canvas.ui.SimpleButton(canvas.px.TextureEmpty);
    this.pic_btn.position.set(213, 6);
    this.pic = new canvas.ui.Image;
    this.pic.mask = this.pic_mask;
    this.pic_btn.visible = false;
    this.pic_btn.sprite.addChild(this.pic);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.pic_btn, this.picClickhandler, this);
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_corner_back"));
    this.bg.position.set(63, -6);
    this.addChild(this.bg);
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "right_corner_back_button"));
    this.button.position.set(this.bg.x + this.bg.width - 25, this.bg.y + 8);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.mouseOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.mouseOutHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.exitClickHandler, this);
    this.addChild(this.button);
    this.infoBack = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "right_corner_info_back"),12,0,0,0);
    this.infoBack.width = 160;
    this.infoBack.position.set(14, 25);
    this.addChild(this.infoBack);
    this.hint = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16770730,120,18,"center");
    this.hint.position.set(this.button.x - 40, this.button.y + this.button.height);
    this.hint.text = canvas.Translator.getText(152);
    this.hint.alpha = 0;
    this.name_tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD,canvas.Const.FONT_TAHOMA_10_BOLD,5255716,158,18,"center");
    this.name_tf.position.set(22, 27);
    this.addChild(this.name_tf);
    this.infoWord = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,14130262,148,17,"center");
    this.infoWord.position.set(72, 11);
    this.infoWord.text = canvas.Translator.getText(243);
    this.addChild(this.infoWord);
    this.info_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,16777215,148,17,"center");
    this.info_tf.position.set(72, 42);
    this.addChild(this.info_tf);
    this.level_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,0,27,18,"center");
    this.level_tf.position.set(183, 27);
    this.addChild(this.level_tf);
    this.update_obj_info(null);
    this.addChild(this.pic_btn);
    this.addChild(this.hint);
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.name_tf, this.picClickhandler, this)
}
;
canvas.app.hunt.view.FrameCornerTR.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FrameCornerTR.prototype.mouseOverHandler = function() {
    this.direction = true;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.hunt.view.FrameCornerTR.prototype.mouseOutHandler = function() {
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.hunt.view.FrameCornerTR.prototype.exitClickHandler = function() {
    canvas.Functions.navigateToURL("area.php?exit=1", "main")
}
;
canvas.app.hunt.view.FrameCornerTR.prototype.picClickhandler = function() {
    if (this.curObj.type == "bot") {
        showBotInfo(this.curObj.id)
    } else if (this.curObj.type == "farm") {
        showArtifactInfo(false, this.curObj.artikul_id)
    }
}
;
canvas.app.hunt.view.FrameCornerTR.prototype.frameHandler = function() {
    if (this.direction) {
        this.hint.alpha += .2;
        if (this.hint.alpha >= 1) {
            this.hint.alpha = 1;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    } else {
        this.hint.alpha -= .2;
        if (this.hint.alpha <= 0) {
            this.hint.alpha = 0;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    }
}
;
canvas.app.hunt.view.FrameCornerTR.prototype.update_obj_info = function(t) {
    var e = canvas.app.hunt.model;
    this.curObj = t;
    if (this.curObj == null) {
        this.name_tf.text = canvas.Translator.getText(418);
        this.info_tf.text = "";
        this.level_tf.text = "";
        this.pic_btn.visible = false;
        return
    }
    this.pic_btn.visible = true;
    if (this.curObj.name.length > 24) {
        this.name_tf.text = this.curObj.name.substr(0, 22) + "..."
    } else {
        this.name_tf.text = this.curObj.name
    }
    this.name_tf.text += " <a href='event:info'><img src='info_button_0' atlas='ui' yOffset='1'/></a>";
    var a;
    if (this.curObj.type == "bot") {
        var i = parseInt(this.curObj.agrlevel);
        this.info_tf.color = e.getBotnameColor(i);
        this.info_tf.text = e.getAgrlevelText(i);
        this.level_tf.text = this.curObj.level;
        a = e.PicPath + this.curObj.pic
    } else if (this.curObj.type == "farm") {
        var s = e.farm_conf[this.curObj.quality];
        this.info_tf.color = s[0];
        this.info_tf.text = s[1];
        this.level_tf.text = this.curObj.skill;
        a = e.FarmPicPath + this.curObj.pic
    } else {}
    if (a) {
        this.pic.setImage(a)
    }
}
;
canvas.app.hunt.view.ResFilterPanel = function() {
    canvas.px.Container.call(this);
    this.settingsButtonContainer = new canvas.px.Container;
    this.settingsButtonContainer.x = 28;
    this.settingsButtonContainer.y = 3;
    this.addChild(this.settingsButtonContainer);
    this.settingsButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "icon_eye"));
    this.settingsButtonContainer.addChild(this.settingsButton);
    var t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "res_filter_back"));
    this.addChild(t);
    this.filterWindow = new canvas.app.hunt.view.ResFilterWindow(600,300,canvas.Translator.getText(449));
    this.clearButtonContainer = new canvas.px.Container;
    this.clearButtonContainer.x = 0;
    this.clearButtonContainer.y = 2;
    this.addChild(this.clearButtonContainer);
    this.clearButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_button"));
    this.clearButtonContainer.addChild(this.clearButton);
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
        target: this.settingsButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(448)))
    });
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
        target: this.clearButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(279)))
    });
    this.interactive = true;
    this.update();
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.hunt.view.ResFilterPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.ResFilterPanel.prototype.clickHandler = function(t) {
    var e = canvas.app.hunt.model;
    if (canvas.Functions.findParent(this.settingsButton, t.target)) {
        this.filterWindow.update();
        this.filterWindow.close();
        this.filterWindow.open(false, true, true, true)
    } else if (canvas.Functions.findParent(this.clearButton, t.target)) {
        e.clearFilterData();
        this.filterWindow.update();
        this.update()
    }
}
;
canvas.app.hunt.view.ResFilterPanel.prototype.update = function() {
    var t = canvas.app.hunt.model;
    var e = t.haveFilterData();
    this.settingsButtonContainer.filters = this.clearButtonContainer.filters = e ? [] : [canvas.Functions.getBlackAndWhite()];
    this.clearButton.enabled = e
}
;
canvas.app.hunt.view.ResFilterWindow = function(t, e, a) {
    canvas.app.view.MainWindow.call(this, t, e, a);
    var i = 25;
    var s = 20;
    this.doneButton = this.addChild(new canvas.app.view.MainButton);
    this.doneButton.setSize(180);
    this.doneButton.setTitle(canvas.Translator.getText(435));
    this.doneButton.position.set(Math.round((t - this.doneButton.width) * .5), e - this.doneButton.height - i);
    this.doneButton.click = this.doneClickHandler.bind(this);
    var n = Math.round((t - i * 3) * .5);
    var r = e - s - i * 3 - this.doneButton.height + s;
    this.botsList = this.addChild(new canvas.app.hunt.view.elements.ResFilterList(n,r,canvas.Translator.getText(3013)));
    this.botsList.x = i;
    this.botsList.y = i + s;
    this.resList = this.addChild(new canvas.app.hunt.view.elements.ResFilterList(n,r,canvas.Translator.getText(3012)));
    this.resList.x = i * 2 + n;
    this.resList.y = i + s;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.FILTER_CHANGE, null, this.handlerFilterChange, this)
}
;
canvas.app.hunt.view.ResFilterWindow.prototype = Object.create(canvas.app.view.MainWindow.prototype);
canvas.app.hunt.view.ResFilterWindow.prototype.update = function() {
    var t = canvas.app.hunt.model;
    this.botsList.update(t.filterBots);
    this.resList.update(t.filterFarm)
}
;
canvas.app.hunt.view.ResFilterWindow.prototype.doneClickHandler = function(t) {
    this.close()
}
;
canvas.app.hunt.view.ScrollH = function(t) {
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_left"));
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_right"));
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_drag"),[3, 0, 3, 0]);
    i.setSize(40, 0);
    this.drag = i;
    var s = new canvas.px.Mask(16,16,14401949,1);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, e, a, s, i, t, true, false);
    this.padding = 15;
    this.step = 50;
    this.max = 600
}
;
canvas.app.hunt.view.ScrollH.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.hunt.view.ScrollH.prototype.set_full_width = function(t) {
    this.full = t
}
;
canvas.app.hunt.view.ScrollH.prototype.set_visible_width = function(t) {
    if (this.he == t) {
        return
    }
    this.he = t;
    this.setSize(this.he, 16);
    this.max = this.full - this.he;
    var e = this.he / this.full;
    this.visible = e < 1;
    this.drag.setSize(Math.round((this.he - (16 + 16)) * e));
    this.current = this.current
}
;
canvas.app.hunt.view.ScrollV = function(t, e) {
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_up"));
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_down"));
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_drag"),[0, 3, 0, 3]);
    s.setSize(0, 40);
    this.drag = s;
    var n = new canvas.px.Mask(16,16,14401949,1);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, a, i, n, s, t, true, true, undefined, undefined, e);
    this.padding = 15;
    this.step = 50;
    this.max = 600
}
;
canvas.app.hunt.view.ScrollV.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.hunt.view.ScrollV.prototype.set_full_height = function(t) {
    this.full = t
}
;
canvas.app.hunt.view.ScrollV.prototype.set_visible_height = function(t) {
    if (this.he == t) {
        return
    }
    this.he = t;
    this.setSize(16, this.he);
    this.max = this.full - this.he;
    var e = this.he / this.full;
    this.visible = e < 1;
    this.drag.setSize(0, Math.round((this.he - (16 + 16)) * e));
    this.current = this.current
}
;
canvas.app.hunt.view.TreasureControl = function() {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "icon_lupa_back"));
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16705718,46,20,"center");
    this.addChild(this.timeField);
    this.timeField.y = 30;
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(438)))
    })
}
;
canvas.app.hunt.view.TreasureControl.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.hunt.view.TreasureControl.prototype.update = function() {
    var t = canvas.app.hunt.model;
    this.timeField.text = canvas.Functions.formatDate(t.treasureFinishTime * 1e3 - Date.now(), "00:00", 0, true)
}
;
canvas.app.hunt.view.WinCaptcha = function(t) {
    canvas.app.manor.view.WindowManorBase.call(this, 628, 333, canvas.Translator.getText(431));
    this.baseLnk = t;
    this.doneButton = new canvas.app.view.MainButton;
    this.addChild(this.doneButton);
    this.doneButton.setSize(150);
    this.doneButton.setTitle(canvas.Translator.getText(435));
    this.doneButton.x = 35;
    this.descriptionField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7092268,166,224,"left");
    this.descriptionField.interactive = false;
    this.descriptionField.position.set(31, 80);
    this.addChild(this.descriptionField);
    this.captcha = new canvas.app.hunt.view.elements.Captcha;
    this.addChild(this.captcha);
    this.captcha.position.set(212, 42);
    this.aLoader = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.doneButton, this.doneClickHandler, this)
}
;
canvas.app.hunt.view.WinCaptcha.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.hunt.view.WinCaptcha.prototype.doneClickHandler = function(t) {
    var e = canvas.app.hunt.model;
    var a = e.reqURL + "?mode=farm&action=minigame_check&sequence=" + this.captcha.getResultString();
    this.aLoader.load(a);
    canvas.utils.WindowsManager.instance.closeWindow(this)
}
;
canvas.app.hunt.view.WinCaptcha.prototype.show = function(t) {
    var e = canvas.app.hunt.model;
    this._isActive = true;
    if (this.timer)
        clearInterval(this.timer);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    var a = e.reqURL + "?mode=farm&action=minigame_get";
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this);
    var i = canvas.ResourceLoader.getTexture("captcha");
    if (i) {
        i.destroy(true);
        canvas.ResourceLoader.remove("captcha")
    }
    canvas.ResourceLoader.add([["captcha", a, {
        xhrType: canvas.px.ResponseType.BLOB,
        loadType: canvas.px.LoadType.IMAGE
    }]]);
    this.timerHandler();
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t)
}
;
canvas.app.hunt.view.WinCaptcha.prototype.hide = function(t) {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this);
    this._isActive = false;
    if (this.timer)
        clearInterval(this.timer);
    this.captcha.clear();
    this.baseLnk.field_unlock();
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
;
canvas.app.hunt.view.WinCaptcha.prototype.handlerImageLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this);
    this.initCaptcha()
}
;
canvas.app.hunt.view.WinCaptcha.prototype.initCaptcha = function() {
    var t;
    var e = new Array;
    var a;
    var i;
    if (this.images) {
        for (var s = 0; s < this.images.length; s++) {
            this.images[s].texture.destroy(true)
        }
    }
    this.images = new Array;
    for (var n = 0; n < canvas.app.hunt.Const.CAPTCHA_HEIGHT; n++) {
        for (var r = 0; r < canvas.app.hunt.Const.CAPTCHA_WIDTH; r++) {
            i = new canvas.px.Texture(canvas.ResourceLoader.getTexture("captcha"),new canvas.px.Rectangle(r * canvas.app.hunt.Const.CAPTCHA_CELL_SIZE,n * canvas.app.hunt.Const.CAPTCHA_CELL_SIZE,canvas.app.hunt.Const.CAPTCHA_CELL_SIZE,canvas.app.hunt.Const.CAPTCHA_CELL_SIZE));
            t = new canvas.px.Sprite(i);
            this.images.push(t);
            t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "captcha_cell")))
        }
    }
    this.captcha.init(this.images, canvas.app.hunt.Const.CAPTCHA_WIDTH, canvas.app.hunt.Const.CAPTCHA_HEIGHT, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE)
}
;
canvas.app.hunt.view.WinCaptcha.prototype.updateTime = function() {
    var t = 0;
    var e = canvas.app.hunt.model;
    if (e.captchaFinishTime > 0) {
        t = Math.round((e.captchaFinishTime - Date.now()) * .001)
    }
    if (t < 1) {
        canvas.utils.WindowsManager.instance.closeWindow(this);
        return
    }
    this.descriptionField.text = canvas.Translator.getText(432) + "<br/><br/>" + canvas.Translator.getText(433) + ": <b>" + t + "</b> " + canvas.Translator.getText(434);
    this.doneButton.y = this.descriptionField.y + this.descriptionField.textHeight + 20
}
;
canvas.app.hunt.view.WinCaptcha.prototype.timerHandler = function() {
    this.updateTime()
}
;
canvas.app.hunt.view.WinCaptcha.prototype.completeHandler = function() {
    var t = (new DOMParser).parseFromString(this.aLoader.request.responseText, "text/xml");
    if (t.firstChild.attributes.msg) {
        this.baseLnk.popup.show_message(t.firstChild.attributes.msg.value, 16711680)
    }
}
;
canvas.app.hunt.view.WinCaptcha.prototype.errorHandler = function() {}
;
canvas.app.hunt.view.elements.AwardMsg = function(t, e) {
    canvas.px.Container.call(this);
    this.msg = t;
    this.url = e;
    this.m_awardTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,16705718,500,20,"center","top",0,0);
    this.m_awardCnt = new canvas.px.Graphics;
    this.m_awardTf.text = "<b>" + t + "</b>";
    this.m_awardTf.y = 2;
    this.m_awardCnt.beginFill(1118481, .6);
    this.m_awardCnt.drawRoundedRect(Math.round((this.m_awardTf._width - this.m_awardTf.textWidth) * .5) - 11, 0, this.m_awardTf.textWidth + 20, this.m_awardTf._height - 2, 6);
    this.m_awardCnt.endFill();
    this.addChild(this.m_awardCnt);
    this.addChild(this.m_awardTf);
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.awardClick.bind(this)
}
;
canvas.app.hunt.view.elements.AwardMsg.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.AwardMsg.prototype.awardClick = function() {
    if (this.url) {
        canvas.Functions.navigateToURL(this.url, "_blank");
        canvas.Functions.destroyChildren(this);
        this.click = null
    }
}
;
canvas.app.hunt.view.elements.BrilliantMsg = function(t, e) {
    canvas.px.Container.call(this);
    this.m_brContainer = new canvas.px.Container;
    this.addChild(this.m_brContainer);
    this.msg = t;
    this.url = e;
    this.m_brilliantTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,16705718,400,20,"center");
    this.m_brilliantTf.interactive = false;
    this.unlinkBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_ico"));
    this.m_brilliantTf.text = "<b>" + this.msg + " <img yOffset='6' src='" + canvas.app.location.Const.BRILLIANT_IMAGE_PATH + "'/></b>";
    this.unlinkBtn.position.set(Math.round((this.m_brilliantTf._width - this.m_brilliantTf.textWidth) * .5) + this.m_brilliantTf.textWidth + 0, 3);
    this.m_brBg = new canvas.px.Graphics;
    this.m_brBg.beginFill(1118481, .6);
    this.m_brBg.drawRoundedRect(Math.round((this.m_brilliantTf._width - this.m_brilliantTf.textWidth) * .5) - 11, 0, this.m_brilliantTf.textWidth + 30, this.m_brilliantTf._height, 6);
    this.m_brBg.endFill();
    this.m_brContainer.addChildAt(this.m_brBg, 0);
    this.m_brBg.buttonMode = true;
    this.m_brBg.interactive = true;
    this.m_brContainer.addChild(this.m_brilliantTf);
    this.m_brContainer.addChild(this.unlinkBtn);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this);
    this._width = 400;
    this.m_brBg.click = this.brClick.bind(this)
}
;
canvas.app.hunt.view.elements.BrilliantMsg.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.BrilliantMsg.prototype.onCloseBrillContainer = function() {
    canvas.Functions.destroyChildren(this);
    this.m_brBg.click = null;
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this)
}
;
canvas.app.hunt.view.elements.BrilliantMsg.prototype.brClick = function() {
    if (this.url) {
        canvas.Functions.navigateToURL(this.url, "_blank")
    }
}
;
canvas.app.hunt.view.elements.Captcha = function() {
    canvas.px.Container.call(this);
    this._dragIndex = -1;
    this.mousedown = this.downHandler.bind(this);
    this.interactive = true
}
;
canvas.app.hunt.view.elements.Captcha.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.Captcha.prototype.init = function(t, e, a, i, s) {
    if (e == undefined)
        e = 3;
    if (a == undefined)
        e = 2;
    if (i == undefined)
        i = 10;
    if (s == undefined)
        s = 10;
    var n;
    var r;
    var o = 0;
    this.removeChildren();
    this._images = t;
    this._sizeX = e;
    this._sizeY = a;
    this._w = i;
    this._h = s;
    for (n = 0; n < this._sizeY; n++) {
        for (r = 0; r < this._sizeX; r++) {
            if (this._images[o] != undefined) {
                this.addChild(this._images[o]);
                this._images[o].name = o.toString();
                this._images[o].interactive = true;
                this._images[o].buttonMode = true;
                this._images[o].y = n * this._w;
                this._images[o].x = r * this._h
            }
            o++
        }
    }
}
;
canvas.app.hunt.view.elements.Captcha.prototype.getResultString = function() {
    var t;
    var e = this._images.length;
    var a;
    var i = "";
    for (a = 0; a < e; a++) {
        t = this._images[a];
        i += (i == "" ? "" : ",") + t.name
    }
    return i
}
;
canvas.app.hunt.view.elements.Captcha.prototype.downHandler = function(t) {
    var e = t.target;
    var a = this._images.indexOf(t.target);
    if (e != null && a >= 0) {
        var i = e.toLocal(new canvas.px.Point(t.data.global.x,t.data.global.y));
        this._dragIndex = a;
        e.startDrag(i, new canvas.px.Rectangle(0,0,this._w * (this._sizeX - 1),this._h * (this._sizeY - 1)));
        e.interactive = false;
        this.setChildIndex(e, this.numChildren - 1);
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
        this.mouseup = this.upHandler.bind(this)
    }
}
;
canvas.app.hunt.view.elements.Captcha.prototype.upHandler = function(t) {
    var e;
    var a;
    var i;
    var s = -1;
    if (t != null)
        s = this._images.indexOf(t.target);
    e = this._images[this._dragIndex];
    if (s >= 0 && s != this._dragIndex) {
        a = this._images[s];
        this._images[s] = e;
        this._images[this._dragIndex] = a
    }
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    this.mouseup = null;
    if (e != null) {
        e.interactive = true;
        e.stopDrag();
        this._dragIndex = -1
    }
    this.updateImages()
}
;
canvas.app.hunt.view.elements.Captcha.prototype.updateImages = function() {
    var t;
    var e;
    var a = 0;
    for (t = 0; t < this._sizeY; t++) {
        for (e = 0; e < this._sizeX; e++) {
            if (this._images[a] != undefined) {
                if (this._dragIndex != a) {
                    this._images[a].y = t * this._w;
                    this._images[a].x = e * this._h
                }
            }
            a++
        }
    }
}
;
canvas.app.hunt.view.elements.Captcha.prototype.clear = function() {
    if (this._images != null)
        this.upHandler(null);
    this.removeChildren()
}
;
canvas.app.hunt.view.elements.CircleBorder = function(t, e, a, i, s) {
    canvas.px.Graphics.call(this);
    if (t == undefined)
        t = 20;
    if (e == undefined)
        e = 4;
    if (a == undefined)
        a = 16711680;
    if (i == undefined)
        i = 1;
    if (s == undefined)
        s = true;
    if (s) {
        this.lineStyle(e, 0, i);
        this.drawCircle(0, 2, t)
    }
    this.lineStyle(e, a, i);
    this.drawCircle(0, 0, t);
    var n = new canvas.px.Graphics;
    n.lineStyle(e, a, i);
    n.drawCircle(0, 0, t);
    this.addChild(n);
    this.gradient = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "gradient_circle"));
    this.addChild(this.gradient);
    this.gradient.width = this.gradient.height = Math.round(t * 2.3);
    this.gradient.position.set(-Math.round(this.gradient.width * .5), -Math.round(this.gradient.height * .5));
    this.gradient.mask = n
}
;
canvas.app.hunt.view.elements.CircleBorder.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.hunt.view.elements.MapPers = function() {
    canvas.px.Container.call(this);
    this.bmp_circle = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_map_circle"));
    this.bmp_player = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_map_player"));
    this.bmp_circle.position.set(-Math.floor(this.bmp_circle.width / 2), -Math.floor(this.bmp_circle.height / 2));
    this.bmp_player.position.set(-Math.floor(this.bmp_player.width / 2), -Math.floor(this.bmp_player.height / 2));
    this.circle = new canvas.px.Container;
    this.circle.addChild(this.bmp_circle);
    this.addChild(this.circle);
    this.addChild(this.bmp_player);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.hunt.view.elements.MapPers.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.MapPers.prototype.frameHandler = function() {
    this.circle.rotation += 1
}
;
canvas.app.hunt.view.elements.ResFilterList = function(t, e, a) {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.RoundRect(16772788,1,t,e,5,5,false,true,12029447,1));
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,12029447,t - 20,20,"center");
    this.title.x = 10;
    this.title.y = 10;
    this.title.text = a;
    this.addChild(this.title);
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1);
    this.addChild(this.list);
    this.list.position.set(10, 25);
    this.list.paddingV = 0;
    this.list.setSize(t - 20, e - 30);
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var s = new canvas.px.Container;
    var n = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5]);
    var r = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    r.scale.y = -1;
    r.position.y = -r.height + 2;
    s.addChild(r);
    n.setSize(21, 40);
    this.drag = n;
    var o = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,i,s,new canvas.px.Mask(21,100),n,this,false,true,true);
    o.padding = 13;
    o.step = 30;
    o.setSize(12);
    this.list.scroll = o;
    this.w = t;
    this.interactive = true
}
;
canvas.app.hunt.view.elements.ResFilterList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.ResFilterList.prototype.update = function(t) {
    var e = this.list.scroll ? this.list.scroll.current : 0;
    this.list.clear();
    for (var a in t) {
        if (!t[a].name)
            continue;
        this.list.add(new canvas.app.hunt.view.elements.ResFilterListRenderer(this.w - 40,24,t[a]), false)
    }
    this.list.update();
    if (this.list.scroll && e > 0) {
        this.list.scroll.current = e;
        this.list.scrollHandler(null)
    }
}
;
canvas.app.hunt.view.elements.ResFilterListRenderer = function(t, e, a) {
    canvas.ui.ListRenderer.call(this, a);
    this.click = null;
    this.setSize(t, e);
    if (this.data) {
        var i = this.data.quality == undefined ? 12029447 : canvas.data.ItemPrototypeData.getColorByQuality(this.data.quality);
        this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,i,t - 30,10,"left");
        this.title.x = 0;
        this.title.y = 3;
        this.title.text = (this.data.name.length > 22 ? this.data.name.substr(0, 22) + "..." : this.data.name) + (this.data.level ? " [" + this.data.level + "]" : "");
        this.addChild(this.title);
        this.checkBox = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "checker_back"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker_front"))));
        this.checkBox.x = t - this.checkBox.width;
        this.checkBox.checked = this.data.checked
    }
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.checkBox, this.checkClickHandler, this)
}
;
canvas.app.hunt.view.elements.ResFilterListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.hunt.view.elements.ResFilterListRenderer.prototype.checkClickHandler = function() {
    if (this.data && this.checkBox.checked != this.data.checked) {
        this.data.checked = this.checkBox.checked;
        canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.FILTER_CHANGE)
    }
}
;
canvas.app.inst.Event = {
    ENTER_FRAME: "Inst.ENTER_FRAME",
    HINT_ADD: "Inst.HINT_ADD",
    HINT_REMOVE: "Inst.HINT_REMOVE",
    UPDATE_USERS: "Inst.UPDATE_USERS"
};
canvas.app.inst.Main = function(t, e) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = e;
    canvas.EventManager.addEventListener(canvas.app.inst.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.inst.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    this.view = new canvas.app.inst.View(this);
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.timer = setTimeout(this.refresh_users.bind(this), this.model.UpdInterval);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.app.inst.Event.UPDATE_USERS, null, this.update_users, this);
    this.refresh_users()
}
;
canvas.app.inst.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.inst.Main.prototype.handlerKey = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    var e = t.params.globalKeyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    case canvas.Const.KEYS.L:
        if (s) {
            canvas.Log.show(canvas.Log.INST)
        }
        break;
    case canvas.Const.KEYS.LEFT_ARROW:
    case canvas.Const.KEYS.UP_ARROW:
    case canvas.Const.KEYS.RIGHT_ARROW:
    case canvas.Const.KEYS.DOWN_ARROW:
        this.model.keyData[e] = true;
        if (!this.model.keyProcssor) {
            this.model.keyProcssor = true;
            canvas.EventManager.addEventListener(canvas.app.inst.Event.ENTER_FRAME, null, this.repeatKeyHandler, this)
        }
        break
    }
}
;
canvas.app.inst.Main.prototype.handlerKeyUp = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    t.params.preventDefault();
    var e = t.params.keyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    case canvas.Const.KEYS.LEFT_ARROW:
    case canvas.Const.KEYS.UP_ARROW:
    case canvas.Const.KEYS.RIGHT_ARROW:
    case canvas.Const.KEYS.DOWN_ARROW:
        if (this.model.keyData[e]) {
            delete this.model.keyData[e]
        }
        break
    }
}
;
canvas.app.inst.Main.prototype.resize = function(t, e) {
    var a = this.get_ww(t);
    var i = this.get_hh(e);
    this.hintManager.init(this.hintContainer, a, i);
    this.model.width = a;
    this.model.height = i;
    this.view.resize(a, i)
}
;
canvas.app.inst.Main.prototype.get_ww = function(t) {
    var e = this.model;
    if (t < e.min_stage_width) {
        this.x = 0;
        return e.min_stage_width
    } else if (t > e.max_stage_width) {
        this.x = Math.round((t - e.max_stage_width) / 2);
        return e.max_stage_width
    } else {
        this.x = 0
    }
    return t
}
;
canvas.app.inst.Main.prototype.get_hh = function(t) {
    var e = this.model;
    if (t < e.min_stage_height) {
        this.y = 0;
        return e.min_stage_height
    } else if (t > e.max_stage_height) {
        this.y = Math.round((t - e.max_stage_height) / 2);
        return e.max_stage_height
    } else {
        this.y = 0
    }
    return t
}
;
canvas.app.inst.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.inst.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.inst.Main.prototype.swfObject = function(t) {
    var e;
    var a = canvas.app.inst.model;
    if (t) {
        for (e in t) {
            switch (e) {
            }
        }
    }
}
;
canvas.app.inst.Main.prototype.repeatKeyHandler = function() {
    var t;
    var e = 0;
    for (t in this.model.keyData) {
        switch (parseInt(t)) {
        case canvas.Const.KEYS.LEFT_ARROW:
            this.view.scroll_H.minusClickHandler();
            e++;
            break;
        case canvas.Const.KEYS.UP_ARROW:
            this.view.scroll_V.minusClickHandler();
            e++;
            break;
        case canvas.Const.KEYS.RIGHT_ARROW:
            this.view.scroll_H.plusClickHandler();
            e++;
            break;
        case canvas.Const.KEYS.DOWN_ARROW:
            this.view.scroll_V.plusClickHandler();
            e++;
            break;
        default:
            break
        }
    }
    if (e == 0) {
        this.model.keyProcssor = false;
        canvas.EventManager.removeEventListener(canvas.app.inst.Event.ENTER_FRAME, null, this.repeatKeyHandler, this)
    }
}
;
canvas.app.inst.Main.prototype.setPoint = function() {}
;
canvas.app.inst.Main.prototype.refresh_users = function() {
    var t = this.model;
    if (t.locked_user_update) {
        return
    }
    var e = Date.now();
    var a = e - t.last_user_update;
    if (a > 2500) {
        clearTimeout(this.timer);
        t.last_user_update = e;
        t.locked_user_update = true;
        this.request.load(t.UpdLink + t.UpdAmp + "inst_id=" + t.ActiveIns)
    } else {}
}
;
canvas.app.inst.Main.prototype.completeHandler = function() {
    var t = this.model;
    t.USERS = t.parse_users((new DOMParser).parseFromString(this.request.request.responseText, "text/xml"));
    if (t.ActiveLocationChanged) {
        t.ActiveLocationChanged = false;
        this.view.map.refresh_pers_flag()
    }
    this.update_users();
    this.errorHandler()
}
;
canvas.app.inst.Main.prototype.errorHandler = function() {
    var t = this.model;
    t.locked_user_update = false;
    this.timer = setTimeout(this.refresh_users.bind(this), this.model.UpdInterval)
}
;
canvas.app.inst.Main.prototype.update_users = function() {
    var t = this.model;
    if (!t.USERS)
        return;
    var e;
    var a;
    var i = null;
    for (e in t.AREA.locations) {
        a = t.AREA.locations[e];
        if (a.players_object == null) {
            continue
        }
        if (t.USERS[e] != null) {
            if (t.USERS[e].length > 0) {
                this.view.map.add_inner_object(a.players_object);
                a.players_object.pl_list = t.USERS[e];
                a.players_object.pl_update_mark();
                i = this.usersHasFlag(t.USERS[e]);
                if (i != null) {
                    a.players_object.showFlag(t.USERS[e].length > 1, false, i)
                } else {
                    a.players_object.showFlag(false, true)
                }
            } else {
                this.remove_player_object(a.players_object);
                a.players_object.pl_list = null
            }
        } else {
            this.remove_player_object(a.players_object)
        }
    }
}
;
canvas.app.inst.Main.prototype.usersHasFlag = function(t) {
    if (t.length < 1)
        return null;
    var e;
    var a = t.length;
    for (var i = 0; i < a; i++) {
        e = t[i];
        if (e.hasFlag)
            return e
    }
    return null
}
;
canvas.app.inst.Main.prototype.remove_player_object = function(t) {
    if (t == null)
        return;
    if (t.parent == null)
        return;
    t.parent.removeChild(t)
}
;
canvas.app.inst.Main.prototype.changeInst = function(t) {
    var e = this.model;
    e.ActiveIns = parseInt(t[2]);
    var a = e.INS_LIST[e.ActiveIns];
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.instLoaded, this);
    canvas.ResourceLoader.add([["map" + a.id, e.LOCALE + "/ins_" + a.id + ".xml"]])
}
;
canvas.app.inst.Main.prototype.instLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.instLoaded, this);
    this.model.init();
    this.view.recreate()
}
;
canvas.app.inst.Model = function(t) {
    this.ListLink = t.ListLink == undefined ? "ins_list.xml" : t.ListLink;
    this.ResPath = t.ResPath == undefined ? "ins_res/" : t.ResPath;
    this.UpdLink = t.UpdLink == undefined ? "users.xml" : t.UpdLink;
    this.IsBold = true;
    this.UpdAmp = this.UpdLink.search(/\?/) == -1 ? "?" : "&";
    this.UpdInterval = t.UpdInterval == undefined ? 3e3 : parseInt(t.UpdInterval) * 1e3;
    if (this.UpdInterval < 3e3)
        this.UpdInterval = 3e3;
    this.ActiveIns = t.ActiveIns;
    this.race = t.user_kind == undefined ? 1 : parseInt(t.user_kind);
    this.level = t.user_level == undefined ? 1 : parseInt(t.user_level);
    this.min_stage_width = 199;
    this.min_stage_height = 483;
    this.max_stage_width_c = 54;
    this.max_stage_height_c = 44;
    this.ww = 3;
    this.hh = 3;
    this.map_width = 900;
    this.map_height = 900;
    this.ls_ww = 0;
    this.ls_hh = 0;
    this.isModule = false;
    this.keyData = {};
    this.locked_user_update = false;
    this.last_user_update = 0;
    this.ActiveLocationChanged = true
}
;
canvas.app.inst.Model.prototype.initConfig = function() {
    var t = this;
    t.INS_LIST = {};
    t.INS_LIST_AR = [];
    t.INS_LIST_RT = {};
    var e = canvas.ResourceLoader.get("config").data;
    var a = e.getElementsByTagName("item");
    var i = a.length;
    var s;
    for (var n = 0; n < i; n++) {
        var r = a[n].attributes;
        if (r.id != null && r.root_id != null && (r.race == undefined || t.race == parseInt(r.race.value)) && (r.minLevel == undefined || t.level >= parseInt(r.minLevel.value)) && (r.maxLevel == undefined || t.level <= parseInt(r.maxLevel.value))) {
            t.INS_LIST[r.root_id.value] = {};
            s = t.INS_LIST[r.root_id.value];
            s.id = r.id.value;
            s.root_id = r.root_id.value;
            s.title = a[n].childNodes[0].nodeValue;
            s.race = r.race == undefined ? -1 : parseInt(r.race.value);
            s.minLevel = r.minLevel == undefined ? -1 : parseInt(r.minLevel.value);
            s.maxLevel = r.maxLevel == undefined ? -1 : parseInt(r.maxLevel.value);
            t.INS_LIST_RT[s.root_id] = s.id;
            t.INS_LIST_AR.push([s.id, s.title, s.root_id, r.hidden != undefined && r.hidden.value == "1" ? true : false, s.race, s.minLevel, s.maxLevel])
        }
    }
    var o = e.getElementsByTagName("lnk");
    if (o.length > 0) {
        if (o[0].attributes.link_xml != undefined) {
            t.LOCALE = o[0].attributes.link_xml.value
        }
    }
    if (t.ActiveIns == null || t.ActiveIns == "0") {
        if (t.INS_LIST_AR[0] != null) {
            t.ActiveIns = t.INS_LIST_AR[0][2]
        }
    }
}
;
canvas.app.inst.Model.prototype.init = function() {
    var t = this;
    var e = t.INS_LIST[t.ActiveIns];
    var a = canvas.ResourceLoader.get("map" + e.id).data;
    t.AREA = null;
    t.W_BOTS = {};
    var i = a.getElementsByTagName("ins")[0];
    var s = i.attributes;
    if (s.width != null) {
        t.ww = parseInt(s.width.value);
        t.map_width = t.ww * 300;
        t.max_stage_width = t.max_stage_width_c + t.map_width
    } else {}
    if (s.height != null) {
        t.hh = parseInt(s.height.value);
        t.map_height = t.hh * 300;
        t.max_stage_height = t.max_stage_height_c + t.map_height
    } else {}
    t.AREA = {
        locations: {},
        objects: [],
        locationClones: {}
    };
    t.AREAS = [];
    t.FlagArea = 1;
    t.focusedAreaId = 1;
    t.AREAS[t.FlagArea] = t.AREA;
    t.AREAS[t.focusedAreaId] = t.AREA;
    var n = t.AREA;
    n.id = t.ActiveIns;
    n.src = "ins_" + t.INS_LIST_RT[t.ActiveIns];
    n.rect_x1 = 0;
    n.rect_y1 = 0;
    n.rect_x2 = 0;
    n.rect_y2 = 0;
    var r = a.getElementsByTagName("location");
    var o = r.length;
    var l;
    var c;
    var p;
    var h;
    var d;
    var v;
    var u;
    var m;
    for (var f = 0; f < o; f++) {
        var _ = r[f].attributes;
        if (_.id != null) {
            if (_.inner_flag_pos != null) {
                l = _.inner_flag_pos.value.split(",");
                if (l.length == 2) {
                    n.locations[_.id.value] = {};
                    c = n.locations[_.id.value];
                    c.id = _.id.value;
                    c.flag_pos_x = parseInt(l[0]);
                    c.flag_pos_y = parseInt(l[1]);
                    if (_.clones != null) {
                        p = _.clones.value.split(",");
                        for (var g in p) {
                            n.locationClones[p[g]] = _.id.value
                        }
                    }
                    h = r[f].childNodes;
                    for (u = 0; u < h.length; u++) {
                        m = h[u].nodeName;
                        if (m == "object") {
                            this.parse_object(n, h[u], "global", c.id)
                        } else if (m == "title") {
                            c.title = h[u].childNodes[0].nodeValue
                        } else if (m == "players") {
                            if (h[u].attributes.inner_pos != null) {
                                var w = h[u].attributes.inner_pos.value.split(",");
                                c.players_x = parseInt(w[0]);
                                c.players_y = parseInt(w[1])
                            } else {
                                c.players_x = 100 + Math.floor(Math.random() * 100);
                                c.players_y = 100 + Math.floor(Math.random() * 100)
                            }
                        } else if (m != null) {}
                    }
                } else {}
            } else {}
        }
    }
    r = a.getElementsByTagName("w_bot");
    var o = r.length;
    for (var f = 0; f < o; f++) {
        var E = r[f].attributes;
        if (E.w_id != null) {
            t.W_BOTS[E.w_id.value] = [];
            h = r[f].childNodes;
            for (u = 0; u < h.length; u++) {
                m = h[u].nodeName;
                if (m == "nm") {
                    t.W_BOTS[E.w_id.value].push(h[u].childNodes[0].nodeValue)
                } else if (m != null) {}
            }
        } else {}
    }
    r = a.getElementsByTagName("title");
    if (r.length > 0) {
        n.title = r[0].childNodes[0].nodeValue
    }
    r = a.getElementsByTagName("exit");
    if (r.length > 0) {
        n.exit_title = r[0].childNodes[0].nodeValue
    }
    r = a.getElementsByTagName("enter");
    if (r.length > 0) {
        n.enter_title = r[0].childNodes[0].nodeValue
    }
    if (n.title == null) {
        n.title = "БЕЗ НАЗВАНИЯ"
    }
}
;
canvas.app.inst.Model.prototype.parse_object = function(t, e, a, i) {
    var s = e.attributes;
    if (s.id != null) {
        if (s.inner_pos != null) {
            var n = s.inner_pos.value.split(",");
            if (n.length == 2) {
                var r = t.objects.push({});
                var o = t.objects[r - 1];
                o.id = s.id.value;
                o.xx = parseInt(n[0]);
                o.yy = parseInt(n[1]);
                o.type = a;
                o.location_id = i;
                o.items = [];
                var l = e.childNodes;
                for (var c = 0; c < l.length; c++) {
                    switch (l[c].nodeName) {
                    case "title":
                        o.title = l[c].childNodes[0].nodeValue;
                        break;
                    case "text":
                        o.text = l[c].childNodes[0].nodeValue;
                        break;
                    case "item":
                        o.items.push(l[c].childNodes[0].nodeValue);
                        break;
                    case "linkage":
                        var p = l[c].attributes;
                        if (p.locations != null) {
                            o.linkage_locations = p.locations.value.split(",")
                        } else {}
                        o.linkage_location_id = p.location_id.value;
                        break;
                    case null:
                        break;
                    default:
                        break
                    }
                }
            } else {}
        } else {}
    }
}
;
canvas.app.inst.Model.prototype.parse_users = function(t) {
    var e = this;
    var a = t.getElementsByTagName("users");
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    var p;
    var h;
    var d = {};
    var v;
    var u;
    var m;
    o = a[0].childNodes;
    for (s = 0; s < o.length; s++) {
        if (o[s].nodeName == "my_loc") {
            if (o[s].attributes.id != null) {
                p = o[s].attributes.id.value;
                if (e.AREA.locationClones[p] != undefined)
                    p = e.AREA.locationClones[p];
                v = true;
                if (e.ActiveLocation != p) {
                    e.ActiveLocationChanged = true;
                    e.ActiveLocation = p
                }
            } else {}
            if (o[s].attributes.root_id != null) {
                h = o[s].attributes.root_id.value;
                u = true
            } else {}
        } else if (o[s].nodeName == "loc") {
            if (o[s].attributes.id != null) {
                p = o[s].attributes.id.value;
                if (e.AREA.locationClones[p] != undefined)
                    p = e.AREA.locationClones[p];
                d[p] = [];
                l = o[s].childNodes;
                for (n = 0; n < l.length; n++) {
                    if (l[n].nodeName == "user") {
                        m = {};
                        m.nick = l[n].childNodes[0].nodeValue;
                        m.hasFlag = l[n].attributes.is_flag != undefined && l[n].attributes.is_flag.value == "1";
                        d[p].push(m)
                    }
                }
            } else {}
        }
    }
    if (!v) {
        if (e.ActiveLocation != null) {
            e.ActiveLocationChanged = true;
            e.ActiveLocation = null
        }
    }
    if (!u) {
        e.ActiveInstRootId = null
    } else {
        e.ActiveInstRootId = h
    }
    return d
}
;
canvas.app.inst.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.inst.model;
    this.main = t;
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.container.interactive = true;
    this.map_cont = new canvas.px.Container;
    this.map_cont.position.set(19, 14);
    this.container.addChild(this.map_cont);
    this.map_cont.interactive = true;
    this.map = new canvas.app.world.view.MapWorldParts(this,e.map_width,e.map_height,1,e.ResPath + "ins_" + e.INS_LIST_RT[e.ActiveIns] + "/map/ins_",true);
    this.map_state = new canvas.app.world.engine.MapStateObject(this);
    this.map_state.focus_map(this.map, 1);
    this.msk = new canvas.px.Mask(100,100);
    this.msk.position.set(19, 14);
    this.addChild(this.msk);
    this.map_cont.mask = this.msk;
    this.scroll_V = new canvas.app.world.view.ScrollV(this.map_state,this.container);
    this.addChild(this.scroll_V);
    this.scroll_H = new canvas.app.world.view.ScrollH(this.map_state,this.map_cont);
    this.addChild(this.scroll_H);
    this.scroll_null = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_scroll_null"));
    this.addChild(this.scroll_null);
    this.borders = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),100,142,100,142);
    this.addChild(this.borders);
    this.stat = new canvas.app.inst.view.StatView(this);
    this.addChild(this.stat);
    this.stat.x = 33;
    this.combo = new canvas.app.inst.view.combo.Combo;
    this.addChild(this.combo);
    this.set_labels();
    this.init_combo();
    this.map.focus_on_active_area();
    this.firstResize = true;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_H, this.scrollHandlerH, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_V, this.scrollHandlerV, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this)
}
;
canvas.app.inst.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.inst.View.prototype.recreate = function() {
    var t = canvas.app.inst.model;
    this.map.destroy({
        children: true
    });
    this.map = new canvas.app.world.view.MapWorldParts(this,t.map_width,t.map_height,1,t.ResPath + "ins_" + t.INS_LIST_RT[t.ActiveIns] + "/map/ins_",true);
    this.map_state.focus_map(this.map, 1);
    this.map.focus_on_active_area();
    this.resize(true);
    this.refresh_scrollers()
}
;
canvas.app.inst.View.prototype.resize = function(t) {
    if (t == undefined)
        t = false;
    var e = canvas.app.inst.model;
    var a = e.width;
    var i = e.height;
    this.borders.width = a;
    this.borders.height = i;
    var s = false;
    if (e.ls_ww != a || t) {
        e.ls_ww = a;
        s = true;
        this.scroll_V.position.set(a - 35, 14);
        this.scroll_H.setSize(a - 37, 16);
        this.map_state.set_visible_width(a - 53);
        this.combo.x = a - 207;
        this.msk.setSize(this.map_state.map_visible_width);
        this.scroll_H.refresh();
        this.scroll_null.x = a - 35;
        this.label2.pos(a);
        this.refresh_scrollers()
    }
    if (e.ls_hh != i || t) {
        e.ls_hh = i;
        this.stat.y = i - 99;
        s = true;
        this.scroll_H.position.set(18, i - 30);
        this.scroll_V.setSize(16, i - 28);
        this.map_state.set_visible_height(i - 28);
        this.combo.y = i - 54;
        this.msk.setSize(-1, this.map_state.map_visible_height);
        this.scroll_V.refresh();
        this.scroll_null.y = i - 30;
        this.refresh_scrollers()
    }
    if (s) {
        this.map_state.map_check()
    }
}
;
canvas.app.inst.View.prototype.set_labels = function() {
    var t = canvas.app.inst.model;
    this.label1 = new canvas.app.inst.view.TopTextLeft;
    this.label1.position.set(28, 21);
    this.addChild(this.label1);
    var e = "unknown";
    var a = "unknown";
    var i = t.AREA;
    if (i != null) {
        e = i.title;
        if (i.locations[t.ActiveLocation] != null) {
            a = i.locations[t.ActiveLocation].title
        }
    }
    this.label1.set_line0(canvas.Translator.getText(207) + ":", e, a);
    this.label2 = new canvas.app.inst.view.TopTextRight;
    this.label2.position.set(400, 21);
    this.addChild(this.label2)
}
;
canvas.app.inst.View.prototype.init_combo = function() {
    var t = canvas.app.inst.model;
    var e = [];
    var a = 0;
    for (var i = 0; i < t.INS_LIST_AR.length; i++) {
        if (parseInt(t.INS_LIST_AR[i][2]) == t.ActiveIns)
            a = i;
        if (!t.INS_LIST_AR[i][3]) {
            e.push(t.INS_LIST_AR[i])
        }
    }
    this.combo.init(e);
    this.combo.selectedIndex = a
}
;
canvas.app.inst.View.prototype.testUpdate = function() {}
;
canvas.app.inst.View.prototype.refresh_scrollers = function() {
    this.scroll_H.refresh();
    this.scroll_V.refresh();
    this.scrollHandlerH();
    this.scrollHandlerV()
}
;
canvas.app.inst.View.prototype.scrollHandlerH = function() {
    if (!this.scroll_H.isDisabled()) {
        this.map_state.delta_map_x(this.scroll_H.current)
    } else {
        this.map_state.delta_map_x(0)
    }
}
;
canvas.app.inst.View.prototype.scrollHandlerV = function() {
    if (!this.scroll_V.isDisabled()) {
        this.map_state.delta_map_y(this.scroll_V.current)
    } else {
        this.map_state.delta_map_y(0)
    }
}
;
canvas.app.inst.View.prototype.comboSelectHandler = function(t) {
    this.main.changeInst(t.params)
}
;
canvas.app.inst.view.StatView = function(t) {
    canvas.px.Container.call(this);
    this.baseLnk = t;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_stat_bg")));
    this.interactive = true;
    this.btn_refresh = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "refresh"));
    this.addChild(this.btn_refresh);
    this.btn_refresh.position.set(17, 6);
    this.btn_info = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "list_icon"));
    this.addChild(this.btn_info);
    this.btn_info.position.set(54, 6);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_info, this.infoClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_refresh, this.refreshClickHandler, this)
}
;
canvas.app.inst.view.StatView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.inst.view.StatView.prototype.infoClickHandler = function() {
    var t = canvas.app.inst.model;
    if (t.ActiveInstRootId != null) {
        canvas.Functions.navigateToURL("instance_stat.php?instance_id=" + t.ActiveInstRootId, "_blank")
    }
}
;
canvas.app.inst.view.StatView.prototype.refreshClickHandler = function() {
    this.baseLnk.main.refresh_users()
}
;
canvas.app.inst.view.TopTextLeft = function() {
    canvas.app.world.view.TopTextLeft.call(this)
}
;
canvas.app.inst.view.TopTextLeft.prototype = Object.create(canvas.app.world.view.TopTextLeft.prototype);
canvas.app.inst.view.TopTextLeft.prototype.set_line0 = function(t, e, a) {
    var i = canvas.app.inst.model;
    this.line0 = t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + "</font>";
    if (a == undefined) {
        var s = i.AREA;
        var n = s.title;
        if (s.locations[i.ActiveLocation] != null) {
            a = s.locations[i.ActiveLocation].title
        }
    }
    if (a != undefined) {
        this.line0 += " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + a + "</font>"
    }
    this.update()
}
;
canvas.app.inst.view.TopTextLeft.prototype.set_line1 = function(t, e, a) {
    this.set_line0(canvas.Translator.getText(207), e, a)
}
;
canvas.app.inst.view.TopTextLeft.prototype.update = function() {
    this.field.text = this.line0 + "<br/>" + this.line2;
    this.redraw_bg();
    if (this.field.text != "") {
        this.addChild(this.field);
        this.visible = true
    }
}
;
canvas.app.inst.view.TopTextRight = function() {
    canvas.app.world.view.TopTextRight.call(this)
}
;
canvas.app.inst.view.TopTextRight.prototype = Object.create(canvas.app.world.view.TopTextRight.prototype);
canvas.app.inst.view.TopTextRight.prototype.set_data = function(t, e, a, i, s, n, r) {
    this.sender = null;
    var o = canvas.app.world.model;
    if (e != undefined && a == undefined) {
        a = [e];
        e = ""
    }
    if (i == undefined)
        i = "";
    if (s == undefined)
        s = "";
    if (n == undefined)
        n = true;
    if (a != undefined && a.length == 0)
        a = null;
    if (r == undefined)
        r = "";
    this.deactivate();
    this.line0 = t ? t : "";
    this.line1 = e ? "     <font color='#" + (a ? "FFC600" : "FFE1A2") + "'>" + e + "</font>" : "";
    this.line2 = "";
    if (a) {
        for (var l = 0; l < a.length; l++) {
            this.line2 += (l == 0 ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + a[l] + "</font>"
        }
    }
    if (r != "") {
        if (this.line2 != "")
            this.line2 += "<br/>";
        this.line2 += "<font color='#" + "FFE1A2" + "'>" + canvas.Translator.getText(100) + "</font><br/>";
        for (var l = 0; l < r.length; l++) {
            this.line2 += (l == 0 ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + r[l] + "</font>"
        }
    }
    if (i) {
        this.lineBottom = "   <font color='#FFC600'>" + i + "</font>"
    } else {
        this.lineBottom = ""
    }
    this.update();
    if (n) {
        this.frontsContent.showHeader = true;
        this.frontsContent.y = this.field.textHeight + 5
    } else {
        this.frontsContent.showHeader = false;
        this.frontsContent.y = -10
    }
    if (o.frontsData != null)
        this.frontsContent.fdata = o.frontsData[s];
    if (this.frontsContent.fdata != null)
        this.addChild(this.frontsContent);
    else if (this.contains(this.frontsContent))
        this.removeChild(this.frontsContent);
    if (this.frontsContent.parent) {
        this.x = this.ww - Math.max(this.frontsContent.width, this.field.textWidth) - 52;
        this.visible = true
    }
    this.redraw_bg()
}
;
canvas.app.inst.view.combo.Combo = function() {
    var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "combo_header"),[4, 0, 18, 0]);
    var e = new canvas.app.inst.view.combo.ComboHeaderRenderer;
    var a = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "combo_list_back"),2,4,2,4);
    canvas.ui.ComboBox.call(this, t, e, a, canvas.app.inst.view.combo.ComboListRenderer, canvas.ui.ComboBoxType.UP, o);
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_up"));
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_down"));
    var n = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_drag"),[0, 3, 0, 3]);
    var r = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "png_scroll_bg2"));
    var o = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,i,s,r,n,this.list.container,true,true);
    o.padding = 15;
    o.step = 50;
    o.setSize(16);
    this.list.scroll = o;
    this.setSize(164, 440);
    this.list.paddingV = 0;
    this.list.paddingH = -6
}
;
canvas.app.inst.view.combo.Combo.prototype = Object.create(canvas.ui.ComboBox.prototype);
canvas.app.inst.view.combo.ComboHeaderRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,10551296,100,16,"left",undefined,undefined,undefined,true);
    this.addChild(this.title);
    this.title.position.set(4, 1);
    this.interactive = false;
    this.msk = new canvas.px.Mask(100,20);
    this.addChild(this.msk);
    this.mask = this.msk
}
;
canvas.app.inst.view.combo.ComboHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.inst.view.combo.ComboHeaderRenderer.prototype.update = function() {
    if (this.title) {
        this.title.text = this.data ? this.data[1] : "";
        this.title.setSize(this._width);
        this.msk.setSize(this._width - 20)
    }
}
;
canvas.app.inst.view.combo.ComboListRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7686706,100,14,"left",undefined,undefined,undefined,true);
    this.addChild(this.title);
    this.title.position.set(4, 1);
    this._height = 14;
    this.selector = new canvas.px.Mask(100,20,10551296,1);
    this.buttonMode = true
}
;
canvas.app.inst.view.combo.ComboListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.inst.view.combo.ComboListRenderer.prototype.update = function() {
    if (this.selector) {
        this.selector.setSize(this._width, 16)
    }
    if (this.title) {
        this.title.text = this.data ? this.data[1] : "";
        this.title.setSize(this._width - 10)
    }
}
;
canvas.app.inst.view.combo.ComboListRenderer.prototype.overHandler = function() {
    this.addChildAt(this.selector, 0);
    this.title.color = 16775626
}
;
canvas.app.inst.view.combo.ComboListRenderer.prototype.outHandler = function() {
    if (this.selector.parent)
        this.removeChild(this.selector);
    this.title.color = 7686706
}
;
canvas.app.user.Const = {
    TOP: 0,
    LEFT: 0
};
canvas.app.user.Event = {
    ENTER_FRAME: "User.ENTER_FRAME",
    HINT_ADD: "User.HINT_ADD",
    HINT_REMOVE: "User.HINT_REMOVE",
    REMOVE_EFFECT: "User.REMOVE_EFFECT",
    SHOW_EFFECT: "User.SHOW_EFFECT",
    HIDE_EFFECT: "User.HIDE_EFFECT",
    HIDE_ALL_EFFECTS: "User.HIDE_ALL_EFFECTS",
    SHOW_ALL_EFFECTS: "User.SHOW_ALL_EFFECTS",
    ZOOM_IN: "User.ZOOM_IN",
    ZOOM_OUT: "User.ZOOM_OUT"
};
canvas.app.user.Main = function(t, e, a) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = e;
    this.windowsManager = a;
    canvas.EventManager.addEventListener(canvas.app.user.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    this.view = new canvas.app.user.View(this);
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.windowsContainer = new canvas.px.Container;
    this.addChild(this.windowsContainer);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.effectsButton.button, this.effectsButtonClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.REMOVE_EFFECT, null, this.removeEffectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.SHOW_EFFECT, null, this.showEffectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.HIDE_EFFECT, null, this.hideEffectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.HIDE_ALL_EFFECTS, null, this.hideAllEffectsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.SHOW_ALL_EFFECTS, null, this.showAllEffectsHandler, this);
    setInterval(this.timerHandler.bind(this), 500);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.ZOOM_IN, null, this.zoomInHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.ZOOM_OUT, null, this.zoomOutHandler, this)
}
;
canvas.app.user.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.Main.prototype.handlerKey = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    var e = t.params.globalKeyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    case canvas.Const.KEYS.L:
        if (s) {
            canvas.Log.show(canvas.Log.USER)
        }
        break
    }
}
;
canvas.app.user.Main.prototype.handlerKeyUp = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    t.params.preventDefault();
    var e = t.params.keyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    switch (e) {
    }
}
;
canvas.app.user.Main.prototype.resize = function(t, e) {
    this.windowsManager.init(this.windowsContainer, t, e, this.view);
    this.hintManager.init(this.hintContainer, t, e)
}
;
canvas.app.user.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.user.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.user.Main.prototype.swfObject = function(t) {
    var e;
    var a = canvas.app.user.model;
    if (t) {
        for (e in t) {
            switch (e) {
            case "user|view":
                var i = t["user|view"];
                a.init(i);
                this.view.update();
                break
            }
        }
    }
}
;
canvas.app.user.Main.prototype.timerHandler = function() {
    var t = canvas.app.user.model;
    if (this.view.effectsWindow.parent) {
        this.view.effectsWindow.updateTime();
        if (t.effects.length == 0) {
            this.view.hideEffects()
        }
    }
    if ((this.view.bars.hp.progress >= 1 || t.myHPt == 0) && (this.view.bars.mp.progress >= 1 || t.myMPt == 0)) {
        return
    }
    t.calcHpMp();
    this.view.bars.update()
}
;
canvas.app.user.Main.prototype.effectsButtonClickHandler = function() {
    var t = canvas.app.user.model;
    if (t.canputoff == "1") {
        this.view.effectsWindowShowHide(this.view.effectsWindow.parent != null)
    } else {
        showEffectInfo(t.nick)
    }
}
;
canvas.app.user.Main.prototype.removeEffectHandler = function(t) {
    this.view.confirmWindow.init(canvas.Translator.getText(803) + " <b>" + t.params.title + "</b> ?", {
        func: this.removeEffect.bind(this),
        params: [t.params]
    });
    this.windowsManager.openWindow(this.view.confirmWindow)
}
;
canvas.app.user.Main.prototype.showEffectHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params;
    this.request.name = canvas.app.user.Event.SHOW_EFFECT;
    this.request.load(e.effectShowUrl + "&artifact_id=" + t.params.id + "&json_mode_on=1")
}
;
canvas.app.user.Main.prototype.hideEffectHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params;
    this.request.name = canvas.app.user.Event.HIDE_EFFECT;
    this.request.load(e.effectHideUrl + "&artifact_id=" + t.params.id + "&json_mode_on=1")
}
;
canvas.app.user.Main.prototype.hideAllEffectsHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params;
    this.request.name = canvas.app.user.Event.HIDE_ALL_EFFECTS;
    this.request.load(e.effectHideUrl + "&artifact_id=&json_mode_on=1")
}
;
canvas.app.user.Main.prototype.showAllEffectsHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params;
    this.request.name = canvas.app.user.Event.SHOW_ALL_EFFECTS;
    this.request.load(e.effectShowUrl + "&artifact_id=&json_mode_on=1")
}
;
canvas.app.user.Main.prototype.removeEffect = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t;
    this.request.name = canvas.app.user.Event.REMOVE_EFFECT;
    this.request.load(e.effectRemoveUrl + "&artifact_id=" + t.id + "&json_mode_on=1")
}
;
canvas.app.user.Main.prototype.requestCompleteHandler = function() {
    var t = canvas.app.user.model;
    var e = JSON.parse(this.request.request.responseText);
    if (e["common|action"].status == "100") {
        switch (this.request.name) {
        case canvas.app.user.Event.REMOVE_EFFECT:
            t.removeEffect(t.effectInRequest);
            this.view.effectsWindow.update();
            if (t.effects.length == 0) {
                this.view.hideEffects()
            }
            break
        }
    }
    if (e["user|view"] && e["user|view"].status == "100") {
        t.effect = e["user|view"]["effect_list"];
        t.parseEffects();
        this.view.effectsWindow.update()
    }
    this.request.name = ""
}
;
canvas.app.user.Main.prototype.requestErrorHandler = function() {}
;
canvas.app.user.Main.prototype.zoomInHandler = function() {
    var t = canvas.app.user.model;
    if (this.view.persContainer.scale.x < t.PERS_MAX_SCALE) {
        this.view.persContainer.scale.x += t.PERS_SCALE_STEP;
        this.view.persContainer.scale.y = this.view.persContainer.scale.x;
        this.view.updatePersPos();
        t.localStorage.set("playerSize", this.view.persContainer.scale.x)
    }
}
;
canvas.app.user.Main.prototype.zoomOutHandler = function() {
    var t = canvas.app.user.model;
    if (this.view.persContainer.scale.x > t.PERS_MIN_SCALE) {
        this.view.persContainer.scale.x -= t.PERS_SCALE_STEP;
        this.view.persContainer.scale.y = this.view.persContainer.scale.x;
        this.view.updatePersPos();
        t.localStorage.set("playerSize", this.view.persContainer.scale.x)
    }
}
;
canvas.app.user.Model = function(t) {
    this.UPDATE_FLAG_PERS = "pers";
    this.UPDATE_FLAG_TROPHY = "trophy";
    this.UPDATE_FLAG_ARTS = "arts";
    this.UPDATE_FLAG_PET = "pet";
    this.ALL_UPDATE_FLAGS = [this.UPDATE_FLAG_PERS, this.UPDATE_FLAG_TROPHY, this.UPDATE_FLAG_ARTS, this.UPDATE_FLAG_PET];
    this.PERS_MIN_SCALE = .7;
    this.PERS_MAX_SCALE = 1;
    this.PERS_SCALE_STEP = .05;
    this.PLAYER_MC_X = 74;
    this.PLAYER_MC_Y = 104;
    this.SLOTS_COUNT = 26;
    this.def_myFirst1 = [];
    this.def_myFirst2 = [];
    this.last_dat = "";
    this.timeoutID = 0;
    this.alt = "";
    this.delete_art = "";
    this.mySk = "1";
    this.trophySk = "1";
    this.myGender = "M";
    this.trophyGender = "M";
    this.trophyName = "";
    this.trophyLevel = 0;
    this.trophyClan = "";
    this.trophyRank = "";
    this.myHP = 100;
    this.myHPmax = 200;
    this.myHPdlt = 0;
    this.myMP = 10;
    this.myMPmax = 10;
    this.myMPdlt = 0;
    this.myHPt = 0;
    this.myMPt = 0;
    this.myLevel = 1;
    this.myTown = "Town";
    this.myLocation = "Location";
    this.myTitle = "Title";
    this.bott_mc_Y = 0;
    this.townSrc = "";
    this.swf_name = "userinfo";
    this.parts = "65551;;;,0;;;,0;;;,0;;;,0;;;,603;;;,65537;;;,0;;;,8;;;body_gold.swf,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;";
    this.trophy_parts = "";
    this.trophy_name = "";
    this.locale = "ru";
    this.fightId = "";
    this.effect = "";
    this.mount = "";
    this.mountLnk = "";
    this.trophy_mount = "";
    this.dh = "";
    this.bg = "";
    this.arts = "::::0:,52635583:cuir08.gif:::0::1:1,::::0:,::::0:,52635582:cuir4.gif:::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:";
    this.canputoff = "1";
    this.pet_picture = "";
    this.pet_name = "";
    this.pet_level = "";
    this.pet_color = "";
    this.pet_id = "";
    this.show_button_switch_view = "";
    this.ghost = "";
    this.nobold = "";
    this.farming = "0";
    this.punished = "";
    this.punish_cnt = 0;
    this.nick = "Герой";
    this.take_off = "";
    this.take_off_chant = "";
    this.backImage = "";
    this.showLocation = false;
    this.arkatCount = 2;
    this.updateFlags = new Object;
    this.updateHash = new Object;
    this.init(t);
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.USER)
}
;
canvas.app.user.Model.prototype.init = function(t) {
    for (var e in t) {
        if (this.ok(this[e]))
            this[e] = t[e]
    }
    if (this.ok(t.showlocation))
        this.showLocation = t.showlocation == "1";
    if (this.nobold != "1")
        this.nobold = "";
    if (this.ok(t.sk))
        this.mySk = t.sk;
    if (this.ok(t.take_off))
        this.take_off = t.take_off;
    if (this.ok(t.take_off_chant))
        this.take_off_chant = t.take_off_chant;
    if (this.ok(t.gender))
        this.myGender = this.parseGender(t.gender);
    if (this.ok(t.trophy_gender))
        this.trophyGender = this.parseGender(t.trophy_gender);
    if (this.ok(t.trophy_level))
        this.trophyLevel = t.trophy_level == "" ? 0 : parseInt(t.trophy_level);
    if (this.ok(t.trophy_rank))
        this.trophyRank = t.trophy_rank;
    if (this.ok(t.trophy_clan))
        this.trophyClan = t.trophy_clan;
    if (this.ok(t.arts))
        this.arts = t.arts;
    if (this.ok(t.parts))
        this.parts = t.parts;
    if (this.ok(t.trophy_parts))
        this.trophy_parts = t.trophy_parts;
    if (this.ok(t.trophy_name))
        this.trophy_name = t.trophy_name;
    canvas.app.user.log("parts = " + t.parts);
    if (this.ok(t.hp) && this.ok(t.hpMax) && this.ok(t.hpT)) {
        this.myHP = parseInt(t.hp);
        this.myHPmax = parseInt(t.hpMax);
        this.myHPt = parseInt(t.hpT);
        this.myHPdlt = this.myHPmax - this.myHP;
        this.startTimeHP = Date.now();
        this.finTimeHP = this.startTimeHP + this.myHPt;
        this.curHP = this.myHP
    }
    if (this.ok(t.mp) && this.ok(t.mpMax) && this.ok(t.mpT)) {
        this.myMP = parseInt(t.mp);
        this.myMPmax = parseInt(t.mpMax);
        this.myMPdlt = this.myMPmax - this.myMP;
        this.myMPt = parseInt(t.mpT);
        this.startTimeMP = Date.now();
        this.finTimeMP = this.startTimeMP + this.myMPt;
        this.curMP = this.myMP
    }
    if (this.ok(t.lvl))
        this.myLevel = parseInt(t.lvl);
    if (this.ok(t.tTown))
        this.myTown = t.tTown;
    if (this.ok(t.tLocation))
        this.myLocation = t.tLocation;
    if (this.ok(t.tTitle))
        this.myTitle = t.tTitle;
    if (this.ok(t.locale))
        this.locale = t.locale;
    if (this.ok(t.tSrc))
        this.townSrc = t.tSrc;
    if (this.ok(t.fightId))
        this.fightId = t.fightId;
    else
        this.fightId = "0";
    if (this.ok(t.farming))
        this.farming = t.farming;
    else
        this.farming = "0";
    if (this.ok(t.effect_list))
        this.effect = t.effect_list;
    if (this.ok(t.mount)) {
        this.mount = t.mount
    }
    this.trophy_mount = "0";
    if (this.bg == "")
        this.bg = "1";
    if (this.canputoff == "")
        this.canputoff = "0";
    if (this.ok(t.picPath))
        this.picPath = t.picPath;
    if (this.alt == "")
        this.alt = "Трофей с";
    if (this.ok(t.pet_picture))
        this.pet_picture = t.pet_picture;
    if (this.ok(t.pet_name))
        this.pet_name = t.pet_name;
    if (this.ok(t.pet_level))
        this.pet_level = t.pet_level;
    if (this.ok(t.pet_color))
        this.pet_color = t.pet_color;
    if (this.ok(t.pet_id))
        this.pet_id = t.pet_id;
    if (this.ok(t.effectRemoveUrl))
        this.effectRemoveUrl = t.effectRemoveUrl;
    if (this.ok(t.effectHideUrl))
        this.effectHideUrl = t.effectHideUrl;
    if (this.ok(t.effectShowUrl))
        this.effectShowUrl = t.effectShowUrl;
    if (this.ok(t.avatar_background_img))
        this.backImage = t.avatar_background_img;
    if (this.ok(t.arkat_count))
        this.arkatCount = parseInt(t.arkat_count);
    if (this.ok(t.effectHideMax))
        this.effectHideMax = parseInt(t.effectHideMax);
    this.effectHideCur = 0;
    canvas.app.user.log("arts = " + t.arts);
    var a = this.ALL_UPDATE_FLAGS.length;
    for (var i = 0; i < a; i++) {
        e = this.ALL_UPDATE_FLAGS[i];
        if (!this.updateFlags[e])
            this.updateFlags[e] = this.getDataHash(e) != this.updateHash[e];
        this.updateHash[e] = this.getDataHash(e)
    }
    this.calcHpMp();
    this.SLOTS_COUNT = this.canputoff == "1" ? 26 : 15
}
;
canvas.app.user.Model.prototype.getDataHash = function(t) {
    switch (t) {
    case this.UPDATE_FLAG_PERS:
        return this.parts + this.mySk + this.myGender;
    case this.UPDATE_FLAG_TROPHY:
        return this.trophy_parts + this.trophyGender;
    case this.UPDATE_FLAG_ARTS:
        return this.arts + this.myLevel + this.arkatCount;
    case this.UPDATE_FLAG_PET:
        return this.pet_picture + this.pet_name + this.pet_level + this.pet_color + this.pet_id
    }
    return ""
}
;
canvas.app.user.Model.prototype.parseEffects = function() {
    var t = this.effect;
    var e;
    var a = Date.now();
    this.effects = [];
    var i;
    var s;
    i = JSON.parse(t);
    var n = i.length;
    this.effectHideCur = 0;
    for (var r = 0; r < n; r++) {
        s = i[r];
        e = new Object;
        e.timeLeft = parseInt(s.timeLeft) * 1e3;
        e.timeLeftStart = a;
        e.id = s.id;
        e.removable = s.removable == "1";
        e.hidden = s.hidden == "1";
        e.frozen = s.frozen == "1";
        e.title = JSON.parse('"' + s.title + '"');
        e.color = s.color;
        if (e.hidden)
            this.effectHideCur++;
        this.effects.push(e)
    }
}
;
canvas.app.user.Model.prototype.removeEffect = function(t) {
    this.effects.splice(this.effects.indexOf(t), 1);
    if (t.hidden)
        this.effectHideCur--
}
;
canvas.app.user.Model.prototype.ok = function(t) {
    return t != undefined
}
;
canvas.app.user.Model.prototype.parseGender = function(t) {
    return t == "1" ? "M" : "F"
}
;
canvas.app.user.Model.prototype.getSkPath = function() {
    return canvas.Config.skPath + this.myGender + "/sk" + canvas.Functions.setNumberLen(String(this.mySk), 2) + "_UI"
}
;
canvas.app.user.Model.prototype.getTrophySkPath = function() {
    return canvas.Config.skPath + this.trophyGender + "/sk" + canvas.Functions.setNumberLen(String(this.trophySk), 2) + "_UI"
}
;
canvas.app.user.Model.prototype.calcHpMp = function() {
    if (this.myHPt == 0) {
        this.myHP = this.myHPmax
    }
    if (this.myMPt == 0) {
        this.myMP = this.myMPmax
    }
    var t;
    this.curTime = Date.now();
    if (this.myHPt > 0) {
        t = (this.curTime - this.startTimeHP) / 1e3;
        this.curHP = Math.round(Math.min(this.myHPmax, this.myHP + this.myHPdlt * (t / this.myHPt)))
    }
    if (this.myMPt > 0) {
        t = (this.curTime - this.startTimeMP) / 1e3;
        this.curMP = Math.round(Math.min(this.myMPmax, this.myMP + this.myMPdlt * (t / this.myMPt)))
    }
}
;
canvas.app.user.Model.prototype.getPetColor = function(t) {
    switch (parseInt(t)) {
    case 1:
        return 6710886;
    case 2:
        return 3381504;
    case 3:
        return 3342591;
    case 4:
        return 10027161;
    case 5:
        return 16711680
    }
    return 3355443
}
;
canvas.app.user.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.user.model;
    this.slots = [];
    this.background = new canvas.app.user.view.Background;
    this.addChild(this.background);
    if (t.showLocation) {
        this.location = new canvas.app.user.view.LocationView;
        this.addChild(this.location);
        this.location.position.set(4, 391)
    } else {
        this.bottomItems = new canvas.app.user.view.BottomItems(this.slots);
        this.addChild(this.bottomItems);
        this.bottomItems.position.set(17, 377)
    }
    this.persContainer = new canvas.px.Container;
    var e = t.localStorage.get("playerSize");
    if (e)
        this.persContainer.scale.set(parseFloat(e), parseFloat(e));
    this.addChild(this.persContainer);
    this.updatePersPos();
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getTexture("user_mask"));
    this.addChild(a);
    a.position.set(55, 80);
    this.persContainer.mask = a;
    this.mountBottom = new canvas.px.Container;
    this.persContainer.addChild(this.mountBottom);
    this.skContainer = new canvas.px.Container;
    this.persContainer.addChild(this.skContainer);
    this.mountTop = new canvas.px.Container;
    this.persContainer.addChild(this.mountTop);
    this.leftButton = new canvas.app.user.view.LeftButton;
    this.addChild(this.leftButton);
    this.leftButton.position.set(81, 83);
    this.rightButton = new canvas.app.user.view.RightButton;
    this.addChild(this.rightButton);
    this.rightButton.position.set(210, 83);
    this.borders = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "main_bg"));
    this.addChild(this.borders);
    this.borders.position.set(10, 0);
    this.bars = new canvas.app.user.view.Bars;
    this.addChild(this.bars);
    this.bars.position.set(1, -7);
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_18_BOLD_STROKE,16772526,32,28,"center");
    this.addChild(this.levelField);
    this.levelField.position.set(155, 345);
    this.createSlots();
    this.petView = new canvas.app.user.view.PetView;
    this.petView.position.set(209, 14);
    this.addChild(this.petView);
    this.trophyView = new canvas.app.user.view.TrophyView;
    this.trophyView.position.set(82, 35);
    this.addChild(this.trophyView);
    this.switchStyleView = new canvas.app.user.view.SwitchStyleView;
    this.switchStyleView.position.set(32, 38);
    this.zoomView = new canvas.app.user.view.ZoomView;
    this.zoomView.position.set(208, 319);
    this.addChild(this.zoomView);
    this.effectsButton = new canvas.app.user.view.EffectsButton;
    this.effectsButton.position.set(147, 312);
    this.effectsWindow = new canvas.app.user.view.EffectsWindow;
    this.effectsWindow.position.set(41, 70);
    this.confirmWindow = new canvas.app.manor.view.controls.ConfirmWindow;
    this.confirmWindow.dragAvailable = false;
    this.update()
}
;
canvas.app.user.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.View.prototype.update = function() {
    var t = canvas.app.user.model;
    this.background.update();
    if (this.location)
        this.location.update();
    if (this.bottomItems)
        this.bottomItems.update();
    if (this.player && this.player.url != t.getSkPath()) {
        this.player.destroy();
        this.player = null
    }
    if (!this.player) {
        this.player = new canvas.animation.SkeletonInfo(t.getSkPath(),new canvas.px.Point(70,180),this.skContainer,t.mount);
        this.player.frameEvent = canvas.app.user.Event.ENTER_FRAME;
        this.player.loop = true;
        this.skContainer.addChild(this.player)
    }
    if (!this.player.skeletonData || this.player.skeletonData.source != t.parts) {
        this.player.skeletonData = new canvas.data.battle.SkeletonData(t.parts,t.myGender)
    }
    if (t.ghost == "1") {
        this.persContainer.filters = [canvas.Functions.getGlow(1, 2, 2, t.bg == "1" ? 0 : 0, .1)];
        this.skContainer.filters = [canvas.Functions.getAlpha(.25)]
    } else {
        this.persContainer.filters = this.skContainer.filters = []
    }
    if (t.farming == "1") {
        this.leftButton.visible = true;
        this.leftButton.mode = "farming";
        this.leftButton.interactiveChildren = false
    } else if (t.fightId != "0") {
        this.leftButton.visible = true;
        this.leftButton.mode = "fighting";
        this.leftButton.interactiveChildren = true
    } else {
        this.leftButton.visible = false
    }
    if (parseInt(t.punished) >= 1 && parseInt(t.punished) <= 5) {
        this.rightButton.punished = t.punished;
        this.rightButton.visible = true;
        if (parseInt(t.punished) == 4) {
            this.rightButton.countField.text = t.punish_cnt
        }
    } else {
        this.rightButton.visible = false
    }
    this.bars.update();
    this.levelField.text = t.myLevel;
    if (t.updateFlags[t.UPDATE_FLAG_ARTS]) {
        t.updateFlags[t.UPDATE_FLAG_ARTS] = false;
        var e = this.slots.length;
        var a = t.arts.split(",");
        for (var i = 0; i < e; i++) {
            this.slots[i].data = a[i] ? a[i].split(":") : null
        }
    }
    if (t.updateFlags[t.UPDATE_FLAG_PET]) {
        t.updateFlags[t.UPDATE_FLAG_PET] = false;
        this.petView.update()
    }
    if (t.updateFlags[t.UPDATE_FLAG_TROPHY]) {
        t.updateFlags[t.UPDATE_FLAG_TROPHY] = false;
        this.trophyView.update()
    }
    if (t.canputoff == "0") {
        this.removeIfExist(this.switchStyleView)
    } else {
        if (t.show_button_switch_view == "1" || t.show_button_switch_view == "2") {
            this.addChild(this.switchStyleView);
            this.switchStyleView.type = t.show_button_switch_view
        } else {
            this.removeIfExist(this.switchStyleView)
        }
    }
    this.updateEffects()
}
;
canvas.app.user.View.prototype.createSlots = function() {
    var t;
    for (var e = 0; e <= 14; e++) {
        t = new canvas.app.user.view.SlotView(e);
        this.slots[e] = t;
        this.addChild(t)
    }
    this.slots[0].position.set(25, 276);
    this.slots[1].position.set(16, 208);
    this.slots[2].position.set(16, 136);
    this.slots[3].position.set(16, 66);
    this.slots[4].position.set(140, 28);
    this.slots[5].position.set(265, 68);
    this.slots[6].position.set(265, 136);
    this.slots[7].position.set(265, 207);
    this.slots[8].position.set(258, 276);
    this.slots[9].position.set(247, 346);
    this.slots[10].position.set(38, 345);
    this.slots[11].position.set(112, 385);
    this.slots[12].position.set(143, 385);
    this.slots[13].position.set(175, 385);
    this.slots[14].position.set(207, 385)
}
;
canvas.app.user.View.prototype.updateEffects = function() {
    var t = canvas.app.user.model;
    t.parseEffects();
    if (t.effects.length > 0) {
        this.addChild(this.effectsButton)
    } else {
        this.hideEffects()
    }
    this.effectsWindow.update()
}
;
canvas.app.user.View.prototype.hideEffects = function() {
    this.removeIfExist(this.effectsButton);
    this.effectsWindowShowHide(true)
}
;
canvas.app.user.View.prototype.effectsWindowShowHide = function(t) {
    if (t == undefined)
        t = false;
    if (t) {
        this.removeIfExist(this.effectsWindow)
    } else {
        this.addChildAt(this.effectsWindow, this.getChildIndex(this.effectsButton))
    }
}
;
canvas.app.user.View.prototype.updatePersPos = function() {
    var t = canvas.app.user.model;
    this.persContainer.position.set(t.PLAYER_MC_X + Math.round(90 * (1 - this.persContainer.scale.x)), t.PLAYER_MC_Y + Math.round(160 * (1 - this.persContainer.scale.y)))
}
;
canvas.app.user.view.Background = function() {
    canvas.px.Container.call(this);
    this.image = ""
}
;
canvas.app.user.view.Background.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.Background.prototype.update = function() {
    if (!this.video)
        return;
    var t = canvas.app.user.model;
    var e = this.image;
    if (t.backImage != "") {
        this.image = t.backImage
    } else {
        this.image = t.bg
    }
    if (this.image != e) {
        this.removeChildren();
        var a;
        if (t.backImage != "") {
            this.video.src = canvas.Config.userBackgroundsPath + canvas.Functions.extractSwfName(t.backImage) + ".ogv";
            a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg"))
        } else {
            a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg_" + (t.bg == "1" ? "h" : "m")))
        }
        this.addChild(a);
        a.x = 74
    }
}
;
canvas.app.user.view.Bars = function() {
    canvas.px.Container.call(this);
    this.hpLine = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hp_line"));
    this.hpLine.position.set(92, 6);
    this.addChild(this.hpLine);
    this.mpLine = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mp_line"));
    this.mpLine.position.set(171, 6);
    this.addChild(this.mpLine);
    this.hp = new canvas.ui.Progress;
    this.hp.setSize(68, 19);
    this.addChild(this.hp);
    this.hp.position.set(102, 9);
    this.mp = new canvas.ui.Progress;
    this.mp.setSize(68, 19);
    this.addChild(this.mp);
    this.mp.position.set(238, 9);
    this.mp.scale.x = -1;
    this.hpLine.mask = this.hp.sprite;
    this.mpLine.mask = this.mp.sprite;
    this.hp.progress = 0;
    this.mp.progress = 0;
    this.hpField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16748639,72,16,"center");
    this.hpField.position.set(100, 13);
    this.addChild(this.hpField);
    this.mpField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,9819903,72,16,"center");
    this.mpField.position.set(169, 13);
    this.addChild(this.mpField);
    this.update()
}
;
canvas.app.user.view.Bars.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.Bars.prototype.update = function() {
    var t = canvas.app.user.model;
    this.hpField.text = t.curHP + "/" + t.myHPmax;
    this.mpField.text = t.curMP + "/" + t.myMPmax;
    if (t.myHPt > 0) {
        this.hp.progress = t.curHP > 0 ? t.curHP / t.myHPmax : 0
    } else {
        this.hp.progress = t.myHP == 0 ? 0 : 1
    }
    if (t.myMPt > 0) {
        this.mp.progress = t.curMP > 0 ? t.curMP / t.myMPmax : 0
    } else {
        this.mp.progress = t.myMP == 0 ? 0 : 1
    }
}
;
canvas.app.user.view.BottomItems = function(t) {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slots_bg")));
    this.back.position.set(0, 32);
    this.bottomContainer = new canvas.px.Container;
    this.addChild(this.bottomContainer);
    this.bottomContainer.position.set(0, 123);
    this.backRings = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_rings_bg"));
    this.back1 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg"));
    this.back2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg"));
    this.back3 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg"));
    this.backRings.y = 2;
    this.slots = t;
    var e;
    for (var a = 15; a <= 25; a++) {
        e = new canvas.app.user.view.SlotView(a);
        this.slots[a] = e
    }
    this.back.addChild(t[15]);
    t[15].position.set(5, 17);
    this.back.addChild(t[16]);
    t[16].position.set(86, 17);
    this.back.addChild(t[17]);
    t[17].position.set(167, 17);
    this.back.addChild(t[18]);
    t[18].position.set(248, 17);
    this.back2.addChild(t[19]);
    t[19].position.set(12, 9);
    this.back3.addChild(t[20]);
    t[20].position.set(12, 9);
    this.back1.addChild(t[21]);
    t[21].position.set(12, 9);
    this.backRings.addChild(t[24]);
    t[24].position.set(10, 41);
    this.backRings.addChild(t[25]);
    t[25].position.set(41, 41);
    this.backRings.addChild(t[22]);
    t[22].position.set(10, 10);
    this.backRings.addChild(t[23]);
    t[23].position.set(41, 10)
}
;
canvas.app.user.view.BottomItems.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.BottomItems.prototype.update = function() {
    var t = canvas.app.user.model;
    this.bottomContainer.removeChildren();
    if (true) {
        this.bottomContainer.addChild(this.backRings);
        this.bottomContainer.addChild(this.back1);
        this.bottomContainer.addChild(this.back2);
        this.bottomContainer.addChild(this.back3);
        for (var e = 19; e <= 25; e++) {
            this.slots[e].imgVisible = true
        }
    } else {
        if (t.arkatCount > 0) {
            this.bottomContainer.addChild(this.backRings);
            this.bottomContainer.addChild(this.back2);
            this.bottomContainer.addChild(this.back3);
            for (var e = 19; e <= 25; e++) {
                this.slots[e].imgVisible = e != 21
            }
        } else {
            this.bottomContainer.addChild(this.back2);
            this.bottomContainer.addChild(this.back3);
            for (var e = 19; e <= 25; e++) {
                this.slots[e].imgVisible = e < 21
            }
        }
    }
    this.updatePositions()
}
;
canvas.app.user.view.BottomItems.prototype.updatePositions = function() {
    var t = this.bottomContainer.numChildren;
    var e = 0;
    for (var a = 0; a < t; a++) {
        this.bottomContainer.getChildAt(a).x = e;
        e += this.bottomContainer.getChildAt(a).width - 3
    }
    switch (t) {
    case 2:
        this.bottomContainer.x = 74;
        break;
    case 3:
        this.bottomContainer.x = 38;
        break;
    default:
        this.bottomContainer.x = 0
    }
}
;
canvas.app.user.view.EffectRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t);
    this.click = null;
    this.setSize(193, 25);
    var e = this.effectsHideAvailable();
    if (this.data) {
        if (this.data.index % 2 != 0) {
            var a = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "effect_back"),2,0,2,0);
            this.addChild(a);
            a.setSize(228, 25)
        }
        this.titleField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,0,125,14,"left","top",0,0,true);
        this.addChild(this.titleField);
        this.titleField.text = "<font color='" + this.data.color + "'>" + this.data.title + "</font>";
        this.titleField.position.set(5, 5);
        this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,60,20,"left");
        this.timeField.text = canvas.Functions.formatDate(this.data.timeLeft);
        this.timeField.position.set(135, 5);
        this.addChild(this.timeField);
        if (this.data.removable) {
            this.removeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effect_remove_button"));
            this.removeButton.position.set(170, 2);
            this.addChild(this.removeButton);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this)
        }
        if (this.data.hidden) {
            this.showButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effect_show"));
            this.showButton.position.set(203, 1);
            this.addChild(this.showButton);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.showButton, this.showClickHandler, this);
            canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
                target: this.showButton,
                params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(813)))
            })
        } else {
            this.hideButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", e ? "effect_hide" : "effect_hide_disabled"));
            this.hideButton.position.set(203, 1);
            this.hideButton.buttonMode = e;
            this.addChild(this.hideButton);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.hideClickHandler, this);
            canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
                target: this.hideButton,
                params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(811) + " " + canvas.app.user.model.effectHideCur + "/" + canvas.app.user.model.effectHideMax))
            })
        }
    } else {
        this.hideAllButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", canvas.app.user.model.effectHideMax > 0 ? e ? "effect_hide" : "effect_show" : "effect_hide_disabled"));
        this.hideAllButton.position.set(203, 1);
        this.hideAllButton.buttonMode = canvas.app.user.model.effectHideMax > 0;
        this.addChild(this.hideAllButton);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideAllButton, this.hideAllClickHandler, this);
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
            target: this.hideAllButton,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(e || canvas.app.user.model.effectHideMax < 1 ? 812 : 814)))
        })
    }
}
;
canvas.app.user.view.EffectRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.user.view.EffectRenderer.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.REMOVE_EFFECT, null, this.data)
}
;
canvas.app.user.view.EffectRenderer.prototype.showClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.SHOW_EFFECT, null, this.data)
}
;
canvas.app.user.view.EffectRenderer.prototype.hideClickHandler = function() {
    if (this.effectsHideAvailable()) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HIDE_EFFECT, null, this.data)
    }
}
;
canvas.app.user.view.EffectRenderer.prototype.hideAllClickHandler = function() {
    if (this.effectsHideAvailable()) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HIDE_ALL_EFFECTS, null, this.data)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.SHOW_ALL_EFFECTS, null, this.data)
    }
}
;
canvas.app.user.view.EffectRenderer.prototype.updateTime = function() {
    if (this.data) {
        var t = Date.now();
        if (!this.data.frozen) {
            this.data.timeLeft -= t - this.data.timeLeftStart;
            this.data.timeLeftStart = t
        }
        this.timeField.text = this.data.timeLeft > 0 ? canvas.Functions.formatDate(this.data.timeLeft) : ""
    }
}
;
canvas.app.user.view.EffectRenderer.prototype.effectsHideAvailable = function() {
    return canvas.app.user.model.effectHideCur < canvas.app.user.model.effectHideMax
}
;
canvas.app.user.view.EffectRenderer.prototype.destroy = function() {
    if (this.removeButton) {
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this)
    }
    if (this.showButton) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
            target: this.showButton
        })
    }
    if (this.hideButton) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
            target: this.hideButton
        })
    }
    if (this.hideAllButton) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
            target: this.hideAllButton
        })
    }
    canvas.ui.ListRenderer.prototype.destroy.apply(this)
}
;
canvas.app.user.view.EffectsButton = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "effects_button_back")));
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effects_button_front"));
    this.button.position.set(15, 3);
    this.addChild(this.button);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.outHandler, this)
}
;
canvas.app.user.view.EffectsButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.EffectsButton.prototype.overHandler = function() {
    effectAltSimple(2)
}
;
canvas.app.user.view.EffectsButton.prototype.outHandler = function() {
    effectAltSimple(0)
}
;
canvas.app.user.view.EffectsWindow = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "effects_back")));
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,80,20,"left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(14, 4);
    t.text = canvas.Translator.getText(800).toLowerCase();
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,40,20,"left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(142, 4);
    t.text = canvas.Translator.getText(723).toLowerCase();
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,40,20,"left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(180, 4);
    t.text = canvas.Translator.getText(802).toLowerCase();
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,40,20,"left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(216, 4);
    t.text = canvas.Translator.getText(810).toLowerCase();
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1);
    this.addChild(this.list);
    this.list.position.set(8, 25);
    this.list.paddingV = 0;
    this.list.setSize(244, 220);
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var a = new canvas.px.Container;
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5]);
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    s.scale.y = -1;
    s.position.y = -s.height + 2;
    a.addChild(s);
    i.setSize(21, 40);
    this.drag = i;
    var n = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,e,a,new canvas.px.Mask(21,100),i,this);
    n.padding = 13;
    n.step = 30;
    n.setSize(12);
    this.list.scroll = n;
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effects_info_button"));
    this.infoButton.position.set(114, -23);
    this.addChild(this.infoButton);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this)
}
;
canvas.app.user.view.EffectsWindow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.EffectsWindow.prototype.update = function() {
    var t = canvas.app.user.model;
    var e = this.list.scroll ? this.list.scroll.current : 0;
    var a = t.effects.length;
    this.list.clear();
    for (var i = 0; i < a; i++) {
        t.effects[i].index = i;
        this.list.add(new canvas.app.user.view.EffectRenderer(t.effects[i]), false)
    }
    this.list.add(new canvas.app.user.view.EffectRenderer, false);
    this.list.update();
    if (this.list.scroll && e > 0) {
        this.list.scroll.current = e;
        this.list.scrollHandler(null)
    }
}
;
canvas.app.user.view.EffectsWindow.prototype.updateTime = function() {
    var t = canvas.app.user.model;
    var e = this.list.items.length;
    var a = false;
    for (var i = 0; i < e; i++) {
        this.list.items[i].updateTime();
        if (this.list.items[i].data && this.list.items[i].timeField.text == "") {
            t.removeEffect(this.list.items[i].data);
            a = true
        }
    }
    if (a)
        this.update()
}
;
canvas.app.user.view.EffectsWindow.prototype.infoClickHandler = function() {
    var t = canvas.app.user.model;
    showEffectInfo(t.nick)
}
;
canvas.app.user.view.LeftButton = function() {
    this._mode = "fighting";
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t;
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", this._mode)
        }
    });
    this._visible = false;
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t;
            if (!this.back)
                return;
            if (this._visible) {
                if (!this.contains(this.back))
                    this.addChild(this.back);
                if (!this.contains(this.button))
                    this.addChild(this.button)
            } else {
                if (this.contains(this.back))
                    this.removeChild(this.back);
                if (this.contains(this.button))
                    this.removeChild(this.button)
            }
        }
    });
    canvas.px.Container.call(this);
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_button_back"));
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", this._mode));
    this.button.position.set(7, 19);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
;
canvas.app.user.view.LeftButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.LeftButton.prototype.clickHandler = function() {
    var t = canvas.app.user.model;
    if (this.mode == "fighting") {
        showFightInfo(t.fightId)
    }
}
;
canvas.app.user.view.LocationView = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg3_bottom")));
    this.image = new canvas.ui.Image;
    this.addChild(this.image);
    this.image.position.set(28, 19);
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top1")));
    t.position.set(62, 82);
    this.townTitle = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,16769466,160,17,"center");
    this.addChild(this.townTitle);
    this.townTitle.position.set(91, 87);
    this.locTitle = new canvas.ui.HtmlText(canvas.Translator.getLang() == canvas.Const.LANG_RU || canvas.Translator.getLang() == canvas.Const.LANG_EN ? canvas.Const.FONT_RADA_18 : canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,canvas.Const.FONT_TAHOMA_14_BOLD,16769466,264,42,"center","middle");
    this.locTitle.position.set(38, 42);
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this)
}
;
canvas.app.user.view.LocationView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.LocationView.prototype.update = function() {
    var t = canvas.app.user.model;
    this.image.setImage(t.townSrc);
    this.townTitle.text = t.myTitle;
    this.locTitle.text = t.myTown.toLowerCase() + (t.myLocation == t.myTitle ? "" : "<br/>" + t.myLocation.toLowerCase())
}
;
canvas.app.user.view.LocationView.prototype.overHandler = function() {
    if (!this.contains(this.locTitle))
        this.addChild(this.locTitle)
}
;
canvas.app.user.view.LocationView.prototype.outHandler = function() {
    if (this.contains(this.locTitle))
        this.removeChild(this.locTitle)
}
;
canvas.app.user.view.PetView = function() {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container;
    this.addChild(this.container);
    this.msk = new canvas.px.Mask(60,70);
    this.addChild(this.msk);
    this.msk.position.set(2, -1);
    this.container.mask = this.msk;
    this.wall = new canvas.px.Mask(50,60);
    this.addChild(this.wall);
    this.wall.position.set(2, 9);
    this.wall.interactive = true;
    this.wall.buttonMode = true;
    this.levelBack = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.levelBack);
    this.levelBack.position.set(-4, 46);
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11_BOLD_STROKE,15719839,22,20,"center");
    this.addChild(this.levelField);
    this.levelField.position.set(-3, 53);
    this.hint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.wall,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.wall.click = this.clickHandler.bind(this)
}
;
canvas.app.user.view.PetView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.PetView.prototype.update = function() {
    var t = canvas.app.user.model;
    if (this.mc) {
        this.mc.destroy()
    }
    if (t.pet_picture != "") {
        var e = canvas.Functions.extractSwfName(t.pet_picture);
        this.mc = new canvas.px.MovieClip(canvas.Config.petsUiPath + e + "/" + e,null,false);
        this.mc.y = -2;
        this.container.addChild(this.mc);
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.mc, this.updateHandler, this);
        if (this.mc.ready)
            this.updateHandler();
        this.levelBack.texture = canvas.ResourceLoader.getImage("ui", "pet_level_back_" + (t.pet_color == "0" ? 1 : parseInt(t.pet_color)));
        this.levelField.text = t.pet_level;
        this.hint.update(t.pet_name + " [" + t.pet_level + "]", t.getPetColor(t.pet_color));
        this.wall.interactive = true
    } else {
        this.levelBack.texture = canvas.px.TextureEmpty;
        this.levelField.text = "";
        this.wall.interactive = false
    }
}
;
canvas.app.user.view.PetView.prototype.updateHandler = function() {
    if (this.mc.mcChildsCache["mc1"]) {
        this.mc.stop();
        this.mc.mcChildsCache["mc1"].loop = true;
        this.mc.mcChildsCache["mc1"].play();
        this.mc.mcChildsCache["mc1"].skipMasks = true;
        if (!this.mc.mcChildsCache["mc1"].frameEvent) {
            this.mc.mcChildsCache["mc1"].frameEvent = canvas.app.user.Event.ENTER_FRAME
        }
    } else {
        this.mc.loop = true;
        this.mc.gotoAndPlay = function() {}
        ;
        this.mc.stop = function() {}
        ;
        this.mc.frameEvent = canvas.app.user.Event.ENTER_FRAME
    }
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.mc, this.updateHandler, this)
}
;
canvas.app.user.view.PetView.prototype.clickHandler = function() {
    var t = canvas.app.user.model;
    showPetInfo(t.pet_id)
}
;
canvas.app.user.view.RightButton = function() {
    this._punished = 1;
    Object.defineProperty(this, "punished", {
        get: function() {
            return this._punished
        },
        set: function(t) {
            this._punished = t;
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", "punished" + this._punished)
        }
    });
    this._visible = false;
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t;
            if (!this.button)
                return;
            if (this._visible) {
                if (!this.contains(this.button))
                    this.addChild(this.button);
                if (parseInt(this.punished) == 4 && !this.contains(this.countBack))
                    this.addChild(this.countBack)
            } else {
                if (this.contains(this.countBack))
                    this.removeChild(this.countBack);
                if (this.contains(this.button))
                    this.removeChild(this.button)
            }
        }
    });
    canvas.px.Container.call(this);
    this.countBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "punished_cnt_back"));
    this.countField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_10_BOLD_STROKE,15719839,22,16,"center");
    this.countField.position.set(-1, 2);
    this.countBack.addChild(this.countField);
    this.countBack.position.set(5, 50);
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "punished" + this._punished));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
;
canvas.app.user.view.RightButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.RightButton.prototype.clickHandler = function() {
    var t = canvas.app.user.model;
    showPunishmentInfo(t.nick)
}
;
canvas.app.user.view.SlotButton = function() {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "slot_button"));
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,6507828,60,16,"center");
    this.addChild(this.title);
    this.title.y = -1
}
;
canvas.app.user.view.SlotButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.user.view.SlotButton.prototype.setTitle = function(t) {
    this.title.text = t
}
;
canvas.app.user.view.SlotView = function(t) {
    this._img = null;
    Object.defineProperty(this, "img", {
        get: function() {
            return this._img
        },
        set: function(t) {
            this._img = t;
            var e = this.toGlobal(new canvas.px.Point(0,0));
            var a = canvas.app.user.model;
            this._img.style.left = e.x + 20 + (a.canputoff == "0" ? -20 : 0) + canvas.app.user.Const.LEFT + (this.isRing ? -2 : 0);
            this._img.style.top = e.y + 34 + (a.canputoff == "0" ? 20 : 0) + canvas.app.user.Const.TOP + (this.isRing ? -2 : 0);
            if (this.data && this.data[1])
                this._img.src = canvas.app.user.model.picPath + this.data[1];
            if (this.isRing) {
                this._img.style.width = this._img.style.height = 30
            }
            this.updateImg()
        }
    });
    this._imgVisible = true;
    Object.defineProperty(this, "imgVisible", {
        get: function() {
            return this._imgVisible
        },
        set: function(t) {
            this._imgVisible = t;
            this.updateImg()
        }
    });
    canvas.ui.ListRenderer.call(this);
    this.id = t;
    this.isRing = false;
    this.isArkat = false;
    var e = "item_back_default";
    switch (this.id) {
    case 15:
    case 16:
        e = "item_back_belt";
        break;
    case 17:
    case 18:
        e = "item_back_bag";
        break;
    case 19:
        e = "item_back_quiver";
        break;
    case 20:
        e = "item_back_chest";
        break;
    case 21:
        e = "item_back_bracelet";
        break;
    case 11:
    case 12:
    case 13:
    case 14:
        e = "item_back_default_small";
        this.isRing = true;
        break;
    case 22:
    case 23:
    case 24:
    case 25:
        e = "item_back_ring";
        this.isRing = true;
        this.isArkat = true;
        break
    }
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", e));
    this.addChild(this.back);
    this.bottomContainer = new canvas.px.Container;
    this.topContainer = new canvas.px.Container;
    this.gravIcon = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "grav_icon"));
    this.gravIcon.position.set(20, 40);
    this.runeHole = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_hole"));
    this.runeHole.position.set(1, 40);
    this.runeOprava = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_oprava"));
    this.runeOprava.position.set(1, 40);
    this.runeIcon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.runeIcon.position.set(3, 42);
    this.runeIcon2 = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.runeIcon2.position.set(3, 42);
    this.addChild(this.bottomContainer);
    if (!this.isRing) {
        this.centerButton = new canvas.app.user.view.SlotButton;
        this.centerButton.position.set(0, 24);
        this.topContainer.addChild(this.centerButton)
    }
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", this.isRing ? "ring_info_button" : "info_button"),[0, 0, 0, 0]);
    if (this.isRing) {
        this.infoButton.position.set(2, 24)
    } else {
        this.infoButton.position.set(40, 0)
    }
    this.topContainer.addChild(this.infoButton);
    this.rollButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "roll_button"),[0, 0, 0, 0]);
    this.rollButton.position.set(0, 0);
    this.chantButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "chant_button"),[0, 0, 0, 0]);
    this.chantButton.position.set(20, 40);
    if (this.id == 6) {
        this.doubleHandWall = new canvas.px.Mask(60,60,0,.5)
    }
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.chantButton, this.chantOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.chantButton, this.chantOutHandler, this);
    this.interactive = true;
    this.buttonMode = true;
    this.update()
}
;
canvas.app.user.view.SlotView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.user.view.SlotView.prototype.update = function() {
    var t = canvas.app.user.model;
    if (this.doubleHandWall)
        this.removeIfExist(this.doubleHandWall);
    if (this.data && this.data[1]) {
        this.aid = this.data[0];
        if (this.data[5] != null && this.data[5] != "" && this.data[5] != undefined) {
            if (this.data[5] < 2 || this.data[5] > 6) {
                this.data[5] = 0
            } else {
                this.data[5]--
            }
        }
        this.back.alpha = 0;
        this.interactive = true;
        this.back.interactive = false;
        if (this.img)
            this.img.src = t.picPath + this.data[1];
        if (!this.isRing) {
            if (this.data[3] != "") {
                this.bottomContainer.addChild(this.gravIcon)
            } else {
                this.bottomContainer.removeIfExist(this.gravIcon)
            }
            if (this.data[7] != undefined && parseInt(this.data[7]) != 0) {
                this.bottomContainer.addChild(this.runeHole);
                this.bottomContainer.addChild(this.runeIcon);
                this.bottomContainer.addChild(this.runeIcon2);
                this.bottomContainer.addChild(this.runeOprava)
            } else {
                this.bottomContainer.removeIfExist(this.runeHole);
                this.bottomContainer.removeIfExist(this.runeIcon);
                this.bottomContainer.removeIfExist(this.runeIcon2);
                this.bottomContainer.removeIfExist(this.runeOprava)
            }
            if (this.data[2] != "") {
                if (!this.bottomContainer.contains(this.runeIcon)) {
                    this.bottomContainer.addChild(this.runeIcon)
                }
                this.runeIcon.texture = canvas.ResourceLoader.getImage("ui", "rune_" + (Math.min(parseInt(this.data[2]), 5) * 10 + 1 + parseInt(this.data[5])))
            } else {
                this.bottomContainer.removeIfExist(this.runeIcon)
            }
            if (this.data[8] != "") {
                if (!this.bottomContainer.contains(this.runeIcon2)) {
                    this.bottomContainer.addChild(this.runeIcon2)
                }
                this.runeIcon2.texture = canvas.ResourceLoader.getImage("ui", "rune2_" + (parseInt(this.data[8]) + 1))
            } else {
                this.bottomContainer.removeIfExist(this.runeIcon2)
            }
            if (this.centerButton)
                this.centerButton.setTitle(t.take_off);
            if (parseInt(this.data[4]) > 0) {
                this.topContainer.addChild(this.rollButton)
            } else {
                this.topContainer.removeIfExist(this.rollButton)
            }
            if (parseInt(this.data[6]) > 0) {
                this.topContainer.addChild(this.chantButton)
            } else {
                this.topContainer.removeIfExist(this.chantButton)
            }
            if (this.id == 6 && t.dh == "1") {
                this.addChild(this.doubleHandWall)
            }
        }
    } else {
        this.back.alpha = 1;
        this.interactive = false;
        if (this.isArkat) {
            if (this.id - 21 <= t.arkatCount) {
                this.back.texture = canvas.ResourceLoader.getImage("ui", "item_back_default_small");
                canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
                    target: this.back
                });
                this.back.interactive = false
            } else {
                this.back.texture = canvas.ResourceLoader.getImage("ui", "item_back_ring");
                this.back.interactive = true;
                canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
                    target: this.back,
                    params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(809)))
                })
            }
        }
        this.outHandler();
        this.bottomContainer.removeChildren()
    }
}
;
canvas.app.user.view.SlotView.prototype.clickHandler = function(t) {
    var e = canvas.app.user.model;
    if (e.canputoff != "1") {
        showArtifactInfo(this.aid);
        return
    }
    if (canvas.Functions.findParent(this.infoButton, t.target)) {
        showArtifactInfo(this.aid);
        return
    }
    if (canvas.Functions.findParent(this.rollButton, t.target)) {
        artuse(this.aid);
        return
    }
    if (canvas.Functions.findParent(this.chantButton, t.target)) {
        art_superstructure_destroy(this.aid);
        return
    }
    artifact(this.aid)
}
;
canvas.app.user.view.SlotView.prototype.overHandler = function() {
    var t = canvas.app.user.model;
    artifactAltSimple(this.aid, 2);
    if (t.canputoff != "1")
        return;
    this.addChild(this.topContainer)
}
;
canvas.app.user.view.SlotView.prototype.outHandler = function() {
    var t = canvas.app.user.model;
    artifactAltSimple(this.aid, 0);
    if (t.canputoff != "1")
        return;
    this.removeIfExist(this.topContainer)
}
;
canvas.app.user.view.SlotView.prototype.chantOverHandler = function() {
    var t = canvas.app.user.model;
    this.centerButton.setTitle(t.take_off_chant)
}
;
canvas.app.user.view.SlotView.prototype.chantOutHandler = function() {
    var t = canvas.app.user.model;
    this.centerButton.setTitle(t.take_off)
}
;
canvas.app.user.view.SlotView.prototype.updateImg = function() {
    if (this.img) {
        this.img.style.display = this.imgVisible ? "" : "none"
    }
}
;
canvas.app.user.view.SwitchStyleView = function() {
    this._type = null;
    Object.defineProperty(this, "type", {
        get: function() {
            return this._type
        },
        set: function(t) {
            this._type = t;
            this.image.texture = canvas.ResourceLoader.getImage("ui", "switcher" + this._type);
            if (this._type == "1") {
                this.image.position.set(10, 8)
            } else {
                this.image.position.set(7, 7)
            }
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "switcher_back"));
    this.image = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.image);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this, this.clickHandler, this)
}
;
canvas.app.user.view.SwitchStyleView.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.user.view.SwitchStyleView.prototype.clickHandler = function() {
    switchViewArtifact();
    this.type = this.type == "1" ? "2" : "1"
}
;
canvas.app.user.view.TrophyView = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.user.model;
    this.bg = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bg.buttonMode = true;
    this.addChild(this.bg);
    this.bg.interactive = true;
    this.bg.hitArea = new canvas.px.Rectangle(0,0,46,49);
    this.wall = new canvas.px.Mask(46,49);
    this.bg.addChild(this.wall);
    this.wall.interactive = true;
    this.container = new canvas.px.Container;
    this.bg.addChild(this.container);
    this.container.filters = [canvas.Functions.getDropShadow(90, 2)];
    this.bgLevel = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.bgLevel);
    this.bgLevel.position.set(8, 31);
    this.bgLevel.interactive = false;
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11_BOLD_STROKE,15719839,36,20,"center");
    this.addChild(this.levelField);
    this.levelField.position.set(23, 38);
    this.deleteButton = t.canputoff == "0" ? new canvas.px.Container : new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "trophy_delete_button"));
    this.deleteButton.position.set(4, 35);
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.deleteButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.take_off))
    });
    this.hint = new canvas.app.view.MappingHint("111",6770493,true,true);
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.wall,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.bg.click = this.clickHandler.bind(this);
    this.bg.mouseover = this.overHandler.bind(this);
    this.bg.mouseout = this.outHandler.bind(this)
}
;
canvas.app.user.view.TrophyView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.TrophyView.prototype.update = function() {
    var t = canvas.app.user.model;
    if (this.mc) {
        this.mc.destroy()
    }
    if (t.trophy_name != "") {
        var e = 1;
        var a = 6710886;
        if (t.trophyLevel == t.myLevel) {
            t.textColor = 3381504;
            e = 2
        } else if (t.trophyLevel == t.myLevel + 1) {
            t.textColor = 3342591;
            e = 3
        } else if (t.trophyLevel == t.myLevel + 2) {
            t.textColor = 10027161;
            e = 4
        } else if (t.trophyLevel >= t.myLevel + 3) {
            t.textColor = 16711680;
            e = 5
        }
        this.bg.texture = t.trophyLevel == 0 ? canvas.px.TextureEmpty : canvas.ResourceLoader.getImage("ui", "trophy_bg_" + e);
        this.bgLevel.texture = canvas.ResourceLoader.getImage("ui", "trophy_bg_level_" + e);
        this.mc = new canvas.animation.SkeletonInfo(t.getTrophySkPath());
        this.mc.stop();
        this.mc.position.set(-73, -2);
        this.container.addChild(this.mc);
        this.mc.skeletonData = new canvas.data.battle.SkeletonData(t.trophy_parts,t.trophyGender);
        this.levelField.text = t.trophyLevel == 0 ? "" : t.trophyLevel;
        this.addChildAt(this.bg, 0);
        var i = t.alt + " ";
        if (t.trophyClan != "") {
            i += "<img yOffset='4' src='" + t.trophyClan + "'/>"
        }
        if (t.trophyRank != "") {
            i += "<img yOffset='4' src='" + t.trophyRank + "'/>"
        }
        i += t.trophy_name + " [" + t.trophyLevel + "]";
        this.hint.update("<b>" + i + "</b>", a != 0 ? a : 3355443)
    } else {
        this.bg.texture = canvas.px.TextureEmpty;
        this.levelField.text = "";
        this.bgLevel.texture = canvas.px.TextureEmpty;
        this.removeIfExist(this.bg)
    }
}
;
canvas.app.user.view.TrophyView.prototype.clickHandler = function(t) {
    var e = canvas.app.user.model;
    if (canvas.Functions.findParent(this.deleteButton, t.target)) {
        trophy_drop();
        return
    }
    showUserInfo(e.trophy_name)
}
;
canvas.app.user.view.TrophyView.prototype.overHandler = function() {
    this.bg.addChild(this.deleteButton)
}
;
canvas.app.user.view.TrophyView.prototype.outHandler = function() {
    this.bg.removeIfExist(this.deleteButton)
}
;
canvas.app.user.view.ZoomView = function() {
    canvas.px.Container.call(this);
    this.zoomIn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_in"));
    this.addChild(this.zoomIn);
    this.zoomIn.position.set(15, 0);
    this.zoomIn.sprite.hitArea = new canvas.px.Circle(12,12,12);
    this.zoomOut = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_out"));
    this.addChild(this.zoomOut);
    this.zoomOut.position.set(0, 15);
    this.zoomOut.sprite.hitArea = new canvas.px.Circle(12,12,12);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.zoomIn, this.clickInHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.zoomOut, this.clickOutHandler, this)
}
;
canvas.app.user.view.ZoomView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.ZoomView.prototype.clickInHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ZOOM_IN)
}
;
canvas.app.user.view.ZoomView.prototype.clickOutHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ZOOM_OUT)
}
;
canvas.app.leftMenu.Const = {
    ON_PAGE: 6,
    ON_PAGE_MIN: 6,
    ON_PAGE_MAX: 12,
    MIN_COOLDOWN: 5,
    VARIANT_SLOTS_COUNT: 2,
    SLOT_HEIGHT: 45
};
canvas.app.leftMenu.Event = {
    ENTER_FRAME: "LeftMenu.ENTER_FRAME",
    CHANGE_PAGE: "LeftMenu.CHANGE_PAGE",
    SHOW_VARIANT_SLOTS: "LeftMenu.SHOW_VARIANT_SLOTS",
    SELECT_SLOT: "LeftMenu.SELECT_SLOT",
    UNSET_SLOT: "LeftMenu.UNSET_SLOT",
    SLOT_CHANGED: "LeftMenu.SLOT_CHANGED",
    SLOT_HIDED: "LeftMenu.SLOT_HIDED",
    BATTLE_ACTION: "LeftMenu.BATTLE_ACTION",
    FOCUS_FIRST_FREE_SLOT: "LeftMenu.FOCUS_FIRST_FREE_SLOT"
};
canvas.app.leftMenu.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.view = new canvas.app.leftMenu.View;
    this.addChild(this.view);
    this.unsetTimer = 0;
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.CHANGE_PAGE, null, this.pageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SELECT_SLOT, null, this.selectSlotHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.UNSET_SLOT, null, this.unsetSlotHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SHOW_VARIANT_SLOTS, null, this.showVariantSlotHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SLOT_HIDED, null, this.slotHidedHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.BATTLE_ACTION, null, this.battleActionHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.FOCUS_FIRST_FREE_SLOT, null, this.focusFirstFreeSlot, this);
    this.testSize();
    this.focusFirstFreeSlot()
}
;
canvas.app.leftMenu.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.leftMenu.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            switch (e) {
            case "user|effects":
                a = t["user|effects"];
                var i = [];
                var s = [];
                var n;
                for (n in a.effects) {
                    i[parseInt(n)] = a.effects[n]
                }
                for (n in a.variant_effects) {
                    s[parseInt(n)] = a.variant_effects[n]
                }
                var r = {
                    EffList: i,
                    VariantEffList: s,
                    slotsTotal: a.effect_slot_num_max,
                    VariantSlotsTotal: a.variant_effect_slot_num_max
                };
                this.model.parse(r);
                canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.slotChangedHandler, this);
                this.view.update();
                canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.slotChangedHandler, this);
                break;
            case "common|current_slot":
                this.model.itemWasEquipped = true;
                break
            }
        }
    }
}
;
canvas.app.leftMenu.Main.prototype.swfData = function(t) {
    var e = t.split("@");
    var a;
    var i, s, n;
    if (e.length == 2) {
        switch (e[0]) {
        case "EffList":
            this.model.parseBattleEffects(e[1]);
            this.view.update();
            break;
        case "update_cnt":
            a = e[1].split(",");
            i = this.model.addCount(a[0], parseInt(a[1]));
            s = this.view.list.items[(i.slot - 1) % canvas.app.leftMenu.Const.ON_PAGE];
            if (s.variantSlotsContainer.parent) {
                s._disabledVariant = true
            }
            this.model.addCooldown(i);
            this.view.update();
            break;
        case "swap_slots":
            a = e[1].split(",");
            this.model.swapItems(a[0], a[2]);
            this.view.update();
            break;
        case "PrevPage":
            this.view.pager.currentPage--;
            break;
        case "NextPage":
            this.view.pager.currentPage++;
            break;
        case "HotKey":
            n = parseInt(e[1]) - 1;
            if (this.view.list.items[n])
                this.view.list.items[n].items[0].clickHandler();
            break;
        case "cd_dec":
            this.model.deltaTurn(parseInt(e[1]));
            break
        }
    }
}
;
canvas.app.leftMenu.Main.prototype.pageHandler = function(t) {
    this.view.update()
}
;
canvas.app.leftMenu.Main.prototype.selectSlotHandler = function(t) {
    if (!this.model.inBattle) {
        this.model.selectedRow = t.params.row;
        this.model.selectedColumn = t.params.column;
        this.model.selectedSlot = this.view.getSlotNum(this.model.selectedColumn, this.model.selectedRow);
        this.model.selectedSlotIsVariant = this.model.selectedColumn > 0;
        this.view.selectSlot(this.model.selectedSlot, this.model.selectedSlotIsVariant);
        this.slotFocus(this.model.selectedSlot, this.model.selectedSlotIsVariant ? 1 : 0)
    }
}
;
canvas.app.leftMenu.Main.prototype.focusFirstFreeSlot = function() {
    if (this.model.selectedSlot || this.model.inBattle)
        return;
    var t = 1;
    var e = 1;
    for (var a = 0; a < this.model.slotsCount; a++) {
        for (var i = 0; i < 3; i++) {
            if (i > 0) {
                if (e > this.model.variantSlotsCount)
                    continue;
                if (!this.model.variantItems[e]) {
                    this.slotFocus(e, 1);
                    if (this.model.itemWasEquipped)
                        this.view.pager.currentPage = Math.max(1, Math.ceil((e - 1) / (canvas.app.leftMenu.Const.ON_PAGE * 2)));
                    this.model.itemWasEquipped = false;
                    return
                }
                e++
            } else if (!this.model.items[t]) {
                this.slotFocus(t, 0);
                if (this.model.itemWasEquipped)
                    this.view.pager.currentPage = Math.max(1, Math.ceil((t - 1) / canvas.app.leftMenu.Const.ON_PAGE));
                this.model.itemWasEquipped = false;
                return
            } else {
                t++
            }
        }
    }
    if (this.model.itemWasEquipped) {
        if (this.model.slotFocusIsVariant) {
            this.view.pager.currentPage = Math.max(1, Math.ceil(this.model.slotFocusNum / (canvas.app.leftMenu.Const.ON_PAGE * 2)))
        } else {
            this.view.pager.currentPage = Math.max(1, Math.ceil(this.model.slotFocusNum / canvas.app.leftMenu.Const.ON_PAGE))
        }
    }
    this.model.itemWasEquipped = false;
    this.slotFocus(0, 0)
}
;
canvas.app.leftMenu.Main.prototype.slotFocus = function(t, e) {
    slotFocus(t, e);
    this.model.slotFocusNum = t;
    this.model.slotFocusIsVariant = e
}
;
canvas.app.leftMenu.Main.prototype.unsetSlotHandler = function(t) {
    this.model.selectedSlot = null;
    this.model.unsetList.push(t.params);
    if (!this.unsetTimer) {
        this.unsetTimerHandler()
    }
}
;
canvas.app.leftMenu.Main.prototype.unsetTimerHandler = function(t) {
    if (this.model.unsetList.length > 0) {
        this.unsetSlot(this.model.unsetList.shift());
        this.unsetTimer = setTimeout(this.unsetTimerHandler.bind(this), 500)
    } else {
        this.unsetTimer = 0
    }
}
;
canvas.app.leftMenu.Main.prototype.unsetSlot = function(t) {
    var e = this.view.getSlotNum(t.column, t.row);
    if (unsetEffect(t.id, e)) {
        if (t.column > 0) {
            this.model.variantItems[e] = null
        } else {
            this.model.items[e] = null
        }
        this.view.update()
    }
}
;
canvas.app.leftMenu.Main.prototype.showVariantSlotHandler = function(t) {
    for (var e = 0; e < canvas.app.leftMenu.Const.ON_PAGE; e++) {
        if (e != t.params)
            this.view.list.items[e].hideVariantSlots()
    }
}
;
canvas.app.leftMenu.Main.prototype.slotChangedHandler = function(t) {
    if (!this.model.inBattle) {
        this.view.list.items[t.params].showVariantSlots();
        this.showVariantSlotHandler(t)
    }
}
;
canvas.app.leftMenu.Main.prototype.slotHidedHandler = function(t) {
    this.testSize()
}
;
canvas.app.leftMenu.Main.prototype.testSize = function() {
    var t = false;
    for (var e = 0; e < canvas.app.leftMenu.Const.ON_PAGE; e++) {
        if (this.view.list.items[e].opened) {
            t = true;
            break
        }
    }
    var a = t ? 0 : -84;
    if (a != this.model.lastCanvasSize) {
        this.model.lastCanvasSize = a;
        this.view.position.set(-a, 0);
        setStyleSWF("left", a)
    }
}
;
canvas.app.leftMenu.Main.prototype.battleActionHandler = function(t) {
    this.model.swfTransfer("game", t.params)
}
;
canvas.app.leftMenu.Main.prototype.frameHandler = function(t) {
    if (this.model.inBattle) {
        var e = this.model.groupCooldowns.length;
        var a = false;
        if (e > 0) {
            var i;
            var s = canvas.Functions.now();
            var n;
            for (var r = 0; r < e; r++) {
                i = this.model.groupCooldowns[r];
                if (i.type == 1) {
                    if (s >= i.finish) {
                        this.model.groupCooldowns.splice(r, 1);
                        a = true
                    }
                } else {
                    if (i.current >= i.finish) {
                        this.model.groupCooldowns.splice(r, 1);
                        a = true
                    }
                }
                for (var o = 0; o < canvas.app.leftMenu.Const.ON_PAGE; o++) {
                    for (var l = 0; l < 3; l++) {
                        n = this.view.list.items[o].items[l];
                        if (n.data && n.data.cdGroupId == i.group) {
                            n.updateCooldown(a ? null : i)
                        }
                    }
                }
                if (a)
                    return
            }
        }
    }
}
;
canvas.app.leftMenu.Model = function(t) {
    t.EffList = t.EffList.split(",");
    t.VariantEffList = t.VariantEffList.split(",");
    this.persFlags = t.persFlags != undefined ? parseInt(t.persFlags) : 0;
    this.flagShowBattleHints = t.persFlags != undefined ? canvas.Functions.testFlag(this.persFlags, 262144) : true;
    this.unsetList = [];
    this.lastCanvasSize = 0;
    this.lastOnPageCount = 0;
    this.groupCooldowns = [];
    this.itemWasEquipped = false;
    this.slotFocusNum = 0;
    this.slotFocusIsVariant = 0;
    this.parse(t)
}
;
canvas.app.leftMenu.Model.prototype.parse = function(t) {
    this.selectedSlot = null;
    this.items = t.EffList ? this.parseItems(t.EffList) : [];
    this.variantItems = t.VariantEffList ? this.parseItems(t.VariantEffList, true) : [];
    this.slotsCount = t.slotsTotal ? parseInt(t.slotsTotal) : 0;
    this.variantSlotsCount = t.VariantSlotsTotal ? parseInt(t.VariantSlotsTotal) : 0;
    this.inBattle = false;
    if (this.groupCooldowns.length > 0) {
        this.groupCooldowns = []
    }
}
;
canvas.app.leftMenu.Model.prototype.parseItems = function(t, e) {
    if (e == undefined)
        e = false;
    var a = [];
    var i = t.length;
    var s;
    var n;
    for (var r = 0; r < i; r++) {
        n = new canvas.data.leftMenu.ItemData(t[r].split(":"));
        n.variant = e;
        a[n.slot] = n
    }
    return a
}
;
canvas.app.leftMenu.Model.prototype.inBattleFrame = function() {
    return this.swfTransfer("game", "ping@null")
}
;
canvas.app.leftMenu.Model.prototype.swfTransfer = function(t, e) {
    return swfTransfer("item", t, e)
}
;
canvas.app.leftMenu.Model.prototype.parseBattleEffects = function(t) {
    var e = t.split(String.fromCharCode(2));
    canvas.app.leftMenu.Const.MIN_COOLDOWN = parseFloat(e.pop());
    var a = e.length;
    this.items = [];
    this.variantItems = [];
    for (var i = 0; i < a; i++) {
        item = new canvas.data.leftMenu.ItemData(e[i].split(String.fromCharCode(1)));
        if (item.variant) {
            item.slot = (item.slot - 1) * canvas.app.leftMenu.Const.VARIANT_SLOTS_COUNT + (item.variantNum - 1);
            this.variantItems[item.slot] = item
        } else {
            this.items[item.slot] = item
        }
        if (item.cdLeft > 0) {
            this.addCooldown(item)
        }
    }
    this.inBattle = true
}
;
canvas.app.leftMenu.Model.prototype.addCount = function(t, e) {
    var a = this.items.length;
    var i = this.findItem(t);
    if (i) {
        i.count += e;
        if (i.count < 1) {
            this.items[i.slot] = null
        }
        return i
    }
    i = this.findVariantItem(t);
    if (i) {
        i.count += e;
        if (i.count < 1) {
            this.variantItems[i.slot] = null
        }
        return i
    }
}
;
canvas.app.leftMenu.Model.prototype.findItem = function(t) {
    var e = this.items.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = this.items[i];
        if (a && a.id == t) {
            return a
        }
    }
    return null
}
;
canvas.app.leftMenu.Model.prototype.findVariantItem = function(t) {
    var e = this.variantItems.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = this.variantItems[i];
        if (a && a.id == t) {
            return a
        }
    }
    return null
}
;
canvas.app.leftMenu.Model.prototype.swapItems = function(t, e) {
    var a = this.findVariantItem(t);
    var i;
    var s;
    if (a) {
        i = this.items[Math.floor((a.slot - 1) / canvas.app.leftMenu.Const.VARIANT_SLOTS_COUNT) + 1];
        if (i) {
            s = a.slot;
            a.slot = i.slot;
            i.slot = s;
            this.items[a.slot] = a;
            this.variantItems[i.slot] = i;
            i.variant = true;
            a.variant = false
        }
    }
}
;
canvas.app.leftMenu.Model.prototype.addCooldown = function(t) {
    var e = {
        group: t.cdGroupId,
        type: t.cdType,
        finish: t.cdType == 1 ? canvas.Functions.now() + (t.cdLeft > 0 ? t.cdLeft : t.cdTime) : t.cdTime
    };
    e.start = t.cdType == 1 ? e.finish - t.cdTime : 0;
    if (e.type == 2) {
        e.current = t.cdLeft > 0 ? e.finish - t.cdLeft : 0
    }
    t.cdLeft = 0;
    var a = this.groupCooldowns.length;
    var i;
    if (a > 0) {
        for (var s = 0; s < a; s++) {
            i = this.groupCooldowns[s];
            if (i.group == e.group) {
                i.finish = Math.max(i.finish, e.finish);
                return
            }
        }
    }
    this.groupCooldowns.push(e)
}
;
canvas.app.leftMenu.Model.prototype.deltaTurn = function(t) {
    var e = this.groupCooldowns.length;
    for (var a = 0; a < e; a++) {
        if (this.groupCooldowns[a].type == 2) {
            this.groupCooldowns[a].current += t
        }
    }
}
;
canvas.app.leftMenu.View = function() {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Mask(150,1e3));
    this.back.interactive = true;
    this.back.click = this.backClickHandler.bind(this);
    this.pager = new canvas.app.leftMenu.view.PagerView;
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1);
    this.list.interactive = false;
    this.addChild(this.list);
    this.list.position.set(0, 2);
    this.initList();
    this.update()
}
;
canvas.app.leftMenu.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.leftMenu.View.prototype.initList = function() {
    this.list.clear(false);
    this.list.setSize(150, canvas.app.leftMenu.Const.ON_PAGE * canvas.app.leftMenu.Const.SLOT_HEIGHT);
    for (var t = 0; t < canvas.app.leftMenu.Const.ON_PAGE; t++) {
        this.list.add(new canvas.app.leftMenu.view.SlotView(t), false)
    }
    this.pager.position.set(0, this.list._height - 7);
    this.list.update()
}
;
canvas.app.leftMenu.View.prototype.update = function() {
    var t = canvas.app.leftMenu.model;
    this.pager.numPages = Math.ceil(t.slotsCount / canvas.app.leftMenu.Const.ON_PAGE);
    var e = (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE + 1;
    var a = 0;
    var i;
    for (i = e; i < e + canvas.app.leftMenu.Const.ON_PAGE; i++) {
        if (!t.inBattle)
            this.list.items[a]._disabledVariant = false;
        this.list.items[a].items[0].data = t.items[i];
        this.list.items[a].items[0].disabled = i > t.slotsCount;
        this.list.items[a].items[0].selected = a == t.selectedRow && t.selectedColumn == 0;
        a++
    }
    e = (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE * 2 + 1;
    var a = 0;
    var s;
    var n = false;
    for (i = e; i < e + canvas.app.leftMenu.Const.ON_PAGE * 2; i++) {
        s = i % 2 == 0 ? 2 : 1;
        n = s == 1 && i == t.variantSlotsCount;
        if (t.inBattle && !this.list.items[a]._disabledVariant) {
            this.list.items[a]._disabledVariant = t.variantItems[i] && t.variantItems[i].disable
        }
        if (s == 1)
            this.list.items[a].data = i > t.variantSlotsCount ? 1 : n ? 2 : 3;
        if (i <= t.variantSlotsCount) {
            this.list.items[a].items[n ? 2 : s].data = t.variantItems[i];
            this.list.items[a].items[n ? 2 : s].disabled = i > t.variantSlotsCount;
            this.list.items[a].items[n ? 2 : s].selected = a == t.selectedRow && t.selectedColumn == s
        }
        if (s == 2)
            a++
    }
    this.selectSlot(t.selectedSlot, t.selectedSlotIsVariant);
    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.FOCUS_FIRST_FREE_SLOT);
    if (canvas.app.leftMenu.model.slotsCount > canvas.app.leftMenu.Const.ON_PAGE) {
        this.addChildAt(this.pager, 1)
    } else {
        this.removeIfExist(this.pager)
    }
}
;
canvas.app.leftMenu.View.prototype.selectSlot = function(t, e) {
    for (var a = 0; a < canvas.app.leftMenu.Const.ON_PAGE; a++) {
        for (var i = 0; i < 3; i++) {
            this.list.items[a].items[i].selected = (i == 0 && !e || i > 0 && e) && t == this.getSlotNum(i, a)
        }
    }
}
;
canvas.app.leftMenu.View.prototype.getSlotNum = function(t, e) {
    if (t > 0) {
        return (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE * 2 + e * 2 + t
    } else {
        return (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE + e + 1
    }
}
;
canvas.app.leftMenu.View.prototype.backClickHandler = function(t) {
    for (var e = 0; e < canvas.app.leftMenu.Const.ON_PAGE; e++) {
        this.list.items[e].hideVariantSlots()
    }
}
;
canvas.app.leftMenu.view.ItemView = function(t, e) {
    this._disabled = false;
    Object.defineProperty(this, "disabled", {
        get: function() {
            return this._disabled
        },
        set: function(t) {
            this._disabled = t;
            if (this.disabled) {
                this.container.addChild(this.disabledImage);
                this.interactive = false
            } else {
                this.container.removeIfExist(this.disabledImage);
                this.interactive = true
            }
        }
    });
    canvas.ui.ListRenderer.call(this);
    this.container = this.addChild(new canvas.px.Container);
    this.row = t;
    this.column = e;
    this.back = new canvas.px.Graphics;
    this.back.beginFill(0, 0);
    this.back.drawCircle(25, 23, 20, 20);
    this.back.endFill();
    this.container.addChild(this.back);
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/item_select"));
    this.selector.position.set(7, 3);
    this.disabledImage = new canvas.px.Graphics;
    this.disabledImage.beginFill(6684672, .4);
    this.disabledImage.drawCircle(25, 23, 20, 20);
    this.disabledImage.endFill();
    this.interactive = true;
    this.buttonMode = true;
    this.image = new canvas.ui.Image(null,null,null,false);
    this.image.scale.set(2 / 3, 2 / 3);
    this.image.position.set(7, 3);
    this.container.addChild(this.image);
    var a = new canvas.px.Graphics;
    a.beginFill(0, 1);
    a.drawCircle(20, 20, 20);
    a.endFill();
    this.container.addChild(a);
    a.position.set(7, 3);
    this.image.mask = a;
    this.countField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,20,15,"center");
    this.addChild(this.countField);
    if (this.column > 0) {
        this.countField.position.set(16, 18)
    } else {
        this.countField.position.set(26, 27)
    }
    this.cooldown = new canvas.px.RoundProgress(22,0,.8);
    this.container.addChild(this.cooldown);
    this.cooldown.progress = 0;
    this.cooldown.position.set(26, 22);
    this.cooldown.scale.x = -1;
    this.cooldownField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD_STROKE,16777215,32,15,"center");
    this.cooldownField.position.set(10, 17);
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/item_over"));
    this.light.position.set(7, 3);
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.click = this.clickHandler.bind(this);
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this)
}
;
canvas.app.leftMenu.view.ItemView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.leftMenu.view.ItemView.prototype.update = function() {
    var t = canvas.app.leftMenu.model;
    if (this.data) {
        this.image.setImage(canvas.Config.artifactsPath + this.data.image);
        this.countField.text = this.data.count > 98 ? "99" : this.data.count
    } else {
        this.image.clear();
        this.countField.text = ""
    }
    if (this.oldData == null && this.data != null || this.oldData != null && this.data == null || this.data != null && this.oldData != null && this.data.id != this.oldData.id) {
        canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.row);
        this.updateCooldown(null)
    }
    if (!t.inBattle) {
        this.updateCooldown(null)
    }
}
;
canvas.app.leftMenu.view.ItemView.prototype.updateSelection = function() {
    this._selected = !this.data && !this.disabled && this._selected;
    if (this.selected) {
        this.container.addChild(this.selector)
    } else {
        this.container.removeIfExist(this.selector)
    }
}
;
canvas.app.leftMenu.view.ItemView.prototype.clickHandler = function() {
    var t = canvas.app.leftMenu.model;
    if (!this.disabled) {
        if (t.inBattleFrame()) {
            if (this.data && this.cooldown.progress == 0) {
                if (this.column > 0) {
                    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.BATTLE_ACTION, null, "swapSubSlot@" + this.data.id)
                } else {
                    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.BATTLE_ACTION, null, "useEffect@" + this.data.id)
                }
            }
        } else {
            if (this.data) {
                canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.UNSET_SLOT, null, {
                    id: this.data.id,
                    row: this.row,
                    column: this.singleSlot ? this.column - 1 : this.column
                })
            } else {
                canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SELECT_SLOT, null, {
                    row: this.row,
                    column: this.column
                })
            }
        }
    }
}
;
canvas.app.leftMenu.view.ItemView.prototype.overHandler = function() {
    var t = canvas.app.leftMenu.model;
    if (this.data && !this.disabled) {
        this.container.addChild(this.light);
        if (!t.inBattle || t.flagShowBattleHints) {
            artifactAltSimple(this.data.id, 2);
            canvas.app.leftMenu.view.ItemView.overedId = this.data.id
        }
        if (this.column > 0) {
            this.basePos = new canvas.px.Point(this.container.x,this.container.y);
            this.container.scale.set(.85, .85);
            this.container.position.set(this.basePos.x - 4, this.basePos.y - 3)
        }
        if (this.cooldown.progress > 0) {
            this.container.addChild(this.cooldownField)
        }
    }
}
;
canvas.app.leftMenu.view.ItemView.prototype.outHandler = function() {
    this.container.removeIfExist(this.light);
    this.container.removeIfExist(this.cooldownField);
    if (this.column > 0 && this.basePos) {
        this.container.scale.set(.7, .7);
        this.container.position.set(this.basePos.x, this.basePos.y)
    }
    if (!this.data || this.data.id == canvas.app.leftMenu.view.ItemView.overedId) {
        artifactAltSimple(canvas.app.leftMenu.view.ItemView.overedId, 0);
        canvas.app.leftMenu.view.ItemView.overedId = 0
    }
}
;
canvas.app.leftMenu.view.ItemView.prototype.updateCooldown = function(t) {
    if (t) {
        var e = Date.now();
        if (t.type == 1) {
            this.cooldownField.text = t.finish - canvas.Functions.now();
            this.cooldown.progress = 1 - (e - t.start * 1e3) / ((t.finish - t.start) * 1e3 - 500)
        } else {
            this.cooldownField.text = t.finish - t.current;
            this.cooldown.progress = 1 - (t.current - t.start) / (t.finish - t.start)
        }
    } else {
        this.cooldownField.text = "";
        this.cooldown.progress = 0
    }
}
;
canvas.app.leftMenu.view.ItemView.overedId = 0;
canvas.app.leftMenu.view.PagerView = function(t) {
    this._numPages = 1;
    Object.defineProperty(this, "numPages", {
        get: function() {
            return this._numPages
        },
        set: function(t) {
            this._numPages = t;
            this.currentPage = this.currentPage;
            this.update()
        }
    });
    this._currentPage = 1;
    Object.defineProperty(this, "currentPage", {
        get: function() {
            return this._currentPage
        },
        set: function(t) {
            var e = this.currentPage;
            this._currentPage = t < 1 ? 1 : t > this.numPages ? this.numPages : t;
            this.update();
            if (e != this.currentPage) {
                canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.CHANGE_PAGE, null, this.currentPage)
            }
        }
    });
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/pager_back")));
    this.plusButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/pager_arrow"),canvas.ResourceLoader.getImage("ui", "left/pager_arrow_over")));
    this.plusButton.position.set(46, 11);
    this.minusButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/pager_arrow"),canvas.ResourceLoader.getImage("ui", "left/pager_arrow_over")));
    this.minusButton.scale.x = -1;
    this.minusButton.position.set(15, 11);
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16699293,30,18,"center"));
    this.field.position.set(16, 9);
    this.field.interactive = false;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.minusButton, this.minusClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.plusButton, this.plusClickHandler, this);
    this.update()
}
;
canvas.app.leftMenu.view.PagerView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.leftMenu.view.PagerView.prototype.update = function() {
    this.field.text = this.currentPage
}
;
canvas.app.leftMenu.view.PagerView.prototype.minusClickHandler = function() {
    this.currentPage--
}
;
canvas.app.leftMenu.view.PagerView.prototype.plusClickHandler = function() {
    this.currentPage++
}
;
canvas.app.leftMenu.view.SlotView = function(t) {
    this._disabledVariant = false;
    Object.defineProperty(this, "disabledVariant", {
        get: function() {
            return this._disabledVariant
        },
        set: function(t) {
            this._disabledVariant = t;
            this.update()
        }
    });
    canvas.ui.ListRenderer.call(this);
    this.index = t;
    this.interactive = false;
    this.startPos = -24;
    this.endPos = 0;
    this.direction = 0;
    this.opened = false;
    this.variantSlotsContainer = this.addChild(new canvas.px.Container);
    this.variantSlotsBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/variant_slots_back"));
    this.variantSlotsBack.position.set(0, -1);
    this.variantSlotsContainer.addChild(this.variantSlotsBack);
    this.variantSlotsContainer.position.set(this.startPos, 0);
    var e = new canvas.px.Mask(80,45);
    e.position.set(65, 5);
    this.addChild(e);
    this.variantSlotsContainer.mask = e;
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/slot_back")));
    this.back.position.set(11, 7);
    this.items = [];
    for (var a = 0; a < 3; a++) {
        var i = new canvas.app.leftMenu.view.ItemView(this.index,a);
        this.items.push(i);
        if (a == 0) {
            this.addChild(i)
        } else {
            this.variantSlotsContainer.addChild(i);
            i.container.scale.set(.7, .7)
        }
    }
    this.items[0].position.set(5, 5);
    this.items[1].position.set(11, 11);
    this.items[2].position.set(49, 11);
    this.front = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/slot_front")));
    this.buttonsContainer = this.addChild(new canvas.px.Container);
    this.showButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right_over"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right_down"));
    this.showButton.position.set(51, 12);
    this.hideButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left_over"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left_down"));
    this.hideButton.position.set(51, 12);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.showButton, this.showClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.hideClickHandler, this);
    this.setSize(60, 39)
}
;
canvas.app.leftMenu.view.SlotView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.leftMenu.view.SlotView.prototype.update = function() {
    if (this.data) {
        this.items[2].singleSlot = false;
        if (this.disabledVariant) {
            this.removeIfExist(this.variantSlotsContainer);
            this.endPos = 0
        } else {
            switch (this.data) {
            case 1:
                this.removeIfExist(this.variantSlotsContainer);
                this.endPos = 0;
                break;
            case 2:
                this.addChildAt(this.variantSlotsContainer, 0);
                this.endPos = 19;
                this.items[2].singleSlot = true;
                break;
            case 3:
                this.addChildAt(this.variantSlotsContainer, 0);
                this.endPos = 56;
                break
            }
        }
        if (!this.variantSlotsContainer.parent || !this.hideButton.parent && !this.showButton.parent)
            this.hideVariantSlots()
    } else {
        this.removeIfExist(this.variantSlotsContainer)
    }
}
;
canvas.app.leftMenu.view.SlotView.prototype.showVariantSlots = function() {
    if (this.variantSlotsContainer.parent) {
        this.direction = 1;
        canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.removeIfExist(this.showButton);
        this.addChild(this.hideButton);
        canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SHOW_VARIANT_SLOTS, null, this.index)
    }
}
;
canvas.app.leftMenu.view.SlotView.prototype.hideVariantSlots = function() {
    this.direction = -1;
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.removeIfExist(this.hideButton);
    this.addChild(this.showButton);
    if (!this.variantSlotsContainer.parent) {
        this.removeIfExist(this.showButton);
        this.variantSlotsContainer.x = this.startPos
    }
}
;
canvas.app.leftMenu.view.SlotView.prototype.frameHandler = function() {
    try {
        if (this.direction != 0) {
            if (this.direction > 0) {
                this.opened = true;
                if (this.variantSlotsContainer.x < this.endPos) {
                    this.variantSlotsContainer.x = Math.min(this.variantSlotsContainer.x + 15, this.endPos)
                } else {
                    this.variantSlotsContainer.x = this.endPos;
                    this.direction = 0
                }
            } else {
                if (this.variantSlotsContainer.x > this.startPos) {
                    this.variantSlotsContainer.x -= 15
                } else {
                    this.variantSlotsContainer.x = this.startPos;
                    this.direction = 0;
                    this.opened = false;
                    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SLOT_HIDED, null, this.index)
                }
            }
        } else {
            canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    } catch (t) {
        canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.leftMenu.view.SlotView.prototype.showClickHandler = function() {
    this.showVariantSlots()
}
;
canvas.app.leftMenu.view.SlotView.prototype.hideClickHandler = function() {
    this.hideVariantSlots()
}
;
canvas.app.avatar.Const = {
    UPDATE_FLAG_PERS: "pers",
    MANOR_FLAG_EXP_DECR: 1,
    MANOR_FLAG_EXP_USE: 2,
    MANOR_FLAG_VALOR_USE: 4,
    USER_PREMIUM_DISPLAY_CURRENCY_GAME: 1,
    USER_PREMIUM_DISPLAY_CURRENCY_SILVER: 2,
    USER_PREMIUM_DISPLAY_CURRENCY_GOLD: 4,
    RESTORE_REFRESH: .5
};
canvas.app.avatar.Event = {
    ENTER_FRAME: "Avatar.ENTER_FRAME",
    HINT_ADD: "Avatar.HINT_ADD",
    HINT_REMOVE: "Avatar.HINT_REMOVE",
    UP_MANOR_MODE: "Avatar.UP_MANOR_MODE",
    PET_CLICK: "Avatar.PET_CLICK",
    RED_BUTTON_CLICK: "Avatar.RED_BUTTON_CLICK"
};
canvas.app.avatar.Main = function(t, e) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = e;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.UP_MANOR_MODE, null, this.handlerUpManorMode, this);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.PET_CLICK, null, this.handlerPetClick, this);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.RED_BUTTON_CLICK, null, this.handlerRedButtonClick, this);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    this.view = new canvas.app.avatar.View;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.timer = setInterval(this.timerHandler.bind(this), canvas.app.avatar.Const.RESTORE_REFRESH * 1e3)
}
;
canvas.app.avatar.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.avatar.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            switch (e) {
            case "user|view":
                a = t["user|view"];
                this.model.parse(a);
                this.view.update();
                break
            }
        }
    }
}
;
canvas.app.avatar.Main.prototype.swfData = function(t) {
    var e = t.split("@");
    var a;
    if (e.length == 2) {
        switch (e[0]) {
        case "updHP":
            a = e[1].split(",");
            this.model.hpCur = parseInt(a[0]);
            this.model.hpMax = parseInt(a[1]);
            this.model.hpTime = 0;
            break;
        case "updMP":
            a = e[1].split(",");
            this.model.mpCur = parseInt(a[0]);
            this.model.mpMax = parseInt(a[1]);
            this.model.mpTime = 0;
            break
        }
    }
}
;
canvas.app.avatar.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.avatar.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.avatar.Main.prototype.handlerUpManorMode = function(t) {
    this.model.setEnergyMode(this.model.energyMode + 1);
    this.view.update()
}
;
canvas.app.avatar.Main.prototype.handlerPetClick = function(t) {
    var e;
    if (this.model.petId > 0) {
        e = canvas.Config.entryPoint + "?object=pet&action=putoff&json_mode_on=1";
        this.request.type = "pet_putoff"
    } else if (this.model.lastPetId > 0) {
        e = canvas.Config.entryPoint + "?object=pet&action=puton&ref=" + this.model.lastPetId + "&json_mode_on=1";
        this.request.type = "pet_puton"
    } else {
        return
    }
    this.request.load(e);
    this.view.lockButtons()
}
;
canvas.app.avatar.Main.prototype.handlerRedButtonClick = function(t) {
    var e = canvas.Config.entryPoint + "?object=user&action=redbutton_click&json_mode_on=1";
    this.request.type = "redbutton_click";
    this.request.load(e);
    this.view.lockButtons()
}
;
canvas.app.avatar.Main.prototype.timerHandler = function(t) {
    var e = this.model;
    var a = Date.now();
    var i = a - e.startTime;
    var s;
    if (e.hpTime != 0) {
        s = (a - e.hpStartTime) / 1e3;
        e.hpCur = Math.round(Math.min(e.hpMax, e.hp + (e.hpMax - e.hp) * (s / e.hpTime)))
    }
    if (e.mpTime != 0) {
        s = (a - e.mpStartTime) / 1e3;
        e.mpCur = Math.round(Math.min(e.mpMax, e.mp + (e.mpMax - e.mp) * (s / e.mpTime)))
    }
    if (e.manorExpSpeed > 0) {
        s = (a - e.manorExpStartTime) / 1e3;
        e.manorExpCur = Math.floor(Math.min(e.manorExpMax, e.manorExp + e.manorExpSpeed * s))
    }
    if (e.manorValorSpeed > 0) {
        s = (a - e.manorValorStartTime) / 1e3;
        e.manorValorCur = Math.floor(Math.min(e.manorValorMax, e.manorValor + e.manorValorSpeed * s))
    }
    if (e.petTimeout > 0) {
        if (a > e.petTimeout) {
            e.petTimeout = 0;
            this.view.updatePetButton()
        }
    }
    e.invTime -= i;
    this.view.updateTitles();
    this.view.updatePremium();
    this.view.redButton.updateTime();
    e.startTime = a
}
;
canvas.app.avatar.Main.prototype.requestCompleteHandler = function() {
    var t = JSON.parse(this.request.request.responseText);
    var e;
    var a;
    switch (this.request.type) {
    case "pet_puton":
        e = t["pet|puton"];
        if (e && e.status == 100) {
            this.model.petId = this.model.lastPetId;
            _top().frames["main_frame"].pet_effects = t["user|view"].pet_effects || [];
            this.model.petTimeout = Date.now() + 1500
        }
        break;
    case "pet_putoff":
        e = t["pet|putoff"];
        if (e && e.status == 100) {
            this.model.lastPetId = this.model.petId;
            this.model.petId = 0;
            _top().frames["main_frame"].pet_effects = t["user|view"].pet_effects || [];
            this.model.petTimeout = Date.now() + 1500
        }
        break;
    case "redbutton_click":
        e = t["user|redbutton_click"];
        if (e && e.status == 100) {
            if (e.redirect_url) {
                canvas.Functions.navigateToURL(e.redirect_url, "_blank")
            }
        }
        break
    }
    a = t["user|view"];
    if (a && a.status == 100) {
        this.model.parse(a)
    }
    if (e && e.error) {
        showError(e.error)
    }
    this.view.update()
}
;
canvas.app.avatar.Main.prototype.requestErrorHandler = function() {}
;
canvas.app.avatar.Model = function(t) {
    this.startTime = Date.now();
    this.serverTime = new canvas.utils.ServerTime;
    this.localStorage = null;
    this.premiumLevel = 0;
    this.useTahoma = false;
    this.energyMode = 0;
    this.availBotsKills = 0;
    this.updateFlags = {};
    this.updateHash = {};
    this.currencyFlags = 5;
    this.showMaxLevel = 0;
    this.showMaxRank = 0;
    this.lastPetId = 0;
    this.petId = 0;
    this.petTimeout = 0;
    this.redButtonGlobalTime = 0;
    this.redButtonUserTime = 0;
    this.redButtonLimit = 0;
    this.redButtonUsed = 0;
    this.redButtonHint = "";
    this.redButtonPicture = "";
    this.redButtonConfirm = false;
    this.parse(t)
}
;
canvas.app.avatar.Model.prototype.parse = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r = Date.now();
    if (this.ok(t.server_time) && this.ok(t.timezone))
        this.serverTime.init(parseInt(t.server_time), parseInt(t.timezone) * .6);
    if (this.ok(t.nick))
        this.login = t.nick;
    if (this.ok(t.exp))
        this.exp = parseInt(t.exp);
    if (this.ok(t.expMax))
        this.expMax = parseInt(t.expMax);
    if (this.ok(t.showMaxLevel))
        this.showMaxLevel = parseInt(t.showMaxLevel);
    if (this.ok(t.showMaxRank))
        this.showMaxRank = parseInt(t.showMaxRank);
    if (this.ok(t.rankHonorTable) && this.ok(t.honor) && this.ok(t.rankHonor)) {
        a = t.rankHonorTable.split("|");
        i = parseInt(t.honor);
        s = parseInt(t.rankHonor);
        n = 0;
        for (var o = 0; o < a.length; o++) {
            if (a[o] == s) {
                if (a[o + 1] != undefined)
                    n = a[o + 1];
                else
                    n = a[o]
            }
        }
        this.valor = i - s;
        this.valorMax = n - s
    }
    if (this.ok(t.work))
        this.energy = parseInt(t.work);
    if (this.ok(t.workMax))
        this.energyMax = parseInt(t.workMax);
    if (this.ok(t.hp) && this.ok(t.hpMax) && this.ok(t.hpT)) {
        this.hp = this.hpCur = parseInt(t.hp);
        this.hpMax = parseInt(t.hpMax);
        this.hpTime = parseInt(t.hpT);
        this.hpStartTime = r
    }
    if (this.ok(t.mp) && this.ok(t.mpMax) && this.ok(t.mpT)) {
        this.mp = this.mpCur = parseInt(t.mp);
        this.mpMax = parseInt(t.mpMax);
        this.mpTime = parseInt(t.mpT);
        this.mpStartTime = r
    }
    if (this.ok(t.estateExp) && this.ok(t.exp_limit) && this.ok(t.exp_speed)) {
        this.manorExp = this.manorExpCur = parseInt(t.estateExp);
        this.manorExpMax = parseInt(t.exp_limit);
        this.manorExpSpeed = parseFloat(t.exp_speed);
        this.manorExpStartTime = r
    }
    if (this.ok(t.estateHonor) && this.ok(t.honor_limit) && this.ok(t.honor_speed)) {
        this.manorValor = this.manorValorCur = parseInt(t.estateHonor);
        this.manorValorMax = parseInt(t.honor_limit);
        this.manorValorSpeed = parseFloat(t.honor_speed);
        this.manorValorStartTime = r
    }
    if (this.ok(t.lvl))
        this.level = parseInt(t.lvl);
    if (this.ok(t.moneyGame)) {
        e = t.moneyGame;
        this.bronze = e.split(".")[1] == undefined ? 0 : parseInt(e.split(".")[1].substr(0, 2));
        e = (Math.floor(parseFloat(e)) * .01).toFixed(2);
        this.silver = e.split(".")[1] == undefined ? 0 : parseInt(e.split(".")[1].substr(0, 2));
        this.gold = parseInt(e.split(".")[0])
    }
    if (this.ok(t.premium_level))
        this.premiumLevel = parseInt(t.premium_level);
    if (this.ok(t.hide_premium) && parseInt(t.hide_premium) == 1)
        this.premiumLevel = 0;
    if (this.ok(t.moneyGold))
        this.crystal = parseFloat(t.moneyGold);
    if (this.ok(t.moneySilver))
        this.rubin = parseFloat(t.moneySilver);
    if (this.ok(t.effect))
        this.effects = parseInt(t.effect) < 0 ? 0 : parseInt(t.effect);
    if (this.ok(t.gender))
        this.gender = t.gender == "1" ? "M" : "F";
    if (this.ok(t.kind))
        this.race = t.kind == "1" ? "hum" : "mag";
    if (this.ok(t.inv_time))
        this.invTime = parseInt(t.inv_time) * 1e3;
    if (this.ok(t.parts))
        this.parts = t.parts;
    if (this.ok(t.dead))
        this.ghost = t.dead == "1";
    if (this.ok(t.lang))
        this.useTahoma = t.lang != "ru";
    if (this.ok(t.estateFlags))
        this.manorFlags = parseInt(t.estateFlags);
    if (this.ok(t.avail_bots_kills_amount))
        this.availBotsKills = parseInt(t.avail_bots_kills_amount);
    if (this.ok(t.display_currency))
        this.currencyFlags = parseInt(t.display_currency);
    if (this.energyMax == 0) {
        if (this.mpMax == 0)
            this.currentView = 2;
        else
            this.currentView = 1
    } else {
        if (this.mpMax == 0)
            this.currentView = 3;
        else
            this.currentView = 0
    }
    if (this.localStorage == null) {
        this.localStorage = new canvas.utils.LocalStorage(canvas.Log.AVATAR);
        this.setEnergyMode(this.localStorage.get("energyMode") == undefined ? 0 : parseInt(this.localStorage.get("energyMode")), false)
    } else {
        this.setEnergyMode(this.energyMode)
    }
    if (!this.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS])
        this.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = this.parts + this.gender != this.updateHash[canvas.app.avatar.Const.UPDATE_FLAG_PERS];
    this.updateHash[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = this.parts + this.gender;
    this.petId = this.ok(t.pet_id) ? parseInt(t.pet_id) : 0;
    this.lastPetId = this.ok(t.last_pet_id) ? parseInt(t.last_pet_id) : 0;
    if (this.ok(t.redbutton_global_time))
        this.redButtonGlobalTime = parseInt(t.redbutton_global_time);
    if (this.ok(t.redbutton_user_time))
        this.redButtonUserTime = parseInt(t.redbutton_user_time);
    if (this.ok(t.redbutton_limit))
        this.redButtonLimit = parseInt(t.redbutton_limit);
    if (this.ok(t.redbutton_used))
        this.redButtonUsed = parseInt(t.redbutton_used);
    if (this.ok(t.redbutton_hint))
        this.redButtonHint = t.redbutton_hint;
    if (this.ok(t.redbutton_picture))
        this.redButtonPicture = t.redbutton_picture;
    if (this.ok(t.redbutton_confirm))
        this.redButtonConfirm = parseInt(t.redbutton_confirm) > 0
}
;
canvas.app.avatar.Model.prototype.ok = function(t) {
    return t != undefined
}
;
canvas.app.avatar.Model.prototype.setEnergyMode = function(t, e) {
    if (e == undefined)
        e = true;
    this.energyMode = t > 2 ? 0 : t;
    switch (this.energyMode) {
    case 1:
        if (this.manorExpMax < 1) {
            this.setEnergyMode(this.energyMode + 1);
            return
        }
        break;
    case 2:
        if (this.manorValorMax < 1) {
            this.setEnergyMode(this.energyMode + 1);
            return
        }
        break
    }
    if (e) {
        this.localStorage.set("energyMode", this.energyMode)
    }
}
;
canvas.app.avatar.Model.prototype.energyIsGrey = function() {
    switch (this.energyMode) {
    case 1:
        return !canvas.Functions.testFlag(this.manorFlags, canvas.app.avatar.Const.MANOR_FLAG_EXP_USE);
    case 2:
        return !canvas.Functions.testFlag(this.manorFlags, canvas.app.avatar.Const.MANOR_FLAG_VALOR_USE)
    }
    return false
}
;
canvas.app.avatar.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.avatar.model;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/exp_back")));
    e.position.set(76, 0);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/exp_front")));
    e.position.set(76, 0);
    this.expProgress = this.addChild(new canvas.ui.Progress);
    this.expProgress.setSize(174, 13);
    this.expProgress.position.set(80, 4);
    this.expProgress.progress = 0;
    e.mask = this.expProgress.sprite;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/valor_back")));
    e.position.set(76, 19);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/valor_front")));
    e.position.set(76, 19);
    this.valorProgress = this.addChild(new canvas.ui.Progress);
    this.valorProgress.setSize(169, 13);
    this.valorProgress.position.set(84, 21);
    this.valorProgress.progress = 0;
    e.mask = this.valorProgress.sprite;
    this.hpBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/hp_back")));
    this.hpBack.position.set(76, 36);
    this.hpFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/hp_front")));
    this.hpFront.position.set(76, 36);
    this.hpProgress = this.addChild(new canvas.ui.Progress);
    this.hpProgress.setSize(83, 9);
    this.hpProgress.position.set(89, 37);
    this.hpProgress.progress = 0;
    this.hpFront.mask = this.hpProgress.sprite;
    this.mpBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/mp_back")));
    this.mpBack.position.set(173, 36);
    this.mpFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/mp_front")));
    this.mpFront.position.set(173, 36);
    this.mpProgress = this.addChild(new canvas.ui.Progress);
    this.mpProgress.setSize(76, 9);
    this.mpProgress.position.set(173, 37);
    this.mpProgress.progress = 0;
    this.mpFront.mask = this.mpProgress.sprite;
    this.manorBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/manor_grey_back")));
    this.manorBack.position.set(76, 48);
    this.manorFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/manor_grey_front")));
    this.manorFront.position.set(76, 48);
    this.manorProgress = this.addChild(new canvas.ui.Progress);
    this.manorProgress.setSize(152, 9);
    this.manorProgress.position.set(93, 50);
    this.manorProgress.progress = 0;
    this.manorFront.mask = this.manorProgress.sprite;
    this.expLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_big")));
    this.valorLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_big")));
    this.hpLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small")));
    this.mpLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small")));
    this.manorLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small")));
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/uzor_right")));
    e.position.set(237, 2);
    this.expField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP,16777215,this.expProgress._width - 18,18,"left","top",0,0));
    this.expField.position.set(this.expProgress.x + 22, 3);
    this.expField.buttonMode = true;
    this.expField.interactive = true;
    this.expField.back.interactive = true;
    this.expField.mouseover = this.expOverHandler.bind(this);
    this.expField.mouseout = this.expOutHandler.bind(this);
    this.expField.click = this.expClickHandler.bind(this);
    this.expField.overed = false;
    this.expField2 = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,this.expProgress._width - 26,12,"center"));
    this.expField2.position.set(this.expProgress.x + 20, t.useTahoma ? 5 : 7);
    this.expField2.text = "";
    this.killHint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, {
        target: this.expField.back,
        params: new canvas.utils.HintParams(this.killHint)
    });
    this.valorField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,this.valorProgress._width,12,"center","top",0,0));
    this.valorField.position.set(this.valorProgress.x + 6, t.useTahoma ? 21 : 23);
    this.valorField.interactive = true;
    this.valorField.buttonMode = true;
    this.valorField.mouseover = this.valorOverHandler.bind(this);
    this.valorField.mouseout = this.valorOutHandler.bind(this);
    this.valorField.click = this.valorClickHandler.bind(this);
    this.valorField.overed = false;
    this.hpField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"center","top",0,0));
    this.hpField.position.set(this.hpProgress.x, t.useTahoma ? 35 : 37);
    this.hpField.interactive = true;
    this.hpField.mouseover = this.hpOverHandler.bind(this);
    this.hpField.mouseout = this.hpOutHandler.bind(this);
    this.hpField.overed = false;
    this.mpField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"center","top",0,0));
    this.mpField.position.set(this.mpProgress.x, t.useTahoma ? 35 : 37);
    this.mpField.interactive = true;
    this.mpField.mouseover = this.mpOverHandler.bind(this);
    this.mpField.mouseout = this.mpOutHandler.bind(this);
    this.mpField.overed = false;
    this.mpField.setSize(this.mpProgress._width);
    this.manorField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,this.manorProgress._width + 10,12,"center","top",0,0));
    this.manorField.position.set(this.manorProgress.x, t.useTahoma ? 47 : 49);
    this.manorField.interactive = true;
    this.manorField.mouseover = this.manorOverHandler.bind(this);
    this.manorField.mouseout = this.manorOutHandler.bind(this);
    this.manorField.overed = false;
    this.premiumButton = new canvas.app.avatar.view.PremiumButton;
    this.addChild(this.premiumButton);
    this.premiumButton.position.set(250, 2);
    this.premiumHint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, {
        target: this.premiumButton,
        params: new canvas.utils.HintParams(this.premiumHint)
    });
    this.moneyBack = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "avatar/money_back"),13,0,13,0));
    this.moneyBack.position.set(78, 50);
    this.moneyBack.interactive = true;
    this.moneyField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD_SHARP,canvas.Const.FONT_TAHOMA_10_BOLD_SHARP,3355392,300,20,"left");
    this.addChild(this.moneyField);
    this.moneyField.position.set(96, 62);
    this.moneyButon = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "avatar/plus_button")));
    this.moneyButon.position.set(269, 60);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.moneyButon, this.moneyClickHandler, this);
    this.switchButton = new canvas.app.avatar.view.SwitchButton(t.energyMode);
    this.addChild(this.switchButton);
    this.switchButton.position.set(252, 53);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/back_" + t.race)));
    this.back.position.set(0, -2);
    this.playerContainer = this.addChild(new canvas.px.Container);
    var a = new canvas.px.Graphics;
    a.beginFill(0, 1);
    a.drawCircle(44, 44, 34);
    a.endFill();
    this.playerContainer.addChild(a);
    this.player = this.playerContainer.addChild(new canvas.animation.SkeletonAvatar(t.gender));
    this.player.frameEvent = canvas.app.avatar.Event.ENTER_FRAME;
    this.player.position.set(-50, 15);
    this.player.mask = a;
    this.levelButton = this.addChild(new canvas.app.avatar.view.LevelButton);
    this.levelButton.position.set(34, 64);
    this.redButton = this.addChild(new canvas.app.avatar.view.RedButton);
    this.redButton.position.set(11, 64);
    this.effectsButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "avatar/effects_button"));
    this.effectsButton.position.set(56, 64);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.effectsButton, this.effectsClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.effectsButton, this.effectsOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.effectsButton, this.effectsOutHandler, this);
    this.petButton = this.addChild(new canvas.ui.SimpleButton);
    this.petButton.position.set(0, 34);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.petButton, this.petClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.petButton, this.petOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.petButton, this.petOutHandler, this);
    this.update()
}
;
canvas.app.avatar.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.avatar.View.prototype.update = function() {
    var t = canvas.app.avatar.model;
    if (t.currentView == 1 || t.currentView == 2) {
        this.manorBack.texture = canvas.px.TextureEmpty;
        this.manorFront.texture = canvas.px.TextureEmpty;
        this.manorProgress.progress = 0;
        this.manorField.interactive = false;
        this.switchButton.visible = false;
        this.manorAvailable = false
    } else {
        var e = t.energyIsGrey() ? "grey" : this.switchButton.getColorByIndex(t.energyMode);
        this.manorBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/manor_" + e + "_back");
        this.manorFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/manor_" + e + "_front");
        this.manorField.interactive = true;
        this.switchButton.visible = t.manorExpMax > 0 || t.manorValorMax > 0;
        this.switchButton.mode = t.energyMode;
        this.manorAvailable = true
    }
    if (t.currentView == 2 || t.currentView == 3) {
        this.mpBack.texture = canvas.px.TextureEmpty;
        this.mpFront.texture = canvas.px.TextureEmpty;
        this.mpProgress.progress = 0;
        this.hpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_back");
        this.hpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_front");
        this.hpProgress.setSize(162, 9);
        this.mpField.interactive = false;
        this.hpField.x = this.hpProgress.x + 4;
        this.manaAvailable = false
    } else {
        this.mpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/mp_back");
        this.mpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/mp_front");
        this.hpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_back_small");
        this.hpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_front_small");
        this.hpProgress.setSize(83, 9);
        this.mpField.interactive = true;
        this.hpField.x = this.hpProgress.x + 2;
        this.manaAvailable = true
    }
    this.hpField.setSize(this.hpProgress._width);
    this.updateTitles();
    this.updatePremium();
    this.killHint.update(canvas.Translator.getText(507) + ": " + t.availBotsKills);
    if (t.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS]) {
        this.player.skeletonData = new canvas.data.battle.SkeletonData(t.parts,t.gender);
        t.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = false
    }
    if (t.ghost == "1") {
        this.playerContainer.filters = [canvas.Functions.getGlow(1, 2, 2, t.race == "hum" ? 0 : 0, .1)];
        this.player.filters = [canvas.Functions.getAlpha(.25)]
    } else {
        this.player.filters = this.playerContainer.filters = []
    }
    var a = "";
    if (canvas.Functions.testFlag(t.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_GAME)) {
        a = "<img src='avatar/money_gold' xOffset='-2' yOffset='1' atlas='ui'/>" + t.gold + "  <img src='avatar/money_silver' xOffset='-2' yOffset='1' atlas='ui'/>" + t.silver + "  <img src='avatar/money_bronze' xOffset='-2' yOffset='1' atlas='ui'/>" + t.bronze + "  "
    }
    if (t.crystal > 0 && canvas.Functions.testFlag(t.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_GOLD)) {
        a += "<img src='avatar/money_crystal' xOffset='-2' yOffset='1' atlas='ui'/>" + t.crystal + "  "
    }
    if (t.rubin > 0 && canvas.Functions.testFlag(t.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_SILVER)) {
        a += "<img src='avatar/money_rubin' xOffset='-2' yOffset='1' atlas='ui'/>" + t.rubin
    }
    this.moneyField.text = a;
    this.moneyBack.width = Math.max(160, this.moneyField.textWidth + 30);
    this.moneyBack.y = this.manorAvailable ? 59 : 47;
    this.moneyField.y = this.manorAvailable ? 62 : 50;
    this.moneyButon.position.set(this.moneyBack.width + 65, this.manorAvailable ? 60 : 48);
    this.levelButton.level = t.level;
    if (this.effectsTimer)
        clearTimeout(this.effectsTimer);
    if (t.effects > 0) {
        this.addChild(this.effectsButton);
        if (t.effects < 2e5) {
            this.effectsTimer = setTimeout(this.effectsTimerHandler.bind(this), t.effects * 1e3)
        }
    } else {
        this.removeIfExist(this.effectsButton)
    }
    this.petButton.baseTexture = this.petButton.sprite.texture = canvas.ResourceLoader.getImage("ui", t.petId > 0 ? "avatar/pet_enable" : "avatar/pet_disable");
    this.petButton.enabled = (t.lastPetId > 0 || t.petId > 0) && t.petTimeout === 0;
    this.redButton.update();
    this.redButton.enabled = true
}
;
canvas.app.avatar.View.prototype.updatePetButton = function() {
    var t = canvas.app.avatar.model;
    this.petButton.enabled = (t.lastPetId > 0 || t.petId > 0) && t.petTimeout === 0
}
;
canvas.app.avatar.View.prototype.updateTitles = function() {
    var t = canvas.app.avatar.model;
    var e = Date.now();
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    if (this.expField.overed) {
        this.expField2.text = canvas.Translator.getText(142).toLowerCase() + " " + (t.showMaxLevel ? t.showMaxLevel.toString() : t.exp.toString() + "/" + t.expMax.toString());
        this.expField2.hAlign = "center";
        this.expField.text = ""
    } else {
        s = t.invTime > 0 ? canvas.Translator.getText(3001) + " " + Math.ceil(t.invTime / 6e4) + " " + canvas.Translator.getText(2016) + "." : t.login;
        this.expField.text = s;
        if (this.expField.textWidth > 115) {
            i = s.length - 2;
            while (this.expField.textWidth > 115)
                this.expField.text = s.substr(0, i--) + "..."
        }
        if (t.showMaxLevel) {
            this.expField2.text = ""
        } else {
            l = t.exp / t.expMax;
            c = l > .5 ? Math.floor(l * 1e4) : Math.ceil(l * 1e4);
            this.expField2.text = (c * .01).toFixed(2) + "%";
            this.expField2.hAlign = "right"
        }
    }
    o = t.exp / t.expMax;
    this.expProgress.progress = t.showMaxLevel ? 1 : o;
    if (this.valorField.overed) {
        this.valorField.text = t.showMaxRank ? t.showMaxRank.toString() : t.valor.toString() + "/" + t.valorMax.toString()
    } else {
        if (t.showMaxRank) {
            this.valorField.text = canvas.Translator.getText(3002)
        } else {
            l = t.valor / t.valorMax;
            c = l > .5 ? Math.floor(l * 1e4) : Math.ceil(l * 1e4);
            this.valorField.text = canvas.Translator.getText(3002) + " " + (t.valorMax == 0 ? "0" : (c * .01).toFixed(2) + "%")
        }
    }
    o = t.valor / t.valorMax;
    this.valorProgress.progress = t.showMaxRank ? 1 : o;
    if (this.manorAvailable) {
        if (this.manorField.overed) {
            switch (t.energyMode) {
            case 1:
                r = "";
                if (t.manorExpSpeed > 0) {
                    a = t.manorExpStartTime + Math.round((t.manorExpMax - t.manorExp) / t.manorExpSpeed) * 1e3;
                    if (a > e)
                        r = " (" + canvas.Functions.formatDate(a - e, "00", 3, false, false) + ")"
                }
                this.manorField.text = Math.floor(t.manorExpCur / t.manorExpMax * 100).toString() + "%" + r;
                break;
            case 2:
                r = "";
                if (t.manorValorSpeed > 0) {
                    a = t.manorValorStartTime + Math.round((t.manorValorMax - t.manorValor) / t.manorValorSpeed) * 1e3;
                    if (a > e)
                        r = " (" + canvas.Functions.formatDate(a - e, "00", 3, false, false) + ")"
                }
                this.manorField.text = Math.floor(t.manorValorCur / t.manorValorMax * 100).toString() + "%" + r;
                break;
            default:
                this.manorField.text = Math.floor(t.energy / t.energyMax * 100).toString() + "%"
            }
        } else {
            switch (t.energyMode) {
            case 1:
                this.manorField.text = canvas.Translator.getText(505) + " " + t.manorExpCur.toString() + "/" + t.manorExpMax.toString();
                break;
            case 2:
                this.manorField.text = canvas.Translator.getText(506) + " " + t.manorValorCur.toString() + "/" + t.manorValorMax.toString();
                break;
            default:
                this.manorField.text = canvas.Translator.getText(149) + " " + t.energy.toString() + "/" + t.energyMax.toString()
            }
        }
        switch (t.energyMode) {
        case 1:
            o = t.manorExpCur / t.manorExpMax;
            break;
        case 2:
            o = t.manorValorCur / t.manorValorMax;
            break;
        default:
            o = t.energy / t.energyMax
        }
        this.manorProgress.progress = o;
        this.manorField.alpha = t.energyIsGrey() ? .6 : 1
    } else {
        this.manorField.text = ""
    }
    if (this.hpField.overed) {
        this.hpField.text = canvas.Translator.getText(3003) + " " + Math.floor(t.hpCur / t.hpMax * 100).toString() + "%"
    } else {
        this.hpField.text = Math.round(t.hpCur).toString() + "/" + t.hpMax.toString()
    }
    o = t.hpCur / t.hpMax;
    this.hpProgress.progress = o;
    if (this.manaAvailable) {
        if (this.mpField.overed) {
            this.mpField.text = canvas.Translator.getText(49) + " " + Math.floor(t.mpCur / t.mpMax * 100).toString() + "%"
        } else {
            this.mpField.text = Math.round(t.mpCur).toString() + "/" + t.mpMax.toString()
        }
        o = t.mpCur / t.mpMax;
        this.mpProgress.progress = o
    } else {
        this.mpField.text = ""
    }
    this.expLine.position.set(this.expProgress.x + Math.round(this.expProgress._width * this.expProgress.progress) - 2, 3);
    this.expLine.visible = this.expProgress.progress > 0 && this.expProgress.progress < 1;
    this.valorLine.position.set(this.valorProgress.x + Math.round(this.valorProgress._width * this.valorProgress.progress) - 2, 20);
    this.valorLine.visible = this.valorProgress.progress > 0 && this.valorProgress.progress < 1;
    this.hpLine.position.set(this.hpProgress.x + Math.round(this.hpProgress._width * this.hpProgress.progress) - 2, 37);
    this.hpLine.visible = this.hpProgress.progress > 0 && this.hpProgress.progress < 1;
    this.mpLine.position.set(this.mpProgress.x + Math.round(this.mpProgress._width * this.mpProgress.progress) - 2, 37);
    this.mpLine.visible = this.manaAvailable && this.mpProgress.progress > 0 && this.mpProgress.progress < 1;
    this.manorLine.position.set(this.manorProgress.x + Math.round(this.manorProgress._width * this.manorProgress.progress) - 2, 49);
    this.manorLine.visible = this.manorAvailable && this.manorProgress.progress > 0 && this.manorProgress.progress < 1
}
;
canvas.app.avatar.View.prototype.updatePremium = function() {
    var t = canvas.app.avatar.model;
    var e = t.serverTime.getDate();
    var a = e.getMonth() == 11 ? new Date(e.getFullYear() + 1,0,1) : new Date(e.getFullYear(),e.getMonth() + 1,1);
    var i = a.getTime() - e.getTime();
    var s = canvas.Translator.getText(500);
    if (t.premiumLevel > 0) {
        s += " " + t.premiumLevel + " " + canvas.Translator.getText(2025) + ": " + canvas.Functions.formatDate(i, "00", 3, false, true, false)
    }
    this.premiumButton.level = t.premiumLevel;
    this.premiumHint.update(s)
}
;
canvas.app.avatar.View.prototype.expOverHandler = function() {
    this.expField.overed = true;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.expOutHandler = function() {
    this.expField.overed = false;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.expClickHandler = function() {
    var t = {
        width: 619,
        height: 350,
        type: "auto"
    };
    confirmCenterDiv("#exp_table", t)
}
;
canvas.app.avatar.View.prototype.valorOverHandler = function() {
    this.valorField.overed = true;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.valorOutHandler = function() {
    this.valorField.overed = false;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.valorClickHandler = function() {
    var t = {
        width: 619,
        height: 350,
        type: "auto"
    };
    confirmCenterDiv("#rank_table", t)
}
;
canvas.app.avatar.View.prototype.hpOverHandler = function() {
    this.hpField.overed = true;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.hpOutHandler = function() {
    this.hpField.overed = false;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.mpOverHandler = function() {
    this.mpField.overed = true;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.mpOutHandler = function() {
    this.mpField.overed = false;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.manorOverHandler = function() {
    this.manorField.overed = true;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.manorOutHandler = function() {
    this.manorField.overed = false;
    this.updateTitles()
}
;
canvas.app.avatar.View.prototype.moneyClickHandler = function() {
    processMenu("b36")
}
;
canvas.app.avatar.View.prototype.effectsClickHandler = function() {
    var t = canvas.app.avatar.model;
    showEffectInfo(t.login)
}
;
canvas.app.avatar.View.prototype.effectsOverHandler = function() {
    effectAltSimple(2)
}
;
canvas.app.avatar.View.prototype.effectsOutHandler = function() {
    effectAltSimple(0)
}
;
canvas.app.avatar.View.prototype.effectsTimerHandler = function() {
    this.removeIfExist(this.effectsButton)
}
;
canvas.app.avatar.View.prototype.petClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.PET_CLICK)
}
;
canvas.app.avatar.View.prototype.petOverHandler = function() {
    var t = canvas.app.avatar.model;
    if (t.petId > 0)
        petAltSimple(2)
}
;
canvas.app.avatar.View.prototype.petOutHandler = function() {
    petAltSimple(0)
}
;
canvas.app.avatar.View.prototype.lockButtons = function() {
    this.petButton.enabled = false;
    this.petOutHandler();
    this.redButton.enabled = false
}
;
canvas.app.avatar.view.LevelButton = function() {
    this._level = 0;
    Object.defineProperty(this, "level", {
        get: function() {
            return this._level
        },
        set: function(t) {
            this._level = t;
            this.field.text = this._level
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/level_button"));
    this.field = this.sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_SHARP,3355392,21,16,"center"));
    this.field.position.set(1, 4)
}
;
canvas.app.avatar.view.LevelButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.avatar.view.LevelButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t);
    var e = canvas.app.avatar.model;
    showUserInfo(e.login)
}
;
canvas.app.avatar.view.PremiumButton = function() {
    this._level = 0;
    Object.defineProperty(this, "level", {
        get: function() {
            return this._level
        },
        set: function(t) {
            this._level = t;
            this.image.texture = canvas.ResourceLoader.getImage("ui", "avatar/premium" + this._level)
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/premium_back"));
    this.image = this.sprite.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.image.position.set(6, 13)
}
;
canvas.app.avatar.view.PremiumButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.avatar.view.PremiumButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t);
    openPremium()
}
;
canvas.app.avatar.view.RedButton = function() {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/red_button"));
    var t = new canvas.px.Graphics;
    t.beginFill(0, 1);
    t.drawCircle(11, 11, 10);
    t.endFill();
    this.addChild(t);
    this.image = this.addChildAt(new canvas.ui.Image, 0);
    this.image.mask = t;
    this.infoHint = new canvas.app.view.MappingHint
}
;
canvas.app.avatar.view.RedButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.avatar.view.RedButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t);
    var e = canvas.app.avatar.model;
    if (e.redButtonConfirm) {
        _top().systemConfirm(canvas.Translator.getText(2020), canvas.Translator.getText(905), false, function() {
            canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.RED_BUTTON_CLICK)
        })
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.RED_BUTTON_CLICK)
    }
}
;
canvas.app.avatar.view.RedButton.prototype.update = function() {
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_REMOVE, null, {
        target: this
    });
    var t = canvas.app.avatar.model;
    this.image.setImage(t.redButtonPicture);
    if (t.redButtonHint) {
        this.infoHint.update(t.redButtonHint);
        canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, {
            target: this,
            params: new canvas.utils.HintParams(this.infoHint)
        })
    }
    this.updateTime()
}
;
canvas.app.avatar.view.RedButton.prototype.updateTime = function() {
    var t = canvas.app.avatar.model;
    var e = Math.min(t.redButtonGlobalTime, t.redButtonUserTime) < 0 ? Infinity : Math.max(t.redButtonUserTime, t.redButtonGlobalTime) - t.serverTime.getTime();
    var a = e > 0 && (t.redButtonLimit <= 0 || t.redButtonUsed < t.redButtonLimit);
    this.visible = a
}
;
canvas.app.avatar.view.SwitchButton = function(t) {
    this._mode = t;
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            if (this._mode != t) {
                var e = this._mode;
                var a = 0;
                this._mode = t;
                while (e != t) {
                    a++;
                    e++;
                    if (e > 2)
                        e = 0
                }
                this.start(120 * a)
            }
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty);
    this.circle = this.sprite.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.circle.pivot = new canvas.px.Point(9,9);
    this.arrow = this.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/switch_button_arrow")));
    this.arrow.position.set(-15, -6);
    this.finish()
}
;
canvas.app.avatar.view.SwitchButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.avatar.view.SwitchButton.prototype.start = function(t) {
    if (t > 0) {
        this.targetRotation = t;
        this.currentRotation = 0;
        canvas.EventManager.addEventListener(canvas.app.avatar.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.avatar.view.SwitchButton.prototype.frameHandler = function() {
    if (this.currentRotation >= this.targetRotation) {
        canvas.EventManager.removeEventListener(canvas.app.avatar.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.finish()
    } else {
        this.currentRotation += 15;
        if (this.currentRotation > this.targetRotation)
            this.currentRotation = this.targetRotation;
        this.circle.rotation = canvas.Functions.degToRad(this.currentRotation)
    }
}
;
canvas.app.avatar.view.SwitchButton.prototype.finish = function() {
    this.circle.texture = canvas.ResourceLoader.getImage("ui", "avatar/switch_button_" + this.getColorByIndex(this.mode));
    this.circle.rotation = 0
}
;
canvas.app.avatar.view.SwitchButton.prototype.getColorByIndex = function(t) {
    switch (t) {
    case 0:
        return "blue";
    case 1:
        return "green";
    case 2:
        return "yellow"
    }
}
;
canvas.app.avatar.view.SwitchButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t);
    if (this.circle.rotation == 0) {
        canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.UP_MANOR_MODE)
    }
}
;
canvas.app.topMenu.Const = {
    BRILL_VERSION: 1,
    ID_LOCATION: 2
};
canvas.app.topMenu.Event = {
    ENTER_FRAME: "TopMenu.ENTER_FRAME",
    ITEM_DOWN: "TopMenu.ITEM_DOWN",
    ITEM_OVER: "TopMenu.ITEM_OVER",
    ITEM_OUT: "TopMenu.ITEM_OUT",
    ITEM_SELECT: "TopMenu.ITEM_SELECT",
    ITEM_DESELECT: "TopMenu.ITEM_DESELECT",
    ITEM_CLICK: "TopMenu.ITEM_CLICK"
};
canvas.app.topMenu.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.view = new canvas.app.topMenu.View;
    this.view.interactive = true;
    this.view.mouseup = this.upHandler.bind(this);
    this.addChild(this.view);
    this.dragItem = null;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_DOWN, null, this.itemDownHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OVER, null, this.itemOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_SELECT, null, this.itemSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_DESELECT, null, this.itemDeselectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_CLICK, null, this.itemClickHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.outHandler, this)
}
;
canvas.app.topMenu.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.topMenu.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            switch (e) {
            case "common|top_menu":
                this.model.dragging = parseInt(t[e].dragDropItems) != 0;
                break;
            case "bgFilledState":
                var i = parseInt(t[e]);
                switch (i) {
                case 1:
                case 2:
                    this.view.changeBg((i + 1).toString());
                    break;
                default:
                    this.view.changeBg("")
                }
                break
            }
        }
    }
}
;
canvas.app.topMenu.Main.prototype.blinkButton = function(t, e) {
    var a = this.model;
    if (e) {
        if (a.blinkIds.indexOf(t) < 0)
            a.blinkIds.push(t)
    } else {
        if (a.blinkIds.indexOf(t) >= 0)
            a.blinkIds.splice(a.blinkIds.indexOf(t), 1)
    }
    this.view.testBlink()
}
;
canvas.app.topMenu.Main.prototype.hideButton = function(t, e) {
    var a = this.model;
    if (e) {
        if (a.hideIds.indexOf(t) < 0)
            a.hideIds.push(t)
    } else {
        if (a.hideIds.indexOf(t) >= 0)
            a.hideIds.splice(a.hideIds.indexOf(t), 1)
    }
    this.view.update()
}
;
canvas.app.topMenu.Main.prototype.itemDownHandler = function(t) {
    this.dragItem = t.params
}
;
canvas.app.topMenu.Main.prototype.itemOverHandler = function(t) {
    if (this.model.dragging && this.dragItem && this.dragItem != t.params) {
        this.dragItem.wasChanged = true;
        this.view.replace(this.dragItem, t.params);
        var e = this.view.items.length;
        var a = "";
        for (var i = 0; i < e; i++) {
            a += (a ? "," : "") + this.view.items[i].data.id
        }
        this.model.localStorage.set("order", a);
        this.view.testSubMenuSides()
    }
}
;
canvas.app.topMenu.Main.prototype.upHandler = function() {
    this.dragItem = null
}
;
canvas.app.topMenu.Main.prototype.outHandler = function() {
    this.dragItem = null
}
;
canvas.app.topMenu.Main.prototype.itemSelectHandler = function(t) {
    this.view.selectItem(t.params)
}
;
canvas.app.topMenu.Main.prototype.itemDeselectHandler = function(t) {
    this.view.deselectItem(t.params)
}
;
canvas.app.topMenu.Main.prototype.itemClickHandler = function(t) {
    var e = t.params;
    if (this.model.blinkIds.indexOf(e.data.id) >= 0) {
        this.model.blinkIds.splice(this.model.blinkIds.indexOf(e.data.id), 1);
        var a = new canvas.utils.URLRequest("/user_conf.php?mode=button_press&type=top&id=" + e.data.id);
        a.load()
    }
    if (canvas.app.topMenu.model.jsPopup) {
        this.processMenu(e.data)
    } else {
        switch (e.data.id) {
        case 8:
            this.model.localStorage.set("brillVersion", canvas.app.topMenu.Const.BRILL_VERSION);
            this.processMenu(e.data);
            break;
        case 12:
            canvas.Functions.navigateToURL(canvas.Translator.getText(1100), "_blank");
            break;
        case 11:
            setTimeout(help_menu.bind(this, e.x - 25, e.y + 80), 100);
            break;
        case 17:
            canvas.Functions.navigateToURL("recruitment.php", "_blank");
            break;
        case 21:
            canvas.Functions.navigateToURL("info/info/", "_blank");
            break;
        case 22:
            canvas.Functions.navigateToURL("info/library/", "_blank");
            break;
        case 23:
            canvas.Functions.navigateToURL("info/news/", "_blank");
            break;
        default:
            this.processMenu(e.data)
        }
    }
}
;
canvas.app.topMenu.Main.prototype.processMenu = function(t) {
    try {
        if (t.command)
            processMenu(t.command)
    } catch (t) {}
}
;
canvas.app.topMenu.Main.prototype.executeMenuId = function(t) {
    this.itemClickHandler({
        params: {
            data: this.model.itemsById[t]
        }
    })
}
;
canvas.app.topMenu.Model = function(t) {
    this.labels = t.labels.split("|");
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.TOP_MENU);
    this.dragging = parseInt(t.dragDropItems) != 0;
    this.jsPopup = t.js_popup != undefined && t.js_popup == "1";
    var e = parseInt(this.localStorage.get("brillVersion"));
    this.showBrillMessage = (!e || e != canvas.app.topMenu.Const.BRILL_VERSION) && t.br_msg;
    this.blinkIds = [];
    this.hideIds = [];
    if (t.blink != undefined) {
        var a = t.blink.split("|");
        if (this.showBrillMessage)
            a.push(8);
        for (var i = 0, s = a.length; i < s; i++) {
            if (a[i] != "" && this.blinkIds.indexOf(parseInt(a[i])) < 0) {
                this.blinkIds.push(parseInt(a[i]))
            }
        }
    }
    if (t.hide != undefined) {
        var a = t.hide.split("|");
        for (var i = 0, s = a.length; i < s; i++) {
            if (a[i] != "" && this.hideIds.indexOf(parseInt(a[i])) < 0) {
                this.hideIds.push(parseInt(a[i]))
            }
        }
    }
    this.items = [];
    this.itemsById = {}
}
;
canvas.app.topMenu.Model.prototype.parseConfig = function(t) {
    var e;
    if (t) {
        e = t.data;
        var a = e.children[0].children;
        var i = a.length;
        var s;
        var n;
        var r;
        var o;
        var l = this.localStorage.get("order");
        var c = l ? l.split(",") : null;
        for (var p = 0; p < i; p++) {
            n = this.parseItem(a[p]);
            if (c) {
                n.index = c.indexOf(n.id.toString())
            }
            this.items.push(n);
            this.itemsById[n.id] = n;
            s = a[p].children.length;
            if (s > 0) {
                n.items = [];
                for (var h = 0; h < s; h++) {
                    r = this.parseItem(a[p].children[h]);
                    n.items.push(r)
                }
            }
        }
        if (c) {
            this.items.sort(function(t, e) {
                return t.index - e.index
            })
        } else {
            this.items.sort(function(t, e) {
                return t.id - e.id
            })
        }
    } else {}
}
;
canvas.app.topMenu.Model.prototype.parseItem = function(t) {
    return {
        id: parseInt(t.attributes.id.value),
        label: t.attributes.label.value,
        command: t.attributes.command ? t.attributes.command.value : "",
        pict: t.attributes.pict.value.split(".")[0]
    }
}
;
canvas.app.topMenu.View = function() {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(0, 6);
    this.items = [];
    this.rebuildScene();
    this.testSubMenuSides();
    setTimeout(this.testBlink.bind(this), 100)
}
;
canvas.app.topMenu.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.topMenu.View.prototype.rebuildScene = function() {
    if (this.items.length > 0) {
        this.container.removeChildren(0, this.items.length - 1)
    }
    this.buildMenu()
}
;
canvas.app.topMenu.View.prototype.buildMenu = function() {
    this.items = [];
    var t = canvas.app.topMenu.model;
    var e = 100;
    var a;
    for (var i = 0, s = t.items.length; i < s; i++) {
        a = this.container.addChild(new canvas.app.topMenu.view.ItemView(t.items[i]));
        a.visible = t.hideIds.indexOf(t.items[i].id) < 0;
        a.position.set(e, 0);
        a.init();
        if (a.visible)
            e += 55;
        this.items.push(a)
    }
}
;
canvas.app.topMenu.View.prototype.update = function() {
    var t = canvas.app.topMenu.model;
    var e = this.items.length;
    var a;
    var i = 100;
    for (var s = 0; s < e; s++) {
        a = this.items[s];
        a.visible = t.hideIds.indexOf(a.data.id) < 0;
        if (a.visible) {
            if (a.x != i)
                a.go(i);
            i += 55
        }
    }
}
;
canvas.app.topMenu.View.prototype.testBlink = function() {
    var t = this.items.length;
    for (var e = 0; e < t; e++) {
        this.items[e].testBlink()
    }
}
;
canvas.app.topMenu.View.prototype.replace = function(t, e) {
    var a = this.items.indexOf(t);
    var i = this.items.indexOf(e);
    this.items[a] = e;
    this.items[i] = t;
    this.container.addChild(t);
    e.interactive = e.container.interactive = false;
    e.outHandler();
    this.update()
}
;
canvas.app.topMenu.View.prototype.selectItem = function(t) {
    var e = this.items.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = this.items[i];
        if (t != a) {
            a.mode = 2
        }
    }
    if (t) {
        this.container.addChild(t)
    }
}
;
canvas.app.topMenu.View.prototype.deselectItem = function(t) {
    var e = this.items.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = this.items[i];
        if (t != a) {
            a.mode = 0
        }
    }
}
;
canvas.app.topMenu.View.prototype.testSubMenuSides = function() {
    var t = this.items.length;
    var e;
    for (var a = 0; a < t; a++) {
        e = this.items[a];
        if (e.items) {
            e.menuSide = a <= t * .5
        }
    }
}
;
canvas.app.topMenu.View.prototype.changeBg = function(t) {
    var e = this.items.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = this.items[i];
        if (a.data.pict == "battleField") {
            a.image.texture = canvas.ResourceLoader.getImage("ui", "top/battleField" + t)
        }
    }
}
;
canvas.app.topMenu.view.ItemView = function(t, e) {
    this.data = t;
    this._mode = 0;
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            if (this._mode != t) {
                this._mode = t;
                switch (t) {
                case 0:
                    this.targetArrowRotation = 0;
                    this.targetArrowX = 36;
                    this.targetY = 0;
                    this.targetDarknees = 0;
                    this.targetItemsY = -80;
                    break;
                case 1:
                    this.targetArrowRotation = canvas.Functions.degToRad(180);
                    this.targetArrowX = 10;
                    this.targetY = 0;
                    this.targetDarknees = 0;
                    this.targetItemsY = 10;
                    break;
                case 2:
                    this.targetDarknees = 5;
                    this.targetY = -20;
                    this.targetItemsY = -80;
                    break
                }
                canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
            }
        }
    });
    this._darknees = 0;
    Object.defineProperty(this, "darknees", {
        get: function() {
            return this._darknees
        },
        set: function(t) {
            if (this._darknees != t) {
                this._darknees = t;
                if (t > 0) {
                    this.filters = [canvas.Functions.getBrightness(1 - .1 * t)]
                } else {
                    this.filters = []
                }
            }
        }
    });
    this._menuSide = true;
    Object.defineProperty(this, "menuSide", {
        get: function() {
            return this._menuSide
        },
        set: function(t) {
            if (this._menuSide != t) {
                this._menuSide = t;
                if (this.items) {
                    var e = this.items.length;
                    for (var a = 0; a < e; a++) {
                        this.items[a].x = this.items[a].targetX = t ? a * 50 : -a * 50 - 94
                    }
                }
            }
        }
    });
    canvas.px.Container.call(this);
    if (e == undefined)
        e = false;
    this.isSmall = e;
    this.container = this.addChild(new canvas.px.Container);
    this.container.pivot = new canvas.px.Point(30,30);
    this.container.interactive = true;
    var a;
    if (this.isSmall) {
        this.container.position.set(30, 30);
        this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_back_small")));
        a = canvas.ResourceLoader.getImage("ui", "top/" + t.pict);
        this.image = this.container.addChild(new canvas.px.Sprite(a));
        this.front = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_front_small")));
        this.back.position.set(8, 8);
        this.image.position.set(8, 0);
        this.hitArea = new canvas.px.Circle(34,30,26);
        this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/light_small"));
        this.light.position.set(7, 6)
    } else {
        this.container.position.set(30, 30);
        this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_back")));
        a = canvas.ResourceLoader.getImage("ui", "top/" + t.pict);
        this.image = this.container.addChild(new canvas.px.Sprite(a));
        this.front = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_front")));
        this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16770731,150,17,"center"));
        this.field.position.set(-40, 60);
        this.back.position.set(6, 0);
        this.image.position.set(6, 0);
        this.hitArea = new canvas.px.Circle(34,30,30);
        this.field.alpha = 0;
        this.field.text = canvas.app.topMenu.model.labels[t.label];
        this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/light_big"));
        this.light.position.set(5, 0)
    }
    this.interactive = true;
    this.buttonMode = true;
    this.lightDirection = 0;
    this.mouseover = this.over2Handler.bind(this);
    this.container.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.mousedown = this.downHandler.bind(this);
    this.mouseup = this.upHandler.bind(this);
    this.click = this.clickHandler.bind(this);
    this.wasChanged = false;
    if (this.data.items) {
        this.arrowBack = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/arrow_back")));
        this.arrow = this.arrowBack.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/arrow")));
        this.arrow.pivot = new canvas.px.Point(14,14);
        this.arrow.position.set(14, 14);
        this.arrowBack.position.set(36, 36);
        this.itemsContainer = new canvas.px.Container;
        this.itemsContainer.position.set(50, -80);
        var i = this.data.items.length;
        this.items = [];
        var s;
        for (var n = 0; n < i; n++) {
            s = this.itemsContainer.addChild(new canvas.app.topMenu.view.ItemView(this.data.items[n],true));
            s.position.set(n * 50, 0);
            s.init();
            this.items.push(s)
        }
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OVER, null, this.itemOverHandler, this);
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OUT, null, this.itemOutHandler, this)
    }
}
;
canvas.app.topMenu.view.ItemView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.topMenu.view.ItemView.prototype.init = function() {
    this.targetAlpha = 0;
    this.targetScale = 1;
    this.targetArrowRotation = 0;
    this.targetArrowX = 36;
    this.targetX = this.x;
    this.targetY = 0;
    this.targetDarknees = 0;
    this.targetItemsY = -80
}
;
canvas.app.topMenu.view.ItemView.prototype.go = function(t) {
    this.targetX = t;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.topMenu.view.ItemView.prototype.overHandler = function() {
    this.targetAlpha = 1;
    this.targetScale = 1.15;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.over2Handler()
}
;
canvas.app.topMenu.view.ItemView.prototype.over2Handler = function() {
    if (!this.overedItem && !this.isSmall && this.items) {
        this.field.text = canvas.app.topMenu.model.labels[this.data.label]
    }
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_OVER, null, this)
}
;
canvas.app.topMenu.view.ItemView.prototype.downHandler = function() {
    this.targetAlpha = 1;
    this.targetScale = this.mode == 1 ? 1 : .9;
    this.wasChanged = false;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (this.mode == 0 && !this.isSmall) {
        canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DOWN, null, this)
    }
}
;
canvas.app.topMenu.view.ItemView.prototype.upHandler = function() {
    this.targetAlpha = 1;
    this.targetScale = 1;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.topMenu.view.ItemView.prototype.outHandler = function() {
    this.targetAlpha = 0;
    this.targetScale = 1;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_OUT, null, this)
}
;
canvas.app.topMenu.view.ItemView.prototype.frameHandler = function() {
    if (this.field && this.targetAlpha != this.field.alpha || this.targetScale != this.container.scale.x || this.targetX != this.x || this.targetY != this.y || this.arrowBack && (this.targetArrowX != this.arrowBack.x || this.targetArrowRotation != this.arrow.rotation) || this.targetDarknees != this.darknees || this.itemsContainer && this.targetItemsY != this.itemsContainer.y) {
        if (this.field) {
            if (this.targetAlpha > this.field.alpha) {
                this.field.alpha = Math.min(this.field.alpha + .3, this.targetAlpha)
            } else if (this.targetAlpha < this.field.alpha) {
                this.field.alpha = Math.max(this.field.alpha - .1, this.targetAlpha)
            }
        }
        if (this.targetScale > this.container.scale.x) {
            this.container.scale.x = Math.min(this.container.scale.x + .05, this.targetScale);
            this.container.scale.y = this.container.scale.x
        } else if (this.targetScale < this.container.scale.x) {
            this.container.scale.x = Math.max(this.container.scale.x - .1, this.targetScale);
            this.container.scale.y = this.container.scale.x
        }
        var t;
        if (this.targetX > this.x) {
            t = Math.round(Math.abs(this.targetX - this.x) * .4);
            this.x = Math.min(this.x + Math.max(20, t), this.targetX)
        } else if (this.targetX < this.x) {
            t = Math.round(Math.abs(this.targetX - this.x) * .4);
            this.x = Math.max(this.x - Math.max(20, t), this.targetX)
        }
        if (this.targetY > this.y) {
            this.y = Math.min(this.y + 5, this.targetY)
        } else if (this.targetY < this.y) {
            this.y = Math.max(this.y - 5, this.targetY)
        }
        if (this.arrowBack) {
            if (this.targetArrowX > this.arrowBack.x) {
                this.arrowBack.x = Math.min(this.arrowBack.x + 8, this.targetArrowX)
            } else if (this.targetArrowX < this.arrowBack.x) {
                this.arrowBack.x = Math.max(this.arrowBack.x - 8, this.targetArrowX)
            }
            if (this.targetArrowRotation > this.arrow.rotation) {
                this.arrow.rotation = Math.min(this.arrow.rotation + .8, this.targetArrowRotation)
            } else if (this.targetArrowRotation < this.arrow.rotation) {
                this.arrow.rotation = Math.max(this.arrow.rotation - .8, this.targetArrowRotation)
            }
        }
        if (this.targetDarknees > this.darknees) {
            this.darknees = Math.min(this.darknees + 2, this.targetDarknees)
        } else if (this.targetDarknees < this.darknees) {
            this.darknees = Math.max(this.darknees - 2, this.targetDarknees)
        }
        if (this.itemsContainer) {
            if (this.targetItemsY > this.itemsContainer.y) {
                if (!this.contains(this.itemsContainer))
                    this.addChild(this.itemsContainer);
                this.itemsContainer.y = Math.min(this.itemsContainer.y + 20, this.targetItemsY)
            } else if (this.targetItemsY < this.itemsContainer.y) {
                if (!this.contains(this.itemsContainer))
                    this.addChild(this.itemsContainer);
                this.itemsContainer.y = Math.max(this.itemsContainer.y - 20, this.targetItemsY)
            } else {
                if (this.targetItemsY < 0) {
                    this.removeIfExist(this.itemsContainer)
                }
            }
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.interactive = this.container.interactive = true
    }
}
;
canvas.app.topMenu.view.ItemView.prototype.clickHandler = function() {
    if (!this.wasChanged) {
        if (this.data.items) {
            if (this.mode == 1) {
                this.mode = 0;
                canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DESELECT, null, this)
            } else {
                this.mode = 1;
                canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_SELECT, null, this)
            }
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DESELECT);
            canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_CLICK, null, this)
        }
        this.stopBlink()
    }
}
;
canvas.app.topMenu.view.ItemView.prototype.itemOverHandler = function(t) {
    if (this.items.indexOf(t.params) >= 0) {
        this.overedItem = t.params;
        this.field.text = canvas.app.topMenu.model.labels[t.params.data.label];
        this.targetAlpha = 1;
        this.targetScale = 1;
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.topMenu.view.ItemView.prototype.itemOutHandler = function(t) {
    if (this.items.indexOf(t.params) >= 0) {
        if (this.overedItem == t.params) {
            this.overedItem = null
        }
    }
}
;
canvas.app.topMenu.view.ItemView.prototype.startBlink = function() {
    this.lightDirection = true;
    this.light.alpha = 0;
    this.container.addChild(this.light);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)
}
;
canvas.app.topMenu.view.ItemView.prototype.stopBlink = function() {
    this.container.removeIfExist(this.light);
    canvas.EventManager.removeEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)
}
;
canvas.app.topMenu.view.ItemView.prototype.blinkFrameHandler = function() {
    if (this.lightDirection) {
        this.light.alpha = Math.min(this.light.alpha + .04, 1);
        if (this.light.alpha == 1)
            this.lightDirection = false
    } else {
        this.light.alpha = Math.max(this.light.alpha - .04, 0);
        if (this.light.alpha == 0)
            this.lightDirection = true
    }
}
;
canvas.app.topMenu.view.ItemView.prototype.testBlink = function() {
    var t = canvas.app.topMenu.model;
    var e = false;
    if (t.blinkIds.indexOf(this.data.id) >= 0) {
        this.startBlink();
        e = true
    }
    if (this.items) {
        var a = this.items.length;
        var i = false;
        for (var s = 0; s < a; s++) {
            if (this.items[s].testBlink()) {
                i = true
            }
        }
        if (i && this.mode != 1) {
            this.clickHandler()
        }
    }
    return e
}
;
canvas.app.rightMenu.Const = {
    MENU_TYPE_MAIL: 1,
    MENU_TYPE_BAG: 2,
    MENU_TYPE_MOUNT: 3,
    MENU_TYPE_NAV: 4,
    MENU_TYPE_PROF: 5,
    MENU_TYPE_QUEST: 6,
    MENU_TYPE_FRIENDS: 7
};
canvas.app.rightMenu.Event = {
    ENTER_FRAME: "RightMenu.ENTER_FRAME",
    MENU_CLICK: "RightMenu.MENU_CLICK",
    PANEL_CLOSED: "RightMenu.PANEL_CLOSED",
    ITEM_CLICK: "RightMenu.ITEM_CLICK"
};
canvas.app.rightMenu.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.back = this.addChild(new canvas.px.Mask(105,this.model.height));
    this.back.interactive = true;
    this.back.click = this.backClickHandler.bind(this);
    this.view = new canvas.app.rightMenu.View;
    this.addChild(this.view);
    setInterval(this.timerHandler.bind(this), 3e3);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.MENU_CLICK, null, this.menuClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ITEM_CLICK, null, this.itemClickHandler, this);
    this.request = new canvas.utils.URLRequest("entry_point.php?object=user&json_mode_on=1&action=instapockets");
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this)
}
;
canvas.app.rightMenu.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            switch (e) {
            case "user|mount":
                a = t[e];
                this.model.mount = a.mount_id > 0 ? a.is_mount ? 2 : 1 : 0;
                this.view.mountView.update();
                break;
            case "instapockets|init":
                this.request.load();
                break
            }
        }
    }
}
;
canvas.app.rightMenu.Main.prototype.completeHandler = function(t) {
    var e = JSON.parse(this.request.request.responseText);
    if (e["user|instapockets"]) {
        var a = e["user|instapockets"];
        var i = [];
        for (var s in a["instapockets_artifact_list"]) {
            i.push(a["instapockets_artifact_list"][s])
        }
        this.model.parseSlots(a["instapockets_slot_num_max"], i);
        this.view.update()
    }
}
;
canvas.app.rightMenu.Main.prototype.blinkButton = function(t, e) {
    var a = this.model;
    if (e) {
        if (a.blinkIds.indexOf(t) < 0)
            a.blinkIds.push(t)
    } else {
        if (a.blinkIds.indexOf(t) >= 0)
            a.blinkIds.splice(a.blinkIds.indexOf(t), 1)
    }
    this.view.testBlink()
}
;
canvas.app.rightMenu.Main.prototype.handlerKey = function(t) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement")
        return;
    var e = t.params.globalKeyCode;
    var a = t.params.altKey;
    var i = t.params.ctrlKey;
    var s = t.params.shiftKey;
    if (s) {
        switch (e) {
        case canvas.Const.KEYS.KEY_1:
            this.view.itemsPanel.useItem(0);
            break;
        case canvas.Const.KEYS.KEY_2:
            this.view.itemsPanel.useItem(1);
            break;
        case canvas.Const.KEYS.KEY_3:
            this.view.itemsPanel.useItem(2);
            break;
        case canvas.Const.KEYS.KEY_4:
            this.view.itemsPanel.useItem(3);
            break;
        case canvas.Const.KEYS.KEY_5:
            this.view.itemsPanel.useItem(4);
            break;
        case canvas.Const.KEYS.KEY_6:
            this.view.itemsPanel.useItem(5);
            break;
        case canvas.Const.KEYS.KEY_7:
            this.view.itemsPanel.useItem(6);
            break;
        case canvas.Const.KEYS.KEY_8:
            this.view.itemsPanel.useItem(7);
            break;
        case canvas.Const.KEYS.KEY_9:
            this.view.itemsPanel.useItem(8);
            break
        }
    } else if (a) {
        switch (e) {
        case canvas.Const.KEYS.L:
            openLocator();
            break
        }
    }
}
;
canvas.app.rightMenu.Main.prototype.timerHandler = function() {
    this.model.parseSessTarget();
    this.view.navView.update()
}
;
canvas.app.rightMenu.Main.prototype.menuClickHandler = function(t) {
    var e = t.params;
    var a = false;
    if (this.model.blinkIds.indexOf(e.id) >= 0) {
        a = true;
        this.model.blinkIds.splice(this.model.blinkIds.indexOf(e.id), 1);
        var i = new canvas.utils.URLRequest("/user_conf.php?mode=button_press&type=right&id=" + e.id);
        i.load()
    }
    switch (e.id) {
    case canvas.app.rightMenu.Const.MENU_TYPE_MAIL:
        mailPopup(a ? 1 : 0);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_BAG:
        showExternalBackpack();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
        mountPopup(this.model.mount);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
        var s = new canvas.utils.LocalStorage(canvas.Log.COMPASS);
        var n = s.get("width") || 0;
        var r = s.get("height") || 0;
        showExternalNavigate(true, n, r);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_PROF:
        openServiceCraft();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_QUEST:
        openQuests();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS:
        processMenu("b20");
        break
    }
}
;
canvas.app.rightMenu.Main.prototype.itemClickHandler = function(t) {
    _top().frames["main_frame"].instapocketUse(t.params.id)
}
;
canvas.app.rightMenu.Main.prototype.backClickHandler = function(t) {
    if (this.view.switchButton.opened) {
        this.view.switchClickHandler()
    }
}
;
canvas.app.rightMenu.Model = function(t) {
    this.blinkIds = [];
    this.items = [];
    this.itemsCapacity = 0;
    this.serverTime = new canvas.utils.ServerTime(t.serverTime);
    this.socGift = t.soc_gift ? parseInt(t.soc_gift) : 0;
    this.mount = t.mount ? parseInt(t.mount) : 0;
    this.friendsVisible = t.friendsVisible ? parseInt(t.friendsVisible) == 1 : true;
    this.width = t.width;
    this.height = t.height;
    var e = 0;
    var a = new Array;
    var i;
    while (true) {
        if (t["instapockets[" + e + "]"]) {
            i = t["instapockets[" + e + "]"].split(":");
            a.push({
                slot_num: i[0],
                id: i[1],
                cnt: i[2],
                picture: i[3],
                time_expire: i[4]
            });
            e++
        } else {
            break
        }
    }
    this.parseSlots(t.instapockets_slot_num_max ? t.instapockets_slot_num_max : 0, a);
    var s;
    if (t.blink != undefined) {
        a = t.blink.split("|");
        var n = a.length;
        for (e = 0; e < n; e++) {
            s = parseInt(a[e]);
            if (this.blinkIds.indexOf(s) < 0)
                this.blinkIds.push(s)
        }
    }
    this.parseSessTarget()
}
;
canvas.app.rightMenu.Model.prototype.parseSessTarget = function() {
    var t = canvas.Functions.getSessTarget();
    this.finishLocation = t.target;
    this.autoPenalty = t.autoPenalty
}
;
canvas.app.rightMenu.Model.prototype.parseSlots = function(t, e) {
    this.itemsCapacity = t;
    this.items = new Array;
    var a;
    var i = e.length;
    for (var s = 0; s < i; s++) {
        a = e[s];
        this.items[a["slot_num"] - 1] = a
    }
}
;
canvas.app.rightMenu.View = function() {
    canvas.px.Container.call(this);
    this.menuContainer = this.addChild(new canvas.px.Container);
    this.itemsContainer = this.addChild(new canvas.px.Container);
    this.items = [];
    var t = canvas.app.rightMenu.model;
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_MAIL);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_BAG);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_MOUNT);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_NAV);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_PROF);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_QUEST);
    if (t.friendsVisible) {
        this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS)
    }
    var e = this.items.length;
    for (var a = 0; a < e; a++) {
        this.items[a].y = a * 46
    }
    this.switchButton = new canvas.app.rightMenu.view.SwitchButton;
    this.switchButton.position.set(-1, 56);
    this.itemsPanel = this.addChildAt(new canvas.app.rightMenu.view.ItemsPanel, 0);
    this.itemsPanel.position.set(-40, 50);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.switchButton, this.switchClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.PANEL_CLOSED, null, this.panelClosedHandler, this);
    this.update();
    this.testBlink()
}
;
canvas.app.rightMenu.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.View.prototype.createMenuItem = function(t) {
    switch (t) {
    case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
        this.mountView = this.menuContainer.addChildAt(new canvas.app.rightMenu.view.menu.MenuItemMount, 0);
        this.items.push(this.mountView);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
        this.navView = this.menuContainer.addChildAt(new canvas.app.rightMenu.view.menu.MenuItemNav, 0);
        this.items.push(this.navView);
        break;
    default:
        this.items.push(this.menuContainer.addChildAt(new canvas.app.rightMenu.view.MenuItemView(t), 0))
    }
}
;
canvas.app.rightMenu.View.prototype.update = function() {
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this)
}
;
canvas.app.rightMenu.View.prototype.updateHandler = function() {
    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
    var t = canvas.app.rightMenu.model;
    this.itemsPanel.update();
    if (t.itemsCapacity > 0) {
        this.addChild(this.switchButton);
        if (this.switchButton.opened) {
            this.x = 40;
            this.itemsPanel.show()
        } else {
            this.itemsPanel.hide()
        }
    } else {
        this.removeIfExist(this.switchButton);
        this.switchButton.opened = false;
        this.itemsPanel.hide();
        this.itemsContainer.removeIfExist(this.itemsPanel)
    }
}
;
canvas.app.rightMenu.View.prototype.panelClosedHandler = function() {
    this.x = 0
}
;
canvas.app.rightMenu.View.prototype.testBlink = function() {
    var t = this.items.length;
    var e = canvas.app.rightMenu.model;
    for (var a = 0; a < t; a++) {
        if (e.blinkIds.indexOf(this.items[a].id) >= 0) {
            this.items[a].startBlink()
        }
    }
}
;
canvas.app.rightMenu.View.prototype.switchClickHandler = function() {
    if (this.switchButton.parent) {
        this.switchButton.opened = !this.switchButton.opened;
        this.update()
    }
}
;
canvas.app.rightMenu.view.ItemView = function() {
    canvas.ui.ListRenderer.call(this);
    this.image = this.addChild(new canvas.ui.Image);
    this.image.position.set(10, 10);
    this.image.scale.set(.45, .45);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/slot_empty")));
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,20,14,"center"));
    this.field.position.set(20, 22);
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/slot_over"));
    this.light.position.set(4, 4);
    this.setSize(47, 40);
    this.hitArea = new canvas.px.Circle(22,22,22)
}
;
canvas.app.rightMenu.view.ItemView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.rightMenu.view.ItemView.prototype.update = function() {
    if (this.data) {
        this.back.texture = canvas.ResourceLoader.getImage("ui", "right/slot_transparent");
        this.buttonMode = true;
        this.image.setImage(canvas.Config.artifactsPath + this.data.picture);
        this.field.text = this.data.cnt > 1 ? this.data.cnt : ""
    } else {
        this.back.texture = canvas.ResourceLoader.getImage("ui", "right/slot_empty");
        this.buttonMode = false;
        this.image.clear();
        this.outHandler();
        this.field.text = ""
    }
}
;
canvas.app.rightMenu.view.ItemView.prototype.overHandler = function() {
    if (this.data) {
        this.addChild(this.light);
        artifactAltSimple(this.data.id, 2);
        canvas.app.rightMenu.view.ItemView.overedItem = this
    }
}
;
canvas.app.rightMenu.view.ItemView.prototype.outHandler = function() {
    this.removeIfExist(this.light);
    if (this.data && canvas.app.rightMenu.view.ItemView.overedItem == this) {
        artifactAltSimple(this.data.id, 0)
    }
}
;
canvas.app.rightMenu.view.ItemView.prototype.clickHandler = function() {
    if (this.data) {
        canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.ITEM_CLICK, null, this.data)
    }
}
;
canvas.app.rightMenu.view.ItemsPanel = function() {
    canvas.px.Container.call(this);
    this.xPos = 40;
    this.container = new canvas.px.Container;
    this.hide();
    this.interactive = false;
    setInterval(this.timerHandler.bind(this), 1e3);
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list.setSize(45, 500);
    this.list.paddingV = 0;
    this.list.interactive = false;
    this.container.x = 40
}
;
canvas.app.rightMenu.view.ItemsPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.view.ItemsPanel.prototype.update = function() {
    var t = canvas.app.rightMenu.model;
    var e = Math.max(t.itemsCapacity, this.list.items.length);
    for (var a = 0; a < e; a++) {
        if (a >= this.list.items.length) {
            this.list.add(new canvas.app.rightMenu.view.ItemView)
        }
        if (a >= t.itemsCapacity) {
            this.list.removeAt(a)
        } else {
            this.list.items[a].data = a >= t.items.length ? null : t.items[a]
        }
    }
}
;
canvas.app.rightMenu.view.ItemsPanel.prototype.useItem = function(t) {
    if (this.list.items[t]) {
        this.list.items[t].clickHandler()
    }
}
;
canvas.app.rightMenu.view.ItemsPanel.prototype.hide = function() {
    this.interactiveChildren = false;
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this)
}
;
canvas.app.rightMenu.view.ItemsPanel.prototype.show = function() {
    this.addChild(this.container);
    this.direction = true;
    this.interactiveChildren = false;
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
    setStyleSWF("right", 0, "items_right_cont")
}
;
canvas.app.rightMenu.view.ItemsPanel.prototype.updateHandler = function() {
    if (this.direction) {
        if (this.container.x > 0) {
            this.container.x -= 10
        } else {
            canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
            this.interactiveChildren = true
        }
    } else {
        if (this.container.x < this.xPos) {
            this.container.x += 10
        } else {
            this.removeIfExist(this.container);
            canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
            setStyleSWF("right", -40, "items_right_cont");
            canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.PANEL_CLOSED)
        }
    }
}
;
canvas.app.rightMenu.view.ItemsPanel.prototype.timerHandler = function() {
    var t = canvas.app.rightMenu.model;
    var e = t.items.length;
    var a;
    var i = false;
    var s = t.serverTime.getTime();
    for (var n = 0; n < e; n++) {
        a = t.items[n];
        if (a && a.time_expire > 0 && a.time_expire < s) {
            t.items[n] = null;
            i = true
        }
    }
    if (i) {
        this.update()
    }
}
;
canvas.app.rightMenu.view.MenuItemView = function(t) {
    this.id = t;
    canvas.px.Container.call(this);
    this.defaultAlpha = 1;
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_back")));
    this.field = new canvas.ui.Text(canvas.Const.FONT_ARIAL_9_BOLD_STROKE,16770731,68,12,"center");
    this.createImage();
    this.front = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_front")));
    this.fieldBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/field_back")));
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_light"));
    this.back.position.set(14, 5);
    this.light.position.set(15, 7);
    this.fieldBack.position.set(0, 27);
    this.addChild(this.field);
    this.field.position.set(0, 37);
    this.image.alpha = this.defaultAlpha;
    this.interactive = true;
    this.buttonMode = true;
    this.hitArea = new canvas.px.Circle(34,26,20);
    this.click = this.clickHandler.bind(this);
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this)
}
;
canvas.app.rightMenu.view.MenuItemView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.view.MenuItemView.prototype.createImage = function() {
    switch (this.id) {
    case canvas.app.rightMenu.Const.MENU_TYPE_MAIL:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/mail_image")));
        this.field.text = canvas.Translator.getText(3004);
        this.defaultAlpha = .4;
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_BAG:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/bag_image")));
        this.field.text = canvas.Translator.getText(102).toLowerCase();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
        this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
        this.field.text = canvas.Translator.getText(3006);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/nav_image_1")));
        this.field.text = canvas.Translator.getText(3007);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_PROF:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/prof_image")));
        this.field.text = canvas.Translator.getText(3008);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_QUEST:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/quest_image")));
        this.field.text = canvas.Translator.getText(3005);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/friends_image")));
        this.field.text = canvas.Translator.getText(3009);
        this.defaultAlpha = .4;
        break;
    default:
        this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty))
    }
    this.image.position.set(14, 5)
}
;
canvas.app.rightMenu.view.MenuItemView.prototype.clickHandler = function() {
    this.stopBlink();
    canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.MENU_CLICK, null, this)
}
;
canvas.app.rightMenu.view.MenuItemView.prototype.overHandler = function() {
    this.addChild(this.light)
}
;
canvas.app.rightMenu.view.MenuItemView.prototype.outHandler = function() {
    this.removeIfExist(this.light)
}
;
canvas.app.rightMenu.view.MenuItemView.prototype.startBlink = function() {
    this.direction = true;
    this.image.alpha = this.defaultAlpha;
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)
}
;
canvas.app.rightMenu.view.MenuItemView.prototype.stopBlink = function() {
    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
    this.image.alpha = this.defaultAlpha
}
;
canvas.app.rightMenu.view.MenuItemView.prototype.blinkFrameHandler = function() {
    if (this.direction) {
        this.image.alpha = Math.min(this.image.alpha + .1, 1);
        if (this.image.alpha == 1)
            this.direction = false
    } else {
        this.image.alpha = Math.max(this.image.alpha - .1, 0);
        if (this.image.alpha == 0)
            this.direction = true
    }
}
;
canvas.app.rightMenu.view.SwitchButton = function() {
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            if (this._opened != t) {
                this._opened = t;
                if (t) {
                    this.baseTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right");
                    this.overTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right_over");
                    this.downTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right_down")
                } else {
                    this.baseTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left");
                    this.overTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_over");
                    this.downTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_down")
                }
                this.handlerOver()
            }
        }
    });
    canvas.ui.Button.call(this, canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left"), canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_over"), canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_down"))
}
;
canvas.app.rightMenu.view.SwitchButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.rightMenu.view.menu.MenuItemMount = function() {
    this._state = -1;
    Object.defineProperty(this, "state", {
        get: function() {
            return this._state
        },
        set: function(t) {
            if (this._state != t) {
                this._state = t;
                this.image.texture = canvas.ResourceLoader.getImage("ui", "right/mount_image_" + (t == 1 || t == 2 ? t : 3))
            }
        }
    });
    canvas.app.rightMenu.view.MenuItemView.call(this, canvas.app.rightMenu.Const.MENU_TYPE_MOUNT);
    this.update()
}
;
canvas.app.rightMenu.view.menu.MenuItemMount.prototype = Object.create(canvas.app.rightMenu.view.MenuItemView.prototype);
canvas.app.rightMenu.view.menu.MenuItemMount.prototype.update = function() {
    this.state = canvas.app.rightMenu.model.mount
}
;
canvas.app.rightMenu.view.menu.MenuItemNav = function() {
    this._state = 1;
    Object.defineProperty(this, "state", {
        get: function() {
            return this._state
        },
        set: function(t) {
            if (this._state != t) {
                this._state = t;
                this.image.texture = canvas.ResourceLoader.getImage("ui", "right/nav_image_" + t);
                if (t == 2) {
                    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
                    this.targetRotation = 0
                } else {
                    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
                    this.arrow.rotation = 0
                }
            }
        }
    });
    canvas.app.rightMenu.view.MenuItemView.call(this, canvas.app.rightMenu.Const.MENU_TYPE_NAV);
    this.arrow = this.image.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/nav_arrow")));
    this.arrow.pivot = new canvas.px.Point(3,10);
    this.arrow.position.set(21, 17);
    this.update()
}
;
canvas.app.rightMenu.view.menu.MenuItemNav.prototype = Object.create(canvas.app.rightMenu.view.MenuItemView.prototype);
canvas.app.rightMenu.view.menu.MenuItemNav.prototype.update = function() {
    this.state = canvas.app.rightMenu.model.finishLocation ? 2 : 1;
    this.arrow.filters = this.state == 2 && canvas.app.rightMenu.model.autoPenalty >= 0 ? [canvas.Functions.getGlow(15, 8, 0, 12944691, .1)] : null
}
;
canvas.app.rightMenu.view.menu.MenuItemNav.prototype.frameHandler = function() {
    if (this.targetRotation == 0) {
        this.targetRotation = 1 + canvas.Functions.degToRad(canvas.Functions.random(180));
        this.rotateSpeed = canvas.Functions.degToRad(5 + canvas.Functions.random(10))
    } else {
        if (this.arrow.rotation < this.targetRotation) {
            this.arrow.rotation = Math.min(this.arrow.rotation + this.rotateSpeed, this.targetRotation)
        } else if (this.arrow.rotation > this.targetRotation) {
            this.arrow.rotation = Math.max(this.arrow.rotation - this.rotateSpeed, this.targetRotation)
        } else {
            this.targetRotation = 0
        }
    }
}
;
canvas.app.compass.Const = {
    SIZE: 580,
    TYPE_LOC: 0,
    TYPE_RES: 1,
    TYPE_MON: 2,
    TYPE_PERS: 3,
    TYPE_INST: 4,
    TYPE_COUNT: 5,
    TITLES: [3011, 3012, 3013, 1255, 3014]
};
canvas.app.compass.Element = function(t, e) {
    this._visible = true;
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t;
            this.root.style.display = t ? "block" : "none"
        }
    });
    if (e == undefined)
        e = "div";
    this.root = document.createElement(e);
    t.appendChild(this.root);
    this.root.style.position = "absolute";
    this.root.style.left = this.root.style.right = 0
}
;
canvas.app.compass.Event = {
    ENTER_FRAME: "Compass.ENTER_FRAME",
    SHOW_LIST: "Compass.SHOW_LIST",
    HIDE_LIST: "Compass.HIDE_LIST",
    LIST_SELECT: "Compass.LIST_SELECT",
    CHECK_CHANGED: "Compass.CHECK_CHANGED",
    SEARCH: "Compass.SEARCH",
    READY: "Compass.READY"
};
canvas.app.compass.Main = function(t, e) {
    this.model = t;
    this.root = e;
    this.root.onclick = this.upHandler.bind(this);
    this.back = new canvas.app.compass.view.TileBackView(this.root,canvas.app.compass.Const.SIZE,280);
    this.back.setTitle(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(3007)) + (this.model.FinishLocation ? " - " + this.model.LOC_BY_ID[this.model.FinishLocation] : ""));
    new canvas.app.compass.view.TitleView(this.root,canvas.Translator.getText(3010));
    this.combo = new canvas.app.compass.view.ComboView(e,canvas.app.compass.Const.SIZE - 80);
    this.checksContainer = new canvas.app.compass.Element(e);
    this.checksContainer.root.style.top = 100;
    this.checks = [];
    var a, i, s, n;
    for (i = 0; i < canvas.app.compass.Const.TYPE_COUNT; i++) {
        a = new canvas.app.compass.view.CheckView(this.checksContainer.root,canvas.Translator.getText(canvas.app.compass.Const.TITLES[i]),i);
        a.selected = this.model.checks[i]
    }
    this.titleBottom = new canvas.app.compass.view.TitleBottomView(this.root,canvas.app.compass.Const.SIZE - 80);
    this.titleBottom.setTitle(5);
    this.button = new canvas.app.compass.view.ButtonView(this.titleBottom.root);
    this.button.x = 220;
    this.button.y = -25;
    this.buttonAuto = new canvas.app.compass.view.ButtonView(this.titleBottom.root,160,canvas.Translator.getText(3032));
    this.buttonAuto.x = 370;
    this.buttonAuto.y = -35;
    this.titleMiddle = new canvas.app.compass.Element(e);
    this.titleMiddle.root.innerText = canvas.Translator.getText(3017);
    this.titleMiddle.root.style.top = 140;
    this.comboMiddle = new canvas.app.compass.view.ComboBox(e,canvas.app.compass.Const.SIZE - 80);
    this.comboMiddle.root.style.top = 160;
    this.list = new canvas.app.compass.view.ObjectsList(e,canvas.app.compass.Const.SIZE - 80);
    this.list.visible = false;
    canvas.EventManager.addEventListener(canvas.app.compass.Event.SHOW_LIST, null, this.showListHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.HIDE_LIST, null, this.hideListHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.LIST_SELECT, null, this.listSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.CHECK_CHANGED, null, this.checkHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.SEARCH, null, this.searchHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.comboMiddle, this.comboHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonAuto, this.clickHandler, this);
    this.update();
    if (this.model.FinishLocation) {
        var r = this.model.localStorage.get("state");
        if (r) {
            var o = r.split(",");
            this.combo.data = {
                id: o[0],
                name: o[1],
                type: parseInt(o[2])
            };
            this.update();
            if (o[3] != "") {
                s = this.comboMiddle.items.length;
                for (i = 0; i < s; i++) {
                    if (parseInt(this.comboMiddle.items[i].id) == parseInt(o[3])) {
                        this.comboMiddle.selectedIndex = i;
                        this.comboHandler();
                        break
                    }
                }
            }
            this.setClearMode(true)
        }
    }
    if (this.model.targetName) {
        this.combo.input.value = this.model.targetName;
        this.combo.changeHandler();
        s = this.model.SEARCH_DATA.length;
        for (i = 0; i < s; i++) {
            n = this.model.SEARCH_DATA[i].length;
            if (n > 0) {
                this.listSelectHandler({
                    params: this.model.SEARCH_DATA[i][0]
                });
                break
            }
        }
        this.model.targetName = null
    }
}
;
canvas.app.compass.Main.prototype.upHandler = function(t) {
    this.hideListHandler();
    this.comboMiddle.opened = false
}
;
canvas.app.compass.Main.prototype.clickHandler = function(t) {
    if (this.model.clearMode && t.target == this.button) {
        this.model.setPoint(0)
    } else {
        this.model.setPoint(this.model.TARGET + (t.target == this.buttonAuto ? "_" + this.model.autoPenalty + (parseInt(this.combo.data.id) == 0 ? "_1" : "") : ""));
        this.model.MEMORY_AR = [this.combo.data.id, this.combo.data.name, this.combo.data.type, this.comboMiddle.visible ? this.comboMiddle.selectedItem.id : ""];
        this.model.localStorage.set("state", this.model.MEMORY_AR.join(","));
        if (t.target == this.buttonAuto && window.opener && window.opener.getSWF && !window.opener.getSWF("estate")) {
            var e = window.opener.getSWF("top_mnu");
            if (e)
                e.executeMenuId(canvas.app.topMenu.Const.ID_LOCATION)
        }
    }
    windowClose()
}
;
canvas.app.compass.Main.prototype.comboHandler = function() {
    this.applySearch(this.model.WAY_LIST_AR[this.comboMiddle.selectedIndex]);
    this.setClearMode(false)
}
;
canvas.app.compass.Main.prototype.showListHandler = function() {
    this.list.visible = true;
    this.combo.opened = true
}
;
canvas.app.compass.Main.prototype.hideListHandler = function() {
    this.list.visible = false;
    this.combo.opened = false
}
;
canvas.app.compass.Main.prototype.listSelectHandler = function(t) {
    this.hideListHandler();
    this.combo.data = t.params;
    this.update()
}
;
canvas.app.compass.Main.prototype.searchHandler = function(t) {
    this.update(t.params)
}
;
canvas.app.compass.Main.prototype.checkHandler = function(t) {
    this.model.checks[t.params.index] = t.params.selected ? 1 : 0;
    this.model.saveChecks();
    this.update()
}
;
canvas.app.compass.Main.prototype.update = function(t) {
    this.titleMiddle.visible = false;
    this.comboMiddle.visible = false;
    this.comboMiddle.opened = false;
    this.titleBottom.visible = false;
    this.button.visible = false;
    if (this.combo.data) {
        this.model.searchWays(this.combo.data);
        this.button.visible = true;
        this.setClearMode(false);
        var e = this.model.WAY_LIST_AR.length;
        if (e > 0) {
            if (e > 1) {
                var a = [];
                for (var i = 0; i < e; i++) {
                    a.push({
                        id: this.model.WAY_LIST_AR[i].value,
                        value: this.model.WAY_LIST_AR[i].title
                    })
                }
                this.comboMiddle.items = a;
                this.titleMiddle.visible = true;
                this.comboMiddle.visible = true
            }
            this.applySearch(this.model.WAY_LIST_AR[0])
        } else {
            this.titleBottom.visible = true;
            this.titleBottom.setNotFoundTitle();
            this.button.visible = false
        }
    } else {
        this.model.search(t);
        this.list.update()
    }
}
;
canvas.app.compass.Main.prototype.applySearch = function(t) {
    this.titleBottom.visible = true;
    if (t.steps > 0) {
        this.titleBottom.setTitle(t.steps, this.model.getWaysChain(t.locs));
        this.model.TARGET = t.value;
        this.button.visible = true
    } else {
        this.titleBottom.setNotFoundTitle(canvas.Translator.getText(3023));
        this.button.visible = false;
        this.buttonAuto.visible = false
    }
}
;
canvas.app.compass.Main.prototype.setClearMode = function(t) {
    this.model.clearMode = t;
    if (this.model.autoPenalty < 0 || this.model.autoPenaltyCur >= 0) {
        this.button.title = t ? canvas.Translator.getText(193) : canvas.Translator.getText(3022);
        this.button.width = 260;
        this.button.x = 235;
        this.buttonAuto.visible = false
    } else {
        this.button.width = 160;
        this.button.x = 70;
        this.button.title = t ? canvas.Translator.getText(193) : canvas.Translator.getText(3024);
        this.buttonAuto.visible = true
    }
}
;
canvas.app.compass.Model = function(t) {
    this.allChecksSelected = false;
    this.initChecks();
    this.findWay = new canvas.app.world.engine.FindWay;
    this.CfgLink = t.CfgLink ? t.CfgLink : "images/locale/ru/compass_conf.xml";
    this.CfgWorldLink = t.CfgWorldLink ? t.CfgWorldLink : "images/data/locale/ru/world_conf.xml?ux=1507796560";
    this.AreasXML_Path = t.AreasXML_Path ? t.AreasXML_Path : "images/data/locale/ru/xml_map/";
    this.race = t.race != undefined ? t.race == "1" ? "hum" : "mag" : "hum";
    this.manorLocationId = t.EstateLocationId == undefined ? 0 : parseInt(t.EstateLocationId);
    this.autoPenalty = t.autoPenalty == undefined ? -1 : parseInt(t.autoPenalty);
    this.myLocVerge = {};
    this.SEARCH_DATA = [[], [], [], [], []];
    this.LOC_BY_ID = {};
    this.LOC_LIST_AR = [];
    this.MAIN_LIST_AR = [];
    this.MON_LIST_AR = [];
    this.RES_LIST_AR = [];
    this.PERS_LIST_AR = [];
    this.INST_LIST_AR = [];
    this.PATH_LIST_AR = [];
    this.WAY_LIST_AR = [[0, 0]];
    this.MEMORY_AR = [];
    this.COMBOBOX_TITLE = [];
    this.FlagLocation = "303";
    this.areas_xml = [];
    this.TARGET = 0;
    this.targetName = t.GmNav ? t.GmNav.replace(/'/g, "`") : null;
    if (getCookie != undefined) {
        var e = getCookie("sess_location");
        this.parse_my_flag(e);
        var a = canvas.Functions.getSessTarget();
        this.autoPenaltyCur = a.autoPenalty;
        if (a.target) {
            this.FinishLocation = a.target.split("|")[0]
        } else {
            this.FinishLocation = a.target
        }
        this.mMem = getCookie("sess_navigate_memory");
        this.mArr = getCookie("sess_navigate_array")
    }
}
;
canvas.app.compass.Model.prototype.initChecks = function() {
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.COMPASS);
    var t = this.localStorage.get("width") || 0;
    var e = this.localStorage.get("height") || 0;
    if (t && e) {
        window.resizeTo(t, e)
    }
    var a = this.localStorage.get("checks"), i;
    if (a) {
        this.checks = a.split(",");
        i = this.checks.length;
        for (var s = 0; s < i; s++) {
            this.checks[s] = parseInt(this.checks[s])
        }
    } else {
        this.checks = [1, 1, 1, 1, 1]
    }
    this.testChecks()
}
;
canvas.app.compass.Model.prototype.saveChecks = function() {
    this.localStorage.set("checks", this.checks.join(","));
    this.testChecks()
}
;
canvas.app.compass.Model.prototype.saveWindowSize = function(t, e) {
    if (this.localStorage) {
        this.localStorage.set("width", t);
        this.localStorage.set("height", e)
    }
}
;
canvas.app.compass.Model.prototype.testChecks = function() {
    var t = this.checks.length;
    this.allChecksSelected = true;
    for (var e = 0; e < t; e++) {
        if (this.checks[e]) {
            this.allChecksSelected = false;
            return
        }
    }
}
;
canvas.app.compass.Model.prototype.parse_my_flag = function(t) {
    if (t == null) {
        return
    }
    var e = t.split("|");
    var a;
    var i;
    if (e.length == 2) {
        a = e[0];
        i = e[1]
    } else {
        return
    }
    this.FlagLocation = i;
    this.P1 = parseInt(this.FlagLocation)
}
;
canvas.app.compass.Model.prototype.initConfig = function() {
    var t = (new DOMParser).parseFromString("<root>" + canvas.ResourceLoader.get("config").xhr.responseText + "</root>", "text/xml");
    this.parse_compass_config(t)
}
;
canvas.app.compass.Model.prototype.parse_world_confing = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    s = t.childNodes;
    for (e = 0; e < s.length; e++) {
        if (s[e].nodeName == "world") {
            n = s[e].childNodes;
            for (a = 0; a < n.length; a++) {
                switch (n[a].nodeName) {
                case "areas_xml":
                    r = n[a].childNodes;
                    for (i = 0; i < r.length; i++) {
                        if (r[i].nodeName == "file") {
                            if (r[i].attributes.src != null) {
                                this.areas_xml.push(this.AreasXML_Path + r[i].attributes.src.value)
                            }
                        }
                    }
                    break
                }
            }
        }
    }
}
;
canvas.app.compass.Model.prototype.parse_compass_config = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    e = t.firstChild.childNodes;
    for (s = 0; s < e.length; s++) {
        if (e[s].nodeName == "selection") {
            a = e[s].childNodes;
            for (n = 0; n < a.length; n++) {
                if (a[n].nodeName == "title") {
                    if (a[n].attributes.name != null) {
                        this.MAIN_LIST_AR.push([a[n].nodeName, a[n].attributes.name.value])
                    }
                }
                if (a[n].nodeName == "item") {
                    if (a[n].attributes.id != null && a[n].attributes.name != null) {
                        this.MAIN_LIST_AR.push([parseInt(a[n].attributes.id.value), a[n].attributes.name.value])
                    }
                }
            }
        }
        if (e[s].nodeName == "locations") {
            a = e[s].childNodes;
            for (n = 0; n < a.length; n++) {
                if (a[n].nodeName == "title") {
                    if (a[n].attributes.name != null) {
                        this.LOC_LIST_AR.push([a[n].nodeName, a[n].attributes.name.value])
                    }
                }
                if (a[n].nodeName == "loc") {
                    if (a[n].attributes.id != null && a[n].attributes.name != null && a[n].attributes.verges != null) {
                        var o = true;
                        if (a[n].attributes.race != null) {
                            if (a[n].attributes.race.value != this.race) {
                                o = false
                            }
                        }
                        if (o) {
                            var l = [];
                            var c = a[n].attributes.verges.value.split("|");
                            var p = [];
                            var h = [];
                            for (var d = 0; d < c.length; d++) {
                                p = c[d].split(",");
                                if (p.length == 2) {
                                    l[d] = [p[0], p[1]];
                                    if (h.indexOf(p[0]) == -1) {
                                        h.push(p[0])
                                    }
                                    if (h.indexOf(p[1]) == -1) {
                                        h.push(p[1])
                                    }
                                }
                            }
                            this.myLocVerge[a[n].attributes.id.value] = l;
                            this.LOC_LIST_AR.push([parseInt(a[n].attributes.id.value), a[n].attributes.name.value]);
                            for (var v = 0; v < l.length; v++) {
                                this.PATH_LIST_AR.push(l[v]);
                                this.PATH_LIST_AR[this.PATH_LIST_AR.length - 1].push(parseInt(a[n].attributes.id.value))
                            }
                        }
                    }
                }
            }
        }
        if (e[s].nodeName == "resurses") {
            a = e[s].childNodes;
            for (n = 0; n < a.length; n++) {
                if (a[n].nodeName == "title") {
                    if (a[n].attributes.name != null) {
                        this.RES_LIST_AR.push([a[n].nodeName, a[n].attributes.name.value])
                    }
                }
            }
        }
        if (e[s].nodeName == "monsters") {
            a = e[s].childNodes;
            for (n = 0; n < a.length; n++) {
                if (a[n].nodeName == "title") {
                    if (a[n].attributes.name != null) {
                        this.MON_LIST_AR.push([a[n].nodeName, a[n].attributes.name.value])
                    }
                }
            }
        }
        if (e[s].nodeName == "pers") {
            a = e[s].childNodes;
            for (n = 0; n < a.length; n++) {
                if (a[n].nodeName == "title") {
                    if (a[n].attributes.name != null) {
                        this.PERS_LIST_AR.push([a[n].nodeName, a[n].attributes.name.value])
                    }
                }
            }
        }
        if (e[s].nodeName == "inst") {
            a = e[s].childNodes;
            for (n = 0; n < a.length; n++) {
                if (a[n].nodeName == "title") {
                    if (a[n].attributes.name != null) {
                        this.INST_LIST_AR.push([a[n].nodeName, a[n].attributes.name.value])
                    }
                }
            }
        }
    }
    if (this.manorLocationId > 0) {
        this.MAIN_LIST_AR.push([this.manorLocationId, canvas.Translator.getText(148)]);
        this.manorComboIndex = this.MAIN_LIST_AR.length - 1;
        this.LOC_LIST_AR[0] = [this.manorLocationId, canvas.Translator.getText(148)]
    } else {
        this.LOC_LIST_AR[0] = null
    }
}
;
canvas.app.compass.Model.prototype.parse_areas = function() {
    var t = this.areas_xml.length;
    var e;
    var a;
    var i;
    var s;
    var n;
    for (var r = 0; r < t; r++) {
        e = canvas.ResourceLoader.get(this.areas_xml[r]).data;
        a = e.childNodes;
        for (s = 0; s < a.length; s++) {
            if (a[s].nodeName == "areas") {
                i = a[s].childNodes;
                for (n = 0; n < i.length; n++) {
                    if (i[n].nodeName == "area") {
                        this.parse_area(i[n])
                    }
                }
            }
        }
    }
    this.LOC_LIST_AR = this.sortLocArr(this.LOC_LIST_AR);
    this.PERS_LIST_AR = this.sortLocArr(this.PERS_LIST_AR);
    this.RES_LIST_AR = this.sortLocArr(this.RES_LIST_AR);
    this.MON_LIST_AR = this.sortLocArr(this.MON_LIST_AR);
    var t = this.LOC_LIST_AR.length;
    for (var r = 0; r < t; r++) {
        if (this.LOC_LIST_AR[r]) {
            this.LOC_BY_ID[this.LOC_LIST_AR[r][0]] = this.LOC_LIST_AR[r][1]
        }
    }
}
;
canvas.app.compass.Model.prototype.parse_area = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l;
    var c;
    var p = [];
    var h;
    o = t.attributes;
    s = t.childNodes;
    for (e = 0; e < s.length; e++) {
        if (s[e].nodeName == "location") {
            l = s[e].attributes;
            if (l.id != null) {
                n = s[e].childNodes;
                for (a = 0; a < n.length; a++) {
                    if (n[a].nodeName == "object") {
                        r = n[a].childNodes;
                        for (i = 1; i < r.length; i++) {
                            if (r[i].nodeName == "item" || n[a].attributes.id.value == "star_2" && r[i].nodeName == "title") {
                                this.addObjLoc(n[a].attributes.id.value, r[i].childNodes[0].nodeValue, l.id.value, n[a].attributes.race)
                            }
                        }
                    } else if (n[a].nodeName == "title") {
                        this.setLocName(l.id.value, n[a].childNodes[0].nodeValue)
                    }
                }
            }
        }
    }
}
;
canvas.app.compass.Model.prototype.setLocName = function(t, e) {
    if (e == null) {
        return
    }
    for (var a = 1; a < this.LOC_LIST_AR.length; a++) {
        if (this.LOC_LIST_AR[a][0] == t) {
            this.LOC_LIST_AR[a][1] = e
        }
    }
}
;
canvas.app.compass.Model.prototype.addObjLoc = function(t, e, a, i) {
    switch (t) {
    case "chel_blue":
    case "chel_red":
    case "chel_gray":
    case "group_red":
    case "group_blue":
    case "group_gray":
    case "tower":
        if (this.race == "hum" && t == "chel_red" || this.race == "mag" && t == "chel_blue")
            break;
        if (this.race == "hum" && t == "group_red" || this.race == "mag" && t == "group_blue")
            break;
        this.addObjToArr(this.PERS_LIST_AR, e, a);
        break;
    case "farm_fish":
    case "farm_floor":
    case "farm_rock":
        this.addObjToArr(this.RES_LIST_AR, e, a);
        break;
    case "monster":
    case "boss":
        if (this.race == "hum" && a == 37)
            break;
        if (this.race == "mag" && a == 36)
            break;
        this.addObjToArr(this.MON_LIST_AR, e, a);
        break;
    case "star_2":
        if (i == null || i.value == this.race) {
            this.addObjToArr(this.INST_LIST_AR, e, a)
        }
        break
    }
}
;
canvas.app.compass.Model.prototype.addObjToArr = function(t, e, a) {
    var i = false;
    for (var s = 1; s < t.length; s++) {
        if (t[s][1] == e) {
            i = true;
            t[s][0].push(a)
        }
    }
    if (!i) {
        t.push([[a], e])
    }
}
;
canvas.app.compass.Model.prototype.sortLocArr = function(t) {
    var e = t.shift();
    var a = [];
    a.push(e);
    t.sort(function(t, e) {
        if (t[1] > e[1]) {
            return 1
        }
        if (t[1] < e[1]) {
            return -1
        }
        return 0
    });
    return a.concat(t)
}
;
canvas.app.compass.Model.prototype.getCorrectInfoText = function(t) {
    var e = t % 10;
    var a;
    if (t == 11 || t == 12 || t == 13 || t == 14) {
        a = String(t) + " " + canvas.Translator.getText(3016)
    } else {
        switch (e) {
        case 1:
            a = String(t) + " " + canvas.Translator.getText(3020);
            break;
        case 2:
        case 3:
        case 4:
            a = String(t) + " " + canvas.Translator.getText(3021);
            break;
        case 0:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
            a = String(t) + " " + canvas.Translator.getText(3016);
            break;
        default:
            break
        }
    }
    return a
}
;
canvas.app.compass.Model.prototype.setPoint = function(t) {
    if (t == 0) {
        canvas.Functions.deleteSessTarget()
    } else {
        setCookie("sess_target", t.toString())
    }
}
;
canvas.app.compass.Model.prototype.getLocationsPaths = function(t) {
    var e = t.length;
    var a;
    this.WAY_LIST_AR = [];
    for (var i = 0; i < e; i++) {
        a = this.findWay.finder(this.P1, t[i]);
        if (a.length > 0 && a[0] >= 0) {
            this.WAY_LIST_AR.push({
                value: t[i],
                title: this.LOC_BY_ID[t[i]] + " (" + (a.length - 1) + ")",
                steps: a.length - 1,
                locs: a.reverse()
            })
        }
    }
    this.WAY_LIST_AR.sort(function(t, e) {
        return t.steps - e.steps
    })
}
;
canvas.app.compass.Model.prototype.findObjectByName = function(t, e) {
    var a = t.length;
    for (var i = 0; i < a; i++) {
        if (t[i][1].toLowerCase().search(e.toLowerCase()) >= 0) {
            return i
        }
    }
    return -1
}
;
canvas.app.compass.Model.prototype.search = function(t) {
    var e = canvas.Functions.getCyrillicInput(t);
    this.SEARCH_DATA = [[], [], [], [], []];
    var a, i, s;
    var n = this.targetName ? true : this.allChecksSelected;
    if (n || this.checks[canvas.app.compass.Const.TYPE_LOC]) {
        a = this.LOC_LIST_AR.length;
        for (i = 0; i < a; i++) {
            if (!this.LOC_LIST_AR[i])
                continue;
            s = {
                id: i,
                name: this.LOC_LIST_AR[i][1],
                type: canvas.app.compass.Const.TYPE_LOC
            };
            if (i == 0)
                s.skipSort = true;
            if (!t || s.name.toLowerCase().indexOf(t.toLowerCase()) >= 0 || s.name.toLowerCase().indexOf(e.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_LOC].push(s)
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_LOC].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_RES]) {
        a = this.RES_LIST_AR.length;
        for (i = 1; i < a; i++) {
            s = {
                id: i,
                name: this.RES_LIST_AR[i][1],
                type: canvas.app.compass.Const.TYPE_RES
            };
            if (!t || s.name.toLowerCase().indexOf(t.toLowerCase()) >= 0 || s.name.toLowerCase().indexOf(e.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_RES].push(s)
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_RES].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_MON]) {
        a = this.MON_LIST_AR.length;
        for (i = 1; i < a; i++) {
            s = {
                id: i,
                name: this.MON_LIST_AR[i][1],
                type: canvas.app.compass.Const.TYPE_MON
            };
            if (!t || s.name.toLowerCase().indexOf(t.toLowerCase()) >= 0 || s.name.toLowerCase().indexOf(e.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_MON].push(s)
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_MON].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_PERS]) {
        a = this.PERS_LIST_AR.length;
        for (i = 1; i < a; i++) {
            s = {
                id: i,
                name: this.PERS_LIST_AR[i][1],
                type: canvas.app.compass.Const.TYPE_PERS
            };
            if (!t || s.name.toLowerCase().indexOf(t.toLowerCase()) >= 0 || s.name.toLowerCase().indexOf(e.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_PERS].push(s)
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_PERS].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_INST]) {
        a = this.INST_LIST_AR.length;
        for (i = 1; i < a; i++) {
            s = {
                id: i,
                name: this.INST_LIST_AR[i][1],
                type: canvas.app.compass.Const.TYPE_INST
            };
            if (!t || s.name.toLowerCase().indexOf(t.toLowerCase()) >= 0 || s.name.toLowerCase().indexOf(e.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_INST].push(s)
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_INST].sort(this.sortByTitle)
    }
}
;
canvas.app.compass.Model.prototype.sortByTitle = function(t, e) {
    if (t.skipSort) {
        return -1
    } else if (e.skipSort) {
        return 1
    } else if (t.name > e.name) {
        return 1
    } else if (t.name < e.name) {
        return -1
    } else {
        return 0
    }
}
;
canvas.app.compass.Model.prototype.searchWays = function(t) {
    var e = [];
    switch (t.type) {
    case canvas.app.compass.Const.TYPE_LOC:
        e.push(parseInt(this.LOC_LIST_AR[t.id][0]));
        break;
    case canvas.app.compass.Const.TYPE_RES:
        e = this.RES_LIST_AR[t.id][0];
        break;
    case canvas.app.compass.Const.TYPE_MON:
        e = this.MON_LIST_AR[t.id][0];
        break;
    case canvas.app.compass.Const.TYPE_PERS:
        e = this.PERS_LIST_AR[t.id][0];
        break;
    case canvas.app.compass.Const.TYPE_INST:
        e = this.INST_LIST_AR[t.id][0];
        break
    }
    this.getLocationsPaths(e)
}
;
canvas.app.compass.Model.prototype.getWaysChain = function(t) {
    var e = [];
    var a = t.length;
    for (var i = 0; i < a; i++) {
        e.push(this.LOC_BY_ID[t[i]])
    }
    return e
}
;
canvas.app.compass.Model.prototype.getColorByWayLen = function(t) {
    if (t < 4) {
        return "red"
    } else if (t < 9) {
        return "blue"
    } else {
        return "grey"
    }
}
;
canvas.app.compass.view.ButtonView = function(t, e, a) {
    this._title = "";
    Object.defineProperty(this, "title", {
        get: function() {
            return this._title
        },
        set: function(t) {
            if (this._title === t)
                return;
            this._title = t;
            this.field.innerText = t
        }
    });
    this._textColor = "#000000";
    Object.defineProperty(this, "textColor", {
        get: function() {
            return this._textColor
        },
        set: function(t) {
            if (this._textColor === t)
                return;
            this._textColor = t;
            this.field.style.color = t
        }
    });
    this._visible = true;
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t;
            this.root.style.display = t ? "block" : "none"
        }
    });
    this._width = 220;
    Object.defineProperty(this, "width", {
        get: function() {
            return this._width
        },
        set: function(t) {
            if (this._width === t)
                return;
            this._width = t;
            this.root.style.width = t;
            this.button.style.width = t - 66
        }
    });
    this._x = 0;
    Object.defineProperty(this, "x", {
        get: function() {
            return this._x
        },
        set: function(t) {
            if (this._x === t)
                return;
            this._x = t;
            this.root.style.marginLeft = t
        }
    });
    this._y = 0;
    Object.defineProperty(this, "y", {
        get: function() {
            return this._y
        },
        set: function(t) {
            if (this._y === t)
                return;
            this._y = t;
            this.root.style.marginTop = t
        }
    });
    if (e == undefined)
        e = 220;
    var i = document.createElement("div");
    i.className = "popup_center";
    i.style.height = 35;
    t.appendChild(i);
    this.root = i;
    var s = document.createElement("div");
    s.className = "popup_btn";
    i.appendChild(s);
    var n = document.createElement("div");
    s.appendChild(n);
    var r = document.createElement("button");
    r.type = "button";
    n.appendChild(r);
    r.onclick = this.clickHandler.bind(this);
    r.style.outline = "none";
    this.button = r;
    this.field = document.createElement("span");
    this.button.appendChild(this.field);
    this.title = a;
    this.textColor = "#F9DFA1";
    this.width = e
}
;
canvas.app.compass.view.ButtonView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this)
}
;
canvas.app.compass.view.CheckView = function(t, e, a) {
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            this.outHandler()
        }
    });
    this.index = a;
    this.root = document.createElement("span");
    t.appendChild(this.root);
    this.img = document.createElement("span");
    this.root.appendChild(this.img);
    this.img.style.display = "inline-block";
    this.img.style.width = 23;
    this.img.style.height = 23;
    this.img.style.background = "url('../images/gui/gui-checkbox.png') no-repeat";
    this.img.style.backgroundPosition = "0px -23px";
    this.img.style.verticalAlign = "middle";
    var i = document.createElement("span");
    this.root.appendChild(i);
    i.innerText = " " + e.toLowerCase();
    i.style.display = "inline";
    this.root.style.margin = 5;
    this.root.style.cursor = "pointer";
    this.root.onmouseover = this.overHandler.bind(this);
    this.root.onmouseout = this.outHandler.bind(this);
    this.root.onclick = this.clickHandler.bind(this)
}
;
canvas.app.compass.view.CheckView.prototype.overHandler = function() {
    this.img.style.backgroundPosition = this.selected ? "0px -92px" : "0px -115px"
}
;
canvas.app.compass.view.CheckView.prototype.outHandler = function() {
    this.img.style.backgroundPosition = this.selected ? "0px 0px" : "0px -23px"
}
;
canvas.app.compass.view.CheckView.prototype.clickHandler = function() {
    this.selected = !this.selected;
    this.overHandler();
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.CHECK_CHANGED, null, {
        index: this.index,
        selected: this.selected
    })
}
;
canvas.app.compass.view.ComboBox = function(t, e) {
    this._items = null;
    Object.defineProperty(this, "items", {
        get: function() {
            return this._items
        },
        set: function(t) {
            this._items = t;
            this.update();
            this.selectedIndex = 0
        }
    });
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t;
            this.updateValue()
        }
    });
    Object.defineProperty(this, "selectedItem", {
        get: function() {
            return this.items[this.selectedIndex]
        }
    });
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            this._opened = t;
            this.list.style.display = t ? "block" : "none";
            this.img.style.backgroundPosition = t ? "-47px" : "0px"
        }
    });
    canvas.app.compass.Element.call(this, t);
    if (e == undefined)
        e = 400;
    this.width = e;
    var a = document.createElement("div");
    a.style.width = e;
    a.style.height = 23;
    a.style.position = "relative";
    a.style.background = "url('../images/gui/input.png') no-repeat";
    a.style.backgroundPosition = e - 1e3 + "px -23px";
    a.style.cursor = "pointer";
    a.onclick = this.clickHandler.bind(this);
    a.onmouseover = this.overHandler.bind(this);
    a.onmouseout = this.outHandler.bind(this);
    this.root.appendChild(a);
    this.divCenter = a;
    var i = document.createElement("div");
    a.appendChild(i);
    i.style.background = "url('../images/gui/input.png') no-repeat";
    i.style.backgroundPosition = "0px 0px";
    i.style.width = 10;
    i.style.height = 22;
    i.style.left = -6;
    i.style.position = "absolute";
    this.divLeft = i;
    i = document.createElement("div");
    a.appendChild(i);
    i.style.background = "url('../images/gui/btn-select.png') no-repeat";
    i.style.width = 24;
    i.style.height = 24;
    i.style.right = 0;
    i.style.position = "absolute";
    this.img = i;
    this.list = document.createElement("div");
    this.list.style.width = e;
    this.list.style.height = "auto";
    this.list.style.maxHeight = 108;
    this.list.style.position = "relative";
    this.list.style.background = "#f8e5a8";
    this.list.style.border = "#e3b360 1px solid";
    this.list.style.borderRadius = "4px";
    this.list.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)";
    this.list.style.overflow = "auto";
    this.list.style.marginRight = 4;
    this.root.appendChild(this.list);
    this.title = document.createElement("div");
    this.divCenter.appendChild(this.title);
    this.title.style.textAlign = "left";
    this.title.style.height = 12;
    this.title.style.paddingTop = 4;
    this.opened = false
}
;
canvas.app.compass.view.ComboBox.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.ComboBox.prototype.update = function() {
    var t;
    while (this.list.hasChildNodes()) {
        t = this.list.removeChild(this.list.lastChild);
        t.onmouseover = null;
        t.onmouseout = null;
        t.onclick = null
    }
    var e = this.items.length;
    for (var a = 0; a < e; a++) {
        t = document.createElement("div");
        t.innerText = this.items[a].value;
        t.align = "left";
        t.style.padding = 4;
        t.style.paddingLeft;
        t.style.cursor = "pointer";
        t.onmouseover = this.itemOverHandler;
        t.onmouseout = this.itemOutHandler;
        t.onclick = this.itemClickHandler.bind(this);
        t.index = a;
        this.list.appendChild(t)
    }
}
;
canvas.app.compass.view.ComboBox.prototype.updateValue = function() {
    this.title.innerText = this.items[this.selectedIndex].value
}
;
canvas.app.compass.view.ComboBox.prototype.clickHandler = function(t) {
    this.opened = !this.opened;
    t.stopPropagation()
}
;
canvas.app.compass.view.ComboBox.prototype.overHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -69px";
    this.divLeft.style.backgroundPosition = "0px -46px"
}
;
canvas.app.compass.view.ComboBox.prototype.outHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -23px";
    this.divLeft.style.backgroundPosition = "0px 0px"
}
;
canvas.app.compass.view.ComboBox.prototype.itemClickHandler = function(t) {
    this.selectedIndex = t.target.index;
    this.opened = false;
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_SELECT, this, this.items[this.selectedIndex])
}
;
canvas.app.compass.view.ComboBox.prototype.itemOverHandler = function() {
    this.style.background = "#eccf93"
}
;
canvas.app.compass.view.ComboBox.prototype.itemOutHandler = function() {
    this.style.background = 0
}
;
canvas.app.compass.view.ComboView = function(t, e) {
    this._resetMode = false;
    Object.defineProperty(this, "resetMode", {
        get: function() {
            return this._resetMode
        },
        set: function(t) {
            this._resetMode = t;
            if (t) {
                this.button.style.background = "url('../images/gui/btn-clear.png') no-repeat";
                this.button.style.backgroundPosition = "2px 0px";
                this.button.style.height = 17;
                this.button.style.top = 2
            } else {
                this.opened = this._opened;
                this.button.style.top = 0
            }
        }
    });
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            this._opened = t;
            if (this.resetMode)
                return;
            this.button.style.background = "url('../images/gui/btn-select.png') no-repeat";
            this.button.style.backgroundPosition = t ? "-47px 0px" : "0px 0px";
            this.button.style.height = 19
        }
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            if (this.data) {
                this.input.value = this.data.name
            }
            this.update()
        }
    });
    canvas.app.compass.Element.call(this, t);
    if (e == undefined)
        e = 400;
    this.width = e;
    this.root.style.top = 70;
    var a = document.createElement("div");
    a.style.width = e;
    a.style.height = 23;
    a.style.position = "relative";
    a.style.background = "url('../images/gui/input.png') no-repeat";
    a.style.backgroundPosition = e - 1e3 + "px -23px";
    this.root.appendChild(a);
    this.divCenter = a;
    var i = document.createElement("div");
    a.appendChild(i);
    i.style.background = "url('../images/btn-filter-search.png') no-repeat";
    i.style.width = 24;
    i.style.height = 24;
    i.style.left = -10;
    i.style.top = -1;
    i.style.position = "absolute";
    i = document.createElement("div");
    a.appendChild(i);
    i.style.background = "url('../images/gui/btn-select.png') no-repeat";
    i.style.width = 24;
    i.style.height = 19;
    i.style.right = 0;
    i.style.cursor = "pointer";
    i.style.position = "absolute";
    i.onclick = this.clickHandler.bind(this);
    this.button = i;
    this.label1 = document.createElement("label");
    a.appendChild(this.label1);
    this.label1.style.width = 200;
    this.label1.style.height = 24;
    this.label1.style.left = 17;
    this.label1.style.top = 4;
    this.label1.style.color = "#b69372";
    this.label1.style.position = "absolute";
    this.label1.htmlFor = "compassInput";
    this.label1.style.cursor = "text";
    this.label1.style.textAlign = "left";
    this.label1.innerText = canvas.Translator.getText(3040);
    this.label2 = document.createElement("label");
    a.appendChild(this.label2);
    this.label2.style.width = 150;
    this.label2.style.height = 24;
    this.label2.style.right = 25;
    this.label2.style.top = 4;
    this.label2.style.color = "#b69372";
    this.label2.style.position = "absolute";
    this.label2.style.cursor = "pointer";
    this.label2.style.textAlign = "right";
    this.label2.innerText = canvas.Translator.getText(3041);
    this.label2.onclick = this.clickHandler.bind(this);
    this.input = document.createElement("input");
    a.appendChild(this.input);
    this.input.style.width = e - 50;
    this.input.style.height = 24;
    this.input.style.paddingBottom = 2;
    this.input.style.marginRight = 20;
    this.input.type = "text";
    this.input.style.border = 0;
    this.input.style.outline = 0;
    this.input.style.background = 0;
    this.input.id = this.input.name = "compassInput";
    this.input.oninput = this.changeHandler.bind(this);
    var s = this.overHandler.bind(this);
    var n = this.outHandler.bind(this);
    this.input.onmouseover = s;
    this.input.onmouseout = n;
    this.label1.onmouseover = s;
    this.label1.onmouseout = n;
    this.label2.onmouseover = s;
    this.label2.onmouseout = n;
    this.button.onmouseover = this.buttonOverHandler.bind(this);
    this.button.onmouseout = this.buttonOutHandler.bind(this);
    this.opened = false
}
;
canvas.app.compass.view.ComboView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.ComboView.prototype.update = function() {
    this.label1.style.display = this.label2.style.display = this.input.value == "" ? "block" : "none";
    this.resetMode = this.data || this.input.value.length > 2
}
;
canvas.app.compass.view.ComboView.prototype.changeHandler = function() {
    this.data = null;
    if (this.input.value.length > 2) {
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SEARCH, null, this.input.value);
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SHOW_LIST)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SEARCH, null, "");
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.HIDE_LIST)
    }
}
;
canvas.app.compass.view.ComboView.prototype.overHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -69px"
}
;
canvas.app.compass.view.ComboView.prototype.outHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -23px"
}
;
canvas.app.compass.view.ComboView.prototype.buttonOverHandler = function() {
    if (this.resetMode) {
        this.button.style.backgroundPosition = "2px -17px"
    } else {
        this.overHandler()
    }
}
;
canvas.app.compass.view.ComboView.prototype.buttonOutHandler = function() {
    if (this.resetMode) {
        this.button.style.backgroundPosition = "2px 0px"
    } else {
        this.outHandler()
    }
}
;
canvas.app.compass.view.ComboView.prototype.clickHandler = function(t) {
    if (this.resetMode) {
        this.input.value = "";
        this.changeHandler()
    } else {
        canvas.EventManager.dispatchEvent(this.opened ? canvas.app.compass.Event.HIDE_LIST : canvas.app.compass.Event.SHOW_LIST)
    }
    t.stopPropagation()
}
;
canvas.app.compass.view.ObjectsList = function(t, e) {
    canvas.app.compass.Element.call(this, t);
    if (e == undefined)
        e = 400;
    this.root.style.top = 93;
    var a = document.createElement("div");
    a.style.width = e - 16;
    a.style.height = "auto";
    a.style.maxHeight = 150;
    a.style.position = "relative";
    a.style.background = "#f8e5a8";
    a.style.border = "#e3b360 1px solid";
    a.style.borderRadius = "4px";
    a.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)";
    a.style.padding = 8;
    a.style.overflow = "auto";
    this.root.appendChild(a);
    this.container = a
}
;
canvas.app.compass.view.ObjectsList.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.ObjectsList.prototype.update = function() {
    var t = canvas.app.compass.model;
    var e, a, i, s, n;
    while (this.container.hasChildNodes()) {
        e = this.container.removeChild(this.container.lastChild);
        e.onmouseover = null;
        e.onmouseout = null;
        e.onclick = null
    }
    for (i = 0; i < canvas.app.compass.Const.TYPE_COUNT; i++) {
        n = t.SEARCH_DATA[i].length;
        if (n > 0) {
            a = document.createElement("div");
            a.innerText = canvas.Translator.getText(canvas.app.compass.Const.TITLES[i]);
            a.align = "left";
            a.style.padding = 2;
            a.style.fontSize = 14;
            a.style.fontWeight = "bold";
            this.container.appendChild(a);
            for (s = 0; s < n; s++) {
                e = t.SEARCH_DATA[i][s];
                a = document.createElement("div");
                a.innerText = e.name;
                a.align = "left";
                a.style.margin = 2;
                a.style.paddingLeft = 8;
                a.style.cursor = "pointer";
                a.onmouseover = this.overHandler;
                a.onmouseout = this.outHandler;
                a.onclick = this.clickHandler;
                a.id = e.id;
                a.type = i;
                this.container.appendChild(a)
            }
        }
    }
    if (!this.container.hasChildNodes()) {
        a = document.createElement("div");
        a.innerText = canvas.Translator.getText(3018);
        a.align = "left";
        a.style.margin = 2;
        a.style.paddingLeft = 8;
        this.container.appendChild(a)
    }
}
;
canvas.app.compass.view.ObjectsList.prototype.overHandler = function() {
    this.style.background = "#eccf93";
    this.style.color = "#b80504"
}
;
canvas.app.compass.view.ObjectsList.prototype.outHandler = function() {
    this.style.background = 0;
    this.style.color = null
}
;
canvas.app.compass.view.ObjectsList.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.LIST_SELECT, null, {
        id: this.id,
        type: this.type,
        name: this.innerText
    })
}
;
canvas.app.compass.view.TileBackView = function(t, e, a) {
    canvas.app.compass.Element.call(this, t);
    var i = document.createElement("div");
    i.className = "popup-top-left";
    i.style.width = e;
    i.style.height = 36;
    this.root.appendChild(i);
    var s = document.createElement("div");
    s.className = "popup-top-right";
    s.style.backgroundImage = "url('../images/popup-top-right-2.png')";
    s.style.height = 36;
    i.appendChild(s);
    var n = document.createElement("div");
    n.className = "popup-top-center";
    n.style.height = 36;
    s.appendChild(n);
    var r = document.createElement("div");
    r.style.paddingTop = 5;
    r.style.paddingLeft = 18;
    r.style.color = "#ffffff";
    r.style.fontWeight = "normal";
    r.style.fontSize = 16;
    n.appendChild(r);
    this.field = r;
    var o = document.createElement("div");
    o.className = "popup-left-center";
    o.style.width = e;
    o.style.height = a - 53;
    this.root.appendChild(o);
    var l = document.createElement("div");
    l.className = "popup-right-center";
    l.style.height = a - 53;
    o.appendChild(l);
    var n = document.createElement("div");
    n.className = "popup_global_content";
    n.style.height = a - 53;
    l.appendChild(n);
    var c = document.createElement("div");
    c.className = "popup-left-bottom";
    c.style.width = e;
    c.style.height = 17;
    this.root.appendChild(c);
    var p = document.createElement("div");
    p.className = "popup-right-bottom";
    p.style.height = 17;
    c.appendChild(p);
    var h = document.createElement("div");
    h.className = "popup-bottom-center";
    h.style.height = 17;
    p.appendChild(h);
    this.container = n
}
;
canvas.app.compass.view.TileBackView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.TileBackView.prototype.setTitle = function(t) {
    this.field.innerText = t.length > 45 ? t.substr(0, 45) + "..." : t
}
;
canvas.app.compass.view.TitleBottomView = function(t, e) {
    canvas.app.compass.Element.call(this, t);
    this._root = t;
    if (e == undefined)
        e = 400;
    this.width = e;
    this.root.style.top = 225;
    this.field = document.createElement("div");
    this.root.appendChild(this.field);
    this.field.style.color = "#6b382d";
    this.field.style.fontWeight = "bold";
    this.field.style.fontSize = 14;
    this.field.style.width = e;
    this.field.style.marginRight = 10;
    this.field.style.textAlign = "left";
    this.link = document.createElement("span");
    this.field.appendChild(this.link);
    this.link.style.color = "#6b382d";
    this.link.style.borderBottom = "1px dashed";
    this.link.style.fontSize = 14;
    this.link.onmouseover = this.overHandler.bind(this);
    this.link.onmouseout = this.outHandler.bind(this);
    this.link.onmousemove = this.moveHandler.bind(this);
    this.alt = document.createElement("div");
    this.alt.style.maxWidth = e;
    this.alt.style.position = "absolute";
    this.alt.style.textAlign = "left";
    this.alt.style.fontWeight = "normal";
    this.alt.style.background = "#f8e5a8";
    this.alt.style.border = "#e3b360 1px solid";
    this.alt.style.borderRadius = "4px";
    this.alt.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)";
    this.alt.style.padding = 8;
    this.alt.style.lineHeight = 2;
    this.alt.style.top = 20;
    this.outHandler()
}
;
canvas.app.compass.view.TitleBottomView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.TitleBottomView.prototype.setTitle = function(t, e) {
    var a = canvas.app.compass.model;
    this.field.innerText = canvas.Translator.getText(3015) + " ";
    this.field.appendChild(this.link);
    this.field.appendChild(this.alt);
    this.link.innerText = a.getCorrectInfoText(t);
    if (e) {
        var i = e.length;
        var s = "";
        for (var n = 0; n < i; n++) {
            if (s)
                s += " " + String.fromCharCode(8594) + " ";
            s += e[n]
        }
        this.alt.innerText = s
    } else {
        this.alt.innerText = ""
    }
}
;
canvas.app.compass.view.TitleBottomView.prototype.setNotFoundTitle = function(t) {
    this.field.innerText = t ? t : canvas.Translator.getText(3019);
    this.link.innerText = ""
}
;
canvas.app.compass.view.TitleBottomView.prototype.overHandler = function(t) {
    this.alt.style.display = "block";
    this.alt.style.minWidth = this.alt.clientHeight > 50 ? this.width : 0;
    this.moveHandler(t);
    this._root.appendChild(this.alt)
}
;
canvas.app.compass.view.TitleBottomView.prototype.outHandler = function() {
    this.alt.style.display = "none"
}
;
canvas.app.compass.view.TitleBottomView.prototype.moveHandler = function(t) {
    var e, a;
    a = t.layerX + 10;
    e = a + this.alt.clientWidth - window.innerWidth + 5;
    if (e >= 0)
        a -= e;
    if (a <= 0)
        a = 5;
    this.alt.style.left = a;
    a = 225 + t.layerY + 20;
    e = a + this.alt.clientHeight - window.innerHeight + 5;
    if (e >= 0)
        a = a - this.alt.clientHeight - 30;
    if (a <= 0)
        a = 5;
    this.alt.style.top = a
}
;
canvas.app.compass.view.TitleView = function(t, e) {
    canvas.app.compass.Element.call(this, t);
    this.root.style.color = "#6b382d";
    this.root.style.fontWeight = "bold";
    this.root.style.fontSize = 14;
    this.root.style.top = 40;
    this.root.innerText = e
}
;
canvas.app.compass.view.TitleView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.magic.Const = {
    TYPE_MAGIC: "magic",
    TYPE_AURA: "aura",
    TYPE_SHADOW: "shadow"
};
canvas.app.magic.Event = {
    ENTER_FRAME: "Magic.ENTER_FRAME",
    HINT_ADD: "Magic.HINT_ADD",
    HINT_REMOVE: "Magic.HINT_REMOVE",
    DESELECT_ALL: "Magic.DESELECT_ALL"
};
canvas.app.magic.Main = function(t, e) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = e;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.magic.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.magic.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    switch (this.model.type) {
    case canvas.app.magic.Const.TYPE_AURA:
        this.view = new canvas.app.magic.view.ViewAura;
        break;
    case canvas.app.magic.Const.TYPE_SHADOW:
        this.view = new canvas.app.magic.view.ViewShadow;
        break;
    default:
        this.view = new canvas.app.magic.view.ViewMagic
    }
    this.addChild(this.view);
    this.addChild(this.hintContainer)
}
;
canvas.app.magic.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.magic.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.magic.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.magic.Model = function(t) {
    this.picPath = t.PicPath ? t.PicPath : "images/data/artifacts/";
    this.parse(t.EffList ? t.EffList : "");
    this.slotsTotal = t.slotsTotal ? parseInt(t.slotsTotal) : 8
}
;
canvas.app.magic.Model.prototype.parse = function(t) {
    this.items = [];
    var e = t.split(",");
    var a;
    var i = e.length;
    var s;
    for (var n = 0; n < i; n++) {
        a = e[n].split(":");
        s = {};
        s.slot = parseInt(a[0]);
        s.id = a[1];
        s.title = a[2];
        s.level = parseInt(a[3]);
        s.mp = parseInt(a[4]);
        s.picture = a[5];
        this.items[s.slot] = s
    }
}
;
canvas.app.magic.View = function() {
    canvas.px.Container.call(this);
    this.createBack();
    this.createSlots();
    this.createFront();
    var t = this.slots.length;
    for (var e = 0; e < t; e++)
        this.addChild(this.slots[e].numImage);
    canvas.EventManager.addEventListener(canvas.app.magic.Event.DESELECT_ALL, null, this.deselectAllHandler, this)
}
;
canvas.app.magic.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.magic.View.prototype.createBack = function() {
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")))
}
;
canvas.app.magic.View.prototype.createFront = function() {
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front_slots")));
    t.position.set(32, 7);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front_numbers")));
    t.position.set(62, 37)
}
;
canvas.app.magic.View.prototype.createSlots = function() {
    var t = canvas.app.magic.modelMagic;
    this.slots = [];
    var e = [[90, 8], [125, 19], [146, 50], [147, 86], [125, 115], [90, 127], [55, 115], [33, 86], [33, 50], [55, 20]];
    var a = [[101, 44], [124, 52], [136, 72], [136, 95], [123, 113], [101, 119], [78, 113], [66, 93], [65, 70], [78, 52]];
    var i;
    var s;
    for (var n = 0; n < 10; n++) {
        s = new canvas.px.Sprite(canvas.px.TextureEmpty);
        s.position.set(a[n][0], a[n][1]);
        i = new canvas.app.magic.view.slots.SlotMagic(n,s);
        i.position.set(e[n][0], e[n][1]);
        this.addChild(i);
        this.slots.push(i);
        i.data = t.items[n + 1]
    }
}
;
canvas.app.magic.View.prototype.deselectAllHandler = function() {
    var t = this.slots.length;
    for (var e = 0; e < t; e++) {
        this.slots[e].selected = false
    }
}
;
canvas.app.magic.view.SlotView = function(t, e, a) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            if (t) {
                this.addChild(this.selector)
            } else {
                this.removeIfExist(this.selector)
            }
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", a));
    this.index = t;
    this.numImage = e;
    this.msk = this.createMask();
    this.sprite.addChild(this.msk);
    this.image = this.createImage();
    this.sprite.addChild(this.image);
    this.image.mask = this.msk;
    this.selector = this.createSelector();
    this.hint = new canvas.app.view.PxHint;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this, this.clickHandler, this)
}
;
canvas.app.magic.view.SlotView.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.magic.view.SlotView.prototype.createSelector = function() {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_selector"))
}
;
canvas.app.magic.view.SlotView.prototype.update = function() {
    var t = canvas.app.magic.model;
    if (this.data) {
        this.selected = false;
        this.hint.text = this.data.title + "\n" + canvas.Translator.getText(49) + " " + this.data.mp;
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_ADD, null, {
            target: this,
            params: new canvas.utils.HintParams(this.hint)
        });
        this.image.setImage(t.picPath + this.data.picture);
        this.numImage.texture = canvas.ResourceLoader.getImage("ui", "num_" + this.data.level)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_REMOVE, null, {
            target: this
        });
        this.image.clear();
        this.numImage.texture = canvas.px.TextureEmpty
    }
}
;
canvas.app.magic.view.SlotView.prototype.clickHandler = function() {
    if (this.data) {
        spell_take_off(this.data.id)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.DESELECT_ALL);
        this.selected = true;
        spell_slot(this.index + 1)
    }
}
;
canvas.app.magic.view.SlotView.prototype.createMask = function() {
    var t = new canvas.px.Graphics;
    t.beginFill(0, 1);
    t.drawCircle(19, 19, 18);
    t.endFill();
    this.sprite.hitArea = new canvas.px.Circle(19,19,18);
    return t
}
;
canvas.app.magic.view.SlotView.prototype.createImage = function() {
    var t = new canvas.ui.Image;
    t.scale.set(.63, .63);
    return t
}
;
canvas.app.magic.view.ViewAura = function() {
    canvas.app.magic.View.call(this)
}
;
canvas.app.magic.view.ViewAura.prototype = Object.create(canvas.app.magic.View.prototype);
canvas.app.magic.view.ViewAura.prototype.createFront = function() {
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_front_slots")));
    t.position.set(46, 22);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_front_numbers")));
    t.position.set(75, 53)
}
;
canvas.app.magic.view.ViewAura.prototype.createSlots = function() {
    var t = canvas.app.magic.modelAura;
    this.slots = [];
    var e = [[122, 24], [122, 98], [48, 98], [48, 24]];
    var a = [[123, 60], [123, 103], [78, 103], [78, 60]];
    var i;
    var s;
    for (var n = 0; n < 4; n++) {
        s = new canvas.px.Sprite(canvas.px.TextureEmpty);
        s.position.set(a[n][0], a[n][1]);
        i = new canvas.app.magic.view.slots.SlotAura(n,s);
        i.position.set(e[n][0], e[n][1]);
        this.addChild(i);
        this.slots.push(i);
        i.data = t.items[n + 1]
    }
}
;
canvas.app.magic.view.ViewMagic = function() {
    canvas.app.magic.View.call(this)
}
;
canvas.app.magic.view.ViewMagic.prototype = Object.create(canvas.app.magic.View.prototype);
canvas.app.magic.view.ViewShadow = function() {
    canvas.app.magic.View.call(this)
}
;
canvas.app.magic.view.ViewShadow.prototype = Object.create(canvas.app.magic.View.prototype);
canvas.app.magic.view.ViewShadow.prototype.createBack = function() {
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_back")))
}
;
canvas.app.magic.view.ViewShadow.prototype.createFront = function() {
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_top")));
    t.position.set(50, 50)
}
;
canvas.app.magic.view.ViewShadow.prototype.createSlots = function() {
    var t = canvas.app.magic.modelShadow;
    this.slots = [];
    var e = [[79, 23], [119, 40], [136, 80], [119, 119], [79, 136], [40, 119], [23, 80], [40, 40]];
    var a = [[85, 50], [108, 59], [119, 85], [108, 110], [85, 120], [60, 110], [50, 85], [60, 59]];
    var i;
    var s;
    for (var n = 0; n < 8; n++) {
        s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_disabled_slot"));
        s.position.set(a[n][0], a[n][1]);
        i = new canvas.app.magic.view.slots.SlotShadow(n,s);
        i.position.set(e[n][0], e[n][1]);
        this.addChild(i);
        this.slots.push(i);
        i.data = t.items[n + 1]
    }
}
;
canvas.app.magic.view.slots.SlotAura = function(t, e) {
    canvas.app.magic.view.SlotView.call(this, t, e, "aura_slot")
}
;
canvas.app.magic.view.slots.SlotAura.prototype = Object.create(canvas.app.magic.view.SlotView.prototype);
canvas.app.magic.view.slots.SlotAura.prototype.createSelector = function() {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_slot_selector"))
}
;
canvas.app.magic.view.slots.SlotAura.prototype.createMask = function() {
    var t = new canvas.px.Graphics;
    t.beginFill(16777215, 1);
    t.drawCircle(26, 26, 25);
    t.endFill();
    this.sprite.hitArea = new canvas.px.Circle(26,26,25);
    return t
}
;
canvas.app.magic.view.slots.SlotAura.prototype.createImage = function() {
    var t = new canvas.ui.Image;
    t.scale.set(.8, .8);
    return t
}
;
canvas.app.magic.view.slots.SlotMagic = function(t, e) {
    canvas.app.magic.view.SlotView.call(this, t, e, "slot")
}
;
canvas.app.magic.view.slots.SlotMagic.prototype = Object.create(canvas.app.magic.view.SlotView.prototype);
canvas.app.magic.view.slots.SlotShadow = function(t, e) {
    canvas.app.magic.view.SlotView.call(this, t, e, "shadow_circle");
    this.lockImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_lock"));
    this.lockImage.position.set(-3, -2)
}
;
canvas.app.magic.view.slots.SlotShadow.prototype = Object.create(canvas.app.magic.view.SlotView.prototype);
canvas.app.magic.view.slots.SlotShadow.prototype.update = function() {
    var t = canvas.app.magic.modelShadow;
    if (this.data) {
        this.selected = false;
        this.hint.text = this.data.title + "\n" + canvas.Translator.getText(49) + " " + this.data.mp;
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_ADD, null, {
            target: this,
            params: new canvas.utils.HintParams(this.hint)
        });
        this.image.setImage(t.picPath + this.data.picture);
        this.numImage.texture = canvas.px.TextureEmpty
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_REMOVE, null, {
            target: this
        });
        this.image.clear();
        if (this.index >= t.slotsTotal) {
            this.numImage.texture = canvas.ResourceLoader.getImage("ui", "shadow_disabled_slot");
            this.addChild(this.lockImage);
            this.interactiveChildren = false
        } else {
            this.numImage.texture = canvas.px.TextureEmpty;
            this.interactiveChildren = true;
            this.removeIfExist(this.lockImage)
        }
    }
}
;
canvas.app.birthday.Const = {
    configUrl: "entry_point.php?object=friend&json_mode_on=1&action=birthday_conf"
};
canvas.app.birthday.Event = {
    ENTER_FRAME: "Birthday.ENTER_FRAME",
    GIFT_USER: "Birthday.GIFT_USER",
    GIFT_GIFT: "Birthday.GIFT_GIFT",
    UPDATE: "Birthday.UPDATE"
};
canvas.app.birthday.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.windowsManager = new canvas.utils.WindowsManager;
    this.view = new canvas.app.birthday.View;
    this.addChild(this.view);
    this.windowsContainer = new canvas.px.Container;
    this.addChild(this.windowsContainer);
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.GIFT_USER, null, this.giftUserHandler, this);
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.GIFT_GIFT, null, this.giftHandler, this);
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.UPDATE, null, this.update, this);
    this.model.init()
}
;
canvas.app.birthday.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.birthday.Main.prototype.giftUserHandler = function(t) {
    if (canvas.ResourceLoader.inProgress)
        return;
    this.model.selectedUser = t.params.id;
    canvas.ResourceLoader.remove("birthday_conf");
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    canvas.ResourceLoader.add([["birthday_conf", canvas.app.birthday.Const.configUrl]])
}
;
canvas.app.birthday.Main.prototype.giftHandler = function(t) {
    this.model.gift(t.params.id);
    canvas.utils.WindowsManager.instance.closeWindow(this.view.itemsWindow)
}
;
canvas.app.birthday.Main.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.model.init()
}
;
canvas.app.birthday.Main.prototype.update = function() {
    this.view.update();
    if (this.model.selectedUser)
        canvas.utils.WindowsManager.instance.openWindow(this.view.itemsWindow)
}
;
canvas.app.birthday.Model = function(t) {
    this.selectedUser = t.userId && parseInt(t.userId) ? t.userId : ""
}
;
canvas.app.birthday.Model.prototype.init = function() {
    var t = JSON.parse(canvas.ResourceLoader.get("birthday_conf").data)["friend|birthday_conf"];
    this.users = new Array;
    var e, a, i, s;
    var n = t.users.length;
    var i;
    for (i = 0; i < n; i++) {
        a = t.users[i];
        e = new Object;
        e.id = a.id;
        e.nick = a.nick;
        e.parts = a.parts;
        e.background = a.background;
        e.gender = parseInt(a.gender) == 2 ? canvas.Const.GENDER.FEMALE : canvas.Const.GENDER.MALE;
        e.kind = parseInt(a.kind);
        e.sk = 1;
        this.users.push(e)
    }
    this.items = new Array;
    var r = new Array;
    n = t.items.length;
    for (i = 0; i < n; i++) {
        a = t.items[i];
        s = new Object;
        s.id = a.id;
        s.artikul = a.artikul_id;
        this.items.push(s);
        r.push(a.artikul_id)
    }
    canvas.EventManager.addEventListener(canvas.Event.ARTIKULS_LOADED, null, this.artikulsLoaded, this);
    if (canvas.data.Artikuls.get(r)) {
        this.artikulsLoaded()
    }
}
;
canvas.app.birthday.Model.prototype.artikulsLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.Event.ARTIKULS_LOADED, null, this.artikulsLoaded, this);
    var t = this.items.length;
    var e;
    for (var a = 0; a < t; a++) {
        e = canvas.data.Artikuls.get(this.items[a].artikul);
        if (e) {
            this.items[a].picture = e.picture
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.UPDATE)
}
;
canvas.app.birthday.Model.prototype.closeBirthdayWindow = function() {
    closeBirthdayWindow(this.selectedUser)
}
;
canvas.app.birthday.Model.prototype.openPremiumStore = function(t) {
    if (t == undefined)
        t = "gifts";
    openPremiumStore(t)
}
;
canvas.app.birthday.Model.prototype.gift = function(t) {
    var e;
    var a;
    var i = this.users.length;
    for (var s = 0; s < i; s++) {
        e = this.users[s];
        if (e.id == this.selectedUser) {
            a = e.nick
        }
    }
    showMsg("action_form.php?artifact_id=" + t + "&in[nick]=" + a)
}
;
canvas.app.birthday.View = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "window_back")));
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "birthday")));
    t.position.set(115, 70);
    this.headerField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7158283,300,50,"center"));
    this.headerField.position.set(210, 222);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1));
    this.list.y = 260;
    this.list.setSize(420, 165);
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("birthday", "arrow"));
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("birthday", "arrow"));
    a.scale.x = -1;
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,e,a);
    this.addChild(this.scroll);
    this.scroll.setSize(425, 50);
    this.scroll.position.set(135, 313);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    this.listTargetX = 0;
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("birthday", "main_window_close_base"),canvas.ResourceLoader.getImage("birthday", "main_window_close_over"),canvas.ResourceLoader.getImage("birthday", "main_window_close_down")));
    this.closeButton.position.set(582, 142);
    this.itemsWindow = new canvas.app.birthday.view.ItemsWindow;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeHandler, this)
}
;
canvas.app.birthday.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.birthday.View.prototype.update = function() {
    var t = canvas.app.birthday.model;
    var e = t.users.length;
    this.headerField.text = canvas.Translator.getText(e > 1 ? 1509 : 1515, [e]);
    this.list.clear(false);
    for (var a = 0; a < e; a++) {
        this.list.add(new canvas.app.birthday.view.UserListRenderer(t.users[a],false))
    }
    this.list.update();
    if (e == 1)
        this.list.x = 294;
    else if (e == 2)
        this.list.x = 222;
    else
        this.list.x = 151;
    this.scroll.max = e - 3;
    this.scrollHandler()
}
;
canvas.app.birthday.View.prototype.scrollHandler = function() {
    if (this.scroll.max == 0) {
        this.scroll.minusView.visible = false;
        this.scroll.plusView.visible = false
    } else if (this.scroll.current == 0) {
        this.scroll.minusView.visible = false;
        this.scroll.plusView.visible = true
    } else if (this.scroll.current == this.scroll.max) {
        this.scroll.minusView.visible = true;
        this.scroll.plusView.visible = false
    } else {
        this.scroll.minusView.visible = true;
        this.scroll.plusView.visible = true
    }
    this.listTargetX = -this.scroll.current * 140;
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.birthday.View.prototype.frameHandler = function() {
    var t;
    if (this.listTargetX > this.list.container.x) {
        t = this.list.container.x + 20;
        this.list.container.x = t > this.listTargetX ? this.listTargetX : t
    } else if (this.listTargetX < this.list.container.x) {
        t = this.list.container.x - 20;
        this.list.container.x = t < this.listTargetX ? this.listTargetX : t
    } else {
        canvas.EventManager.removeEventListener(canvas.app.birthday.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.birthday.View.prototype.closeHandler = function() {
    canvas.app.birthday.model.closeBirthdayWindow()
}
;
canvas.app.birthday.view.ItemListRenderer = function(t) {
    this.image = new canvas.ui.Image;
    canvas.ui.ListRenderer.call(this, t, 67, 67);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "item_back")));
    this.addChild(this.image);
    this.image.position.set(6, 5);
    this.buttonMode = true;
    this.hint = new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "item_plane"));
    this.hint.position.set(6, 29);
    var e = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,6507828,60,16,"center");
    this.hint.addChild(e);
    e.text = canvas.Translator.getText(115).toLowerCase();
    this.data = t
}
;
canvas.app.birthday.view.ItemListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.birthday.view.ItemListRenderer.prototype.update = function() {
    if (this.data) {
        this.image.setImage(this.data.picture)
    } else {
        this.image.clear()
    }
}
;
canvas.app.birthday.view.ItemListRenderer.prototype.overHandler = function() {
    if (this.data) {
        this.addChild(this.hint);
        _top().artifactAltSimple(this.data.artikul, 2)
    }
}
;
canvas.app.birthday.view.ItemListRenderer.prototype.outHandler = function() {
    this.removeIfExist(this.hint);
    if (this.data) {
        _top().artifactAltSimple(this.data.artikul, 0)
    }
}
;
canvas.app.birthday.view.ItemListRenderer.prototype.clickHandler = function() {
    this.outHandler();
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.GIFT_GIFT, null, this.data)
}
;
canvas.app.birthday.view.ItemListRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.birthday.view.ItemsWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 360, 305, canvas.Translator.getText(1511));
    this.dragAvailable = false;
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,4));
    this.list.position.set(25, 35);
    this.list.setSize(290, 215);
    this.list.scrollPadding = 20;
    var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var e = new canvas.px.Container;
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5]);
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    i.scale.y = -1;
    i.position.y = -i.height + 2;
    e.addChild(i);
    a.setSize(21, 40);
    var s = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,t,e,new canvas.px.Mask(21,100),a,this.list.container,true,true);
    s.padding = 13;
    s.step = 30;
    s.setSize(16);
    this.list.scroll = s;
    this.buyButton = this.addChild(new canvas.app.view.MainButton);
    this.buyButton.setSize(180);
    this.buyButton.setTitle(canvas.Translator.getText(1512));
    this.buyButton.position.set(92, 249)
}
;
canvas.app.birthday.view.ItemsWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.birthday.view.ItemsWindow.prototype.update = function() {
    var t = canvas.app.birthday.model;
    this.list.clear(false);
    var e = t.items.length;
    var a;
    for (var i = 0; i < e; i++) {
        a = new canvas.app.birthday.view.ItemListRenderer(t.items[i]);
        this.list.add(a)
    }
    this.list.update()
}
;
canvas.app.birthday.view.ItemsWindow.prototype.clickHandler = function(t) {
    var e = canvas.app.birthday.model;
    if (canvas.Functions.findParent(this.buyButton, t.target)) {
        e.closeBirthdayWindow();
        e.openPremiumStore();
        return
    }
    canvas.px.Window.prototype.clickHandler.call(this, t)
}
;
canvas.app.birthday.view.ItemsWindow.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    canvas.app.birthday.model.selectedUser = ""
}
;
canvas.app.birthday.view.UserListRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t, 135, 165);
    this.container = this.addChild(new canvas.px.Container);
    this.container.x = 15;
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.back.y = 29;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "user_back")));
    e.position.set(15, 25);
    this.fieldNick = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD,7092268,100,20,"center"));
    this.fieldNick.x = 4;
    this.button = this.container.addChild(new canvas.app.view.MainButton);
    this.button.setSize(136);
    this.button.setTitle(canvas.Translator.getText(1510));
    this.button.position.set(-15, 130);
    this.msk = new canvas.px.Graphics;
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(53, 79, 34);
    this.msk.endFill();
    this.container.addChild(this.msk);
    this.update();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
;
canvas.app.birthday.view.UserListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.birthday.view.UserListRenderer.prototype.update = function() {
    if (this.data && this.fieldNick) {
        this.back.texture = canvas.ResourceLoader.getImage("birthday", "back_" + (this.data.gender == canvas.Const.KIND.HUM ? "h" : "m"));
        this.fieldNick.text = this.data.nick;
        if (this.fieldNick.height > this.fieldNick._height) {
            var t = this.fieldNick.text.length - 1;
            while (this.fieldNick.height > this.fieldNick._height) {
                this.fieldNick.text = this.fieldNick.text.substr(0, t--) + "..."
            }
        }
        if (this.player) {
            this.player.destroy()
        }
        this.player = new canvas.animation.SkeletonAvatar(this.data.gender,this.data.parts);
        this.player.frameEvent = canvas.app.birthday.Event.ENTER_FRAME;
        this.container.addChild(this.player);
        this.player.position.set(-41, 50);
        this.player.mask = this.msk
    }
}
;
canvas.app.birthday.view.UserListRenderer.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.GIFT_USER, null, this.data)
}
;
canvas.app.birthday.view.UserListRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    if (this.player) {
        this.player.destroy()
    }
}
;
canvas.app.cube.Const = {
    NUM_SLOTS: 9
};
canvas.app.cube.Event = {
    ENTER_FRAME: "Cube.ENTER_FRAME",
    HINT_ADD: "Cube.HINT_ADD",
    HINT_REMOVE: "Cube.HINT_REMOVE"
};
canvas.app.cube.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.view = new canvas.app.cube.View;
    this.addChild(this.view);
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = this.addChild(new canvas.px.Container);
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.cube.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.cube.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.update()
}
;
canvas.app.cube.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.cube.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.cube.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.cube.Main.prototype.update = function() {
    this.view.update()
}
;
canvas.app.cube.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            a = t[e];
            if (!this.model.testStatus(a))
                continue;
            switch (e) {
            case "cube|puton":
                this.model.putOn(a.cube_artifact);
                this.update();
                break;
            case "cube|putoff":
                this.model.putOff(a.cube_artifact);
                this.update();
                break;
            case "cube|craft":
                this.model.craft(a.result_artifact);
                this.view.showAnimation();
                break;
            case "cube|use_recipe":
                this.model.useRecipe(a.cube_artifacts);
                this.update();
                break
            }
        }
    }
}
;
canvas.app.cube.Model = function(t) {
    this.parse(t.artifacts);
    this.resultArtifact = null
}
;
canvas.app.cube.Model.prototype.parse = function(t) {
    var e, a, i;
    this.items = new Array;
    if (t) {
        e = t.split(",");
        i = e.length;
        for (var s = 0; s < i; s++) {
            a = e[s].split(":");
            this.items.push(new canvas.data.cube.ItemData(a[0],a[2],a[1],a[3]))
        }
    }
}
;
canvas.app.cube.Model.prototype.putOn = function(t) {
    this.clearResult();
    var e, a;
    a = this.items.length;
    for (var i = 0; i < a; i++) {
        e = this.items[i];
        if (e.id == t.id) {
            e.count = t.cnt;
            return
        }
    }
    this.items.push(new canvas.data.cube.ItemData(t.id,t.picture,t.title,t.cnt))
}
;
canvas.app.cube.Model.prototype.putOff = function(t) {
    var e, a;
    a = this.items.length;
    for (var i = 0; i < a; i++) {
        e = this.items[i];
        if (e && e.id == t) {
            this.items.splice(i, 1);
            return
        }
    }
    this.clearResult()
}
;
canvas.app.cube.Model.prototype.craft = function(t) {
    this.resultArtifact = new canvas.data.cube.ItemData(t.id,t.picture,t.title,t.cnt);
    this.items = new Array;
    this.items[canvas.app.cube.Const.NUM_SLOTS - 1] = this.resultArtifact
}
;
canvas.app.cube.Model.prototype.useRecipe = function(t) {
    this.clearResult(true);
    var e, a;
    var i = t.length;
    for (a = 0; a < i; a++) {
        e = t[a];
        this.items.push(new canvas.data.cube.ItemData(e.id,e.picture,e.title,e.cnt))
    }
}
;
canvas.app.cube.Model.prototype.clearResult = function(t) {
    if (t == undefined)
        t = false;
    if (this.resultArtifact != null || t) {
        this.resultArtifact = null;
        this.items = new Array
    }
}
;
canvas.app.cube.Model.prototype.testStatus = function(t) {
    if (t && t.hasOwnProperty("status") && t.status != 100 && t.error != undefined)
        return false;
    return true
}
;
canvas.app.cube.View = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.transformButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_back")));
    this.transformButton.position.set(19, 258);
    var t = this.transformButton.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "cube")));
    t.position.set(Math.round((220 - t.width) * .5), Math.round((36 - t.height) * .5));
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front")));
    this.items = [];
    this.container = this.addChild(new canvas.px.Container);
    var e;
    var a = [[14, 13], [93, 13], [173, 13], [173, 99], [173, 185], [93, 185], [14, 185], [14, 99], [94, 99]];
    var i = canvas.app.cube.model;
    for (var s = 0; s < canvas.app.cube.Const.NUM_SLOTS; s++) {
        e = this.container.addChild(new canvas.app.cube.view.ItemRenderer(s,i.items[s]));
        this.items.push(e);
        e.position.set(a[s][0], a[s][1])
    }
    this.container.setChildIndex(this.items[canvas.app.cube.Const.NUM_SLOTS - 1], 0);
    this.anim = new canvas.px.MovieClip(canvas.Config.effectsPath + "cube");
    this.anim.stop();
    this.anim.frameEvent = canvas.app.cube.Event.ENTER_FRAME;
    this.anim.position.set(0, 5);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.anim, this.frameHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.transformButton, this.clickHandler, this)
}
;
canvas.app.cube.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.cube.View.prototype.update = function() {
    var t = canvas.app.cube.model;
    var e = false;
    for (var a = 0; a < canvas.app.cube.Const.NUM_SLOTS; a++) {
        this.items[a].data = t.items[a];
        if (!e && this.items[a].data && a < canvas.app.cube.Const.NUM_SLOTS - 1) {
            e = true
        }
    }
    this.transformButton.enabled = e
}
;
canvas.app.cube.View.prototype.frameHandler = function() {
    if (this.anim.currentFrame == 22) {
        this.update();
        this.transformButton.enabled = false
    } else if (this.anim.currentFrame == 40) {
        this.removeIfExist(this.anim);
        this.interactiveChildren = true;
        this.update()
    }
}
;
canvas.app.cube.View.prototype.showAnimation = function() {
    this.transformButton.enabled = false;
    this.addChild(this.anim);
    this.anim.gotoAndPlay(1);
    this.interactiveChildren = false
}
;
canvas.app.cube.View.prototype.clickHandler = function() {
    craft_cube_artifacts()
}
;
canvas.app.cube.view.ItemRenderer = function(t, e) {
    this.index = t;
    this.image = new canvas.ui.Image;
    this.front = this.createFront();
    this.countContainer = new canvas.px.Mask(34,16,7230284,1);
    this.countContainer.position.set(6, 46);
    this.countField = this.countContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,16177574,34,20,"center"));
    this.countField.y = 1;
    this.hintView = new canvas.app.view.MappingHint;
    canvas.ui.ListRenderer.call(this, e, 67, 67);
    this.addChild(this.image);
    this.image.position.set(4, 4);
    this.hitArea = new canvas.px.Rectangle(0,0,60,60);
    this.hint = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_hint_back"));
    this.hint.position.set(6, 29);
    var a = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,6507828,60,16,"center");
    this.hint.addChild(a);
    a.text = canvas.Translator.getText(1e3).toLowerCase();
    a.y = -1;
    this.infoButton = this.hint.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info")));
    this.infoButton.position.set(37, -24);
    this.data = e
}
;
canvas.app.cube.view.ItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.cube.view.ItemRenderer.prototype.createFront = function() {
    var t;
    switch (this.index) {
    case 0:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
        break;
    case 1:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot2"));
        break;
    case 2:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
        sprite.scale.x = -1;
        sprite.x = 70;
        break;
    case 3:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot3"));
        sprite.scale.x = -1;
        sprite.x = 70;
        break;
    case 4:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
        sprite.scale.set(-1, -1);
        sprite.position.set(70, 68);
        break;
    case 5:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot2"));
        sprite.scale.y = -1;
        sprite.y = 68;
        break;
    case 6:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
        sprite.scale.y = -1;
        sprite.y = 68;
        break;
    case 7:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot3"));
        break;
    default:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot0"))
    }
    return sprite
}
;
canvas.app.cube.view.ItemRenderer.prototype.update = function() {
    if (this.data) {
        this.image.setImage(this.data.image);
        this.hintView.update(this.data.title);
        canvas.EventManager.dispatchEvent(canvas.app.cube.Event.HINT_ADD, null, {
            target: this.image,
            params: new canvas.utils.HintParams(this.hintView,true)
        });
        if (this.data.count > 1) {
            this.addChild(this.countContainer);
            this.countField.text = this.data.count
        }
        this.addChild(this.front);
        this.buttonMode = true
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.cube.Event.HINT_REMOVE, null, {
            target: this.image
        });
        this.image.clear();
        this.removeIfExist(this.countContainer);
        this.removeIfExist(this.front);
        this.buttonMode = false;
        this.outHandler()
    }
}
;
canvas.app.cube.view.ItemRenderer.prototype.overHandler = function() {
    if (this.data) {
        this.addChildAt(this.hint, this.numChildren - 1)
    }
}
;
canvas.app.cube.view.ItemRenderer.prototype.outHandler = function() {
    this.removeIfExist(this.hint)
}
;
canvas.app.cube.view.ItemRenderer.prototype.clickHandler = function(t) {
    if (!this.data)
        return;
    if (canvas.Functions.findParent(this.infoButton, t.target)) {
        showArtifactInfo(this.data.id);
        return
    }
    artifactAct(this.data.id, "4")
}
;
canvas.app.cube.view.ItemRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.casino.Const = {
    LINES_COUNT: 5,
    REQUEST_SPIN: "spin",
    REQUEST_OPEN_CARD: "open_card",
    LINES_INDEXES: [[5, 6, 7, 8, 9], [0, 1, 2, 3, 4], [10, 11, 12, 13, 14], [0, 6, 12, 8, 4], [10, 6, 2, 8, 14]]
};
canvas.app.casino.Event = {
    ENTER_FRAME: "Casino.ENTER_FRAME",
    HINT_ADD: "Casino.HINT_ADD",
    HINT_REMOVE: "Casino.HINT_REMOVE",
    SHOW_LINES: "Casino.SHOW_LINES",
    HIDE_LINES: "Casino.HIDE_LINES",
    DRUM_COMPLETE: "Casino.DRUM_COMPLETE",
    SHOW_MESSAGE: "Casino.SHOW_MESSAGE",
    UPDATE_BET: "Casino.UPDATE_BET",
    OPEN_CARD: "Casino.OPEN_CARD"
};
canvas.app.casino.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsManager = new canvas.utils.WindowsManager;
    this.windowsContainer = new canvas.px.Container;
    this.view = this.addChild(new canvas.app.casino.View);
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.request = new canvas.utils.URLRequest;
    this.update();
    this.view.init();
    this.updateBetHandler();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.SHOW_LINES, null, this.showLinesHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HIDE_LINES, null, this.hideLinesHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.DRUM_COMPLETE, null, this.drumCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.SHOW_MESSAGE, null, this.showMessageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.UPDATE_BET, null, this.updateBetHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.OPEN_CARD, null, this.openCardHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this)
}
;
canvas.app.casino.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.casino.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.casino.Main.prototype.update = function() {
    this.view.update()
}
;
canvas.app.casino.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            a = t[e];
            switch (e) {
            case "casino|puton":
                break
            }
        }
    }
}
;
canvas.app.casino.Main.prototype.requestCompleteHandler = function() {
    this.model.parseResponse(this.request.request.responseText);
    if (this.model.error) {
        canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_MESSAGE, null, this.model.error);
        this.model.error = "";
        return
    }
    switch (this.request.type) {
    case canvas.app.casino.Const.REQUEST_SPIN:
        this.view.spin();
        break;
    case canvas.app.casino.Const.REQUEST_OPEN_CARD:
        this.view.updateSuperGame();
        setTimeout(this.updateExternalMoney.bind(this), 1e3);
        break
    }
}
;
canvas.app.casino.Main.prototype.requestErrorHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_MESSAGE, null, canvas.Translator.getText(426));
    this.update()
}
;
canvas.app.casino.Main.prototype.sendRequest = function(t, e) {
    var a = "casino_conf.php?mode=slots&is_gold=" + (this.model.isGold ? "1" : "0") + "&bandit=" + this.model.bandit + "&action=" + t;
    if (e != undefined)
        a += e;
    this.request.type = t;
    switch (t) {
    case canvas.app.casino.Const.REQUEST_SPIN:
        a += "&bet=" + (this.view.betStepper.selectedIndex + 1) + "&type=" + (this.view.lineStepper.selectedIndex + 1);
        break;
    default:
    }
    this.request.load(a)
}
;
canvas.app.casino.Main.prototype.playClickHandler = function() {
    if (this.model.isSuperGame || this.view.superGame.active) {
        this.model.clear();
        this.view.closeSuperGame()
    } else {
        this.sendRequest(canvas.app.casino.Const.REQUEST_SPIN);
        this.view.playButton.enabled = false
    }
}
;
canvas.app.casino.Main.prototype.showLinesHandler = function() {
    this.view.showActiveLines()
}
;
canvas.app.casino.Main.prototype.hideLinesHandler = function() {
    this.view.hideActiveLines()
}
;
canvas.app.casino.Main.prototype.drumCompleteHandler = function() {
    if (this.view.isDrumsStopped()) {
        this.view.updateAfterSpin();
        this.updateExternalMoney();
        this.model.clear()
    }
}
;
canvas.app.casino.Main.prototype.showMessageHandler = function(t) {
    this.view.messageWindow.init(t.params);
    this.windowsManager.openWindow(this.view.messageWindow)
}
;
canvas.app.casino.Main.prototype.updateBetHandler = function() {
    this.model.linesCount = this.view.lineStepper.values[this.view.lineStepper.selectedIndex];
    this.model.betValue = this.view.betStepper.values[this.view.betStepper.selectedIndex];
    this.model.localStorage.set("selectedLine", this.view.lineStepper.selectedIndex);
    this.model.localStorage.set("selectedBet", this.view.betStepper.selectedIndex);
    this.view.update()
}
;
canvas.app.casino.Main.prototype.openCardHandler = function(t) {
    this.model.cards.push(t.params);
    this.sendRequest(canvas.app.casino.Const.REQUEST_OPEN_CARD, "&card=" + t.params)
}
;
canvas.app.casino.Main.prototype.updateExternalMoney = function() {
    if (this.model.deltaMoney != 0) {
        casino_user_money_update(this.model.deltaMoney)
    }
}
;
canvas.app.casino.Model = function(t) {
    canvas.Config.initLang(t.GrPack.split("/")[2]);
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.CASINO);
    this.linesCount = 1;
    this.betValue = 100;
    this.type = t.type == undefined ? 1 : parseInt(t.type);
    this.bet = t.bet == undefined ? 1 : parseInt(t.bet);
    this.bets = t.bets == undefined ? [1, 2, 3, 4, 5] : t.bets.split(",");
    var e, a;
    e = this.bets.length;
    for (a = 0; a < e; a++) {
        this.bets[a] = parseFloat(this.bets[a])
    }
    this.types = t.types == undefined ? [1, 2, 3, 4, 5] : t.types.split(",");
    e = this.types.length;
    for (a = 0; a < e; a++) {
        this.types[a] = parseInt(this.types[a])
    }
    this.cardTypes = t.card_types == undefined || t.card_types == "" ? [] : t.card_types.split(",");
    e = this.cardTypes.length;
    for (a = 0; a < e; a++) {
        this.cardTypes[a] = parseInt(this.cardTypes[a])
    }
    this.cards = t.cards == undefined || t.cards == "" ? [] : t.cards.split(",");
    e = this.cards.length;
    for (a = 0; a < e; a++) {
        this.cards[a] = parseInt(this.cards[a])
    }
    this.freeSpins = t.free_spins == undefined ? 0 : parseInt(t.free_spins);
    this.isGold = t.is_gold == undefined ? false : parseInt(t.is_gold) != 0;
    this.jackpot = t.jackpot == undefined ? 0 : parseFloat(t.jackpot);
    this.money = t.money == undefined ? 0 : parseFloat(t.money);
    this.isSuperGame = t.super_game == undefined ? false : parseInt(t.super_game) != 0;
    this.bandit = t.bandit == undefined ? 1 : parseInt(t.bandit);
    this.icon_type = t.icon_type == undefined ? 0 : parseInt(t.icon_type);
    this.figs = [];
    this.combos = [];
    this.prize = 0;
    this.currentPrize = 0;
    this.deltaMoney = 0;
    this.error = ""
}
;
canvas.app.casino.Model.prototype.parseResponse = function(t) {
    var e = (new DOMParser).parseFromString(t, "text/xml");
    var a = e.firstChild;
    var i = a.attributes.action.value;
    if (a.attributes.prize) {
        this.prize = parseFloat(a.attributes.prize.value)
    } else {
        this.prize = 0;
        if (a.attributes.current_prize) {
            this.currentPrize = parseFloat(a.attributes.current_prize.value)
        } else {
            this.currentPrize = 0
        }
    }
    if (a.attributes.super_game) {
        this.isSuperGame = parseInt(a.attributes.super_game.value) != 0
    }
    var s = a.childNodes;
    var n = s.length;
    var r, o, l, c, p, h;
    for (var d = 0; d < n; d++) {
        switch (s[d].nodeName) {
        case "user":
            r = this.money;
            if (s[d].attributes.money)
                this.money = parseFloat(s[d].attributes.money.value);
            if (s[d].attributes.jackpot)
                this.jackpot = parseFloat(s[d].attributes.jackpot.value);
            if (s[d].attributes.free_spins) {
                this.freeSpins = parseInt(s[d].attributes.free_spins.value)
            } else {
                this.freeSpins = 0
            }
            this.deltaMoney = this.money - r;
            break;
        case "error":
            this.error = s[d].firstChild.nodeValue;
            break;
        case "figs":
            r = s[d].childNodes;
            this.figs = [[parseInt(r[0].firstChild.nodeValue), parseInt(r[5].firstChild.nodeValue), parseInt(r[10].firstChild.nodeValue)], [parseInt(r[1].firstChild.nodeValue), parseInt(r[6].firstChild.nodeValue), parseInt(r[11].firstChild.nodeValue)], [parseInt(r[2].firstChild.nodeValue), parseInt(r[7].firstChild.nodeValue), parseInt(r[12].firstChild.nodeValue)], [parseInt(r[3].firstChild.nodeValue), parseInt(r[8].firstChild.nodeValue), parseInt(r[13].firstChild.nodeValue)], [parseInt(r[4].firstChild.nodeValue), parseInt(r[9].firstChild.nodeValue), parseInt(r[14].firstChild.nodeValue)]];
            break;
        case "combos":
            r = s[d].childNodes;
            n = r.length;
            if (n > 0) {
                this.combos = [];
                for (var v = 0; v < n; v++) {
                    l = r[v].childNodes;
                    c = l.length;
                    p = [];
                    for (var u = 0; u < c; u++) {
                        p.push(parseInt(l[u].firstChild.nodeValue))
                    }
                    h = this.getLineByCombo(p);
                    if (h >= 0) {
                        this.combos[h] = [];
                        for (var u = 0; u < c; u++) {
                            this.combos[h].push(canvas.app.casino.Const.LINES_INDEXES[h].indexOf(p[u]))
                        }
                    }
                }
            }
            break;
        case "card":
            if (s[d].attributes.type && s[d].attributes.result && s[d].attributes.result.value == "1") {
                this.cardTypes.push(parseInt(s[d].attributes.type.value))
            }
            break
        }
    }
}
;
canvas.app.casino.Model.prototype.getLineByCombo = function(t) {
    var e = canvas.app.casino.Const.LINES_INDEXES.length;
    var a = t.length;
    var i, s, n;
    for (i = 0; i < e; i++) {
        n = true;
        for (s = 0; s < a; s++) {
            if (canvas.app.casino.Const.LINES_INDEXES[i].indexOf(t[s]) < 0) {
                n = false;
                break
            }
        }
        if (n) {
            return i
        }
    }
    return -1
}
;
canvas.app.casino.Model.prototype.clear = function() {
    this.prize = this.currentPrize = 0;
    this.combos = [];
    this.figs = [];
    this.deltaMoney = 0;
    this.cards = [];
    this.cardTypes = []
}
;
canvas.app.casino.View = function() {
    canvas.px.Container.call(this);
    var t, e, a, i;
    var s = canvas.app.casino.model;
    this.anims = [];
    this._curAnimIndex = 0;
    Object.defineProperty(this, "curAnimIndex", {
        get: function() {
            return this._curAnimIndex
        },
        set: function(t) {
            this._curAnimIndex = t >= this.anims.length ? 0 : t;
            setTimeout(this.playAnim.bind(this), 1e3 + Math.random() * 2e3)
        }
    });
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.drumsContainer = this.addChild(new canvas.px.Container);
    this.drumsContainer.position.set(56, 60);
    e = this.addChild(new canvas.px.Mask(430,220));
    e.position.set(this.drumsContainer.x - 20, this.drumsContainer.y - 10);
    this.drumsContainer.mask = e;
    this.drums = [];
    for (a = 0; a < 5; a++) {
        e = this.drumsContainer.addChild(new canvas.app.casino.view.DrumView);
        e.position.set(a * 79, 0);
        this.drums.push(e)
    }
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "gradient")));
    e.position.set(48, 50);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front")));
    e.y = 5;
    this.animFront = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient1"));
    this.animFront.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("front_mask")));
    t.position.set(0, 3);
    this.animFront.mask = t;
    this.anims.push(this.animFront);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_jackpot")));
    e.position.set(65, 16);
    this.animJackpot = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient2"));
    this.animJackpot.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animJackpot.position.set(e.x, e.y - 25);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_jackpot")));
    t.position.set(e.x, e.y);
    this.animJackpot.mask = t;
    this.anims.push(this.animJackpot);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_prize")));
    e.position.set(420 - e.width, 16);
    this.animPrize = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient2"));
    this.animPrize.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animPrize.position.set(e.x, e.y - 25);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_prize")));
    t.position.set(e.x, e.y);
    this.animPrize.mask = t;
    this.anims.push(this.animPrize);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("dragon_mask")));
    e.position.set(198, 0);
    this.animDragon = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient3"));
    this.animDragon.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animDragon.position.set(e.x - 20, e.y);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("dragon_mask")));
    t.position.set(e.x, e.y);
    this.animDragon.mask = t;
    this.anims.push(this.animDragon);
    this.playButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getTexture("play_button_mask")));
    this.playButton.position.set(376, 276);
    this.animPlayButton = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient4"));
    this.animPlayButton.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animPlayButton.position.set(this.playButton.x, this.playButton.y);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("play_button_mask")));
    t.position.set(this.playButton.x, this.playButton.y);
    this.animPlayButton.mask = t;
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_play")));
    e.position.set(this.playButton.x + Math.round((this.playButton.width - e.width) * .5), this.playButton.y + 20);
    this.anims.push(this.animPlayButton);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_lines")));
    e.position.set(50 + Math.round((68 - e.width) * .5), 289);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_bet")));
    e.position.set(140 + Math.round((80 - e.width) * .5), 289);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_sum")));
    e.position.set(259 + Math.round((80 - e.width) * .5), 289);
    this.moneyJackpot = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!s.isGold,70,20,"center","top",false));
    this.moneyJackpot.position.set(130, 14);
    this.moneyWin = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!s.isGold,70,20,"center","top",false));
    this.moneyWin.displayBronze = false;
    this.moneyWin.numbersCount = 2;
    this.moneyWin.position.set(280, 14);
    this.moneySum = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!s.isGold,80,20,"center","top",false));
    this.moneySum.position.set(260, 301);
    this.freeSpinsField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11,0,80,20,"center");
    this.freeSpinsField.position.set(260, 304);
    this.lineStepper = this.addChild(new canvas.app.casino.view.LineStepper(65));
    this.lineStepper.position.set(51, 301);
    this.betStepper = this.addChild(new canvas.app.casino.view.BetStepper(91));
    this.betStepper.position.set(137, 301);
    this.linesContainer = this.addChild(new canvas.px.Container);
    this.lines = [];
    for (a = 0; a < canvas.app.casino.Const.LINES_COUNT; a++) {
        e = this.linesContainer.addChild(new canvas.app.casino.view.SelectorView(a));
        this.lines.push(e);
        switch (a) {
        case 3:
            e.position.set(10, 48);
            break;
        case 1:
            e.position.set(10, 90);
            break;
        case 0:
            e.position.set(10, 140);
            break;
        case 2:
            e.position.set(10, 189);
            break;
        case 4:
            e.position.set(10, 236);
            break
        }
    }
    this.winAnimation = new canvas.px.MovieClip(canvas.Config.langPath + "mci/casino_win");
    this.winAnimation.stop();
    this.winAnimation.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.winAnimation.position.set(-10, 10);
    this.hint = new canvas.app.casino.view.HintView("");
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow;
    this.messageWindow.dragAvailable = false;
    i = this.anims.length;
    for (a = 0; a < this.anims.length; a++) {
        this.anims[a].stop()
    }
    this.playAnim();
    this.superGame = new canvas.app.casino.view.SuperGame;
    this.superGame.position.set(83, 90);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.winAnimation, this.winAnimationCompleteHandler, this)
}
;
canvas.app.casino.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.View.prototype.update = function() {
    var t = canvas.app.casino.model;
    this.lineStepper.values = t.types;
    this.betStepper.values = t.bets;
    if (t.isGold) {
        this.moneyJackpot.gems = t.jackpot;
        this.moneySum.gems = t.linesCount * t.betValue
    } else {
        this.moneyJackpot.gold = canvas.Functions.getMoneyGold(t.jackpot);
        this.moneySum.money = canvas.Functions.getMoney(t.linesCount * t.betValue)
    }
    if (!t.isSuperGame) {
        if (t.money < t.linesCount * t.betValue) {
            this.playButton.enabled = false;
            this.hint.setText(canvas.Translator.getText(3025));
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_ADD, null, {
                target: this.playButton,
                params: new canvas.utils.HintParams(this.hint,false,canvas.utils.HintPos.LEFT_TOP)
            })
        } else {
            this.playButton.enabled = true;
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_REMOVE, null, {
                target: this.playButton
            })
        }
    }
    if (t.freeSpins > 0) {
        if (!t.isSuperGame) {
            this.playButton.enabled = true
        }
        this.addChild(this.freeSpinsField);
        this.freeSpinsField.text = t.freeSpins + " " + canvas.Translator.getText(1601);
        this.removeIfExist(this.moneySum);
        canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_REMOVE, null, {
            target: this.playButton
        })
    } else {
        this.addChild(this.moneySum);
        this.removeIfExist(this.freeSpinsField)
    }
}
;
canvas.app.casino.View.prototype.init = function() {
    var t = canvas.app.casino.model;
    var e = t.localStorage.get("selectedLine");
    var a = t.localStorage.get("selectedBet");
    if (e != undefined)
        this.lineStepper.selectedIndex = parseInt(e);
    if (a != undefined)
        this.betStepper.selectedIndex = parseInt(a);
    if (t.freeSpins > 0) {
        this.lineStepper.selectedIndex = t.type - 1;
        this.betStepper.selectedIndex = t.bet - 1
    }
    this.testSuperGame()
}
;
canvas.app.casino.View.prototype.testSuperGame = function() {
    var t = canvas.app.casino.model;
    if (t.isSuperGame) {
        this.openSuperGame()
    }
}
;
canvas.app.casino.View.prototype.updateAfterSpin = function() {
    var t = canvas.app.casino.model;
    this.blink(false);
    if (t.prize > 0) {
        this.playWinAnimation();
        this.setWinValue(t.prize);
        var e = this.lines.length;
        for (var a = 0; a < e; a++) {
            this.lines[a].resultValues = t.combos[a] || []
        }
    }
    this.update();
    this.testSuperGame()
}
;
canvas.app.casino.View.prototype.playAnim = function() {
    this.anims[this.curAnimIndex].gotoAndPlay(1);
    this.curAnimIndex++
}
;
canvas.app.casino.View.prototype.showActiveLines = function() {
    var t = this.lines.length;
    var e = this.lineStepper.values[this.lineStepper.selectedIndex];
    for (var a = 0; a < t; a++) {
        if (a < e) {
            this.lines[a].overHandler()
        } else {
            this.lines[a].outHandler()
        }
    }
}
;
canvas.app.casino.View.prototype.hideActiveLines = function() {
    var t = this.lines.length;
    for (var e = 0; e < t; e++) {
        this.lines[e].outHandler()
    }
}
;
canvas.app.casino.View.prototype.playWinAnimation = function() {
    this.addChild(this.winAnimation);
    this.winAnimation.gotoAndPlay(2)
}
;
canvas.app.casino.View.prototype.winAnimationCompleteHandler = function() {
    this.removeIfExist(this.winAnimation)
}
;
canvas.app.casino.View.prototype.blink = function(t) {
    if (t == undefined)
        t = true;
    var e = this.lines.length;
    for (var a = 0; a < e; a++) {
        this.lines[a].blink = t
    }
}
;
canvas.app.casino.View.prototype.isDrumsStopped = function() {
    var t = this.drums.length;
    for (var e = 0; e < t; e++) {
        if (this.drums[e].active)
            return false
    }
    return true
}
;
canvas.app.casino.View.prototype.spin = function() {
    var t = canvas.app.casino.model;
    var e = this.drums.length, a;
    for (a = 0; a < e; a++) {
        if (t.figs[a])
            this.drums[a].result = t.figs[a]
    }
    e = this.lines.length;
    for (a = 0; a < e; a++) {
        this.lines[a].resultValues = []
    }
    this.moneyWin.reset();
    this.blink(true)
}
;
canvas.app.casino.View.prototype.openSuperGame = function() {
    this.addChild(this.superGame);
    this.superGame.show();
    this.updateSuperGame();
    this.removeIfExist(this.linesContainer);
    this.addChild(this.winAnimation);
    this.hideDrums()
}
;
canvas.app.casino.View.prototype.updateSuperGame = function() {
    var t = canvas.app.casino.model;
    this.superGame.update();
    this.playButton.enabled = t.cards.length >= canvas.app.casino.Const.LINES_COUNT;
    if (t.prize > 0) {
        this.setWinValue(t.prize)
    } else if (t.currentPrize > 0) {
        this.setWinValue(t.currentPrize)
    }
}
;
canvas.app.casino.View.prototype.setWinValue = function(t) {
    var e = canvas.app.casino.model;
    this.moneyWin.displaySilver = true;
    this.moneyWin.animateToValue(e.isGold ? null : canvas.Functions.getMoney(t), e.isGold ? t : null)
}
;
canvas.app.casino.View.prototype.closeSuperGame = function() {
    this.superGame.hide();
    this.addChild(this.linesContainer);
    this.showDrums()
}
;
canvas.app.casino.View.prototype.showDrums = function() {
    var t = this.drums.length;
    for (var e = 0; e < t; e++) {
        this.drums[e].show()
    }
}
;
canvas.app.casino.View.prototype.hideDrums = function() {
    var t = this.drums.length;
    for (var e = 0; e < t; e++) {
        this.drums[e].hide()
    }
}
;
canvas.app.casino.view.CardView = function(t) {
    canvas.px.Container.call(this);
    this.index = t;
    this._result = 0;
    Object.defineProperty(this, "result", {
        get: function() {
            return this._result
        },
        set: function(t) {
            this._result = t;
            this.resultImage.texture = canvas.ResourceLoader.getImage("ui", "card_result_" + this._result)
        }
    });
    this._state = 0;
    Object.defineProperty(this, "state", {
        get: function() {
            return this._state
        },
        set: function(t) {
            this._state = t;
            this.update()
        }
    });
    this._targetFrame = 0;
    Object.defineProperty(this, "targetFrame", {
        get: function() {
            return this._targetFrame
        },
        set: function(t) {
            this._targetFrame = t;
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    });
    this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.image.pivot = new canvas.px.Point(45,46);
    this.questionImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_question"));
    this.questionImage.position.set(-Math.round(this.questionImage.width * .5), -Math.round(this.questionImage.height * .5) + 5);
    this.resultImage = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.resultImage.pivot = new canvas.px.Point(45,46);
    this.blink = new canvas.px.MovieClip(canvas.Config.effectsPath + "casino_blink");
    this.blink.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.currentFrame = 0;
    this.scaleArray = [.99, .98, .97, .96, .97, .98, .99, 1, 1.01, 1.02, 1.03, 1.04, 1.03, 1.02, 1.01, 1];
    this.scaleIndex = 0;
    this.buttonMode = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.click = this.clickHandler.bind(this);
    this.hitArea = new canvas.px.Rectangle(-32,-32,64,64);
    this.delay = 0
}
;
canvas.app.casino.view.CardView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.CardView.prototype.update = function() {
    canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
    this.image.scale.set(1, 1);
    this.interactive = false;
    this.removeIfExist(this.questionImage);
    this.removeIfExist(this.blink);
    this.removeIfExist(this.resultImage);
    switch (this.state) {
    case 0:
        this.currentFrame = 0;
        this.targetFrame = 3;
        this.scaleIndex = 0;
        this.image.texture = canvas.px.TextureEmpty;
        break;
    case 1:
        this.targetFrame = 3;
        break;
    case 2:
        this.targetFrame = 3;
        break;
    case 3:
        this.currentFrame = 0;
        this.targetFrame = 4;
        break;
    case 4:
        this.currentFrame = 0;
        this.targetFrame = 5;
        break;
    case 5:
        this.currentFrame = 0;
        this.targetFrame = 4;
        break
    }
    this.outHandler()
}
;
canvas.app.casino.view.CardView.prototype.updateAfterAnim = function() {
    switch (this.state) {
    case 0:
        this.interactive = true;
        canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
        break;
    case 1:
        this.addChild(this.questionImage);
        break;
    case 3:
        this.addChild(this.resultImage);
        this.addChild(this.blink);
        this.blink.gotoAndPlay(1);
        break;
    case 4:
        this.parent.removeChild(this);
        break;
    case 5:
        this.addChild(this.resultImage);
        break
    }
}
;
canvas.app.casino.view.CardView.prototype.frameHandler = function() {
    if (this.delay-- > 0)
        return;
    this.image.texture = canvas.ResourceLoader.getImage("ui", "card_frame_" + (this.currentFrame >= 4 && this.targetFrame == 5 ? 4 : this.currentFrame));
    if (this.targetFrame > this.currentFrame) {
        this.currentFrame++
    } else if (this.targetFrame < this.currentFrame) {
        this.currentFrame++
    } else {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.updateAfterAnim()
    }
}
;
canvas.app.casino.view.CardView.prototype.frame2Handler = function() {
    this.image.scale.set(this.scaleArray[this.scaleIndex], this.scaleArray[this.scaleIndex]);
    this.scaleIndex++;
    if (this.scaleIndex >= this.scaleArray.length) {
        this.scaleIndex = 0
    }
}
;
canvas.app.casino.view.CardView.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.3)]
}
;
canvas.app.casino.view.CardView.prototype.light = function() {
    this.filters = [canvas.Functions.getBrightness(1.5)]
}
;
canvas.app.casino.view.CardView.prototype.outHandler = function() {
    this.filters = []
}
;
canvas.app.casino.view.CardView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.OPEN_CARD, null, this.index);
    this.interactive = false;
    this.outHandler()
}
;
canvas.app.casino.view.DrumImage = function(t) {
    canvas.px.Container.call(this);
    this._index = 1;
    Object.defineProperty(this, "index", {
        get: function() {
            return this._index
        },
        set: function(t) {
            this._index = t;
            this.icon_type = canvas.app.casino.model.icon_type;
            this.imageBlur.texture = canvas.ResourceLoader.getImage("ui", "image" + this.index + "_" + this.icon_type + "_blur");
            this.image.texture = canvas.ResourceLoader.getImage("ui", "image" + this.index + "_" + this.icon_type)
        }
    });
    this._blur = false;
    Object.defineProperty(this, "blur", {
        get: function() {
            return this._blur
        },
        set: function(t) {
            this._blur = t;
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    });
    this.imageBlur = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.imageBlur.position.set(-10, -10);
    this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.imageBlur.alpha = 0;
    this.index = t
}
;
canvas.app.casino.view.DrumImage.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.DrumImage.prototype.frameHandler = function() {
    if (this.blur && this.imageBlur.alpha != 1) {
        this.imageBlur.alpha += .1;
        if (this.imageBlur.alpha > 1)
            this.imageBlur.alpha = 1;
        this.image.alpha = 1 - this.imageBlur.alpha
    } else if (!this.blur && this.imageBlur.alpha != 0) {
        this.imageBlur.alpha -= .4;
        if (this.imageBlur.alpha < 0)
            this.imageBlur.alpha = 0;
        this.image.alpha = 1 - this.imageBlur.alpha
    } else {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.casino.view.DrumView = function(t) {
    canvas.px.Container.call(this);
    Object.defineProperty(this, "images", {
        get: function() {
            return this._images
        },
        set: function(t) {
            this._images = t;
            canvas.Functions.randomArray(this._images);
            this.update()
        }
    });
    this._result = [1, 2, 3];
    Object.defineProperty(this, "result", {
        get: function() {
            return this._result
        },
        set: function(t) {
            this._result = t;
            this.play()
        }
    });
    this.container = this.addChild(new canvas.px.Container);
    this.images = t == undefined ? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : t;
    this.animFrames = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
    this.animIndex = 0;
    this.active = false;
    this.startY = 0;
    this.targetY = 0
}
;
canvas.app.casino.view.DrumView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.DrumView.prototype.update = function() {
    canvas.Functions.destroyChildren(this.container);
    var t = this.images.length, e, a;
    this.items = [];
    for (e = 0; e < t; e++) {
        a = this.container.addChild(new canvas.app.casino.view.DrumImage(this.images[e]));
        a.y = 70 * e;
        this.items.push(a)
    }
    for (e = t; e < t + 3; e++) {
        a = this.container.addChild(new canvas.app.casino.view.DrumImage(this.images[e - t]));
        a.y = 70 * e;
        this.items.push(a)
    }
}
;
canvas.app.casino.view.DrumView.prototype.play = function() {
    this.active = true;
    this.index = 0;
    this.animIndex = 0;
    this.finishIndex = 20 + Math.round(Math.random() * 50);
    var t = this.items.length;
    for (var e = 0; e < t; e++) {
        this.items[e].blur = true
    }
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.casino.view.DrumView.prototype.frameHandler = function() {
    if (this.container.y >= 0) {
        this.container.y = -this.images.length * 70
    }
    this.container.y += this.index > 20 ? 50 : this.index * 2;
    this.index++;
    if (this.index > this.finishIndex) {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        var t = this.items.length;
        var e = this.result.length;
        var a = this.images.length;
        var i;
        for (var s = 0; s < e; s++) {
            i = this.items[s].index;
            this.items[s].index = this.result[s];
            this.items[s + a].index = this.result[s];
            for (var n = s + 1; n < a; n++) {
                if (this.items[n].index == this.items[s].index) {
                    this.items[n].index = i
                }
            }
        }
        canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this)
    }
}
;
canvas.app.casino.view.DrumView.prototype.frame2Handler = function() {
    if (this.container.y < 0) {
        this.container.y += 40;
        if (this.container.y > 0)
            this.container.y = 0
    } else {
        if (this.animIndex == 0) {
            var t = this.items.length;
            for (var e = 0; e < t; e++) {
                this.items[e].blur = false
            }
        }
        if (this.animFrames[this.animIndex] != undefined) {
            this.container.y = this.animFrames[this.animIndex++]
        } else {
            this.active = false;
            canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.DRUM_COMPLETE)
        }
    }
}
;
canvas.app.casino.view.DrumView.prototype.hide = function() {
    this.startY = this.container.y;
    this.targetY = -1e3;
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this)
}
;
canvas.app.casino.view.DrumView.prototype.show = function() {
    this.targetY = this.startY;
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this)
}
;
canvas.app.casino.view.DrumView.prototype.frame3Handler = function() {
    var t;
    if (this.container.y > this.targetY) {
        t = this.container.y - 40;
        if (t < this.targetY) {
            t = this.targetY
        }
        this.container.y = t
    } else if (this.container.y < this.targetY) {
        t = this.container.y + 40;
        if (t > this.targetY) {
            t = this.targetY
        }
        this.container.y = t
    } else {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this)
    }
}
;
canvas.app.casino.view.HintView = function(t) {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_alt")));
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,6770493,200,62,"center","middle"));
    this.field.position.set(19, 12);
    if (t != undefined)
        this.setText(t);
    this.interactiveChildren = false
}
;
canvas.app.casino.view.HintView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.HintView.prototype.setText = function(t) {
    this.field.text = t
}
;
canvas.app.casino.view.LineStepper = function(t) {
    canvas.px.Container.call(this);
    this._values = [1];
    Object.defineProperty(this, "values", {
        get: function() {
            return this._values
        },
        set: function(t) {
            this._values = t;
            this.update()
        }
    });
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t >= this.values.length ? 0 : t < 0 ? this.values.length - 1 : t;
            this.update();
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.UPDATE_BET)
        }
    });
    this._width = t ? t : 100;
    this.arrowLeft = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_base"),canvas.ResourceLoader.getImage("ui", "arrow_over"),canvas.ResourceLoader.getImage("ui", "arrow_down")));
    this.arrowLeft.scale.x = -1;
    this.arrowLeft.x = -this.arrowLeft.width;
    this.arrowRight = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_base"),canvas.ResourceLoader.getImage("ui", "arrow_over"),canvas.ResourceLoader.getImage("ui", "arrow_down")));
    this.arrowRight.x = this._width - this.arrowRight.width;
    this.createField();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrowLeft, this.leftClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrowRight, this.rightClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.arrowRight, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.arrowLeft, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.arrowRight, this.outHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.arrowLeft, this.outHandler, this)
}
;
canvas.app.casino.view.LineStepper.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.LineStepper.prototype.update = function() {
    this.field.text = this.values[this.selectedIndex]
}
;
canvas.app.casino.view.LineStepper.prototype.createField = function() {
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,15786161,this._width - 35,20,"center"));
    this.field.position.set(18, 0)
}
;
canvas.app.casino.view.LineStepper.prototype.leftClickHandler = function() {
    var t = canvas.app.casino.model;
    if (t.freeSpins > 0)
        return;
    this.selectedIndex--;
    this.overHandler()
}
;
canvas.app.casino.view.LineStepper.prototype.rightClickHandler = function() {
    var t = canvas.app.casino.model;
    if (t.freeSpins > 0)
        return;
    this.selectedIndex++;
    this.overHandler()
}
;
canvas.app.casino.view.LineStepper.prototype.overHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_LINES)
}
;
canvas.app.casino.view.LineStepper.prototype.outHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HIDE_LINES)
}
;
canvas.app.casino.view.SelectorView = function(t) {
    canvas.px.Container.call(this);
    this._values = [];
    Object.defineProperty(this, "values", {
        get: function() {
            return this._values
        },
        set: function(t) {
            this._values = t;
            this.update()
        }
    });
    this._resultValues = [];
    Object.defineProperty(this, "resultValues", {
        get: function() {
            return this._resultValues
        },
        set: function(t) {
            this._resultValues = this.values = t
        }
    });
    this._blink = false;
    Object.defineProperty(this, "blink", {
        get: function() {
            return this._blink
        },
        set: function(t) {
            this._blink = t;
            if (this.blink) {
                this.blinkContainer.alpha = Math.random();
                this.addChild(this.blinkContainer);
                canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)
            } else {
                canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
                this.container.addChild(this.blinkContainer);
                this.blinkContainer.alpha = 1
            }
        }
    });
    this.blinkDirection = true;
    this.index = t;
    switch (this.index) {
    case 0:
        this.color = "yellow";
        break;
    case 1:
        this.color = "blue";
        break;
    case 2:
        this.color = "red";
        break;
    case 3:
        this.color = "orange";
        break;
    case 4:
        this.color = "green";
        break
    }
    this.container = this.addChild(new canvas.px.Container);
    this.backContainer = this.addChild(new canvas.px.Container);
    this.selectorsContainer = this.addChild(new canvas.px.Container);
    this.arrowLeft = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "arrow_" + this.color)));
    this.arrowRight = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "arrow_" + this.color)));
    this.arrowLeft.pivot = this.arrowRight.pivot = new canvas.px.Point(30,10);
    this.button = this.addChild(new canvas.px.Graphics);
    this.button.beginFill(0, 0);
    this.button.drawCircle(18, 18, 18);
    this.button.endFill();
    this.button.interactive = true;
    this.button.buttonMode = true;
    var e = this.button.addChild(new canvas.px.Graphics);
    e.beginFill(0, 0);
    e.drawCircle(18, 18, 18);
    e.endFill();
    e.x = 436;
    this.blinkContainer = this.container.addChild(new canvas.px.Container);
    e = this.blinkContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "circle_" + this.color)));
    e = this.blinkContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "circle_" + this.color)));
    e.x = 436;
    e = this.blinkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,16777215,20,20,"center"));
    e.text = this.index + 1;
    e.position.set(7, 7);
    e = this.blinkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,16777215,20,20,"center"));
    e.text = this.index + 1;
    e.position.set(443, 7);
    switch (this.index) {
    case 0:
        this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
        this.back.width = 370;
        this.back.height = 7;
        this.back.position.set(48, 16);
        this.arrowLeft.scale.x = -1;
        this.arrowLeft.position.set(25, 20);
        this.arrowRight.position.set(445, 20);
        break;
    case 1:
        this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
        this.back.width = 370;
        this.back.height = 7;
        this.back.position.set(48, -3);
        this.arrowLeft.scale.x = -1;
        this.arrowLeft.position.set(25, 20);
        this.arrowRight.position.set(445, 20);
        break;
    case 2:
        this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
        this.back.width = 370;
        this.back.height = 7;
        this.back.position.set(48, 32);
        this.arrowLeft.scale.x = -1;
        this.arrowLeft.position.set(25, 20);
        this.arrowRight.position.set(445, 20);
        break;
    case 3:
        this.back = this.backContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
        this.back.position.set(48, 16);
        this.arrowLeft.scale.x = -1;
        this.arrowLeft.position.set(25, 10);
        this.arrowRight.position.set(445, 10);
        break;
    case 4:
        this.back = this.backContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
        this.back.position.set(48, -146);
        this.arrowLeft.scale.x = -1;
        this.arrowLeft.position.set(25, 8);
        this.arrowRight.position.set(445, 8);
        break
    }
    this.backMask = new canvas.px.Graphics;
    this.backContainer.addChild(this.backMask);
    this.back.mask = this.backMask;
    this.selectors = [];
    for (var a = 0; a < 5; a++) {
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "selector_" + this.color));
        this.selectors.push(e);
        this.selectorsContainer.addChild(e);
        e.position.set(38 + a * 80, 0);
        switch (this.index) {
        case 0:
            e.x += a == 0 ? 4 : 2;
            e.y = -11;
            break;
        case 1:
            e.x += a == 0 ? 4 : 2;
            e.y = -30;
            break;
        case 2:
            e.x += a == 0 ? 4 : 2;
            e.y = 5;
            break;
        case 3:
            switch (a) {
            case 0:
                e.y = 5;
                break;
            case 1:
                e.y = 70;
                break;
            case 2:
                e.y = 140;
                break;
            case 3:
                e.y = 70;
                break;
            case 4:
                e.y = 5;
                break
            }
            break;
        case 4:
            switch (a) {
            case 0:
                e.y = -45;
                break;
            case 1:
                e.y = -115;
                break;
            case 2:
                e.y = -180;
                break;
            case 3:
                e.y = -115;
                break;
            case 4:
                e.y = -45;
                break
            }
            break;
        default:
        }
    }
    this.animArr = [4, 8, 4, 0, -4, -8, -4, 0];
    this.animIndex = 0;
    this.button.mouseover = this.overHandler.bind(this);
    this.button.mouseout = this.outHandler.bind(this);
    this.values = []
}
;
canvas.app.casino.view.SelectorView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.SelectorView.prototype.update = function() {
    var t = false;
    this.backMask.clear();
    this.selectorsContainer.removeChildren();
    if (!this.container.parent) {
        t = true
    }
    this.removeIfExist(this.container);
    if (this.values.length == 0)
        return;
    if (t) {
        this.playAnim()
    }
    this.addChild(this.container);
    this.backMask.beginFill(0, 1);
    var e;
    var a = 0;
    switch (this.index) {
    case 0:
        a = 10;
        break;
    case 1:
        a = -10;
        break;
    case 2:
        a = 20;
        break;
    case 3:
        this.backMask.drawCircle(113, 73, 20);
        this.backMask.drawCircle(193, 140, 20);
        this.backMask.drawCircle(270, 138, 20);
        this.backMask.drawCircle(352, 73, 20);
        for (e = 0; e < 5; e++) {
            if (this.values.indexOf(e) < 0) {
                switch (e) {
                case 0:
                    this.backMask.drawCircle(72, 40, 32);
                    break;
                case 1:
                    this.backMask.drawCircle(153, 106, 32);
                    break;
                case 2:
                    this.backMask.drawCircle(232, 175, 32);
                    break;
                case 3:
                    this.backMask.drawCircle(310, 105, 32);
                    break;
                case 4:
                    this.backMask.drawCircle(392, 40, 32);
                    break
                }
            }
        }
        break;
    case 4:
        this.backMask.drawCircle(113, -45, 20);
        this.backMask.drawCircle(193, -112, 20);
        this.backMask.drawCircle(271, -111, 20);
        this.backMask.drawCircle(352, -47, 20);
        for (e = 0; e < 5; e++) {
            if (this.values.indexOf(e) < 0) {
                switch (e) {
                case 0:
                    this.backMask.drawCircle(73, -11, 32);
                    break;
                case 1:
                    this.backMask.drawCircle(153, -79, 32);
                    break;
                case 2:
                    this.backMask.drawCircle(232, -145, 32);
                    break;
                case 3:
                    this.backMask.drawCircle(311, -79, 32);
                    break;
                case 4:
                    this.backMask.drawCircle(390, -11, 32);
                    break
                }
            }
        }
        break;
    default:
    }
    if (a != 0) {
        this.backMask.drawRect(102, a, 20, 20);
        this.backMask.drawRect(182, a, 20, 20);
        this.backMask.drawRect(262, a, 20, 20);
        this.backMask.drawRect(342, a, 20, 20);
        for (e = 0; e < 5; e++) {
            if (this.values.indexOf(e) < 0) {
                switch (e) {
                case 0:
                    this.backMask.drawRect(46, a - 10, 56, 40);
                    break;
                case 1:
                    this.backMask.drawRect(122, a - 10, 60, 40);
                    break;
                case 2:
                    this.backMask.drawRect(202, a - 10, 60, 40);
                    break;
                case 3:
                    this.backMask.drawRect(282, a - 10, 60, 40);
                    break;
                case 4:
                    this.backMask.drawRect(362, a - 10, 60, 40);
                    break
                }
            }
        }
    }
    this.backMask.endFill();
    var i = this.values.length;
    for (e = 0; e < i; e++) {
        this.selectorsContainer.addChild(this.selectors[this.values[e]])
    }
}
;
canvas.app.casino.view.SelectorView.prototype.overHandler = function() {
    var t = canvas.app.casino.model;
    if (this.blink || t.isSuperGame)
        return;
    this.values = [0, 1, 2, 3, 4]
}
;
canvas.app.casino.view.SelectorView.prototype.outHandler = function() {
    this.values = this.resultValues
}
;
canvas.app.casino.view.SelectorView.prototype.playAnim = function() {
    this.animIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.casino.view.SelectorView.prototype.frameHandler = function() {
    if (this.animIndex >= this.animArr.length) {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.arrowLeft.rotation = this.arrowRight.rotation = 0
    } else {
        this.arrowLeft.rotation = this.arrowRight.rotation = canvas.Functions.degToRad(this.animArr[this.animIndex++])
    }
}
;
canvas.app.casino.view.SelectorView.prototype.blinkFrameHandler = function() {
    if (this.blinkDirection) {
        this.blinkContainer.alpha += .2;
        if (this.blinkContainer.alpha >= 1) {
            this.blinkContainer.alpha = 1;
            this.blinkDirection = !this.blinkDirection
        }
    } else {
        this.blinkContainer.alpha -= .2;
        if (this.blinkContainer.alpha <= 0) {
            this.blinkContainer.alpha = 0;
            this.blinkDirection = !this.blinkDirection
        }
    }
}
;
canvas.app.casino.view.SuperGame = function() {
    canvas.px.Container.call(this);
    this.cards = [];
    var t;
    for (var e = 0; e < 15; e++) {
        t = new canvas.app.casino.view.CardView(e);
        t.position.set(e % 5 * 80, Math.floor(e / 5) * 69);
        if (!(e % 5))
            t.x += 2;
        this.cards.push(t)
    }
    this.animArray = [0, 4, 5, 9, 10, 14, 1, 3, 6, 8, 11, 13, 2, 7, 12];
    this.active = false
}
;
canvas.app.casino.view.SuperGame.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.SuperGame.prototype.show = function() {
    var t = this.animArray.length;
    var e;
    for (var a = 0; a < t; a++) {
        e = this.cards[this.animArray[a]];
        this.addChild(e);
        e.delay = a;
        e.state = 0
    }
    this.active = true
}
;
canvas.app.casino.view.SuperGame.prototype.update = function() {
    var t = canvas.app.casino.model;
    var e, a, i, s, n, r = this.cards.length, o = t.cards.length;
    var l = o >= canvas.app.casino.Const.LINES_COUNT;
    if (l) {
        a = new Array;
        for (var c = 0; c < r; c++) {
            e = c % 5;
            if (!a[e])
                a[e] = [0, 1, 2];
            n = t.cards.indexOf(c);
            if (n >= 0) {
                a[e].splice(a[e].indexOf(t.cardTypes[n] - 1), 1)
            }
        }
    }
    for (var c = 0; c < r; c++) {
        s = this.cards[c];
        if (s.state == 3) {
            if (l) {
                s.light()
            }
            continue
        }
        e = c % 5;
        n = t.cards.indexOf(c);
        if (n >= 0) {
            s.result = t.cardTypes[n] - 1;
            s.state = 3;
            if (l) {
                s.light()
            }
        } else if (e < o) {
            if (l) {
                i = canvas.Functions.random(a[e].length);
                s.result = a[e][i];
                a[e].splice(i, 1);
                s.state = 5
            } else {
                s.state = 2
            }
        } else if (e == o) {
            s.state = 0
        } else {
            s.state = 1
        }
    }
}
;
canvas.app.casino.view.SuperGame.prototype.hide = function() {
    var t = this.animArray.length;
    var e;
    for (var a = 0; a < t; a++) {
        e = this.cards[this.animArray[a]];
        this.addChild(e);
        e.delay = a;
        e.state = 4
    }
    this.active = false
}
;
canvas.app.casino.view.BetStepper = function(t) {
    canvas.app.casino.view.LineStepper.call(this, t)
}
;
canvas.app.casino.view.BetStepper.prototype = Object.create(canvas.app.casino.view.LineStepper.prototype);
canvas.app.casino.view.BetStepper.prototype.update = function() {
    var t = canvas.app.casino.model;
    if (t.isGold) {
        this.field.gems = this.values[this.selectedIndex]
    } else {
        this.field.money = canvas.Functions.getMoney(this.values[this.selectedIndex])
    }
}
;
canvas.app.casino.view.BetStepper.prototype.createField = function() {
    var t = canvas.app.casino.model;
    this.field = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!t.isGold,this._width - 40,20,"center","top",false));
    this.field.position.set(20, 0)
}
;
canvas.app.casino.view.BetStepper.prototype.overHandler = function() {}
;
canvas.app.casino.view.BetStepper.prototype.outHandler = function() {}
;
canvas.app.diceGame.Const = {
    REQUEST_INIT: "Init",
    REQUEST_THROW: "Throw",
    REQUEST_THROW_SUPER: "ThrowSuper",
    REQUEST_OBJECT: "HeavensGift",
    DICE_COUNT: 5,
    PRICE_TYPE_SILVER: 1,
    PRICE_TYPE_BRILLIANT: 3
};
canvas.app.diceGame.Event = {
    ENTER_FRAME: "DiceGame.ENTER_FRAME",
    HINT_ADD: "DiceGame.HINT_ADD",
    HINT_REMOVE: "DiceGame.HINT_REMOVE",
    THROW_COMPLETE: "DiceGame.THROW_COMPLETE"
};
canvas.app.diceGame.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.view = new canvas.app.diceGame.View;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton2, this.play2ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.view.infoField, this.infoClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.THROW_COMPLETE, null, this.throwCompleteHandler, this)
}
;
canvas.app.diceGame.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.diceGame.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.diceGame.Main.prototype.requestCompleteHandler = function() {
    this.model.parse(JSON.parse(this.request.request.responseText)[canvas.app.diceGame.Const.REQUEST_OBJECT + "|" + this.request.type]);
    this.view.dicesAnim.start()
}
;
canvas.app.diceGame.Main.prototype.requestErrorHandler = function() {}
;
canvas.app.diceGame.Main.prototype.sendRequest = function(t) {
    var e = this.model.entryPoint + "?object=" + canvas.app.diceGame.Const.REQUEST_OBJECT + "&action=" + t + "&json_mode_on=1";
    this.request.type = t;
    this.request.load(e);
    this.view.lockButtons()
}
;
canvas.app.diceGame.Main.prototype.closeClickHandler = function() {
    closeHeavensGift()
}
;
canvas.app.diceGame.Main.prototype.infoClickHandler = function() {
    canvas.Functions.navigateToURL(canvas.Translator.getText(609), "_blank")
}
;
canvas.app.diceGame.Main.prototype.playClickHandler = function() {
    this.sendRequest(canvas.app.diceGame.Const.REQUEST_THROW)
}
;
canvas.app.diceGame.Main.prototype.play2ClickHandler = function() {
    this.sendRequest(canvas.app.diceGame.Const.REQUEST_THROW_SUPER)
}
;
canvas.app.diceGame.Main.prototype.throwCompleteHandler = function() {
    this.view.update()
}
;
canvas.app.diceGame.Model = function(t) {
    this.entryPoint = t.dice_game_controller_url ? t.dice_game_controller_url : canvas.Config.entryPoint
}
;
canvas.app.diceGame.Model.prototype.parse = function(t) {
    var e, a, i, s, n;
    if (t.state != undefined) {
        if (t.state.user_id != undefined)
            this.userID = t.state.user_id;
        if (t.state.today_game_cnt != undefined)
            this.gameIndex = parseInt(t.state.today_game_cnt);
        if (t.state.progress_super_game_cnt != undefined)
            this.superGameProgress = parseInt(t.state.progress_super_game_cnt);
        if (t.state.prize_num != undefined)
            this.selectedItemIndex = t.state.prize_num
    }
    if (t.progress_super_game_max != undefined)
        this.superGameMax = parseInt(t.progress_super_game_max);
    if (t.prize_list != undefined) {
        this.items = new Array;
        n = t.prize_list.length;
        for (s = 0; s < n; s++) {
            a = t.prize_list[s];
            i = new Object;
            i.id = a.artikul_id;
            i.image = a.picture;
            i.title = "Item" + i.id;
            this.items.push(i)
        }
    }
    if (t.butt != undefined || t.butt == null) {
        this.buttonEnabled = t.butt != null
    }
    if (t.butt_cost != undefined) {
        if (t.butt_cost.money != undefined) {
            this.buttonPrice = t.butt_cost.money
        }
        if (t.butt_cost.money_type != undefined) {
            this.buttonPriceType = parseInt(t.butt_cost.money_type)
        }
    }
    if (t.butt_super != undefined || t.butt_super == null) {
        this.button2Enabled = t.butt_super != null
    }
    if (t.dice_res != undefined) {
        this.dicesResult = t.dice_res;
        if (this.dicesResult != null) {
            this.dicesCount = this.dicesResult.length
        }
    }
}
;
canvas.app.diceGame.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.diceGame.model;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "back")));
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("diceGame", "main_window_close_base"),canvas.ResourceLoader.getImage("diceGame", "main_window_close_over"),canvas.ResourceLoader.getImage("diceGame", "main_window_close_down"),null));
    this.closeButton.position.set(422, 0);
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.HINT_ADD, null, {
        target: this.closeButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(608)))
    });
    var e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_15_BOLD_STROKE,16118721,this.width - 20,20,"center"));
    e.position.set(0, 6);
    e.text = canvas.Translator.getText(600);
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,270,22,"center"));
    e.position.set(91, 45);
    e.text = canvas.Translator.getText(601);
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,340,22,"center"));
    e.position.set(54, 132);
    e.text = canvas.Translator.getText(602);
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,340,22,"center"));
    e.position.set(54, 132);
    e.text = canvas.Translator.getText(602);
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,85,22,"center"));
    e.position.set(72, 219);
    e.text = canvas.Translator.getText(603);
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,103,22,"center"));
    e.position.set(260, 219);
    e.text = canvas.Translator.getText(604);
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7158283,394,90,"left"));
    this.infoField.position.set(26, 409);
    this.infoField.text = canvas.Translator.getText(605);
    var a, i = 28, s, n, r, o;
    this.dices = new Array;
    for (s = 0; s < canvas.app.diceGame.Const.DICE_COUNT; s++) {
        a = this.addChild(new canvas.app.diceGame.view.DiceItem(s < 4,s < 2 ? 1 : s < 4 ? 2 : 3));
        this.dices.push(a);
        a.position.set(i, 68);
        i += 45
    }
    this.progressor = this.addChild(new canvas.app.diceGame.view.ProgressView);
    this.progressor.position.set(33, 155);
    this.playButton = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,true));
    this.playButton.setSize(170);
    this.playButton.position.set(255, 75);
    this.playButton2 = this.addChild(new canvas.app.view.MainButton);
    this.playButton2.setSize(185);
    this.playButton2.position.set(240, 160);
    this.playButton2.setTitle(canvas.Translator.getText(606));
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,6));
    this.list.setSize(220, 150);
    this.list.position.set(206, 250);
    this.list._paddingV = this.list._paddingH = 2;
    for (s = 0; s < 24; s++) {
        o = new canvas.app.diceGame.view.ItemRenderer(s + 1);
        this.list.add(o, false);
        o.data = t.items[s]
    }
    this.list.update();
    this.dicesAnim = this.addChild(new canvas.app.diceGame.view.DicesAnim);
    this.dicesAnim.position.set(35, 250);
    this.update()
}
;
canvas.app.diceGame.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.View.prototype.update = function() {
    var t = canvas.app.diceGame.model;
    var e, a = this.list.items.length, i;
    for (i = 0; i < a; i++) {
        e = this.list.items[i];
        e.selector.visible = e.id == t.selectedItemIndex;
        if (e.selector.visible) {
            e.startFlicking(5)
        }
    }
    a = this.dices.length;
    for (i = 0; i < a; i++) {
        this.dices[i].selector.visible = t.gameIndex == i + 1
    }
    this.progressor.progress = t.superGameProgress / t.superGameMax;
    this.progressor.field.text = t.superGameProgress + "/" + t.superGameMax;
    if (parseFloat(t.buttonPrice) > 0) {
        this.playButton.setTitle(canvas.Translator.getText(607) + " " + parseFloat(t.buttonPrice).toString() + " <img src='" + (t.buttonPriceType == canvas.app.diceGame.Const.PRICE_TYPE_BRILLIANT ? "money_crystal" : "money_silver") + "' xOffset='0' yOffset='2' atlas='diceGame'/>")
    } else {
        this.playButton.setTitle(canvas.Translator.getText(606))
    }
    this.playButton.enabled = t.buttonEnabled;
    this.playButton2.enabled = t.button2Enabled
}
;
canvas.app.diceGame.View.prototype.lockButtons = function() {
    this.playButton.enabled = false;
    this.playButton2.enabled = false
}
;
canvas.app.diceGame.view.DiceItem = function(t, e) {
    canvas.px.Container.call(this);
    var a;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_back")));
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_selector")));
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice" + e)));
    this.selector.visible = false;
    if (t) {
        a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_arrow")));
        a.position.set(38, 15)
    }
}
;
canvas.app.diceGame.view.DiceItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.view.DicesAnim = function() {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container);
    this.DICE_SIZE = 35
}
;
canvas.app.diceGame.view.DicesAnim.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.view.DicesAnim.prototype.start = function() {
    var t = canvas.app.diceGame.model;
    this.dices = new Array;
    canvas.Functions.destroyChildren(this.container);
    this.cells = [new canvas.px.Rectangle(0,0,72 - this.DICE_SIZE,68 - this.DICE_SIZE), new canvas.px.Rectangle(72,0,72 - this.DICE_SIZE,68 - this.DICE_SIZE), new canvas.px.Rectangle(0,68,72 - this.DICE_SIZE,68 - this.DICE_SIZE), new canvas.px.Rectangle(72,68,72 - this.DICE_SIZE,68 - this.DICE_SIZE)];
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.index = t.dicesCount + 7;
    this.delayIndex = 0;
    this.animIndex = 0
}
;
canvas.app.diceGame.view.DicesAnim.prototype.throwDice = function(t) {
    var e = new canvas.px.MovieClip(canvas.Config.effectsPath + "dice" + t,null,false);
    e.frameEvent = canvas.app.diceGame.Event.ENTER_FRAME;
    var a = canvas.Functions.random(this.cells.length);
    var i = this.cells[a];
    this.cells.splice(a, 1);
    e.position.set(Math.round(e.width * .5 + i.x + Math.random() * i.width), Math.round(e.height * .5 + i.y + Math.random() * i.height));
    this.container.addChild(e);
    this.dices.push(e);
    e.scale.set(3, 3);
    e.gotoAndPlay(1)
}
;
canvas.app.diceGame.view.DicesAnim.prototype.frameHandler = function() {
    var t = canvas.app.diceGame.model;
    var e = this.dices.length, a;
    for (var i = 0; i < e; i++) {
        a = this.dices[i];
        if (a.scale.x > 1)
            a.scale.x -= .1;
        else
            a.scale.x = 1;
        if (a.scale.y > 1)
            a.scale.y -= .1;
        else
            a.scale.y = 1
    }
    if (this.index > 0) {
        if (this.delayIndex > 0) {
            this.delayIndex--
        } else {
            if (this.animIndex < t.dicesCount) {
                this.throwDice(t.dicesResult[this.animIndex++])
            }
            this.delayIndex = 10;
            this.index--
        }
    } else {
        this.finish()
    }
}
;
canvas.app.diceGame.view.DicesAnim.prototype.finish = function() {
    canvas.EventManager.removeEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.THROW_COMPLETE)
}
;
canvas.app.diceGame.view.ItemRenderer = function(t) {
    canvas.ui.ListRenderer.call(this);
    this.id = t;
    var e;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_back")));
    this.setSize(this.width, this.height);
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_selector")));
    this.selector.position.set(-1, -1);
    this.selector.visible = false;
    this.image = this.addChild(new canvas.ui.Image);
    this.image.position.set(2, 2);
    this.image.scale.set(.5, .5);
    e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_count")));
    e.position.set(16, 19);
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16765254,16,16,"center"));
    this.countField.position.set(17, 21);
    this.countField.text = this.id;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.interactive = true
}
;
canvas.app.diceGame.view.ItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.diceGame.view.ItemRenderer.prototype.update = function() {
    if (this.data) {
        this.image.setImage(this.data.image)
    }
}
;
canvas.app.diceGame.view.ItemRenderer.prototype.overHandler = function() {
    if (this.data) {
        canvas.app.diceGame.view.ItemRenderer.overedItem = this;
        _top().showAltInHeavensGift(this.data.id, 2)
    }
}
;
canvas.app.diceGame.view.ItemRenderer.prototype.outHandler = function() {
    if (this.data && canvas.app.diceGame.view.ItemRenderer.overedItem == this) {
        _top().showAltInHeavensGift(this.data.id, 0)
    }
}
;
canvas.app.diceGame.view.ItemRenderer.prototype.startFlicking = function() {
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.index = 5;
    this.direction = true;
    this.selector.visible = true;
    this.selector.alpha = 0
}
;
canvas.app.diceGame.view.ItemRenderer.prototype.frameHandler = function() {
    if (this.index > 0) {
        if (this.direction && this.selector.alpha >= 1) {
            this.index--;
            this.direction = false;
            return
        }
        this.selector.alpha += this.direction ? .2 : -.2;
        if (this.selector.alpha <= 0 && !this.direction)
            this.direction = true
    } else {
        canvas.EventManager.removeEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.diceGame.view.ProgressView = function(t, e) {
    canvas.ui.Progress.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_back")));
    var a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_full")));
    a.position.set(5, 11);
    this.sprite.position.set(5, 11);
    this.setSize(a.width, a.height);
    a.mask = this.sprite;
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_icon")));
    a.position.set(157, -4);
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,16511686,151,20,"center"));
    this.field.position.set(7, 15)
}
;
canvas.app.diceGame.view.ProgressView.prototype = Object.create(canvas.ui.Progress.prototype);
canvas.app.diceGame.view.ProgressView.prototype.update = function() {
    canvas.ui.Progress.prototype.update.call(this)
}
;
canvas.app.treasure.Const = {
    BASE_ROTATIONS: [90, -90, 0, -180, -90]
};
canvas.app.treasure.Event = {
    ENTER_FRAME: "Treasure.ENTER_FRAME",
    CRACK_GEMS_CONFIRM: "Treasure.CRACK_GEMS_CONFIRM"
};
canvas.app.treasure.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.model.halfWidth = Math.round(this.model.width * .5);
    this.view = new canvas.app.treasure.View;
    this.addChild(this.view);
    this.view.y = 6;
    this.windowsManager = new canvas.utils.WindowsManager;
    this.windowsContainer = this.addChild(new canvas.px.Container);
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackGemButton, this.crackGemClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackProfButton, this.crackProfClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.openButton, this.openClickHandler, this);
    var e = this.view.circles.length;
    for (var a = 0; a < e; a++) {
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.circles[a].getChildAt(0), this.clickHandler, this)
    }
    canvas.EventManager.addEventListener(canvas.app.treasure.Event.CRACK_GEMS_CONFIRM, null, this.crackGemConfirmHandler, this);
    this.view.circlesContainer.mouseover = this.overHandler.bind(this);
    this.view.circlesContainer.mouseout = this.outHandler.bind(this)
}
;
canvas.app.treasure.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.treasure.Main.prototype.closeClickHandler = function() {
    closePuzzle()
}
;
canvas.app.treasure.Main.prototype.crackGemClickHandler = function() {
    this.windowsManager.openWindow(this.view.confirmWin);
    this.view.confirmWin.init(canvas.Translator.getText(905), {
        name: canvas.app.treasure.Event.CRACK_GEMS_CONFIRM
    }, canvas.Translator.getText(900), canvas.Translator.getText(2019))
}
;
canvas.app.treasure.Main.prototype.crackProfClickHandler = function() {
    openPuzzle("breakopen")
}
;
canvas.app.treasure.Main.prototype.openClickHandler = function() {
    openPuzzle("solve", this.model.logTurns.join(","))
}
;
canvas.app.treasure.Main.prototype.crackGemConfirmHandler = function() {
    openPuzzle("purchase")
}
;
canvas.app.treasure.Main.prototype.overHandler = function(t) {
    this.view.circlesContainer.mousemove = this.moveHandler.bind(this);
    this.moveHandler(t)
}
;
canvas.app.treasure.Main.prototype.outHandler = function() {
    this.view.circlesContainer.mousemove = null;
    this.view.leftArrow.visible = this.view.rightArrow.visible = false
}
;
canvas.app.treasure.Main.prototype.moveHandler = function(t) {
    this.model.direction = t.data.global.x < this.model.halfWidth;
    this.view.leftArrow.visible = this.model.direction;
    this.view.rightArrow.visible = !this.model.direction
}
;
canvas.app.treasure.Main.prototype.clickHandler = function(t) {
    if (t.target.circleIndex != undefined) {
        var e = t.target.circleIndex - 1;
        var a = this.model.relationsMatrix[e];
        var i = this.view.circles.length;
        if (a != null) {
            this.model.puzzleComplete = true;
            for (var s = 0; s < i; s++) {
                if (a[s]) {
                    this.model.targetRotations[s] += this.model.direction ? 90 : -90
                }
                if (this.model.puzzleComplete && this.model.targetRotations[s] % 360 != 0)
                    this.model.puzzleComplete = false
            }
        }
        this.model.logTurns.push(this.model.direction ? e + 1 : -(e + 1));
        this.view.update()
    }
}
;
canvas.app.treasure.Main.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackGemButton, this.crackGemClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackProfButton, this.crackProfClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.openButton, this.openClickHandler, this);
    var t = this.view.circles.length;
    for (var e = 0; e < t; e++) {
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.circles[e].getChildAt(0), this.clickHandler, this)
    }
    canvas.EventManager.removeEventListener(canvas.app.treasure.Event.CRACK_GEMS_CONFIRM, null, this.crackGemConfirmHandler, this);
    this.view.circlesContainer.mouseover = null;
    this.view.circlesContainer.mouseout = null;
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.treasure.Model = function(t) {
    this.baseState = t.puzzle == undefined ? [1, 0, 2, 3, 1] : t.puzzle.split("-");
    this.maxTurns = t.steps == undefined ? 24 : parseInt(t.steps);
    this.canBreakOpen = t.can_breakopen == undefined ? 0 : parseFloat(t.can_breakopen);
    this.canPurchase = t.can_purchase == undefined ? 0 : parseFloat(t.can_purchase);
    var e = t.matrix == undefined ? "1010111101101011011110001" : parseInt(t.matrix).toString(2);
    this.relationsMatrix = new Array;
    this.logTurns = new Array;
    var a = new Array, i, s = e.length;
    for (i = 1; i <= s; i++) {
        a.push(e.charAt(i - 1) == "1");
        if (i % 5 == 0) {
            this.relationsMatrix.push(a);
            a = new Array
        }
    }
    this.targetRotations = [0, 0, 0, 0, 0];
    this.puzzleComplete = false
}
;
canvas.app.treasure.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.treasure.model;
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow;
    this.confirmWin.dragAvailable = false;
    this.circles = new Array;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "back")));
    this.leftArrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_left")));
    this.leftArrow.position.set(50, 165);
    this.leftArrow.visible = false;
    this.rightArrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_right")));
    this.rightArrow.position.set(515, 165);
    this.rightArrow.visible = false;
    this.circlesContainer = this.addChild(new canvas.px.Container);
    this.circlesContainer.interactive = true;
    var e, a, i, s;
    for (e = 1; e <= 5; e++) {
        s = this.circlesContainer.addChild(new canvas.px.Container);
        a = s.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("treasure", "circle" + e)));
        a.pivot = new canvas.px.Point(Math.round(a.width * .5),Math.round(a.height * .5));
        a.rotation = canvas.Functions.degToRad(canvas.app.treasure.Const.BASE_ROTATIONS[e - 1]);
        this.circles.push(s);
        s.position.set(306, 214);
        i = Math.round(a.width * .5);
        a.sprite.hitArea = new canvas.px.Circle(i,i,i);
        s.rotation = canvas.Functions.degToRad(90 * t.baseState[e - 1]);
        a.circleIndex = e;
        t.targetRotations[e - 1] = canvas.Functions.radToDeg(s.rotation)
    }
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_center")));
    a.position.set(282, -10);
    this.progressBar = this.addChild(new canvas.app.treasure.view.ProgressBar);
    this.progressBar.position.set(85, 391);
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("treasure", "cross_base"),canvas.ResourceLoader.getImage("treasure", "cross_over")));
    this.closeButton.position.set(524, 40);
    this.crackGemButton = this.addChild(new canvas.app.treasure.view.Button);
    this.crackGemButton.position.set(53, 433);
    this.crackProfButton = this.addChild(new canvas.app.treasure.view.Button);
    this.crackProfButton.position.set(218, 433);
    this.crackProfButton.field.y -= 10;
    this.openButton = this.addChild(new canvas.app.treasure.view.Button);
    this.openButton.setTitle(canvas.Translator.getText(901));
    this.openButton.position.set(384, 433);
    this.openButton.enabled = false;
    this.update()
}
;
canvas.app.treasure.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.treasure.View.prototype.update = function() {
    var t = canvas.app.treasure.model;
    this.crackGemButton.enabled = t.canPurchase > 0;
    this.crackGemButton.setTitle(canvas.Translator.getText(900) + (t.canPurchase == 0 ? "" : " " + t.canPurchase.toString()) + " <img src='money_crystal' xOffset='0' yOffset='3' atlas='treasure'/>");
    this.crackProfButton.enabled = t.canBreakOpen > 0;
    this.crackProfButton.setTitle(canvas.Translator.getText(900) + (t.canBreakOpen == 0 ? "" : " " + t.canBreakOpen.toString()) + " <img src='key' xOffset='0' yOffset='4' atlas='treasure'/>");
    this.progressBar.setTitle(canvas.Translator.getText(902) + ": " + t.logTurns.length + "/" + t.maxTurns);
    this.progressBar.progress = t.logTurns.length / t.maxTurns;
    if (t.puzzleComplete) {
        this.circlesContainer.interactiveChildren = false;
        this.openButton.enabled = true
    } else if (this.progressBar.progress == 1) {
        this.progressBar.setTitle(canvas.Translator.getText(903));
        this.circlesContainer.interactiveChildren = false
    }
    canvas.EventManager.addEventListener(canvas.app.treasure.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.treasure.View.prototype.frameHandler = function() {
    var t, e = this.circles.length, a, i, s;
    var n = canvas.app.treasure.model;
    var r = false;
    for (t = 0; t < e; t++) {
        a = this.circles[t];
        if (a != null) {
            i = canvas.Functions.degToRad(n.targetRotations[t]);
            if (a.rotation > i) {
                s = a.rotation - .05;
                if (s < i)
                    s = i;
                a.rotation = s;
                r = true
            } else if (a.rotation < i) {
                s = a.rotation + .05;
                if (s > i)
                    s = i;
                a.rotation = s;
                r = true
            }
        }
    }
    if (!r) {
        canvas.EventManager.removeEventListener(canvas.app.treasure.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.treasure.view.Button = function() {
    canvas.ui.Button.call(this, canvas.ResourceLoader.getImage("treasure", "button_base"), canvas.ResourceLoader.getImage("treasure", "button_over"), null, canvas.ResourceLoader.getImage("treasure", "button_disabled"));
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,15848845,151,20,"center"));
    this.field.position.set(10, 16);
    this.field.interactive = false
}
;
canvas.app.treasure.view.Button.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.treasure.view.Button.prototype.setTitle = function(t) {
    this.field.text = t
}
;
canvas.app.treasure.view.ProgressBar = function() {
    canvas.ui.Progress.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "progress_back")));
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "progress")));
    t.position.set(11, 8);
    this.sprite.position.set(t.x, t.y);
    this.setSize(t.width, t.height);
    t.mask = this.sprite;
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,15848845,this._width,20,"center"));
    this.field.position.set(t.x, 13)
}
;
canvas.app.treasure.view.ProgressBar.prototype = Object.create(canvas.ui.Progress.prototype);
canvas.app.treasure.view.ProgressBar.prototype.setTitle = function(t) {
    this.field.text = t
}
;
canvas.app.wheel.Const = {
    ROTATE_DELTA: 45,
    NUM_SECTORS: 8,
    OBJECT_NAME: "wheelfortune",
    REQUEST_INIT: "init",
    REQUEST_SPIN: "spin",
    REQUEST_NEWGAME: "new_game",
    REQUEST_USE: "use",
    REQUEST_RESET: "reset"
};
canvas.app.wheel.Event = {
    ENTER_FRAME: "Wheel.ENTER_FRAME",
    HINT_ADD: "Wheel.HINT_ADD",
    HINT_REMOVE: "Wheel.HINT_REMOVE",
    COMPLETE: "Wheel.COMPLETE",
    NEW_GAME: "Wheel.NEW_GAME",
    USE: "Wheel.USE"
};
canvas.app.wheel.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.view = this.addChild(new canvas.app.wheel.View);
    this.windowsManager = new canvas.utils.WindowsManager;
    this.windowsContainer = this.addChild(new canvas.px.Container);
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = this.addChild(new canvas.px.Container);
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.COMPLETE, null, this.wheelCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.NEW_GAME, null, this.newGameHandler, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.USE, null, this.useHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.button, this.buttonClickHandler, this);
    this.sendRequest(canvas.app.wheel.Const.REQUEST_INIT)
}
;
canvas.app.wheel.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.wheel.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.wheel.Main.prototype.resize = function() {
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view)
}
;
canvas.app.wheel.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            a = t[e];
            if (!canvas.Functions.testStatus(a)) {
                showError(a.error)
            }
            switch (e) {
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_INIT:
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_NEWGAME:
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_SPIN:
                this.parseData(a, e.split("|")[1]);
                break;
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_RESET:
                this.sendRequest(canvas.app.wheel.Const.REQUEST_INIT);
                break
            }
        }
    }
}
;
canvas.app.wheel.Main.prototype.parseData = function(t, e) {
    this.model.data = t;
    this.model.update();
    var a = t["error"];
    if (a) {
        switch (e) {
        case canvas.app.wheel.Const.REQUEST_SPIN:
            break
        }
        if (e != canvas.app.wheel.Const.REQUEST_NEWGAME)
            this.view.wheel.stopRotate({});
        return
    }
    this.view.wheel.stopRotate(t);
    this.view.timer.update(t);
    switch (e) {
    case canvas.app.wheel.Const.REQUEST_INIT:
        this.view.init();
        this.update(false);
        break;
    case canvas.app.wheel.Const.REQUEST_NEWGAME:
        this.update(false);
        break
    }
}
;
canvas.app.wheel.Main.prototype.requestCompleteHandler = function() {
    this.model.parse(JSON.parse(this.request.request.responseText)[canvas.app.wheel.Const.REQUEST_OBJECT + "|" + this.request.type])
}
;
canvas.app.wheel.Main.prototype.requestErrorHandler = function() {}
;
canvas.app.wheel.Main.prototype.sendRequest = function(t) {
    if (t != canvas.app.wheel.Const.REQUEST_NEWGAME && t != canvas.app.wheel.Const.REQUEST_USE)
        this.view.wheel.startRotate();
    wheelFortuneAction(t)
}
;
canvas.app.wheel.Main.prototype.wheelCompleteHandler = function() {
    this.update(true)
}
;
canvas.app.wheel.Main.prototype.update = function(t) {
    this.view.update(t)
}
;
canvas.app.wheel.Main.prototype.buttonClickHandler = function() {
    if (!this.view.button.buttonMode)
        return;
    this.sendRequest(canvas.app.wheel.Const.REQUEST_SPIN);
    this.view.button.enabled = false
}
;
canvas.app.wheel.Main.prototype.newGameHandler = function() {
    this.sendRequest(canvas.app.wheel.Const.REQUEST_NEWGAME)
}
;
canvas.app.wheel.Main.prototype.useHandler = function() {
    this.sendRequest(canvas.app.wheel.Const.REQUEST_USE)
}
;
canvas.app.wheel.Model = function(t) {
    this.urlInit = t["init_url"] ? t["init_url"] : "/mini_game_conf.php?mode=wheel_fortune&action=init";
    this.urlSpin = t["spin_url"] ? t["spin_url"] : "/mini_game_conf.php?mode=wheel_fortune&action=spin";
    this.urlNewGame = t["newgame_url"] ? t["newgame_url"] : "/mini_game_conf.php?mode=wheel_fortune&action=new_game";
    this.gamePrce = t.game_price ? parseInt(t.game_price) : 100;
    this.gamePriceUrl = t.game_price_url;
    this.maxPrize = parseInt(t["highest[WF_MAX_PRIZE]"]) || 0;
    this.maxUserPrize = parseInt(t["highest[WF_MAX_USER]"]) || 0
}
;
canvas.app.wheel.Model.prototype.update = function() {
    if (this.data["prize"] != undefined) {
        this.maxUserPrize = Math.max(parseInt(this.data["prize"]), this.maxUserPrize);
        this.maxPrize = Math.max(this.maxPrize, this.maxUserPrize)
    }
}
;
canvas.app.wheel.View = function() {
    canvas.px.Container.call(this);
    this.wheel = new canvas.app.wheel.view.WheelView;
    this.wheel.position.set(163, 163);
    this.button = new canvas.app.wheel.view.SpinButton;
    this.button.position.set(103, 103);
    this.infoView = new canvas.app.wheel.view.GameInfoView;
    this.timer = this.addChild(new canvas.app.wheel.view.TimerView)
}
;
canvas.app.wheel.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.View.prototype.init = function() {
    this.addChild(this.wheel);
    this.addChild(this.button);
    this.addChild(this.infoView);
    this.addChild(this.timer)
}
;
canvas.app.wheel.View.prototype.update = function(t) {
    var e = canvas.app.wheel.model;
    this.button.update(e.data);
    this.infoView.update(e.data, t)
}
;
canvas.app.wheel.view.GameInfoView = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.wheel.model;
    var e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_22_BOLD,5913896,300,35,"center"));
    e.position.set(310, 122);
    e.text = canvas.Translator.getText(1516);
    this.fieldContainer = this.addChild(new canvas.px.Container);
    this.fieldContainer.position.set(460, 170);
    this.field = this.fieldContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_40_BOLD,5913896,100,40,"center"));
    this.field.text = "0%";
    this.field.position.set(-50, -20);
    this.maxWinValue = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_CUPRUM_12_BOLD,canvas.Const.FONT_CUPRUM_12_BOLD,5913896,240,70,"center","middle"));
    this.maxWinValue.position.set(340, 50);
    this.maxDailyWinValue = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_CUPRUM_12_BOLD,canvas.Const.FONT_CUPRUM_12_BOLD,5913896,240,70,"center","middle"));
    this.maxDailyWinValue.position.set(340, 195);
    this.useBonus = this.addChild(new canvas.app.view.MainButton);
    this.useBonus.setSize(200);
    this.useBonus.setTitle(canvas.Translator.getText(1517));
    this.useBonus.position.set(361, 260);
    this.newGame = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,true));
    this.newGame.setSize(200);
    this.newGame.setTitle(canvas.Translator.getText(1518) + " " + t.gamePrce + " <img src='" + t.gamePriceUrl + "' xOffset='0' yOffset='2'/>");
    this.newGame.position.set(361, 295);
    this.window = new canvas.app.manor.view.controls.ConfirmWindow;
    this.window.dragAvailable = false;
    this.window.messageField.color = 10027008;
    this.window.init(canvas.Translator.getText(1519), {
        name: canvas.app.wheel.Event.NEW_GAME
    });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.useBonus, this.useBonusHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.newGame, this.newGameHandler, this)
}
;
canvas.app.wheel.view.GameInfoView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.GameInfoView.prototype.useBonusHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.USE)
}
;
canvas.app.wheel.view.GameInfoView.prototype.newGameHandler = function() {
    if (this.data["prize"] > 0) {
        canvas.utils.WindowsManager.instance.openWindow(this.window)
    } else {
        this.newGame.enabled = false;
        canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.NEW_GAME)
    }
}
;
canvas.app.wheel.view.GameInfoView.prototype.update = function(t, e) {
    var a = canvas.app.wheel.model;
    if (e == undefined)
        e = true;
    this.data = t;
    this.field.color = 5913896;
    if (e) {
        this.fieldContainer.scale.set(1.5, 1.5);
        canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.frameHandler, this)
    } else {
        this.field.text = this.data["prize"] + "%"
    }
    this.useBonus.visible = t["useButtonVisible"];
    this.useBonus.enabled = t["useButtonEnabled"];
    this.newGame.visible = t["newGameButtonVisible"];
    this.newGame.enabled = t["newGameButtonEnabled"];
    var i = parseInt(t["game_price"]);
    this.newGame.setTitle(canvas.Translator.getText(1518) + (i > 0 ? " " + i + " <img src='" + a.gamePriceUrl + "' xOffset='0' yOffset='2'/>" : ""));
    this.maxDailyWinValue.text = canvas.Translator.getText(1528) + ": <br/><font face='" + canvas.Const.FONT_CUPRUM_22_BOLD + "'>" + a.maxUserPrize + "%</font>";
    this.maxWinValue.text = canvas.Translator.getText(1527) + ": <br/><font face='" + canvas.Const.FONT_CUPRUM_22_BOLD + "'>" + a.maxPrize + "%</font>"
}
;
canvas.app.wheel.view.GameInfoView.prototype.frameHandler = function() {
    var t;
    if (this.fieldContainer.scale.x > 1) {
        t = this.fieldContainer.scale.x - .05;
        if (t <= 1) {
            t = 1
        }
        this.fieldContainer.scale.set(t, t);
        if (t <= 1.4 && t >= 1.3 && this.field.color != 12532224) {
            this.field.text = this.data.prize + "%";
            this.field.color = 12532224
        }
    } else {
        this.field.color = 5913896;
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.wheel.view.PlayAddBonus = function() {
    canvas.px.MovieClip.call(this, canvas.Config.effectsPath + "wheel_bonus");
    this.stop();
    this.frameEvent = canvas.app.wheel.Event.ENTER_FRAME;
    this.removeIfExist(this.container);
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN,16774656,53,32,"center","middle");
    this.field.position.set(15, 25)
}
;
canvas.app.wheel.view.PlayAddBonus.prototype = Object.create(canvas.px.MovieClip.prototype);
canvas.app.wheel.view.PlayAddBonus.prototype.stop = function() {
    canvas.px.MovieClip.prototype.stop.call(this);
    this.removeIfExist(this.container)
}
;
canvas.app.wheel.view.PlayAddBonus.prototype.render = function() {
    canvas.px.MovieClip.prototype.render.call(this);
    if (this.currentFrame == 2) {
        this.addChild(this.container)
    }
    if (this.field && !this.field.parent) {
        var t = this.container.getChildByName("im_0001");
        if (t) {
            t.addChild(this.field)
        }
    }
}
;
canvas.app.wheel.view.PlayAddBonus.prototype.start = function(t) {
    this.gotoAndPlay(1);
    this.field.text = t["value"] + "%"
}
;
canvas.app.wheel.view.SpinButton = function() {
    this._hintEnabled = true;
    Object.defineProperty(this, "hintEnabled", {
        get: function() {
            return this._hintEnabled
        },
        set: function(t) {
            this._hintEnabled = t;
            this.enabled = this._enabled
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("wheel", "play_button_empty"));
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this.field.font = canvas.Const.FONT_CUPRUM_22_BOLD_STROKE;
            this.field.text = canvas.Translator.getText(1521);
            if (this.isGameOver)
                return;
            this._enabled = t;
            this.buttonMode = t;
            if (this.isOver) {
                this.handlerOver()
            } else {
                this.handlerOut()
            }
            this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("wheel", t ? "play_button_empty" : "play_button_disabled_empty");
            this.field.font = canvas.Const.FONT_CUPRUM_34_BOLD_STROKE;
            this.field.text = canvas.Translator.getText(1522);
            if (this._enabled) {
                canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.HINT_REMOVE, null, {
                    target: this
                })
            } else {
                if (this.hintEnabled) {
                    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.HINT_ADD, null, {
                        target: this,
                        params: new canvas.utils.HintParams(this.hint)
                    })
                }
            }
        }
    });
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_22_BOLD_STROKE,16777215,110,100,"center","middle"));
    this.field.position.set(7, 10);
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(1526));
    this.isGameOver = false
}
;
canvas.app.wheel.view.SpinButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.wheel.view.SpinButton.prototype.handlerOver = function(t) {
    this.isOver = true;
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
;
canvas.app.wheel.view.SpinButton.prototype.handlerOut = function(t) {
    this.isOver = false;
    this.filters = null
}
;
canvas.app.wheel.view.SpinButton.prototype.gameOver = function(t) {
    this.isGameOver = t;
    if (t) {
        this.buttonMode = false;
        this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("wheel", "play_button_disabled_empty");
        this.field.font = canvas.Const.FONT_CUPRUM_22_BOLD_STROKE;
        this.field.text = canvas.Translator.getText(1521)
    } else {
        this.field.font = canvas.Const.FONT_CUPRUM_34_BOLD_STROKE;
        this.field.text = canvas.Translator.getText(1522)
    }
}
;
canvas.app.wheel.view.SpinButton.prototype.update = function(t) {
    this.gameOver(t["game_over"]);
    this.enabled = t["spinButtonEnabled"];
    this.hintEnabled = t["hintEnabled"]
}
;
canvas.app.wheel.view.TimerView = function() {
    canvas.px.Container.call(this);
    this.position.set(300, 15);
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_16_BOLD,5913896,290,30,"center")
}
;
canvas.app.wheel.view.TimerView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.TimerView.prototype.timerHandler = function() {
    this.timeLeft = this.timeEnd - Date.now() / 1e3;
    this.leftH = Math.floor(this.timeLeft / 3600);
    this.timeLeft -= this.leftH * 3600;
    this.leftM = Math.floor(this.timeLeft / 60);
    this.timeLeft -= this.leftM * 60;
    this.leftS = Math.floor(this.timeLeft);
    this.field.text = canvas.Translator.getText(1520) + " " + this.timeToStr(this.leftH) + ":" + this.timeToStr(this.leftM) + ":" + this.timeToStr(this.leftS)
}
;
canvas.app.wheel.view.TimerView.prototype.timeToStr = function(t) {
    var e = "00" + t;
    return e.slice(e.length - 2)
}
;
canvas.app.wheel.view.TimerView.prototype.update = function(t) {
    this.timeEnd = Date.now() / 1e3 + t["time_end"] - t["time"];
    if (this.timeEnd < 0)
        this.timeEnd = 0;
    if (this.timeEnd) {
        this.addChild(this.field);
        if (this.timer)
            clearInterval(this.timer);
        this.timer = setInterval(this.timerHandler.bind(this), 500)
    } else {
        this.removeIfExist(this.field);
        if (this.timer)
            clearInterval(this.timer)
    }
}
;
canvas.app.wheel.view.WheelItem = function(t) {
    canvas.px.Container.call(this);
    this.index = t;
    this.image = this.addChild(new canvas.px.Sprite);
    this.image.position.set(-33, -33);
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN,16774656,53,32,"center");
    this.field.position.set(-26, -14)
}
;
canvas.app.wheel.view.WheelItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.WheelItem.prototype.update = function(t) {
    this.data = t ? t : {};
    var e = this.data["mode"] ? this.data["mode"] : "empty";
    this.image.texture = canvas.ResourceLoader.getImage("wheel", "bonus_" + e);
    if (e == "plus") {
        this.field.text = this.data["value"] + "%";
        this.addChild(this.field)
    } else {
        this.removeIfExist(this.field)
    }
}
;
canvas.app.wheel.view.WheelView = function() {
    canvas.px.Container.call(this);
    this.rotateCont = this.addChild(new canvas.px.Container);
    var t = this.rotateCont.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("wheel", "wheel_back")));
    t.position.set(-Math.round(t.width * .5), -Math.round(t.height * .5));
    this.rotate = 0;
    this.items = [];
    var e, a, i = Math.PI * 2 / canvas.app.wheel.Const.NUM_SECTORS;
    for (e = 0; e < canvas.app.wheel.Const.NUM_SECTORS; e++) {
        a = new canvas.app.wheel.view.WheelItem(e);
        this.items.push(a);
        a.update({
            mode: "empty"
        });
        this.rotateCont.addChild(a);
        a.position.set(116 * Math.cos(i * e), 116 * Math.sin(i * e))
    }
    this.playAdd = this.addChild(new canvas.app.wheel.view.PlayAddBonus);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.playAdd, this.playAddCompleteHandler, this)
}
;
canvas.app.wheel.view.WheelView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.WheelView.prototype.playAddCompleteHandler = function() {
    this.dropComplete()
}
;
canvas.app.wheel.view.WheelView.prototype.dropComplete = function() {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.COMPLETE, null, this.data)
}
;
canvas.app.wheel.view.WheelView.prototype.applyRotate = function() {
    this.rotateCont.rotation = canvas.Functions.degToRad(this.rotate);
    var t, e;
    for (t = 0; t < canvas.app.wheel.Const.NUM_SECTORS; t++) {
        e = this.items[t];
        e.rotation = -canvas.Functions.degToRad(this.rotate)
    }
}
;
canvas.app.wheel.view.WheelView.prototype.startFrameHandler = function() {
    if (this.speed < 20) {
        this.speed += 1
    }
    this.rotate += this.speed;
    this.applyRotate()
}
;
canvas.app.wheel.view.WheelView.prototype.stopFrameHandler = function() {
    this.rotate += (this.endRotate - this.rotate) * .2;
    if (Math.abs(this.rotate - this.endRotate) < 1 && !this.aplayedBonus) {
        this.applyBonuses()
    }
    if (Math.abs(this.rotate - this.endRotate) < .1) {
        this.rotate = this.endRotate;
        this.rotate -= Math.floor(this.rotate / 360) * 360;
        this.endRotate = this.rotate;
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this)
    }
    this.applyRotate()
}
;
canvas.app.wheel.view.WheelView.prototype.startRotate = function() {
    this.speed = 1;
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this)
}
;
canvas.app.wheel.view.WheelView.prototype.stopRotate = function(t) {
    this.oldData = this.data;
    this.data = t;
    this.aplayedBonus = false;
    if (t["cur_sector"] || 1) {
        var e = t["cur_sector"] ? t["cur_sector"] : 0;
        this.endRotate = Math.ceil(this.rotate / 360) * 360 + 360 * 3 - canvas.app.wheel.Const.ROTATE_DELTA * e;
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this);
        canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this)
    } else {
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this);
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this);
        this.rotate = 0;
        this.applyRotate();
        this.applyBonuses()
    }
}
;
canvas.app.wheel.view.WheelView.prototype.applyBonuses = function() {
    this.aplayedBonus = true;
    var t = this.data["sectors"];
    if (!t)
        return;
    if (this.data.hasOwnProperty("cur_sector")) {
        this.bonusData = this.oldData["sectors"][this.data["cur_sector"]];
        if (this.bonusData["mode"] == "plus") {
            this.playAdd.start(this.bonusData)
        } else {
            this.dropComplete()
        }
    } else {
        this.bonusData = null;
        this.dropComplete()
    }
    if (this.data["game_over"] && this.data["spin_cnt"] > 0)
        return;
    var e, a;
    for (e = 0; e < canvas.app.wheel.Const.NUM_SECTORS; e++) {
        a = t[e];
        this.items[e].update(a)
    }
}
;
canvas.app.mirror.Const = {
    OBJECT_NAME: "magic_mirror",
    REQUEST_CONF: "conf",
    REQUEST_PLAY: "play",
    REQUEST_SUBMIT: "submit"
};
canvas.app.mirror.Event = {
    ENTER_FRAME: "Mirror.ENTER_FRAME",
    HINT_ADD: "Mirror.HINT_ADD",
    HINT_REMOVE: "Mirror.HINT_REMOVE",
    SELECT_MIRROR: "Mirror.SELECT_MIRROR"
};
canvas.app.mirror.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.view = new canvas.app.mirror.View;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.windowsManager = new canvas.utils.WindowsManager;
    this.windowsContainer = this.addChild(new canvas.px.Container);
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.questionButton, this.questionClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.SELECT_MIRROR, null, this.selectMirrorHandler, this);
    this.sendRequest(canvas.app.mirror.Const.REQUEST_CONF);
    this.timer10 = 0;
    this.timer = setInterval(this.timerHandler.bind(this), 1e3)
}
;
canvas.app.mirror.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.mirror.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.mirror.Main.prototype.requestCompleteHandler = function() {
    this.model.parseConf(JSON.parse(this.request.request.responseText), this.request.type);
    if (this.model.status != 100) {
        this.view.messageWindow.init(this.model.error == "" ? canvas.Translator.getText(426) : this.model.error);
        this.windowsManager.openWindow(this.view.messageWindow);
        return
    }
    this.view.update();
    var t, e, a, i;
    switch (this.request.type) {
    case canvas.app.mirror.Const.REQUEST_CONF:
        if (this.model.gameData.active) {
            i = this.model.localStorage.get("turns");
            if (i) {
                t = i.split(",");
                a = t.length;
                for (e = 0; e < a; e++) {
                    this.view.mirrors.items[parseInt(t[e])].handlerUp()
                }
            }
        }
        break;
    case canvas.app.mirror.Const.REQUEST_PLAY:
        this.model.gameData.currentPrizeIndex = -1;
        this.view.reset();
        this.view.finishAnimation();
        break;
    case canvas.app.mirror.Const.REQUEST_SUBMIT:
        this.view.startAnimation();
        this.model.turnsHistory = "";
        break
    }
}
;
canvas.app.mirror.Main.prototype.requestErrorHandler = function() {}
;
canvas.app.mirror.Main.prototype.sendRequest = function(t) {
    var e = "entry_point.php?object=" + canvas.app.mirror.Const.OBJECT_NAME + "&action=" + t + "&json_mode_on=1";
    this.request.type = t;
    this.request.load(e)
}
;
canvas.app.mirror.Main.prototype.closeClickHandler = function() {
    this.click();
    _top().closeMagicMirror()
}
;
canvas.app.mirror.Main.prototype.questionClickHandler = function() {
    this.click();
    canvas.Functions.navigateToURL(canvas.Translator.getText(1407), "_blank")
}
;
canvas.app.mirror.Main.prototype.playClickHandler = function() {
    this.click();
    if (!this.model.gameData.active && this.model.money >= this.model.gameData.price) {
        this.view.playButton.enabled = false;
        this.sendRequest(canvas.app.mirror.Const.REQUEST_PLAY)
    }
}
;
canvas.app.mirror.Main.prototype.selectMirrorHandler = function(t) {
    this.click();
    this.view.mirrors.openNext(parseInt(t.params));
    this.model.turnsHistory = this.model.turnsHistory + (this.model.turnsHistory == "" ? "" : ",") + t.params;
    this.model.calcPoints(this.view.mirrors.step);
    this.view.currentPoints.update();
    this.model.calcCurrentPrize();
    this.view.selectCurrentPrize();
    if (this.view.mirrors.step >= 3) {
        this.view.mirrors.interactiveChildren = false;
        this.sendRequest(canvas.app.mirror.Const.REQUEST_SUBMIT)
    }
}
;
canvas.app.mirror.Main.prototype.click = function() {
    this.view.playButton.blicking.stop();
    this.timer10 = 0
}
;
canvas.app.mirror.Main.prototype.timerHandler = function() {
    this.timer10++;
    if (this.timer10 > 10) {
        this.timer10 = 0;
        if (this.model.gameData.active) {
            this.view.mirrors.blicking.start(1)
        } else {
            this.view.playButton.blicking.start(1)
        }
    }
    if (this.timer10 > 5) {
        this.view.finishAnimation()
    }
    if (this.model.serverTime.getTime() >= this.model.gameData.finishTime) {
        this.closeClickHandler()
    }
}
;
canvas.app.mirror.Main.prototype.destroy = function() {
    this.view.destroy();
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.questionButton, this.questionClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.SELECT_MIRROR, null, this.selectMirrorHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }]);
    clearInterval(this.timer)
}
;
canvas.app.mirror.Model = function(t) {
    this._turnsHistory = "";
    Object.defineProperty(this, "turnsHistory", {
        get: function() {
            return this._turnsHistory
        },
        set: function(t) {
            this._turnsHistory = t;
            this.localStorage.set("turns", t)
        }
    });
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MIRROR);
    this.serverTime = new canvas.utils.ServerTime;
    this.serverRandomizer = new canvas.utils.ServerRandomizer;
    this.gameData = new Object;
    this.gameData.prizePool = new Array;
    this.gameData.active = false;
    this.gameData.firstGame = true;
    this.gameData.price = 100
}
;
canvas.app.mirror.Model.prototype.parseConf = function(t, e) {
    if (e == undefined)
        e = "conf";
    this.serverTime.init(t.state.server_time);
    this.money = parseFloat(t.state.money);
    var a = t[canvas.app.mirror.Const.OBJECT_NAME + "|" + canvas.app.mirror.Const.REQUEST_CONF];
    this.status = a.status;
    this.error = a.error ? a.error : "";
    this.gameData.luck = a.luck;
    this.gameData.total = a.total;
    this.gameData.superGame = a["super"];
    this.gameData.max_luck = a.max_luck;
    this.gameData.finishTime = a.ftime;
    this.gameData.price = a.price ? parseFloat(a.price) : 100;
    this.gameData.guaranteedPrizes = new Array;
    var i;
    var s;
    var n;
    var r;
    for (n in a.guaranteed_prizes) {
        i = a.guaranteed_prizes[n];
        s = new Object;
        s.count = parseInt(i.total_score);
        s.itemCount = parseInt(i.artikul_cnt);
        s.title = i.title;
        s.image = i.picture;
        s.articulID = i.artikul_id;
        s.luck = parseInt(i.luck);
        s.points = parseInt(i.points);
        this.gameData.guaranteedPrizes.push(s)
    }
    this.gameData.guaranteedPrizes.sort(function(t, e) {
        return t.count - e.count
    });
    if (a.prize_pool) {
        this.gameData.prizePool = new Array;
        for (n in a.prize_pool) {
            i = a.prize_pool[n];
            s = new Object;
            s.count = parseInt(n);
            s.itemCount = parseInt(i.artikul_cnt);
            s.title = i.title;
            s.image = i.picture;
            s.articulID = i.artikul_id;
            s.luck = parseInt(i.luck);
            s.points = parseInt(i.points);
            this.gameData.prizePool.push(s)
        }
        this.gameData.prizePool.sort(function(t, e) {
            return t.count - e.count
        })
    }
    this.gameData.step = 0;
    this.gameData.active = a.active;
    this.serverRandomizer.init(parseInt(a.seed), 48271, 0, (1 << 30) * 2 - 1);
    this.gameData.mirrors = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5, 5, 5];
    if (this.gameData.active) {
        this.gameData.mirrors = this.serverRandomizer.lcgShuffle(this.gameData.mirrors)
    }
}
;
canvas.app.mirror.Model.prototype.calcPoints = function(t) {
    var e = 0, a;
    for (a = 0; a < t; a++) {
        e += this.gameData.mirrors[a]
    }
    this.gameData.points = e
}
;
canvas.app.mirror.Model.prototype.calcCurrentPrize = function() {
    var t, e = 0, a = 0, i = this.gameData.prizePool.length;
    for (a = 0; a < i; a++) {
        t = this.gameData.prizePool[a];
        if (t.count <= this.gameData.points && t.count > e) {
            e = t.count;
            this.gameData.currentPrizeIndex = a
        }
    }
}
;
canvas.app.mirror.Model.prototype.calcGuaranteedPrize = function() {
    var t;
    var e = 0;
    var a = 0;
    var i = -1;
    var s = this.gameData.guaranteedPrizes.length;
    for (a = 0; a < s; a++) {
        t = this.gameData.guaranteedPrizes[a];
        if (t.count <= this.gameData.total && t.count > e) {
            e = t.count;
            i = a
        }
    }
    return i
}
;
canvas.app.mirror.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.mirror.model;
    var e, a, i, s;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "back")));
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("mirror", "main_window_close_base"),canvas.ResourceLoader.getImage("mirror", "main_window_close_over"),canvas.ResourceLoader.getImage("mirror", "main_window_close_down"),null));
    this.closeButton.position.set(497, -2);
    this.questionButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("mirror", "button_question"),canvas.ResourceLoader.getImage("mirror", "button_question_over"),canvas.ResourceLoader.getImage("mirror", "button_question_down"),canvas.ResourceLoader.getImage("mirror", "button_question_disabled")));
    this.questionButton.position.set(450, 27);
    this.questionButton.sprite.hitArea = new canvas.px.Circle(34,19,16);
    this.headerField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_15_BOLD_STROKE,16118721,this.width - 20,20,"center"));
    this.headerField.text = canvas.Translator.getText(1400);
    this.headerField.y = 6;
    this.titleField1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7158283,300,40,"center"));
    this.titleField1.text = canvas.Translator.getText(1401);
    this.titleField1.position.set(116, 46);
    this.titleField2 = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12,7158283,230,40,"center"));
    this.titleField2.text = canvas.Translator.getText(1404);
    this.titleField2.position.set(255, 305);
    this.titleField3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,60,40,"center"));
    this.titleField3.text = canvas.Translator.getText(1405);
    this.titleField3.position.set(65, 364);
    this.titleField3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,220,40,"center"));
    this.titleField3.text = canvas.Translator.getText(1406);
    this.titleField3.position.set(157, 426);
    this.currentPoints = this.addChild(new canvas.app.mirror.view.CurrentPoints);
    this.currentPoints.position.set(423, 60);
    this.topItems = new Array;
    for (e = 0; e < 5; e++) {
        a = this.addChild(new canvas.app.mirror.view.ItemBig);
        a.position.set(48 + 77 * e, 78);
        this.topItems.push(a)
    }
    this.bottomContainer = this.addChild(new canvas.px.Container);
    this.bottomContainerBlicking = new canvas.app.mirror.view.Blicking(this.bottomContainer,16777215,40,3);
    this.bottomItems = new Array;
    for (e = 0; e < 8; e++) {
        i = new canvas.app.mirror.view.ItemSmall;
        this.bottomContainer.addChild(i);
        i.position.set(100 + 50 * e, 456);
        if (e < 7) {
            s = this.bottomContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "arrow")));
            s.position.set(i.x + 38, i.y + 7)
        }
        this.bottomItems.push(i)
    }
    this.mirrors = this.addChild(new canvas.app.mirror.view.Mirrors);
    this.mirrors.position.set(14 - this.mirrors.container.x, 152 - this.mirrors.container.y);
    this.playButton = this.addChild(new canvas.app.view.MainButton);
    this.playButton.setSize(170);
    this.playButton.enabled = false;
    this.playButton.position.set(40 + Math.round((240 - this.playButton._width) * .5), 302);
    this.playButton.blicking = new canvas.app.mirror.view.Blicking(this.playButton,16777215,40,2);
    this.coins = this.addChild(new canvas.app.view.Money(16375713,canvas.Const.FONT_TAHOMA_11_BOLD,null,null,null,null,null,false));
    this.coins.interactiveChildren = false;
    this.luckProgress = this.addChild(new canvas.app.mirror.view.LuckProgress);
    this.luckProgress.position.set(158, 354);
    this.luckProgress.interactive = true;
    this.prizeIcon = this.bottomContainer.addChild(new canvas.app.mirror.view.PrizeIcon);
    this.prizeIcon.position.set(43, 453);
    this.prizeIcon.interactive = true;
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow;
    this.messageWindow.dragAvailable = false;
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.prizeIcon,
        params: new canvas.utils.HintParams(new canvas.app.view.BigHint("",canvas.Translator.getText(1409)),true,canvas.utils.HintPos.RIGHT_TOP)
    });
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.luckProgress,
        params: new canvas.utils.HintParams(new canvas.app.view.BigHint("",canvas.Translator.getText(1408)),true)
    });
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.mirror.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.View.prototype.update = function() {
    var t = canvas.app.mirror.model;
    if (!t.gameData.active && t.gameData.firstGame) {
        this.playButton.blicking.start(1)
    }
    this.coins.money = t.gameData.price * 100;
    this.playButton.setSize(130 + this.coins.width);
    if (this.playButton._width < 170)
        this.playButton.setSize(170);
    this.playButton.setTitle(canvas.Translator.getText(1403));
    this.coins.position.set(this.playButton.x + this.playButton._width - this.coins.width - 34, this.playButton.y + 9);
    this.playButton.field.x = 23 - Math.round(this.coins.width * .5);
    this.playButton.enabled = !t.gameData.active && t.money >= t.gameData.price;
    this.mirrors.interactiveChildren = t.gameData.active;
    var e;
    var a = this.bottomItems.length;
    var i;
    for (i = 0; i < a; i++) {
        this.bottomItems[i].data = t.gameData.guaranteedPrizes[i]
    }
    a = this.topItems.length;
    for (i = 0; i < a; i++) {
        this.topItems[i].data = t.gameData.prizePool[i]
    }
    this.luckProgress.progress = Math.round(t.gameData.luck / t.gameData.max_luck * 100);
    this.luckProgress.progressField.text = t.gameData.luck.toString();
    this.prizeIcon.field.text = t.gameData.total.toString();
    if (t.gameData.active && this.mirrors.step < t.gameData.step) {
        for (i = 0; i < t.gameData.step - this.mirrors.step; i++) {
            this.mirrors.openNext(i)
        }
    }
    this.selectGuaranteedPrize()
}
;
canvas.app.mirror.View.prototype.frameHandler = function() {
    this.luckProgress.frameUpdate();
    this.mirrors.frameUpdate()
}
;
canvas.app.mirror.View.prototype.reset = function() {
    var t = canvas.app.mirror.model;
    this.mirrors.reset();
    this.selectCurrentPrize();
    this.currentPoints.pointsField.text = "0";
    t.turnsHistory = ""
}
;
canvas.app.mirror.View.prototype.selectCurrentPrize = function() {
    var t = canvas.app.mirror.model;
    var e, a, i = this.topItems.length;
    for (a = 0; a < i; a++) {
        this.topItems[a].selected = false
    }
    e = this.topItems[t.gameData.currentPrizeIndex];
    if (e)
        e.selected = true
}
;
canvas.app.mirror.View.prototype.selectGuaranteedPrize = function() {
    var t = canvas.app.mirror.model;
    var e = t.calcGuaranteedPrize();
    var a, i, s = this.bottomItems.length;
    for (i = 0; i < s; i++) {
        this.bottomItems[i].selected = false
    }
    a = this.bottomItems[e];
    if (a)
        a.selected = true
}
;
canvas.app.mirror.View.prototype.startAnimation = function() {
    var t = canvas.app.mirror.model;
    var e = this.topItems[t.gameData.currentPrizeIndex];
    if (e)
        e.blicking.start(1);
    this.luckProgress.blicking.start(1);
    this.bottomContainerBlicking.start(1)
}
;
canvas.app.mirror.View.prototype.finishAnimation = function() {
    var t, e = this.topItems.length;
    for (t = 0; t < e; t++) {
        this.topItems[t].blicking.stop()
    }
    this.luckProgress.blicking.stop();
    this.bottomContainerBlicking.stop()
}
;
canvas.app.mirror.View.prototype.destroy = function() {
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
        target: this.prizeIcon
    });
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
        target: this.luckProgress
    });
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }])
}
;
canvas.app.mirror.view.Blicking = function(t, e, a, i, s) {
    this.view = t;
    this.color = e ? e : 0;
    this.frequency = a == undefined ? 70 : a;
    this.step = i == undefined ? 3 : i;
    this.frameEvent = s == undefined ? canvas.app.mirror.Event.ENTER_FRAME : s;
    this.n = 1
}
;
canvas.app.mirror.view.Blicking.prototype.start = function(t) {
    if (t == undefined)
        t = -1;
    this.count = t - 1;
    canvas.EventManager.addEventListener(this.frameEvent, null, this.frameHandler, this);
    this.blur = 1;
    if (this.view)
        this.view.filters = [canvas.Functions.getGlow(10, 0, 1.8, this.color, .1)]
}
;
canvas.app.mirror.view.Blicking.prototype.stop = function() {
    this.n = 1;
    canvas.EventManager.removeEventListener(this.frameEvent, null, this.frameHandler, this);
    if (this.view)
        this.view.filters = []
}
;
canvas.app.mirror.view.Blicking.prototype.frameHandler = function() {
    this.blur += this.n;
    if (this.blur >= this.frequency) {
        this.n = -this.step
    } else if (this.blur <= 8) {
        if (this.n < 0) {
            if (this.count > 0) {
                this.count--
            } else if (this.count == 0) {
                this.stop();
                return
            }
        }
        this.n = this.step
    }
    if (this.view)
        this.view.filters = [canvas.Functions.getGlow(10, 0, this.blur * .1, this.color, .1)]
}
;
canvas.app.mirror.view.CurrentPoints = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "points_back")));
    var t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,7158283,60,40,"center"));
    t.text = canvas.Translator.getText(1402);
    t.position.set(10, 63);
    this.pointsField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT,undefined,60,40,"center"));
    this.pointsField.position.set(8, 17);
    this.pointsField.text = "0"
}
;
canvas.app.mirror.view.CurrentPoints.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.view.CurrentPoints.prototype.update = function() {
    var t = canvas.app.mirror.model;
    this.pointsField.text = t.gameData.points || 0
}
;
canvas.app.mirror.view.ItemBig = function() {
    canvas.ui.ListRenderer.call(this);
    var t;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_back")));
    this.image = this.addChild(new canvas.ui.Image);
    this.image.position.set(4, 4);
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_selector"));
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_count_back")));
    t.position.set(43, 43);
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_18,16765254,30,20,"center"));
    this.countField.position.set(43, 47);
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "gradient")));
    t.position.set(43, 43);
    this.blicking = new canvas.app.mirror.view.Blicking(this,16777215,40,3);
    this.hint = new canvas.app.view.MappingHint;
    this.image.buttonMode = true;
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.mirror.view.ItemBig.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.mirror.view.ItemBig.prototype.update = function() {
    if (!this.data) {
        this.countField.text = "?";
        canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
            target: this.image
        });
        this.interactive = false;
        return
    }
    this.interactive = true;
    this.image.setImage(this.data.image);
    this.countField.text = this.data.count;
    this.hint.update(this.data.title + (this.data.itemCount > 1 ? " x" + this.data.itemCount : ""));
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.image,
        params: new canvas.utils.HintParams(this.hint,true)
    })
}
;
canvas.app.mirror.view.ItemBig.prototype.updateSelection = function() {
    if (this.selected) {
        this.addChildAt(this.selector, this.getChildIndex(this.countField) - 1)
    } else {
        this.removeIfExist(this.selector)
    }
}
;
canvas.app.mirror.view.ItemBig.prototype.clickHandler = function() {
    canvas.Functions.navigateToURL("/artifact_info.php?artikul_id=" + this.data.articulID, "_blank")
}
;
canvas.app.mirror.view.ItemMirror = function() {
    this._points = 0;
    Object.defineProperty(this, "points", {
        get: function() {
            return this._points
        },
        set: function(t) {
            this._points = t;
            this.interactive = this.interactiveChildren = false;
            switch (this._points) {
            case 1:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_blue");
                break;
            case 2:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_green");
                break;
            case 5:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_red");
                break;
            default:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_back");
                this.interactive = this.interactiveChildren = true
            }
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty);
    this.points = 0;
    this.hitArea = new canvas.px.Circle(34,44,30)
}
;
canvas.app.mirror.view.ItemMirror.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.mirror.view.ItemMirror.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t);
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.SELECT_MIRROR, null, this.name)
}
;
canvas.app.mirror.view.ItemSmall = function() {
    canvas.ui.ListRenderer.call(this);
    var t;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_back")));
    this.image = this.addChild(new canvas.ui.Image);
    this.image.position.set(2, 2);
    this.image.scale.set(.5, .5);
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_selector"));
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_count_back")));
    t.position.set(2, 27);
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16765254,30,20,"center"));
    this.countField.position.set(1, 31);
    this.hint = new canvas.app.view.MappingHint;
    this.image.buttonMode = true;
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.mirror.view.ItemSmall.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.mirror.view.ItemSmall.prototype.update = function() {
    if (!this.data) {
        this.countField.text = "";
        canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
            target: this.image
        });
        this.interactive = false;
        return
    }
    this.interactive = true;
    this.image.setImage(this.data.image);
    this.countField.text = this.data.count;
    this.hint.update(this.data.title + (this.data.itemCount > 1 ? " x" + this.data.itemCount : ""));
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.image,
        params: new canvas.utils.HintParams(this.hint,true)
    })
}
;
canvas.app.mirror.view.ItemSmall.prototype.updateSelection = function() {
    if (this.selected) {
        this.addChildAt(this.selector, this.getChildIndex(this.countField) - 1)
    } else {
        this.removeIfExist(this.selector)
    }
}
;
canvas.app.mirror.view.ItemSmall.prototype.clickHandler = function() {
    canvas.Functions.navigateToURL("/artifact_info.php?artikul_id=" + this.data.articulID, "_blank")
}
;
canvas.app.mirror.view.LuckProgress = function() {
    this._progress = 0;
    Object.defineProperty(this, "progress", {
        get: function() {
            return this._progress
        },
        set: function(t) {
            this._progress = t < 0 ? 0 : t > 100 ? 100 : t;
            var e = canvas.app.mirror.model;
            this.luckIcon.texture = canvas.ResourceLoader.getImage("mirror", "luck_icon" + (this._progress == 100 || e.gameData.superGame ? "2" : ""))
        }
    });
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_back")));
    this.line = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_line")));
    this.line.position.set(2, 14);
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_top")));
    this.luckIcon = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_icon")));
    this.luckIcon.position.set(257, -18);
    this.lineMask = this.addChild(new canvas.px.Mask(this.line.width - 15,this.line.height));
    this.lineMask.position.set(this.line.x, this.line.y);
    this.line.mask = this.lineMask;
    this.progressField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD_STROKE,16511686,40,20,"center"));
    this.progressField.position.set(284, 18);
    this.blicking = new canvas.app.mirror.view.Blicking(this,16777215,40,3);
    this.lineMask.scale.x = 0
}
;
canvas.app.mirror.view.LuckProgress.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.view.LuckProgress.prototype.frameUpdate = function() {
    var t = this.progress * .01;
    var e = t > this.lineMask.scale.x ? .01 : t < this.lineMask.scale.x ? -.01 : 0;
    e *= Math.abs(t - this.lineMask.scale.x) * 10;
    this.lineMask.scale.x += e;
    if (e > 0 && this.lineMask.scale.x > t || e < 0 && this.lineMask.scale.x < t)
        this.lineMask.scale.x = t
}
;
canvas.app.mirror.view.Mirrors = function() {
    canvas.px.Container.call(this);
    this.step = 0;
    this.animation = false;
    this.container = this.addChild(new canvas.px.Container);
    this.items = new Array;
    var t = 32;
    var e = 0;
    var a;
    var i;
    for (a = 0; a < 15; a++) {
        i = this.container.addChild(new canvas.app.mirror.view.ItemMirror);
        i.position.set(t, e);
        t += 62;
        if (a == 6) {
            e += 60;
            t = 0
        }
        i.name = a;
        this.items.push(i)
    }
    this.container.position.set(-Math.round(this.width * .5), -Math.round(this.height * .5));
    this.blicking = new canvas.app.mirror.view.Blicking(this,16777215,40,3)
}
;
canvas.app.mirror.view.Mirrors.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.view.Mirrors.prototype.reset = function() {
    var t = canvas.app.mirror.model;
    if (t.gameData.firstGame) {
        this.reset2();
        t.gameData.firstGame = false
    } else {
        this.animation = true
    }
}
;
canvas.app.mirror.view.Mirrors.prototype.reset2 = function() {
    var t, e = this.items.length;
    for (i = 0; i < e; i++) {
        t = this.items[i];
        t.points = 0;
        t.filters = []
    }
    this.step = 0;
    clearTimeout(this.timer)
}
;
canvas.app.mirror.view.Mirrors.prototype.openNext = function(t) {
    var e = canvas.app.mirror.model;
    this.items[t].points = e.gameData.mirrors[this.step];
    this.items[t].filters = [canvas.Functions.getGlow(10, 2, 1.8, 16777150, .1)];
    this.step++;
    if (this.step == 3) {
        this.lastMirrors = e.gameData.mirrors;
        clearTimeout(this.timer);
        this.timer = setTimeout(this.timerHandler.bind(this), 1e3)
    }
}
;
canvas.app.mirror.view.Mirrors.prototype.frameUpdate = function() {
    if (this.animation) {
        this.scale.x -= .05;
        this.scale.y = this.scale.x;
        if (this.scale.x <= 0) {
            this.animation = false;
            this.scale.x = this.scale.y = 1;
            this.reset2()
        }
    }
}
;
canvas.app.mirror.view.Mirrors.prototype.openAll = function() {
    var t;
    var e;
    var a = 0;
    for (e = 3; e < 15; e++) {
        while ((t = this.items[a]).points != 0)
            a++;
        t.points = this.lastMirrors[e]
    }
}
;
canvas.app.mirror.view.Mirrors.prototype.timerHandler = function() {
    this.openAll()
}
;
canvas.app.mirror.view.PrizeIcon = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "prize_icon")));
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,16511686,50,20,"center"));
    this.field.position.set(-2, 33)
}
;
canvas.app.mirror.view.PrizeIcon.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.Const = {
    MAP_ORIGINAL_WIDTH: 1050,
    MAP_ORIGINAL_HEIGHT: 1e3,
    MAP_WIDTH: 1074,
    MAP_HEIGHT: 1024,
    MAP_DIFF: 12,
    MAP_POINTS: [[334, 338], [852, 293], [606, 391], [691, 209], [143, 603], [559, 124], [289, 496], [703, 505], [924, 435], [839, 677], [248, 678], [477, 731], [492, 909], [878, 853], [960, 169], [170, 863]],
    TYPE_ID_SANCTUARY: 5,
    SANCTUARY_ON_PAGE: 3
};
canvas.app.clanCitadel.Event = {
    ENTER_FRAME: "ClanCitadel.ENTER_FRAME",
    ENTER_FRAME_WIN: "ClanCitadel.ENTER_FRAME_WIN",
    HINT_ADD: "ClanCitadel.HINT_ADD",
    HINT_REMOVE: "ClanCitadel.HINT_REMOVE",
    SELECT: "ClanCitadel.SELECT",
    CHANGE_BUILD_MODE: "ClanCitadel.CHANGE_BUILD_MODE",
    BUILD: "ClanCitadel.BUILD",
    EXIT: "ClanCitadel.EXIT",
    SANCTUARY_SELECT: "ClanCitadel.SANCTUARY_SELECT"
};
canvas.app.clanCitadel.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsContainer = new canvas.px.Container;
    this.view = this.addChild(new canvas.app.clanCitadel.View);
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.update();
    this.windowsManager = new canvas.utils.WindowsManager(this.view.wall);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.SELECT, null, this.selectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.CHANGE_BUILD_MODE, null, this.changeBuildModeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.BUILD, null, this.buildHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.EXIT, null, this.exitHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.openWinHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeWinHandler, this)
}
;
canvas.app.clanCitadel.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.clanCitadel.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.clanCitadel.Main.prototype.update = function() {
    this.view.update()
}
;
canvas.app.clanCitadel.Main.prototype.resize = function(t, e) {
    this.view.resize();
    this.windowsManager.init(this.windowsContainer, t, e, this.view);
    this.hintManager.init(this.hintContainer, t, e);
    this.view.position.set(Math.round((t - this.model.width) * .5), Math.round((e - this.model.height) * .5))
}
;
canvas.app.clanCitadel.Main.prototype.selectHandler = function(t) {
    if (this.view.map.scrollV.wasDragged || this.view.map.scrollH.wasDragged)
        return;
    if (this.model.buildMode) {
        this.windowsManager.openWindow(this.view.buildWindow, false);
        this.view.buildWindow.data = t.params
    } else {
        if (t.params.url) {
            canvas.Functions.navigateToURL(t.params.url, "_self")
        } else {
            switch (t.params.type_id) {
            case canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY:
                this.view.sanctuaryWindow = new canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow;
                this.windowsManager.openWindow(this.view.sanctuaryWindow);
                break
            }
        }
    }
}
;
canvas.app.clanCitadel.Main.prototype.changeBuildModeHandler = function(t) {
    this.model.buildMode = !this.model.buildMode;
    this.update()
}
;
canvas.app.clanCitadel.Main.prototype.buildHandler = function(t) {
    this.request.load(canvas.Config.entryPoint + "?object=clan&action=building_create&building_artikul_id=" + t.params.id + "&json_mode_on=1")
}
;
canvas.app.clanCitadel.Main.prototype.exitHandler = function(t) {
    canvas.Functions.navigateToURL("/area.php?exit=1", "_self")
}
;
canvas.app.clanCitadel.Main.prototype.completeHandler = function(t) {
    var e = JSON.parse(this.request.request.response);
    var a;
    for (var i in e) {
        a = e[i];
        if (a.error) {
            this.view.messageWindow.init(a.error);
            this.windowsManager.openWindow(this.view.messageWindow, false);
            return
        }
        switch (i) {
        case "clan|building_list":
            this.model.parseConfig(a);
            this.update();
            break;
        case "state":
            this.model.parseState(a);
            break
        }
    }
}
;
canvas.app.clanCitadel.Main.prototype.errorHandler = function(t) {
    this.view.messageWindow.init(canvas.Translator.getText(426));
    this.windowsManager.openWindow(this.view.messageWindow, false)
}
;
canvas.app.clanCitadel.Main.prototype.openWinHandler = function(t) {
    this.hintManager.hide();
    if (t.params == this.view.sanctuaryWindow) {
        this.model.paused = true
    }
}
;
canvas.app.clanCitadel.Main.prototype.closeWinHandler = function(t) {
    this.model.paused = false;
    if (this.view.sanctuaryWindow && t.params == this.view.sanctuaryWindow) {
        this.view.sanctuaryWindow.destroy();
        this.view.sanctuaryWindow = null
    }
}
;
canvas.app.clanCitadel.Model = function(t) {
    this.guestMode = t.Guest != undefined ? t.Guest == "1" : false;
    this.clanId = t.clan_id != undefined ? parseInt(t.clan_id) : 0;
    this.clanBuildingsAmf = t.amf_url || "images/data/locale/ru/amf/clan_buildings.amf";
    this.clanResourcesAmf = t.resources_amf || "images/data/locale/ru/amf/clan_resources.amf";
    this.sanctuaryAmf = t.sanctuaryAmfPath || "images/data/locale/ru/amf/clan_sanctuary.amf";
    this.configUrl = canvas.Config.entryPoint + "?object=clan&sq=1&action=building_list&json_mode_on=1" + (this.guestMode ? "&Guest=1&clan_id=" + this.clanId : "");
    this.configSanctuaryUrl = canvas.Config.entryPoint + "?object=clan&action=building_action&building_type_id=" + canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY + "&building_action=conf&json_mode_on=1";
    this.buildMode = false;
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.CLAN_CITADEL);
    this.sanctuary = {};
    this.paused = false
}
;
canvas.app.clanCitadel.Model.prototype.init = function() {
    this.buildingsData = [];
    var t = canvas.ResourceLoader.get("buildings");
    var e, a, i = t.length;
    for (e = 0; e < i; e++) {
        a = t[e];
        if (!this.buildingsData[a.type_id])
            this.buildingsData[a.type_id] = [];
        this.buildingsData[a.type_id][a.level] = a
    }
    this.resourcesData = {};
    t = canvas.ResourceLoader.get("resources");
    i = t.length;
    for (e = 0; e < i; e++) {
        a = t[e];
        this.resourcesData[a.id] = a
    }
    this.resourcesData["energy"] = {
        id: "energy",
        title: canvas.Translator.getText(107),
        ord: 0
    };
    if (!this.guestMode) {
        this.parseState(JSON.parse(canvas.ResourceLoader.get("config").data)["state"]);
        this.parseConfigSanctuary(JSON.parse(canvas.ResourceLoader.get("configSanctuary").data)["clan|building_action|" + canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY + "|conf"])
    }
    this.parseConfig(JSON.parse(canvas.ResourceLoader.get("config").data)["clan|building_list"])
}
;
canvas.app.clanCitadel.Model.prototype.parseSanctuary = function() {
    var t = canvas.ResourceLoader.get("sanctuary");
    this.sanctuary.items = new Array;
    this.sanctuary.allItemsByID = new Object;
    var e, a, i, s, n, r, o, l = this.buildings[canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY].level;
    for (i = l; i <= l + 1; i++) {
        item = t[i];
        if (item != null) {
            if (i == l) {
                r = new Object;
                r.id = "";
                r.image = item["cup"]["pic_small"];
                r.comment = "";
                r.title = canvas.Translator.getText(1255);
                a = new Array;
                r.list = a;
                this.sanctuary.items.push(r)
            }
            e = item["cup"]["npc_list_" + (this.race == 1 ? "hum" : "mag")];
            n = e.length;
            for (s = 0; s < n; s++) {
                o = e[s];
                if (!o)
                    continue;
                if (this.sanctuary.allItemsByID[o.id] != undefined)
                    continue;
                r = new Object;
                r.id = o.id;
                r.image = o.picture;
                r.comment = i > l ? canvas.Translator.getText(1252) + " " + i : canvas.Translator.getText(1254);
                r.locked = i > l;
                r.title = o.title;
                if (this.sanctuary.npcLinks != null)
                    r.url = this.sanctuary.npcLinks[r.id];
                if (a)
                    a.push(r);
                this.sanctuary.allItemsByID[r.id] = r
            }
            e = item["npc_list"];
            n = e.length;
            for (s = 0; s < n; s++) {
                o = e[s];
                if (!o)
                    continue;
                if (this.sanctuary.allItemsByID[o.id] != undefined)
                    continue;
                r = new Object;
                r.id = o.id;
                r.image = o.picture;
                r.comment = i > l ? canvas.Translator.getText(1252) + " " + i : canvas.Translator.getText(1253);
                r.locked = i > l;
                r.title = o.title;
                if (this.sanctuary.npcLinks != null)
                    r.url = this.sanctuary.npcLinks[r.id];
                this.sanctuary.items.push(r);
                this.sanctuary.allItemsByID[r.id] = r
            }
        }
    }
}
;
canvas.app.clanCitadel.Model.prototype.parseState = function(t) {
    this.race = t.kind == undefined ? 1 : parseInt(t.kind)
}
;
canvas.app.clanCitadel.Model.prototype.parseConfig = function(t) {
    this.buildMode = false;
    this.resources = t.resources;
    this.schemes = t.schemes || {};
    var e = t.buildings;
    var a = [];
    var i, s, n, r = e.length;
    for (i = 0; i < r; i++) {
        a[e[i].type_id] = e[i]
    }
    this.buildings = [];
    r = canvas.app.clanCitadel.Const.MAP_POINTS.length;
    for (i = 0; i < r; i++) {
        n = i + 1;
        s = a[n] || {
            type_id: n,
            level: 0
        };
        s.data = this.buildingsData[n] ? this.buildingsData[n][s.level] : null;
        s.dataNext = this.buildingsData[n] ? this.buildingsData[n][parseInt(s.level) + 1] : null;
        this.buildings[n] = s
    }
    this.parseSanctuary()
}
;
canvas.app.clanCitadel.Model.prototype.testRequirements = function(t) {
    if (!t)
        return false;
    if (!t.cost && !t.scheme_artikul_id)
        return true;
    if (t.cost) {
        var e, a = t.cost.costs;
        var i, s = a.length;
        for (i = 0; i < s; i++) {
            e = a[i];
            if (!this.resources[e.type] || e.cnt > parseInt(this.resources[e.type].value))
                return false
        }
    }
    if (t.scheme_artikul_id && (!this.schemes[t.scheme_artikul_id] || parseInt(this.schemes[t.scheme_artikul_id]) < parseInt(t.scheme_cnt))) {
        return false
    }
    return true
}
;
canvas.app.clanCitadel.Model.prototype.parseConfigSanctuary = function(t) {
    this.sanctuary.npcLinks = t.npc_urls
}
;
canvas.app.clanCitadel.View = function() {
    canvas.px.Container.call(this);
    this.map = this.addChild(new canvas.app.clanCitadel.view.Map);
    if (!canvas.app.clanCitadel.model.guestMode) {
        this.map.position.set(canvas.app.clanCitadel.Const.MAP_DIFF, canvas.app.clanCitadel.Const.MAP_DIFF);
        this.resourcesPanel = this.addChild(new canvas.app.clanCitadel.view.ResourcesPanel);
        this.buildingsPanel = this.addChild(new canvas.app.clanCitadel.view.BuildingsPanel);
        this.wall = this.addChild(new canvas.px.Mask(100,100,0,.7));
        this.wall.position.set(10, 10);
        this.wall.active = false;
        this.contour = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "contour"),49,49,49,49));
        this.header = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_header"),30,0,30,0));
        this.header.width = 150;
        this.header.y = -6;
        this.title = this.header.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD,16118721,150,20,"center"));
        this.title.text = canvas.Translator.getText(1202);
        this.title.y = 8;
        this.closeButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_button")));
        this.closeButton.y = -2;
        this.buildButton = this.addChild(new canvas.app.clanCitadel.view.BuildButton);
        this.buildWindow = new canvas.app.clanCitadel.view.BuildWindow;
        this.messageWindow = new canvas.app.manor.view.controls.MessageWindow;
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
            target: this.closeButton,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(150)))
        });
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeClickHandler, this)
    }
}
;
canvas.app.clanCitadel.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.View.prototype.resize = function() {
    var t = canvas.app.clanCitadel.model;
    if (!t.guestMode) {
        this.map.setSize(t.width - canvas.app.clanCitadel.Const.MAP_DIFF * 2, t.height - canvas.app.clanCitadel.Const.MAP_DIFF * 2);
        this.contour.width = t.width;
        this.contour.height = t.height;
        this.header.x = Math.round((t.width - this.header.width) * .5);
        this.closeButton.x = t.width - 45;
        this.buildButton.position.set(t.width - 66, t.height - 65);
        this.buildingsPanel.x = t.width - this.buildingsPanel._width;
        this.wall.setSize(t.width - 20, t.height - 20)
    } else {
        this.map.setSize(t.width, t.height)
    }
}
;
canvas.app.clanCitadel.View.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    this.map.update();
    if (!t.guestMode) {
        this.resourcesPanel.update();
        this.buildingsPanel.update();
        this.buildButton.buildMode = t.buildMode
    }
}
;
canvas.app.clanCitadel.View.prototype.closeClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.EXIT)
}
;
canvas.app.clanCitadel.view.Back = function() {
    canvas.px.Container.call(this);
    this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "citadel_back"));
    this.mc.frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME;
    for (var t in this.mc.mcChildsCache) {
        this.mc.mcChildsCache[t].loop = true;
        this.mc.mcChildsCache[t].frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME;
        this.mc.mcChildsCache[t].play()
    }
}
;
canvas.app.clanCitadel.view.Back.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.BuildButton = function() {
    this._buildMode = false;
    Object.defineProperty(this, "buildMode", {
        get: function() {
            return this._buildMode
        },
        set: function(t) {
            this._buildMode = t;
            this.hint.update(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(t ? 1201 : 1299)));
            this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("ui", t ? "exit_button" : "build_button")
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty);
    this.hint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint,false,canvas.utils.HintPos.LEFT_TOP)
    });
    this.buildMode = false;
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.clanCitadel.view.BuildButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.clanCitadel.view.BuildButton.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.CHANGE_BUILD_MODE)
}
;
canvas.app.clanCitadel.view.BuildWindow = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    this._width = 400;
    canvas.app.manor.view.WindowManorBase.call(this, this._width, 300, canvas.Translator.getText(178));
    this.headField = this.addChild(new canvas.app.view.MacroHtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,320,300,"center","top"));
    this.headField.position.set(40, 30);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,3));
    this.list.setSize(300, 200);
    this.list._paddingV = 0;
    this.list.x = 50;
    this.bottomField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,320,300,"center","top"));
    this.bottomField.position.set(40, 0);
    this.buildButton = this.addChild(new canvas.app.view.MainButton);
    this.buildButton.x = 48;
    this.buildButton.setTitle(canvas.Translator.getText(178));
    this.cancelButton = this.addChild(new canvas.app.view.MainButton);
    this.cancelButton.x = 202;
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this.cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this)
}
;
canvas.app.clanCitadel.view.BuildWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.clanCitadel.view.BuildWindow.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    if (this.data) {
        this.headField.text = "<b>" + this.data.title + "</b><br/><br/>" + this.data.description + "<br/><br/><b>" + canvas.Translator.getText(121) + "</b>";
        this.list.clear();
        this.list.y = this.headField.y + this.headField.textHeight + 10;
        var e, a = 0;
        if (this.data.cost) {
            a = this.data.cost.costs.length;
            for (e = 0; e < a; e++) {
                this.list.add(new canvas.app.clanCitadel.view.ResourceCostRenderer(this.data.cost.costs[e]), false)
            }
            this.list.update()
        }
        if (this.data.scheme_artikul_id) {
            this.bottomField.text = "<b>" + canvas.Translator.getText(1203) + "</b><br/><br/><a normal='1' href='artifact_info.php?artikul_id=" + this.data.scheme_artikul_id + "'>" + this.data.scheme_artikul_title + " [" + (t.schemes[this.data.scheme_artikul_id] ? t.schemes[this.data.scheme_artikul_id] : "0") + "/" + this.data.scheme_cnt + "]</a>"
        } else {
            this.bottomField.text = ""
        }
        this.bottomField.y = this.list.y + Math.ceil(a / 3) * 20 + 5;
        this.buildButton.y = this.cancelButton.y = this.bottomField.y + this.bottomField.textHeight + 5;
        this.setSize(this._width, this.buildButton.y + 60);
        this.buildButton.enabled = t.testRequirements(this.data)
    }
}
;
canvas.app.clanCitadel.view.BuildWindow.prototype.cancelClickHandler = function() {
    canvas.utils.WindowsManager.instance.closeWindow(this)
}
;
canvas.app.clanCitadel.view.BuildWindow.prototype.buildClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.BUILD, null, this.data);
    this.cancelClickHandler()
}
;
canvas.app.clanCitadel.view.BuildingRenderer = function() {
    canvas.ui.ListRenderer.call(this);
    this.hint = new canvas.app.view.MappingHint;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.clanCitadel.view.BuildingRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.BuildingRenderer.prototype.update = function() {
    if (this.data != this.oldData) {
        this.clear();
        if (this.data) {
            var t = canvas.Functions.extractSwfName(this.data.building_swfs[0].swf);
            this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.clanBuildingsPath + t + "/" + t));
            this.mc.frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME;
            this.mc.interactive = false;
            this.mc.interactiveChildren = false;
            if (!this.mc.ready) {
                canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this)
            } else {
                this.readyHandler()
            }
        }
    }
    var e = canvas.app.clanCitadel.model;
    if (e.buildMode && this.data) {
        if (this.mc)
            this.mc.filters = [canvas.Functions.getGlow(10, .8, 0, e.testRequirements(this.data) ? 65382 : 16711680, .1)]
    } else {
        if (this.mc)
            this.mc.filters = null
    }
}
;
canvas.app.clanCitadel.view.BuildingRenderer.prototype.readyHandler = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
    if (this.mc.totalFrames > 1) {
        this.mc.loop = true
    }
    if (this.mc.mcChildsCache) {
        for (var t in this.mc.mcChildsCache) {
            this.mc.mcChildsCache[t].frameEvent = this.mc.frameEvent;
            this.mc.mcChildsCache[t].play()
        }
    }
    this.polygon = this.addChild(new canvas.px.Polygon(this.mc.data.data.polygon));
    this.polygon.position.set(this.mc.data.data.x, this.mc.data.data.y);
    this.polygon.interactive = true;
    this.polygon.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this.polygon,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.hint.update(this.data.title + " [" + this.data.level + "]")
}
;
canvas.app.clanCitadel.view.BuildingRenderer.prototype.clear = function() {
    if (this.mc) {
        canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
        this.mc.destroy()
    }
    if (this.polygon) {
        this.removeIfExist(this.polygon);
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, {
            target: this.polygon
        });
        this.polygon.destroy();
        this.polygon = null
    }
}
;
canvas.app.clanCitadel.view.BuildingRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness()]
}
;
canvas.app.clanCitadel.view.BuildingRenderer.prototype.outHandler = function() {
    this.filters = null
}
;
canvas.app.clanCitadel.view.BuildingRenderer.prototype.clickHandler = function() {
    if (!canvas.app.clanCitadel.model.guestMode)
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SELECT, null, this.data)
}
;
canvas.app.clanCitadel.view.BuildingTitleRenderer = function(t, e) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(200, 20);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,15250952,this._width,this._height,"left"));
    this.buttonMode = true;
    this.isExit = e;
    this.data = t
}
;
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    if (this.data) {
        var e = t.buildMode ? t.testRequirements(this.data) ? "icon_build_green" : "icon_build_red" : "icon_enter";
        this.field.text = "<img src='" + e + "' atlas='ui' yOffset='" + (this.isExit ? 2 : 0) + "'/>  " + this.data.title + (this.data.level ? " [" + this.data.level + "]" : "")
    }
}
;
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.clickHandler = function() {
    if (this.isExit) {
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.EXIT)
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SELECT, null, this.data)
    }
}
;
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
;
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.outHandler = function() {
    this.filters = null
}
;
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
;
canvas.app.clanCitadel.view.BuildingsPanel = function() {
    this._showed = true;
    Object.defineProperty(this, "showed", {
        get: function() {
            return this._showed
        },
        set: function(t) {
            this._showed = t;
            this.updatePos()
        }
    });
    canvas.px.Container.call(this);
    var t = canvas.app.clanCitadel.model;
    this._width = 200;
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(-10, 10);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back")));
    this.button.position.set(this._width - 45, 80);
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow")));
    this.arrow.position.set(14, 21);
    this.hint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this.button,
        params: new canvas.utils.HintParams(this.hint)
    });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.back = this.container.addChild(new canvas.px.RoundRect(0,.5,200,200,10,10));
    this.msk = this.addChild(new canvas.px.Mask(this.back.width,this.back.height));
    this.msk.position.set(this.container.x, this.container.y);
    this.container.mask = this.msk;
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list.position.set(6, 10);
    this.list.setSize(this._width, 1e3);
    this.list._paddingV = 0;
    var e = canvas.app.clanCitadel.model.localStorage.get("rightShowed");
    this.showed = e == undefined || e == "1";
    this.container.x = this.targetPos
}
;
canvas.app.clanCitadel.view.BuildingsPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.BuildingsPanel.prototype.updatePos = function() {
    if (!this.button)
        return;
    if (this.showed) {
        this.arrow.scale.x = 1;
        this.arrow.x = 14;
        this.hint.update(canvas.Translator.getText(188));
        this.targetPos = -10
    } else {
        this.arrow.scale.x = -1;
        this.arrow.x = 29;
        this.hint.update(canvas.Translator.getText(189));
        this.targetPos = 200
    }
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.clanCitadel.view.BuildingsPanel.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    this.list.clear();
    var e, a, i, s = t.buildings.length - 1;
    for (e = 0; e < s; e++) {
        a = t.buildings[e + 1];
        if (t.buildMode) {
            a = a && a.dataNext ? a.dataNext : null
        } else {
            a = a && a.data ? a.data : null
        }
        if (a) {
            i = new canvas.app.clanCitadel.view.BuildingTitleRenderer(a);
            this.list.add(i, false)
        }
    }
    if (!t.buildMode) {
        i = new canvas.app.clanCitadel.view.BuildingTitleRenderer;
        i.setSize(0, 10);
        this.list.add(i, false);
        i = new canvas.app.clanCitadel.view.BuildingTitleRenderer({
            title: canvas.Translator.getText(152)
        },true);
        this.list.add(i, false)
    }
    this.list.update();
    this.back.h = this.list.container.height + 18;
    this.msk.setSize(-1, this.back.h);
    this.button.y = Math.round(this.back.h * .5) - 20
}
;
canvas.app.clanCitadel.view.BuildingsPanel.prototype.buttonClickHandler = function() {
    this.showed = !this.showed;
    canvas.app.clanCitadel.model.localStorage.set("rightShowed", this.showed ? "1" : "0")
}
;
canvas.app.clanCitadel.view.BuildingsPanel.prototype.frameHandler = function() {
    if (this.container.x != this.targetPos) {
        if (this.container.x < this.targetPos) {
            this.container.x = Math.min(this.container.x + 20, this.targetPos)
        } else {
            this.container.x = Math.max(this.container.x - 20, this.targetPos)
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.clanCitadel.view.Map = function() {
    canvas.px.Container.call(this);
    this._width = 0;
    this._height = 0;
    this.container = this.addChild(new canvas.px.Container);
    this.msk = this.addChild(new canvas.px.Mask(100,100));
    this.container.mask = this.msk;
    this.back = this.container.addChild(new canvas.app.clanCitadel.view.Back);
    this.buildingsContainer = this.container.addChild(new canvas.px.Container);
    var t, e, a = canvas.app.clanCitadel.Const.MAP_POINTS.length;
    for (t = 0; t < a; t++) {
        e = this.buildingsContainer.addChild(new canvas.app.clanCitadel.view.BuildingRenderer);
        e.position.set(canvas.app.clanCitadel.Const.MAP_POINTS[t][0], canvas.app.clanCitadel.Const.MAP_POINTS[t][1])
    }
    this.scrollV = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this.container,true));
    this.scrollV.step = 40;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollHandler, this);
    this.scrollH = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this,true,false));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollH, this.scrollHandler, this);
    this.firstResize = true
}
;
canvas.app.clanCitadel.view.Map.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.Map.prototype.setSize = function(t, e) {
    this._width = t;
    this._height = e;
    this.msk.setSize(this._width, this._height);
    this.scrollV.max = canvas.app.clanCitadel.Const.MAP_ORIGINAL_HEIGHT - this._height;
    this.scrollH.max = canvas.app.clanCitadel.Const.MAP_ORIGINAL_WIDTH - this._width;
    if (this.firstResize) {
        this.firstResize = false;
        var a = canvas.app.clanCitadel.model.localStorage.get("mapX") || 0;
        var i = canvas.app.clanCitadel.model.localStorage.get("mapY") || 10;
        this.scrollH.current = Math.round(this.scrollH.max * parseInt(a) * .01);
        this.scrollV.current = Math.round(this.scrollV.max * parseInt(i) * .01)
    }
    this.updateScrollPos()
}
;
canvas.app.clanCitadel.view.Map.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    var e, a, i, s = t.buildings.length - 1;
    for (e = 0; e < s; e++) {
        a = t.buildings[e + 1];
        i = this.buildingsContainer.getChildAt(e);
        if (t.buildMode) {
            i.data = a && a.dataNext ? a.dataNext : null
        } else {
            i.data = a && a.data ? a.data : null
        }
    }
}
;
canvas.app.clanCitadel.view.Map.prototype.scrollHandler = function() {
    this.updateScrollPos();
    canvas.app.clanCitadel.model.localStorage.set("mapX", Math.round(this.scrollH.current / Math.max(1, this.scrollH.max) * 100));
    canvas.app.clanCitadel.model.localStorage.set("mapY", Math.round(this.scrollV.current / Math.max(1, this.scrollV.max) * 100))
}
;
canvas.app.clanCitadel.view.Map.prototype.updateScrollPos = function() {
    this.container.position.set(-this.scrollH.current, -this.scrollV.current)
}
;
canvas.app.clanCitadel.view.ResourceCostRenderer = function(t) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(100, 20);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,11534336,this._width,this._height,"center"));
    this.hint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.data = t
}
;
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype.update = function() {
    if (this.data) {
        var t = parseInt(canvas.app.clanCitadel.model.resources[this.data.type].value);
        this.field.text = "<img src='res_" + this.data.type + "' atlas='ui'/> <font color='#" + (t < this.data.cnt ? "ff3333" : "00ff66") + "'>" + t + "/" + this.data.cnt + "</font>";
        var e = canvas.app.clanCitadel.model.resourcesData[this.data.type];
        this.hint.update(e ? e.title : "")
    }
}
;
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, {
        target: this
    })
}
;
canvas.app.clanCitadel.view.ResourceCountRenderer = function(t, e, a) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(100, 20);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,3394611,this._width,this._height,"left"));
    this.hint = new canvas.app.view.MappingHint(e);
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint,true)
    });
    this.type = t;
    this.infoLink = a;
    if (this.infoLink)
        this.buttonMode = true
}
;
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.update = function() {
    if (this.data) {
        var t = parseInt(this.data.value);
        this.field.text = "<img src='res_" + this.type + "' atlas='ui'/> " + t + (parseInt(this.data.limit) ? "/" + this.data.limit : "")
    }
}
;
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.clickHandler = function() {
    if (this.infoLink) {
        canvas.Functions.navigateToURL(this.infoLink, "_blank")
    }
}
;
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, {
        target: this
    })
}
;
canvas.app.clanCitadel.view.ResourcesPanel = function() {
    this._showed = true;
    Object.defineProperty(this, "showed", {
        get: function() {
            return this._showed
        },
        set: function(t) {
            this._showed = t;
            this.updatePos()
        }
    });
    canvas.px.Container.call(this);
    var t = canvas.app.clanCitadel.model;
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(10, 10);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back")));
    this.button.scale.x = -1;
    this.button.position.set(44, 80);
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow")));
    this.arrow.position.set(14, 21);
    this.hint = new canvas.app.view.MappingHint;
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this.button,
        params: new canvas.utils.HintParams(this.hint)
    });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.back = this.container.addChild(new canvas.px.RoundRect(0,.5,200,200,10,10));
    this.msk = this.addChild(new canvas.px.Mask(this.back.width,this.back.height));
    this.msk.position.set(this.container.x, this.container.y);
    this.container.mask = this.msk;
    var e = 32;
    var a = 10;
    this.items = {};
    this.moneyView = this.container.addChild(new canvas.app.view.Money(3394611,canvas.Const.FONT_TAHOMA_11_BOLD));
    this.moneyView.position.set(e, a);
    a += 20;
    var i, s, n, r, o = [];
    for (r in t.resourcesData) {
        o.push(t.resourcesData[r])
    }
    o.sort(function(t, e) {
        return parseInt(t.ord) - parseInt(e.ord)
    });
    n = o.length;
    for (s = 0; s < n; s++) {
        i = o[s];
        this.items[i.id] = this.container.addChild(new canvas.app.clanCitadel.view.ResourceCountRenderer(i.id,i.title,i.id == "energy" ? "" : "artifact_info.php?artikul_id=" + i.artikul_id));
        this.items[i.id].position.set(e, a);
        a += 20
    }
    var l = canvas.app.clanCitadel.model.localStorage.get("leftShowed");
    this.showed = l == undefined || l == "1";
    this.container.x = this.targetPos
}
;
canvas.app.clanCitadel.view.ResourcesPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.ResourcesPanel.prototype.updatePos = function() {
    if (!this.button)
        return;
    if (this.showed) {
        this.arrow.scale.x = 1;
        this.arrow.x = 14;
        this.hint.update(canvas.Translator.getText(188));
        this.targetPos = 10
    } else {
        this.arrow.scale.x = -1;
        this.arrow.x = 29;
        this.hint.update(canvas.Translator.getText(189));
        this.targetPos = -200
    }
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.clanCitadel.view.ResourcesPanel.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    this.moneyView.money = parseFloat(t.resources.money.value) * 100;
    for (var e in this.items) {
        this.items[e].data = t.resources[e]
    }
}
;
canvas.app.clanCitadel.view.ResourcesPanel.prototype.buttonClickHandler = function() {
    this.showed = !this.showed;
    canvas.app.clanCitadel.model.localStorage.set("leftShowed", this.showed ? "1" : "0")
}
;
canvas.app.clanCitadel.view.ResourcesPanel.prototype.frameHandler = function() {
    if (this.container.x != this.targetPos) {
        if (this.container.x < this.targetPos) {
            this.container.x = Math.min(this.container.x + 20, this.targetPos)
        } else {
            this.container.x = Math.max(this.container.x - 20, this.targetPos)
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
;
canvas.app.clanCitadel.view.sanctuary.ListItem = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            if (!this._data) {
                if (this.parent) {
                    this.parent.removeChild(this);
                    this.targetAlpha = 0;
                    this.targetScale = 0
                }
            } else {
                this.update()
            }
        }
    });
    canvas.px.Container.call(this);
    this.targetPoint = new canvas.px.Point(300);
    this.targetAlpha = 0;
    this.targetScale = 0;
    this.container = this.addChild(new canvas.px.Container);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "sanctuary_window")));
    this.topField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,this.container.width,20,"center"));
    this.bottomField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,this.topField._width,20,"center"));
    this.image = this.container.addChild(new canvas.ui.Image);
    this.image.position.set(26, 57);
    this.image.interactive = false;
    this.lockedImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "sanctuary_lock")));
    this.lockedImage.position.set(200, 200);
    this.container.pivot = new canvas.px.Point(Math.round(this.container.width * .5),Math.round(this.container.height * .5));
    this.topField.position.set(-4 - this.container.pivot.x, 11 - this.container.pivot.y);
    this.topField.baseY = this.topField.y;
    this.bottomField.position.set(-4 - this.container.pivot.x, 244 - this.container.pivot.y);
    this.bottomField.baseY = this.bottomField.y;
    this.interactive = true
}
;
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype.update = function() {
    this.topField.text = this.data.title ? this.data.title : "No title";
    this.bottomField.text = this.data.comment ? this.data.comment : "";
    this.bottomField.color = this.data.locked ? 7929856 : 2931200;
    this.lockedImage.visible = this.data.locked;
    if (this.data.image)
        this.image.setImage(this.data.image)
}
;
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype.updateScale = function() {
    if (this.container.scale.x != 1) {
        this.topField.y = this.topField.baseY + 25;
        this.bottomField.y = this.bottomField.baseY - 23
    } else {
        this.topField.y = this.topField.baseY;
        this.bottomField.y = this.bottomField.baseY
    }
}
;
canvas.app.clanCitadel.view.sanctuary.ListView = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            var e = !this._data;
            this._data = t;
            if (!this._data)
                return;
            var a, i, s = this._data.length;
            if (s > this.items.length) {
                for (a = this.items.length; a < s; a++) {
                    i = new canvas.app.clanCitadel.view.sanctuary.ListItem;
                    i.y = 150;
                    i.alpha = 0;
                    this.items.push(i)
                }
            }
            s = this.items.length;
            for (a = 0; a < s; a++)
                this.items[a].data = this._data[a];
            this.update(e)
        }
    });
    this._currentIndex = 0;
    Object.defineProperty(this, "currentIndex", {
        get: function() {
            return this._currentIndex
        },
        set: function(t) {
            var e = this.data.length;
            this._currentIndex = t < 0 ? 0 : t >= e ? e - 1 : t;
            this.leftArrow.visible = e > canvas.app.clanCitadel.Const.SANCTUARY_ON_PAGE - 2 && this._currentIndex > 0;
            this.rightArrow.visible = e > canvas.app.clanCitadel.Const.SANCTUARY_ON_PAGE - 2 && this._currentIndex < e - 1;
            this.update();
            canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.data[this.currentIndex])
        }
    });
    canvas.px.Container.call(this);
    this.items = new Array;
    this.container = this.addChild(new canvas.px.Container);
    this.leftArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_arrow")));
    this.leftArrow.y = 135;
    this.rightArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_arrow")));
    this.rightArrow.position.set(600, 135);
    this.rightArrow.scale.x = -1;
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME_WIN, null, this.updateHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this);
    this.interactive = true;
    this.click = this.clickHandler.bind(this)
}
;
canvas.app.clanCitadel.view.sanctuary.ListView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.update = function(t) {
    var e, a, i = this.data.length;
    if (i == 0)
        return;
    for (e = 0; e < i; e++) {
        a = this.items[e];
        if (e < this.currentIndex - 1) {
            a.targetAlpha = 0;
            a.targetScale = 0;
            a.targetPoint.x = 40;
            a.targetPoint.y = 165;
            if (a.alpha > 0)
                this.container.addChildAt(a, 0)
        } else if (e == this.currentIndex - 1) {
            a.targetAlpha = 1;
            a.targetScale = .8;
            a.targetPoint.x = 140;
            a.targetPoint.y = 165;
            this.container.addChild(a)
        } else if (e == this.currentIndex) {
            a.targetAlpha = 1;
            a.targetScale = 1;
            a.targetPoint.x = 300;
            a.targetPoint.y = 150
        } else if (e == this.currentIndex + 1) {
            a.targetAlpha = 1;
            a.targetScale = .8;
            a.targetPoint.x = 464;
            a.targetPoint.y = 165;
            this.container.addChild(a)
        } else {
            a.targetAlpha = 0;
            a.targetScale = 0;
            a.targetPoint.x = 564;
            a.targetPoint.y = 165;
            if (a.alpha > 0)
                this.container.addChildAt(a, 0)
        }
        if (t) {
            a.alpha = a.targetAlpha;
            a.container.scale.x = a.container.scale.y = a.targetScale;
            a.position.set(a.targetPoint.x, a.targetPoint.y);
            a.updateScale()
        }
    }
    this.container.addChild(this.items[this.currentIndex])
}
;
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.updateHandler = function() {
    var t, e, a, i = this.items.length;
    for (a = 0; a < i; a++) {
        t = this.items[a];
        if (t.targetAlpha != t.alpha) {
            e = t.targetAlpha > t.alpha;
            t.alpha += e ? .15 : -.15;
            if (t.targetAlpha > t.alpha != e)
                t.alpha = t.targetAlpha
        } else {
            if (t.alpha == 0 && this.container.contains(t))
                this.container.removeChild(t)
        }
        if (t.targetPoint.x != t.x) {
            e = t.targetPoint.x > t.x;
            t.x += e ? 20 : -20;
            if (t.targetPoint.x > t.x != e)
                t.x = t.targetPoint.x
        }
        if (t.targetPoint.y != t.y) {
            e = t.targetPoint.y > t.y;
            t.y += e ? 3 : -3;
            if (t.targetPoint.y > t.y != e)
                t.y = t.targetPoint.y
        }
        if (t.targetScale != t.container.scale.x) {
            e = t.targetScale > t.container.scale.x;
            t.container.scale.x += e ? .1 : -.1;
            if (t.targetScale > t.container.scale.x != e)
                t.container.scale.x = t.targetScale;
            t.container.scale.y = t.container.scale.x;
            t.updateScale()
        }
    }
}
;
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.clickHandler = function(t) {
    if (t.target instanceof canvas.app.clanCitadel.view.sanctuary.ListItem) {
        this.currentIndex = this.items.indexOf(t.target)
    }
}
;
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.leftArrowClickHandler = function() {
    this.currentIndex--
}
;
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.rightArrowClickHandler = function() {
    this.currentIndex++
}
;
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }]);
    canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME_WIN, null, this.updateHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this);
    this.click = null
}
;
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow = function() {
    canvas.px.Window.call(this);
    this.addChild(new canvas.px.Mask(300,300));
    this.container = this.addChild(new canvas.px.Container);
    this.goButton = this.container.addChild(new canvas.app.view.MainButton);
    this.goButton.setTitle(canvas.Translator.getText(1250));
    this.goButton.setSize(200);
    this.goButton.position.set(200, 300);
    this.backButton = this.container.addChild(new canvas.app.view.MainButton);
    this.backButton.setTitle(canvas.Translator.getText(232));
    this.backButton.setSize(200);
    this.backButton.position.set(100, 300);
    this.backButton.visible = false;
    this.list = this.container.addChild(new canvas.app.clanCitadel.view.sanctuary.ListView);
    this.closeButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_close")));
    this.closeButton.x = 575;
    var t = canvas.app.clanCitadel.model.sanctuary;
    t.prevItems = null;
    if (t.items != null) {
        this.list.data = t.items;
        t.currentItem = t.items[0];
        this.list.currentIndex = 0
    }
    this.update();
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.selectHandler, this)
}
;
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.update = function() {
    var t = canvas.app.clanCitadel.model.sanctuary;
    if (t.prevItems == null) {
        this.backButton.visible = false;
        this.goButton.x = 200
    } else {
        this.backButton.visible = true;
        this.goButton.x = 300
    }
    this.goButton.enabled = t.currentItem != null && !t.currentItem.locked
}
;
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t);
    var e = canvas.app.clanCitadel.model.sanctuary;
    if (canvas.Functions.findParent(this.goButton, t.target)) {
        if (e.currentItem != null) {
            if (e.currentItem.url && e.currentItem.url != "") {
                canvas.Functions.navigateToURL(e.currentItem.url, "_self")
            } else if (e.currentItem.list != null && e.currentItem.list.length > 0) {
                e.prevItems = this.list.data;
                e.prevIndex = this.list.currentIndex;
                this.list.data = e.currentItem.list;
                this.list.currentIndex = 0
            }
        }
    } else if (canvas.Functions.findParent(this.backButton, t.target)) {
        if (e.prevItems != null) {
            this.list.data = e.prevItems;
            e.prevItems = null;
            this.list.currentIndex = e.prevIndex
        }
    }
}
;
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.selectHandler = function(t) {
    var e = canvas.app.clanCitadel.model.sanctuary;
    e.currentItem = t.params;
    this.update()
}
;
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.destroy = function() {
    canvas.px.Window.prototype.destroy.call(this);
    canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.selectHandler, this)
}
;
canvas.app.clanWar.Const = {
    MODE_CLAN_WAR: 1,
    MODE_CLAN_FORTRESS: 2,
    WIDTH: 800,
    HEIGHT: 200,
    NUM_ISLANDS: 5
};
canvas.app.clanWar.Event = {
    ENTER_FRAME: "ClanWar.ENTER_FRAME",
    HINT_ADD: "ClanWar.HINT_ADD",
    HINT_REMOVE: "ClanWar.HINT_REMOVE",
    RESIZE: "ClanWar.RESIZE",
    SHOW_BATTLE: "ClanWar.SHOW_BATTLE",
    SHOW_POPUP: "ClanWar.SHOW_POPUP"
};
canvas.app.clanWar.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = new canvas.utils.HintManager;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsManager = new canvas.utils.WindowsManager;
    this.windowsManager.dx = 8;
    this.windowsManager.dy = 8;
    this.windowsContainer = new canvas.px.Container;
    this.view = this.addChild(new canvas.app.clanWar.View);
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.mainRequest = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.mainRequest, this.mainRequestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.mainRequest, this.requestErrorHandler, this);
    this.request = new canvas.utils.URLRequest;
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.RESIZE, null, this.resize, this);
    this.view.mousedown = this.downHandler.bind(this);
    this.view.mouseup = this.upHandler.bind(this);
    this.view.click = this.clickHandler.bind(this);
    this.view.interactive = true;
    this.timer = setInterval(this.timerHandler.bind(this), 5e3);
    this.timerHandler();
    this.timer1000 = setInterval(this.timer1000Handler.bind(this), 1e3);
    this.timer1000Handler();
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.SHOW_BATTLE, null, this.eventsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.SHOW_POPUP, null, this.eventsHandler, this)
}
;
canvas.app.clanWar.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.clanWar.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.clanWar.Main.prototype.swfObject = function(t) {
    var e;
    var a;
    if (t) {
        for (e in t) {
            a = t[e];
            switch (e) {
            case "clanWar|puton":
                break
            }
        }
    }
}
;
canvas.app.clanWar.Main.prototype.update = function(t) {
    this.model.parse(t);
    this.view.update()
}
;
canvas.app.clanWar.Main.prototype.mainRequestCompleteHandler = function() {
    var t = (new DOMParser).parseFromString(this.mainRequest.request.response.replace(/&/g, "&amp;"), "text/xml");
    if (t.firstChild.nodeName == "battle") {
        this.update(t.firstChild)
    }
}
;
canvas.app.clanWar.Main.prototype.requestCompleteHandler = function() {
    var t = (new DOMParser).parseFromString(this.request.request.response, "text/xml").firstChild;
    if (canvas.Functions.getAttribute(t, "redirect_url")) {
        canvas.Functions.navigateToURL(canvas.Functions.getAttribute(t, "redirect_url"), "_self");
        return
    }
    if (canvas.Functions.getAttribute(t, "msg")) {
        this.hintManager.hide();
        this.view.showMessage(canvas.Functions.getAttribute(t, "msg"))
    }
    if (canvas.Functions.getAttribute(t, "status") == "1")
        this.update(this.model.lastXML);
    this.timerHandler()
}
;
canvas.app.clanWar.Main.prototype.requestErrorHandler = function() {}
;
canvas.app.clanWar.Main.prototype.sendRequest = function(t, e) {
    var a = (canvas.Config.isLocal ? "use_buff.xml" : this.model.requestURL) + "?mode=" + t + (e ? "&" + e : "");
    this.request.load(a)
}
;
canvas.app.clanWar.Main.prototype.resize = function() {
    this.view.resize();
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height)
}
;
canvas.app.clanWar.Main.prototype.timerHandler = function() {
    var t = (canvas.Config.isLocal ? "clan_battle_conf.xml" : this.model.requestURL) + "?mode=clan_battle_info&" + this.model.requestIDTitle + "=" + this.model.battleID + (this.model.currentRoom > 0 ? "&room=" + this.model.currentRoom : "");
    this.mainRequest.load(t)
}
;
canvas.app.clanWar.Main.prototype.timer1000Handler = function() {
    this.view.clocks.update()
}
;
canvas.app.clanWar.Main.prototype.downHandler = function(t) {
    var e, a, i;
    if (!this.model.supervisor)
        return;
    if (t.target.name == "login") {
        e = t.target.parent;
        i = this.model.findByAttributeValue(this.model.lastXML, ["users", "user"], "id", e.data.id);
        if (!i)
            return;
        if (this.model.fightStarted && parseInt(i.attributes.room.value) > 0)
            return;
        this.model.dragUserID = e.data.id;
        this.view.dragLine(e, t.data.global.x, t.data.global.y);
        this.view.map.update();
        return
    }
    if (t.target.name && t.target.name.substr(0, 4) == "baf_") {
        a = t.target.parent;
        if (a.enabled) {
            this.model.dragBaffID = a.name.substr(4);
            this.view.dragBaf(a, t.data.global.x, t.data.global.y);
            this.view.map.update();
            return
        }
    }
}
;
canvas.app.clanWar.Main.prototype.upHandler = function(t) {
    var e = this.view.dragLine(null, t.data.global.x, t.data.global.y);
    var a;
    if (e != "") {
        if (this.model.users[this.model.dragUserID] != undefined && this.model.users[this.model.dragUserID].room != parseInt(e)) {
            a = this.model.users[this.model.dragUserID];
            if (this.model.confirmVoivoda && a && a.id == this.model.myId) {
                this.view.showPopup(canvas.Translator.getText(323), this.assignMemberAction.bind(this), [e])
            } else {
                this.assignMemberAction(e)
            }
        }
    }
    e = this.view.dragBaf(null, t.data.global.x, t.data.global.y);
    if (e != "") {
        this.useBuffAction(e)
    }
}
;
canvas.app.clanWar.Main.prototype.assignMemberAction = function(t) {
    var e = this.model.findByAttributeValue(this.model.lastXML, ["users", "user"], "id", this.model.dragUserID);
    if (e) {
        e.attributes.room.value = "-1";
        this.update(this.model.lastXML);
        e.attributes.room.value = t
    }
    this.sendRequest("assign_member", this.model.requestIDTitle + "=" + this.model.battleID + "&room=" + t + "&user_id=" + this.model.dragUserID);
    if (this.model.dragUserID != "") {
        this.model.dragUserID = "";
        this.view.map.update()
    }
}
;
canvas.app.clanWar.Main.prototype.clickHandler = function(t) {
    var e;
    switch (t.target.name) {
    case "private":
        e = t.target.parent.parent;
        userPrvTag(e.data.login.replace(/ \[\d*\]$/, ""));
        break;
    case "exit":
        this.hintManager.hide();
        if (!this.model.warFinished) {
            this.view.showPopup(canvas.Translator.getText(320), this.exit.bind(this))
        } else {
            this.exit()
        }
        break;
    case "reserv":
        if (!t.target.parent.enabled)
            return;
        this.reservAction();
        break;
    case "ready":
        if (!t.target.parent.enabled)
            return;
        this.readyAction();
        break;
    default:
    }
}
;
canvas.app.clanWar.Main.prototype.exit = function() {
    this.sendRequest("leave", this.model.requestIDTitle + "=" + this.model.battleID)
}
;
canvas.app.clanWar.Main.prototype.reservAction = function() {
    this.model.lastXML.setAttribute("reserv", "1");
    this.model.lastXML.setAttribute("reservTimeLeft", "1000000");
    this.update(this.model.lastXML);
    this.sendRequest("use_reserv", this.model.requestIDTitle + "=" + this.model.battleID)
}
;
canvas.app.clanWar.Main.prototype.readyAction = function() {
    this.model.lastXML.setAttribute("ready", "1");
    this.update(this.model.lastXML);
    this.sendRequest("ready", this.model.requestIDTitle + "=" + this.model.battleID)
}
;
canvas.app.clanWar.Main.prototype.useBuffAction = function(t) {
    var e = this.model.findByAttributeValue(this.model.lastXML, ["buffs", "buff"], "id", this.model.dragBaffID);
    if (e) {
        e.attributes.cd_left.value = "100";
        this.update(this.model.lastXML)
    }
    this.sendRequest("use_buff", this.model.requestIDTitle + "=" + this.model.battleID + "&room=" + t + "&buff_id=" + this.model.dragBaffID);
    if (this.model.dragBaffID != "") {
        this.model.dragBaffID = "";
        this.view.map.update()
    }
}
;
canvas.app.clanWar.Main.prototype.eventsHandler = function(t) {
    switch (t.name) {
    case canvas.app.clanWar.Event.SHOW_BATTLE:
        if (this.model.fightStarted) {
            if (t.params && t.params.substr(0, 5) == "list_") {
                this.model.currentRoom = parseInt(t.params.substr(5))
            } else {
                this.update(this.model.lastXML);
                this.model.currentRoom = 0
            }
            this.view.map.showBattle();
            this.timerHandler()
        }
        break;
    case canvas.app.clanWar.Event.SHOW_POPUP:
        this.view.showPopup(t.params);
        break
    }
}
;
canvas.app.clanWar.Model = function(t) {
    this.w = 400;
    this.h = 400;
    this.fightStarted = true;
    this.warFinished = true;
    this.reservUsed = true;
    this.ready = false;
    this.readyEnemy = false;
    this.reservTimeLeft = 0;
    this.reserv2TimeLeft = 0;
    this.useReservTimeLeft = 0;
    this.useLeaderTimeLeft = 0;
    this.battleID = "";
    this.requestURL = "";
    this.requestIDTitle = "";
    this.currentRoom = 0;
    this.logsURL = new Array;
    this.baffs = new Object;
    this.rooms = new Array;
    this.roomsStatus = new Array;
    this.dragUserID = "";
    this.dragBaffID = "";
    this.timeToStart = 0;
    this.date = new Date;
    this.lastXML = null;
    this.mode = 1;
    this.supervisor = t.supervisor == undefined ? true : parseInt(t.supervisor) == 1;
    this.myId = t.my_id;
    if (t.fort != undefined && parseInt(t.fort) == 1) {
        this.mode = canvas.app.clanWar.Const.MODE_CLAN_FORTRESS;
        this.mapBackURL = t.backImage
    } else {
        this.mode = canvas.app.clanWar.Const.MODE_CLAN_WAR;
        this.mapBackURL = "back.jpg"
    }
    switch (this.mode) {
    case canvas.app.clanWar.Const.MODE_CLAN_FORTRESS:
        canvas.app.clanWar.Const.NUM_ISLANDS = 3;
        this.battleID = t.clan_fort_id == undefined ? "" : t.clan_fort_id;
        this.requestURL = "clan_fort_conf.php";
        this.requestIDTitle = "clan_fort_id";
        break;
    default:
        canvas.app.clanWar.Const.NUM_ISLANDS = 5;
        this.battleID = t.clan_battle_id == undefined ? "" : t.clan_battle_id;
        this.requestURL = "clan_battle_conf.php";
        this.requestIDTitle = "clan_battle_id"
    }
    var e, a;
    for (e = 0; e <= canvas.app.clanWar.Const.NUM_ISLANDS; e++) {
        this.rooms.push({
            team1: [],
            team2: []
        })
    }
    for (e = 1; e <= 3; e++) {
        a = new Object;
        a.id = t["buff_" + e.toString() + "_id"] == undefined ? e.toString() : t["buff_" + e.toString() + "_id"];
        a.desc = t["buff_" + e.toString() + "_descr"] == undefined ? "" : t["buff_" + e.toString() + "_descr"];
        a.cd = t["buff_" + e.toString() + "_cd"] == undefined ? 0 : parseInt(t["buff_" + e.toString() + "_cd"]);
        a.cdLeft = 100;
        this.baffs[a.id] = a
    }
}
;
canvas.app.clanWar.Model.prototype.parse = function(t) {
    if (!this.warFinished && parseInt(t.attributes.status.value) == 2 && t.attributes.info && t.attributes.info.value != "") {
        canvas.Functions.navigateToURL(t.attributes.info.value, "_self");
        return
    }
    this.ready = t.attributes.ready ? parseInt(t.attributes.ready.value) == 1 : false;
    this.fightStarted = parseInt(t.attributes.status.value) >= 1;
    this.warFinished = parseInt(t.attributes.status.value) == 2;
    this.reservUsed = parseInt(t.attributes.status.value) != 1 || parseInt(t.attributes.reserv.value) == 1;
    this.reservTimeLeft = t.attributes.reservTimeLeft ? parseInt(t.attributes.reservTimeLeft.value) : 0;
    this.reserv2TimeLeft = t.attributes.reserv2TimeLeft ? parseInt(t.attributes.reserv2TimeLeft.value) : 0;
    this.useReservTimeLeft = t.attributes.startReservTimeLeft ? parseInt(t.attributes.startReservTimeLeft.value) : 0;
    this.useLeaderTimeLeft = t.attributes.useLeaderTimeLeft ? parseInt(t.attributes.useLeaderTimeLeft.value) : 0;
    this.timeToStart = t.attributes.time_before_fight ? parseInt(t.attributes.time_before_fight.value) : 0;
    if (this.fightStarted)
        this.ready = true;
    this.readyEnemy = t.attributes.ready_enemy ? parseInt(t.attributes.ready_enemy.value) == 1 : false;
    this.confirmVoivoda = t.attributes.confirm_voivoda && parseInt(t.attributes.confirm_voivoda.value) == 1;
    this.date = new Date;
    var e = canvas.Functions.getChildNodeByName(t, "users");
    if (e)
        this.parseUsers(e[0]);
    if (this.fightStarted) {
        e = canvas.Functions.getChildNodeByName(t, "buffs");
        if (e)
            this.parseBaffs(e[0]);
        e = canvas.Functions.getChildNodeByName(t, "rooms");
        if (e)
            this.parseRooms(e[0]);
        e = canvas.Functions.getChildNodeByName(t, "room");
        if (e)
            this.parseRoomUsers(e[0])
    }
    this.lastXML = t
}
;
canvas.app.clanWar.Model.prototype.parseUsers = function(t) {
    var e;
    var a;
    var i;
    var s;
    var n;
    this.myTeamIds = new Array;
    this.users = new Object;
    for (i = 0; i <= canvas.app.clanWar.Const.NUM_ISLANDS; i++) {
        this.rooms[i].team1 = new Array
    }
    var r = t.getElementsByTagName("user");
    s = r.length;
    for (i = 0; i < s; i++) {
        e = r[i];
        a = parseInt(canvas.Functions.getAttribute(e, "room"));
        if (a < 0)
            continue;
        n = new canvas.data.clanWar.UserData(canvas.Functions.getAttribute(e, "nick"),false,true,canvas.Functions.getAttribute(e, "id"),canvas.Functions.getAttribute(e, "hp") ? parseInt(canvas.Functions.getAttribute(e, "hp")) : -1,canvas.Functions.getAttribute(e, "mp") ? parseInt(canvas.Functions.getAttribute(e, "mp")) : -1,parseInt(canvas.Functions.getAttribute(e, "voivoda")) == 1,a,parseInt(canvas.Functions.getAttribute(e, "delayed")) == 1);
        this.rooms[a].team1.push(n);
        this.myTeamIds.push(parseInt(canvas.Functions.getAttribute(e, "id")));
        this.users[n.id] = n
    }
}
;
canvas.app.clanWar.Model.prototype.parseRoomUsers = function(t) {
    var e, a;
    var i = parseInt(canvas.Functions.getAttribute(t, "num"));
    this.roomsStatus[i] = parseInt(canvas.Functions.getAttribute(t, "status"));
    this.logsURL[i] = canvas.Functions.getAttribute(t, "fight_info");
    this.rooms[i].team1 = new Array;
    this.rooms[i].team2 = new Array;
    var s = t.getElementsByTagName("team"), n;
    var r, o = s.length, l, c;
    for (r = 0; r < o; r++) {
        e = s[r];
        if (canvas.Functions.getAttribute(e, "num") == "1") {
            n = e.getElementsByTagName("user");
            c = n.length;
            for (l = 0; l < c; l++) {
                a = n[l];
                this.rooms[i].team1.push(new canvas.data.clanWar.UserData(canvas.Functions.getAttribute(a, "nick"),false,true,canvas.Functions.getAttribute(a, "id"),canvas.Functions.getAttribute(a, "hp") ? parseInt(canvas.Functions.getAttribute(a, "hp")) : -1,canvas.Functions.getAttribute(a, "mp") ? parseInt(canvas.Functions.getAttribute(a, "mp")) : -1,undefined,undefined,parseInt(canvas.Functions.getAttribute(a, "delayed")) == 1))
            }
        } else if (canvas.Functions.getAttribute(e, "num") == "2") {
            n = e.getElementsByTagName("user");
            c = n.length;
            for (l = 0; l < c; l++) {
                a = n[l];
                this.rooms[i].team2.push(new canvas.data.clanWar.UserData(canvas.Functions.getAttribute(a, "nick"),false,true,canvas.Functions.getAttribute(a, "id"),canvas.Functions.getAttribute(a, "hp") ? parseInt(canvas.Functions.getAttribute(a, "hp")) : -1,canvas.Functions.getAttribute(a, "mp") ? parseInt(canvas.Functions.getAttribute(a, "mp")) : -1,undefined,undefined,parseInt(canvas.Functions.getAttribute(a, "delayed")) == 1))
            }
        }
    }
}
;
canvas.app.clanWar.Model.prototype.parseBaffs = function(t) {
    var e;
    var a = t.getElementsByTagName("buff");
    var i, s = a.length, e;
    for (i = 0; i < s; i++) {
        e = a[i];
        if (this.baffs[canvas.Functions.getAttribute(e, "id")] != undefined)
            this.baffs[canvas.Functions.getAttribute(e, "id")].cdLeft = parseInt(canvas.Functions.getAttribute(e, "cd_left"))
    }
}
;
canvas.app.clanWar.Model.prototype.parseRooms = function(t) {
    var e;
    var a = t.getElementsByTagName("room");
    var i, s = a.length, e;
    for (i = 0; i < s; i++) {
        e = a[i];
        this.roomsStatus[parseInt(canvas.Functions.getAttribute(e, "num"))] = parseInt(canvas.Functions.getAttribute(e, "status"))
    }
}
;
canvas.app.clanWar.Model.prototype.findByAttributeValue = function(t, e, a, i) {
    var s = e.length, n, r = t;
    for (n = 0; n < s; n++) {
        r = r.getElementsByTagName(e[n]);
        if (n < s - 1)
            r = r[0]
    }
    s = r.length;
    for (n = 0; n < s; n++) {
        if (r[n].attributes[a] && r[n].attributes[a].value == i) {
            return r[n]
        }
    }
    return null
}
;
canvas.app.clanWar.View = function() {
    canvas.px.Container.call(this);
    this.wall = this.addChild(new canvas.px.Mask(100,100,1654101,1));
    this.wall.position.set(10, 10);
    this.msk = this.addChild(new canvas.px.Mask(100,100));
    this.msk.position.set(10, 10);
    this.container = this.addChild(new canvas.px.Container);
    this.background = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130));
    this.map = this.container.addChild(new canvas.app.clanWar.view.Map);
    this.map.y = 10;
    this.map.mask = this.msk;
    this.users = this.addChild(new canvas.app.clanWar.view.UsersList("list_0",true));
    this.users.position.set(30, 30);
    this.baffs = this.container.addChild(new canvas.app.clanWar.view.Baffs);
    this.baffs.x = 10;
    this.clocks = this.container.addChild(new canvas.app.clanWar.view.Clocks);
    this.clocks.y = 60;
    this.exitButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "exit_button")));
    this.exitButton.sprite.name = "exit";
    this.exitButton.y = 24;
    this.confirmWindow = new canvas.app.manor.view.controls.ConfirmWindow;
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow;
    this.update();
    this.resize();
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_ADD, null, {
        target: this.exitButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(300)))
    })
}
;
canvas.app.clanWar.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.View.prototype.resize = function() {
    var t = canvas.app.clanWar.model;
    this.users.updateView();
    this.map.x = Math.round((t.w - this.map.width) * .5) + 30;
    this.wall.setSize(t.w - 20, t.h - 20);
    this.msk.setSize(t.w - 20, t.h - 20);
    this.background.width = t.w;
    this.background.height = t.h;
    this.baffs.y = t.h - 79;
    this.clocks.x = t.w - this.clocks.width - 20;
    this.exitButton.x = t.w - this.exitButton.width - 20
}
;
canvas.app.clanWar.View.prototype.update = function() {
    var t = canvas.app.clanWar.model;
    this.users.title = canvas.Translator.getText(301) + " - " + t.rooms[0].team1.length + ":";
    this.users.users = t.rooms[0].team1;
    this.users.updateView();
    this.users.enabled = !t.fightStarted && !t.ready || t.reservUsed;
    this.map.update();
    this.baffs.update();
    this.clocks.update()
}
;
canvas.app.clanWar.View.prototype.dragLine = function(t, e, a) {
    var i = canvas.app.clanWar.model;
    var s, n, r = "", o, l;
    if (this.currentDragLine != null) {
        s = this.getObjectsUnderPoint(new canvas.px.Point(e,a));
        o = s.length;
        for (l = 0; l < o; l++) {
            n = s[l];
            if (n.name && n.name.substr(0, 5) == "list_") {
                r = n.name.substr(5)
            }
        }
        this.currentDragLine.stopDrag();
        this.removeChild(this.currentDragLine);
        this.currentDragLine = null
    }
    if (t) {
        this.currentDragLine = t.cloneLogin();
        this.addChild(this.currentDragLine);
        var c = new canvas.px.Point(Math.round(this.currentDragLine.spriteLogin.textWidth * .5),20);
        this.currentDragLine.startDrag(c, new canvas.px.Rectangle(0,0,i.w,i.h), new canvas.px.Point(e,a));
        this.currentDragLine.interactive = false;
        this.currentDragLine.interactiveChildren = false
    }
    return r
}
;
canvas.app.clanWar.View.prototype.dragBaf = function(t, e, a) {
    var i = canvas.app.clanWar.model;
    var s, n, r = "", o, l;
    if (this.currentDragBaf != null) {
        s = this.getObjectsUnderPoint(new canvas.px.Point(e,a));
        o = s.length;
        for (l = 0; l < o; l++) {
            n = s[l];
            if (n.name && n.name.substr(0, 5) == "list_" && n.name.substr(5) != "0") {
                r = n.name.substr(5)
            }
        }
        this.currentDragBaf.stopDrag();
        this.removeChild(this.currentDragBaf);
        this.currentDragBaf = null
    }
    if (t) {
        this.currentDragBaf = t.clone();
        this.addChild(this.currentDragBaf);
        var c = new canvas.px.Point(Math.round(this.currentDragBaf.width * .5) + 3,Math.round(this.currentDragBaf.height * .5) + 3);
        this.currentDragBaf.startDrag(c, new canvas.px.Rectangle(0,0,i.w,i.h), new canvas.px.Point(e + 8,a + 8));
        this.currentDragBaf.interactive = false;
        this.currentDragBaf.interactiveChildren = false
    }
    return r
}
;
canvas.app.clanWar.View.prototype.showPopup = function(t, e, a) {
    this.confirmWindow.init(t, {
        func: e,
        params: a
    });
    canvas.utils.WindowsManager.instance.openWindow(this.confirmWindow)
}
;
canvas.app.clanWar.View.prototype.showMessage = function(t) {
    this.messageWindow.init(t);
    canvas.utils.WindowsManager.instance.openWindow(this.messageWindow)
}
;
canvas.app.clanWar.view.BafIcon = function(t, e) {
    this._popup = "";
    Object.defineProperty(this, "popup", {
        get: function() {
            return this._popup
        },
        set: function(t) {
            this._popup = t;
            if (this._popup) {
                this.hint.update(this._popup);
                canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_ADD, null, {
                    target: this,
                    params: new canvas.utils.HintParams(this.hint)
                })
            } else {
                canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_REMOVE, null, {
                    target: this
                })
            }
        }
    });
    this._showBorder = false;
    Object.defineProperty(this, "showBorder", {
        get: function() {
            return this._showBorder
        },
        set: function(t) {
            this._showBorder = t;
            if (this._showBorder) {
                if (!this.border) {
                    this.border = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "baf_border"));
                    this.border.position.set(-4, -3)
                }
                this.addChildAt(this.border, 0)
            } else if (this.border) {
                this.removeIfExist(this.border)
            }
        }
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", t));
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t;
            this.buttonMode = this.sprite.interactive = t;
            if (t) {
                this.sprite.filters = null
            } else {
                this.sprite.filters = [canvas.Functions.getBlackAndWhite()]
            }
        }
    });
    this.hint = new canvas.app.view.BigHint2(250);
    this.imageName = t;
    this.popup = e || ""
}
;
canvas.app.clanWar.view.BafIcon.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.clanWar.view.BafIcon.prototype.clone = function() {
    return new canvas.app.clanWar.view.BafIcon(this.imageName)
}
;
canvas.app.clanWar.view.Baffs = function() {
    canvas.px.Container.call(this);
    this.items = {};
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bafs_back")));
    this.back.x = 12;
    var t = canvas.app.clanWar.model;
    var e = ["baf1", "baf2", "baf3"];
    var a;
    var i = 0;
    var s;
    var n = 19;
    var r;
    for (s in t.baffs) {
        r = t.baffs[s];
        a = this.addChild(new canvas.app.clanWar.view.BafIcon(e[i],r.desc));
        a.name = a.sprite.name = "baf_" + r.id;
        a.position.set(n, 11);
        n += a.width;
        a.enabled = false;
        this.items[r.id] = a;
        i++
    }
    this.reservIcon = this.addChild(new canvas.app.clanWar.view.BafIcon("baf4",canvas.Translator.getText(308)));
    this.reservIcon.name = this.reservIcon.sprite.name = "reserv";
    this.reservIcon.position.set(n, 11);
    n += this.reservIcon.width;
    this.reservIcon.enabled = false;
    this.readyIcon = this.addChild(new canvas.app.clanWar.view.BafIcon("baf5",canvas.Translator.getText(309)));
    this.readyIcon.name = this.readyIcon.sprite.name = "ready";
    this.readyIcon.position.set(n, 11);
    n += this.readyIcon.width;
    this.readyIcon.enabled = false
}
;
canvas.app.clanWar.view.Baffs.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Baffs.prototype.update = function() {
    var t;
    var e;
    var a = canvas.app.clanWar.model;
    for (e in this.items) {
        t = this.items[e];
        t.enabled = a.supervisor && a.baffs[t.name.substr(4)].cdLeft == 0 && a.fightStarted && !a.warFinished
    }
    this.reservIcon.enabled = a.supervisor && !a.reservUsed && a.fightStarted && !a.warFinished;
    this.readyIcon.enabled = a.supervisor && !a.fightStarted && !a.ready;
    this.readyIcon.showBorder = a.readyEnemy
}
;
canvas.app.clanWar.view.Clocks = function() {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "clocks_back")));
    this.back.alpha = .4;
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,92,16,"center"));
    this.title.position.set(0, 6);
    this.time = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,92,16,"center"));
    this.time.position.set(0, 22)
}
;
canvas.app.clanWar.view.Clocks.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Clocks.prototype.update = function() {
    var t = canvas.app.clanWar.model;
    var e = new Date;
    var a;
    var i = 0;
    this.visible = true;
    if (!t.fightStarted) {
        i = 1
    } else if (t.reservUsed) {
        if (t.reservTimeLeft > 0 && t.reservTimeLeft < 1e6)
            i = 2;
        else if (t.reserv2TimeLeft > 0 && t.reserv2TimeLeft < 1e6)
            i = 5;
        else if (t.useLeaderTimeLeft > 0 && t.useLeaderTimeLeft < 1e6)
            i = 4
    } else if (t.useReservTimeLeft > 0 && t.useReservTimeLeft < 1e6) {
        i = 3
    }
    switch (i) {
    case 1:
        this.title.text = canvas.Translator.getText(314) + ":";
        a = t.timeToStart - (Math.round(e.getTime() * .001) - Math.round(t.date.getTime() * .001));
        if (a > 0) {
            this.time.text = this.formatDate(a);
            this.visible = true;
            this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back")
        } else
            this.visible = false;
        break;
    case 2:
        this.title.text = canvas.Translator.getText(321) + ":";
        a = t.reservTimeLeft - (Math.round(e.getTime() * .001) - Math.round(t.date.getTime() * .001));
        if (a > 0) {
            this.time.text = this.formatDate(a);
            this.visible = true;
            this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back")
        } else
            this.visible = false;
        break;
    case 3:
        this.title.text = canvas.Translator.getText(315) + ":";
        a = t.useReservTimeLeft - (Math.round(e.getTime() * .001) - Math.round(t.date.getTime() * .001));
        if (a > 0) {
            this.time.text = this.formatDate(a);
            this.visible = true;
            this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_green")
        } else
            this.visible = false;
        break;
    case 4:
        this.title.text = canvas.Translator.getText(322) + ":";
        a = t.useLeaderTimeLeft - (Math.round(e.getTime() * .001) - Math.round(t.date.getTime() * .001));
        if (a > 0) {
            this.time.text = this.formatDate(a);
            this.visible = true;
            this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_red")
        } else
            this.visible = false;
        break;
    case 5:
        this.title.text = canvas.Translator.getText(340) + ":";
        a = t.reserv2TimeLeft - (Math.round(e.getTime() * .001) - Math.round(t.date.getTime() * .001));
        if (a > 0) {
            this.time.text = this.formatDate(a);
            this.visible = true;
            this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_yellow")
        } else
            this.visible = false;
        break;
    default:
        this.visible = false;
        break
    }
}
;
canvas.app.clanWar.view.Clocks.prototype.formatDate = function(t) {
    var e = t % 60;
    var a = Math.floor(t / 60);
    return canvas.Functions.setNumberLen(a) + ":" + canvas.Functions.setNumberLen(e)
}
;
canvas.app.clanWar.view.FightList = function(t) {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fight_back")));
    this.back.alpha = .4;
    this.back.name = t;
    this.titleField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,150,16,"left"));
    this.titleField.position.set(40, 4);
    this.closeButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_button")));
    this.closeButton.x = 265;
    var e = this.closeButton.sprite.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11,16769442,50,20,"left","top",0));
    e.text = "<a>" + canvas.Translator.getText(310) + "</a>";
    e.position.set(24, 2);
    this.logButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "log_button")));
    var e = this.logButton.sprite.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11,16769442,50,20,"left","top",0));
    e.text = "<a>" + canvas.Translator.getText(311) + "</a>";
    e.position.set(24, 2);
    this.logButton.x = this.closeButton.x - this.logButton.width - 5;
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,60,16,"left"));
    e.position.set(30, 25);
    e.text = canvas.Translator.getText(312) + "1";
    e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,60,16,"left"));
    e.position.set(200, 25);
    e.text = canvas.Translator.getText(312) + "2";
    this.list1 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list1.position.set(0, 40);
    this.list1.paddingV = -5;
    this.list1.setSize(130, 108);
    this.list1.scroll = new canvas.app.clanWar.view.ScrollView(this.list1);
    this.list1.scroll.setSize(20, this.list1._height);
    this.list2 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1));
    this.list2.position.set(170, 40);
    this.list2.paddingV = -5;
    this.list2.setSize(130, 108);
    this.list2.scroll = new canvas.app.clanWar.view.ScrollView(this.list2);
    this.list2.scroll.setSize(20, this.list2._height);
    this.currentIcon = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.currentIcon.position.set(-4, -4);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.logButton, this.logClickHandler, this)
}
;
canvas.app.clanWar.view.FightList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.FightList.prototype.closeClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.SHOW_BATTLE)
}
;
canvas.app.clanWar.view.FightList.prototype.logClickHandler = function() {
    var t = canvas.app.clanWar.model;
    canvas.Functions.navigateToURL(t.logsURL[t.currentRoom], "_blank")
}
;
canvas.app.clanWar.view.FightList.prototype.setIcon = function(t) {
    this.currentIcon.texture = t ? canvas.ResourceLoader.getImage("ui", "icon_" + t) : canvas.px.TextureEmpty
}
;
canvas.app.clanWar.view.FightList.prototype.update = function() {
    this.titleField.text = this.title + ":";
    this.clear();
    var t, e;
    t = this.team1.length;
    for (e = 0; e < t; e++) {
        this.list1.add(new canvas.app.clanWar.view.UserLine(this.team1[e],false,false), false)
    }
    this.list1.update();
    if (this.list1.scroll && this.list1.scroll.parent) {
        this.list1.setSize(130, 108)
    } else {
        this.list1.setSize(166, 108)
    }
    this.list1.scroll.position.set(140, 0);
    t = this.team2.length;
    for (e = 0; e < t; e++) {
        this.list2.add(new canvas.app.clanWar.view.UserLine(this.team2[e],false,false), false)
    }
    this.list2.update();
    if (this.list2.scroll && this.list2.scroll.parent) {
        this.list2.setSize(130, 108)
    } else {
        this.list2.setSize(166, 108)
    }
    this.list2.scroll.position.set(140, 0)
}
;
canvas.app.clanWar.view.FightList.prototype.clear = function() {
    this.list1.clear(false);
    this.list2.clear(false)
}
;
canvas.app.clanWar.view.HpMpProgress = function(t, e) {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_back")));
    var a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_hp")));
    var i = this.addChild(new canvas.px.Mask(a.width,a.height));
    a.mask = i;
    i.scale.x = t;
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_mp")));
    i = this.addChild(new canvas.px.Mask(a.width,a.height));
    a.mask = i;
    i.scale.x = e;
    a.y = i.y = 3
}
;
canvas.app.clanWar.view.HpMpProgress.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Map = function() {
    canvas.px.Container.call(this);
    this.lists = new Array;
    this.battles = new Array;
    var t;
    var e;
    var a = canvas.app.clanWar.model;
    this.background = this.addChild(new canvas.px.Container);
    switch (a.mode) {
    case canvas.app.clanWar.Const.MODE_CLAN_FORTRESS:
        this.image = new canvas.ui.Image(a.mapBackURL);
        canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.image, this.completeHandler, this);
        e = [new canvas.px.Point(355,10), new canvas.px.Point(533,146), new canvas.px.Point(666,7)];
        t = [canvas.Translator.getText(317), canvas.Translator.getText(319), canvas.Translator.getText(318)];
        break;
    default:
        this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back"));
        e = [new canvas.px.Point(165,10), new canvas.px.Point(476,7), new canvas.px.Point(343,146), new canvas.px.Point(165,158), new canvas.px.Point(539,157)];
        t = [canvas.Translator.getText(302), canvas.Translator.getText(303), canvas.Translator.getText(304), canvas.Translator.getText(305), canvas.Translator.getText(306)]
    }
    this.background.addChild(this.image);
    this.listContainer = this.background.addChild(new canvas.px.Container);
    this.battleContainer = this.background.addChild(new canvas.px.Container);
    var i;
    var s;
    var n;
    var r;
    for (r = 0; r < canvas.app.clanWar.Const.NUM_ISLANDS; r++) {
        s = this.listContainer.addChild(new canvas.app.clanWar.view.UsersList("list_" + (r + 1),false));
        s.title = t[r];
        s.position.set(e[r].x, e[r].y);
        this.lists.push(s)
    }
    for (r = 0; r < canvas.app.clanWar.Const.NUM_ISLANDS; r++) {
        i = new canvas.app.clanWar.view.FightList("list_" + (r + 1));
        i.title = t[r];
        this.battles.push(i)
    }
    this.showBattle()
}
;
canvas.app.clanWar.view.Map.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Map.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.image, this.completeHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.RESIZE)
}
;
canvas.app.clanWar.view.Map.prototype.update = function() {
    var t, e;
    var a;
    var i;
    var s;
    var n;
    var r;
    var o;
    var l = canvas.app.clanWar.model;
    for (t = 1; t <= canvas.app.clanWar.Const.NUM_ISLANDS; t++) {
        i = this.lists[t - 1];
        n = new Array;
        o = l.rooms[t].team1.length;
        for (e = 0; e < o; e++) {
            r = l.rooms[t].team1[e];
            if (l.myTeamIds.indexOf(parseInt(r.id)) >= 0)
                n.push(r)
        }
        i.users = n;
        i.updateView();
        a = this.battles[t - 1];
        a.team1 = l.rooms[t].team1;
        a.team2 = l.rooms[t].team2;
        a.update();
        if (l.fightStarted) {
            switch (l.roomsStatus[t]) {
            case 0:
                s = "fight";
                i.light(0);
                break;
            case 1:
                s = "victory";
                i.light(1503090);
                break;
            case 2:
                s = "defeat";
                i.light(16711680);
                break;
            default:
                s = "";
                i.light(0);
                break
            }
            i.setIcon(s);
            a.setIcon(s)
        }
        i.back.alpha = .4
    }
    if (l.dragBaffID != "" || l.dragUserID != "") {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this);
        this.mouseMoveHandler(this.lastMoveEvent)
    } else {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this)
    }
}
;
canvas.app.clanWar.view.Map.prototype.showBattle = function() {
    var t = canvas.app.clanWar.model;
    this.battleContainer.removeChildren();
    if (t.currentRoom > 0) {
        this.battles[t.currentRoom - 1].clear();
        this.battleContainer.addChild(this.battles[t.currentRoom - 1]);
        this.listContainer.visible = false;
        this.battleContainer.visible = true;
        this.battleContainer.position.set(Math.round((this.background.width - this.battleContainer.width) * .5), 60)
    } else {
        this.listContainer.visible = true;
        this.battleContainer.visible = false
    }
}
;
canvas.app.clanWar.view.Map.prototype.mouseMoveHandler = function(t) {
    if (!t || canvas.utils.WindowsManager.instance.haveActiveWindows)
        return;
    this.lastMoveEvent = t;
    var e = this.lists.length, a, i;
    for (a = 0; a < e; a++) {
        i = this.lists[a];
        i.back.alpha = i.getBounds().intersectsPoint(new canvas.px.Point(canvas.app.CanvasClanWar.App.renderer.plugins.interaction.mouse.global.x - 10,canvas.app.CanvasClanWar.App.renderer.plugins.interaction.mouse.global.y - 10)) ? .4 : .6
    }
}
;
canvas.app.clanWar.view.ScrollView = function(t) {
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_arrow"));
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_arrow"));
    a.scale.y = -1;
    a.pivot = new canvas.px.Point(0,a.height);
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_drag"));
    i.setSize = function() {}
    ;
    var s = new canvas.px.Mask(16,16,0,.5);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, e, a, s, i, t, false, true, true, true);
    this.padding = 13;
    this.backPadding = 10;
    this.step = 10;
    var n = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_uzor"),0));
    n.position.set(-5, -6);
    this.bottomUzor = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_uzor"),0));
    this.bottomUzor.scale.y = -1;
    var n = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_arrow_grey"),0));
    n.position.set(5, 0);
    this.bottomArrow = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_arrow_grey"),0));
    this.bottomArrow.scale.y = -1
}
;
canvas.app.clanWar.view.ScrollView.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.clanWar.view.ScrollView.prototype.setSize = function(t, e) {
    canvas.ui.Scroll.prototype.setSize.call(this, t, e);
    this.bottomUzor.position.set(-5, this._height + 6);
    this.bottomArrow.position.set(5, this._height)
}
;
canvas.app.clanWar.view.UserLine = function(t, e, a) {
    canvas.ui.ListRenderer.call(this);
    this.onlyLogin = e ? e : false;
    this.inReserv = a ? a : false;
    this.data = t;
    this.setSize(150, 20);
    var i, s = 0;
    if (!this.onlyLogin) {
        i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "green_check"));
        if (this.data.ready) {
            this.addChild(i);
            i.position.set(s, 4)
        }
        s += i.width + 3;
        i = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "red_arrow")));
        i.sprite.name = "private";
        i.position.set(s, 4);
        s += i.width + 3;
        i.enabled = this.data.online
    }
    i = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,this.data.online ? 16762368 : 7829104,160,14,"left","top",0,0,true));
    i.name = "login";
    i.text = this.data.login;
    i.position.set(s, 2);
    i.buttonMode = true;
    this.spriteLogin = i;
    i.interactive = this.data.online;
    i.alpha = this.data.delayed ? .7 : 1;
    this.spriteLogin.mouseover = this.overHandler.bind(this);
    this.spriteLogin.mouseout = this.outHandler.bind(this);
    this.interactive = false;
    if (!this.inReserv && !this.onlyLogin && this.data.hp >= 0 && this.data.mp >= 0) {
        i = this.addChild(new canvas.app.clanWar.view.HpMpProgress(this.data.hp * .01,this.data.mp * .01));
        i.position.set(Math.round(s + 2), Math.round(this.spriteLogin.textHeight + 5));
        this.setSize(150, 30)
    }
}
;
canvas.app.clanWar.view.UserLine.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanWar.view.UserLine.prototype.overHandler = function() {
    this.spriteLogin.color = 16777215
}
;
canvas.app.clanWar.view.UserLine.prototype.outHandler = function() {
    this.spriteLogin.color = this.data.online ? 16762368 : 7829104
}
;
canvas.app.clanWar.view.UserLine.prototype.cloneLogin = function() {
    return new canvas.app.clanWar.view.UserLine(this.data,true)
}
;
canvas.app.clanWar.view.UserLine.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    this.spriteLogin.mouseover = null;
    this.spriteLogin.mouseout = null
}
;
canvas.app.clanWar.view.UserListTitleRenderer = function(t) {
    canvas.ui.ListRenderer.call(this);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16762368,150,20,"left"));
    this.field.text = "<a href='#'>" + t + "</a>";
    this.field.position.set(17, 0);
    this.setSize(150, 20);
    this.interactiveChildren = false
}
;
canvas.app.clanWar.view.UserListTitleRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanWar.view.UsersList = function(t, e) {
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t;
            this.interactiveChildren = this._enabled;
            this.alpha = this._enabled ? 1 : .7
        }
    });
    canvas.ui.List.call(this, canvas.ui.ListType.VERTICAL, 1);
    this._paddingV = -5;
    this.isReserv = false;
    this.isReserv = e == undefined ? false : e;
    this.backName = this.isReserv ? "list_back_1" : "list_back_2";
    this.back = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.backName)), 0);
    this.back.alpha = .4;
    this.back.name = t;
    this.w = this.back.width - 40;
    this.h = this.back.height;
    this.setSize(this.w, this.h - 40);
    this.titleField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,100,20,this.isReserv ? "center" : "left"));
    this.titleField.position.set(this.isReserv ? 0 : 40, 7);
    this.scroll = new canvas.app.clanWar.view.ScrollView(this);
    this.scroll.setSize(20, this._height);
    this.mainContainer.position.set(0, this.isReserv ? 30 : 34);
    this.currentIcon = this.addChild(new canvas.ui.SimpleButton(canvas.px.TextureEmpty));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.currentIcon, this.clickHandler, this)
}
;
canvas.app.clanWar.view.UsersList.prototype = Object.create(canvas.ui.List.prototype);
canvas.app.clanWar.view.UsersList.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.SHOW_BATTLE, null, this.back.name)
}
;
canvas.app.clanWar.view.UsersList.prototype.setIcon = function(t) {
    this.currentIcon.sprite.texture = this.currentIcon.baseTexture = t ? canvas.ResourceLoader.getImage("ui", "icon_" + t) : canvas.px.TextureEmpty
}
;
canvas.app.clanWar.view.UsersList.prototype.light = function(t) {
    switch (t) {
    case 1503090:
        this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName + "_green");
        break;
    case 16711680:
        this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName + "_red");
        break;
    default:
        this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName)
    }
}
;
canvas.app.clanWar.view.UsersList.prototype.updateView = function() {
    var t = canvas.app.clanWar.model;
    this.titleField.text = this.title;
    this.titleField.setSize(this.w);
    this.clear(false);
    var e;
    var a;
    var i = false;
    var s = this.h - 40;
    this.users.sort(this.sortByTitle);
    var n = this.users.length > 0 && this.users[0].voivoda;
    if (n) {
        this.add(new canvas.app.clanWar.view.UserListTitleRenderer(canvas.Translator.getText(316)), false)
    }
    var r = this.users.length;
    for (var o = 0; o < r; o++) {
        e = this.users[o];
        if (n && !e.voivoda) {
            n = false;
            this.add(new canvas.app.clanWar.view.UserListTitleRenderer(canvas.Translator.getText(307)), false)
        }
        if (!this.isReserv && t.fightStarted)
            e.ready = false;
        this.add(new canvas.app.clanWar.view.UserLine(e,false,this.isReserv), false);
        if (e.ready)
            i = true
    }
    this.container.x = i ? 10 : -5;
    if (this.scroll && this.scroll.parent) {
        this._width = this.w
    } else {
        this._width = this.w + 36
    }
    this.update()
}
;
canvas.app.clanWar.view.UsersList.prototype.update = function() {
    canvas.ui.List.prototype.update.call(this);
    if (this.scroll) {
        this.scroll.position.set(this.back.width - 30, this.mainContainer.y)
    }
}
;
canvas.app.clanWar.view.UsersList.prototype.sortByTitle = function(t, e) {
    if (t.voivoda != e.voivoda) {
        return t.voivoda ? -1 : 1
    } else if (t.login > e.login) {
        return 1
    } else if (t.login < e.login) {
        return -1
    } else {
        return 0
    }
}
;
canvas.app.barber.Barber = function(t, e) {
    canvas.px.Container.call(this);
    this.model = new canvas.app.barber.Model(t);
    var a = 0;
    if (!this.model.withoutGender) {
        this.createLine("bb9", "bb10", 291, a);
        a += 26
    }
    this.createLine("bb7", "bb8", 291, a);
    a += 26;
    this.createLine("bb3", "bb4", 291, a);
    a += 26;
    this.createLine("bb1", "bb2", 291, a);
    a += 26;
    this.createLine("bb5", "bb6", 291, a);
    a += 26;
    this.randomButton = this.addChild(new canvas.app.view.OldButton(9722697));
    this.randomButton.setTitle(canvas.Translator.getText(3026));
    this.randomButton.position.set(258, a);
    this.randomButton.setSize(200);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.randomButton, this.randomClickHandler, this);
    this.playersContainer = this.addChild(new canvas.px.Container);
    this.playersContainer.position.set(30, -5);
    this.playerM = new canvas.animation.SkeletonInfo(canvas.Config.skPath + "M/sk01_UI",new canvas.px.Point(70,180),this);
    this.playerF = new canvas.animation.SkeletonInfo(canvas.Config.skPath + "F/sk01_UI",new canvas.px.Point(70,180),this);
    this.playerM.frameEvent = canvas.app.barber.Event.ENTER_FRAME;
    this.playerF.frameEvent = canvas.app.barber.Event.ENTER_FRAME;
    this.playerM.loop = true;
    this.playerF.loop = true;
    if (e) {
        e.action_bb1 = this.bb1Action.bind(this);
        e.action_bb2 = this.bb2Action.bind(this);
        e.action_bb3 = this.bb3Action.bind(this);
        e.action_bb4 = this.bb4Action.bind(this);
        e.action_bb5 = this.bb5Action.bind(this);
        e.action_bb6 = this.bb6Action.bind(this);
        e.action_bb7 = this.bb7Action.bind(this);
        e.action_bb8 = this.bb8Action.bind(this);
        e.action_bb9 = this.bb9Action.bind(this);
        e.action_bb10 = this.bb10Action.bind(this);
        e.action_bb11 = this.bb11Action.bind(this);
        e.action_bb12 = this.bb12Action.bind(this);
        e.action_randomBtn = this.randomClickHandler.bind(this)
    }
    this.interactive = true;
    this.click = this.clickHandler.bind(this);
    this.bigChange();
    this.refreshPlayer(true)
}
;
canvas.app.barber.Barber.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.barber.Barber.prototype.createLine = function(t, e, a, i) {
    var s = this.addChild(new canvas.px.Container);
    var n = s.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    n.scale.x = -1;
    n.name = t;
    n = s.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    n.name = e;
    n.x = 129;
    s.position.set(a, i)
}
;
canvas.app.barber.Barber.prototype.randomClickHandler = function() {
    var t = this.model;
    t.myHairColorVal[t.myRaceVal] = t.myHairColorAr[t.myRaceVal][Math.floor(Math.random() * t.myHairColorAr[t.myRaceVal].length)];
    t.parts[3] = t.myHairColorVal[t.myRaceVal];
    t.myBodyColorVal[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal][Math.floor(Math.random() * t.myBodyColorAr[t.myRaceVal].length)];
    for (var e = 7; e < 6 * 15; e += 6) {
        t.parts[e] = t.myBodyColorVal[t.myRaceVal]
    }
    t.parts[1] = t.myBodyColorVal[t.myRaceVal];
    t.myHairPaksVal[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal][Math.floor(Math.random() * t.myHairPaksAr[t.mySexVal][t.myRaceVal].length)];
    t.parts[2] = t.myHairPaksVal[t.mySexVal][t.myRaceVal];
    t.myHeadPaksVal[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal][Math.floor(Math.random() * t.myHeadPaksAr[t.mySexVal][t.myRaceVal].length)];
    t.parts[0] = t.myHeadPaksVal[t.mySexVal][t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.clickHandler = function(t) {
    if (t.target && t.target.parent && t.target.parent.name) {
        switch (t.target.parent.name) {
        case "bb1":
            this.bb1Action();
            break;
        case "bb2":
            this.bb2Action();
            break;
        case "bb3":
            this.bb3Action();
            break;
        case "bb4":
            this.bb4Action();
            break;
        case "bb5":
            this.bb5Action();
            break;
        case "bb6":
            this.bb6Action();
            break;
        case "bb7":
            this.bb7Action();
            break;
        case "bb8":
            this.bb8Action();
            break;
        case "bb9":
            this.bb9Action();
            break;
        case "bb10":
            this.bb10Action();
            break;
        case "bb11":
            this.bb11Action();
            break;
        case "bb12":
            this.bb12Action();
            break
        }
    }
}
;
canvas.app.barber.Barber.prototype.bb1Action = function() {
    var t = this.model;
    if (t.myHairPaksVal[t.mySexVal][t.myRaceVal] == "0")
        return;
    if (t.myHairColorIndex[t.myRaceVal] == 0)
        t.myHairColorIndex[t.myRaceVal] = t.myHairColorAr[t.myRaceVal].length;
    t.myHairColorIndex[t.myRaceVal]--;
    t.myHairColorVal[t.myRaceVal] = t.myHairColorAr[t.myRaceVal][t.myHairColorIndex[t.myRaceVal]];
    t.parts[3] = t.myHairColorVal[t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb2Action = function() {
    var t = this.model;
    if (t.myHairPaksVal[t.mySexVal][t.myRaceVal] == "0")
        return;
    if (t.myHairColorIndex[t.myRaceVal] == t.myHairColorAr[t.myRaceVal].length - 1)
        t.myHairColorIndex[t.myRaceVal] = -1;
    t.myHairColorIndex[t.myRaceVal]++;
    t.myHairColorVal[t.myRaceVal] = t.myHairColorAr[t.myRaceVal][t.myHairColorIndex[t.myRaceVal]];
    t.parts[3] = t.myHairColorVal[t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb3Action = function() {
    var t = this.model;
    if (t.myBodyColorIndex[t.myRaceVal] == 0)
        t.myBodyColorIndex[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal].length;
    t.myBodyColorIndex[t.myRaceVal]--;
    t.myBodyColorVal[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal][t.myBodyColorIndex[t.myRaceVal]];
    for (var e = 7; e < 6 * 15; e += 6) {
        t.parts[e] = t.myBodyColorVal[t.myRaceVal]
    }
    t.parts[1] = t.myBodyColorVal[t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb4Action = function() {
    var t = this.model;
    if (t.myBodyColorIndex[t.myRaceVal] == t.myBodyColorAr[t.myRaceVal].length)
        t.myBodyColorIndex[t.myRaceVal] = 0;
    t.myBodyColorIndex[t.myRaceVal]++;
    t.myBodyColorVal[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal][t.myBodyColorIndex[t.myRaceVal]];
    for (var e = 7; e < 6 * 15; e += 6) {
        t.parts[e] = t.myBodyColorVal[t.myRaceVal]
    }
    t.parts[1] = t.myBodyColorVal[t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb5Action = function() {
    var t = this.model;
    if (t.myHairPaksIndex[t.mySexVal][t.myRaceVal] == 0)
        t.myHairPaksIndex[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal].length;
    t.myHairPaksIndex[t.mySexVal][t.myRaceVal]--;
    t.myHairPaksVal[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal][t.myHairPaksIndex[t.mySexVal][t.myRaceVal]];
    t.parts[2] = t.myHairPaksVal[t.mySexVal][t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb6Action = function() {
    var t = this.model;
    if (t.myHairPaksIndex[t.mySexVal][t.myRaceVal] == t.myHairPaksAr[t.mySexVal][t.myRaceVal].length - 1)
        t.myHairPaksIndex[t.mySexVal][t.myRaceVal] = -1;
    t.myHairPaksIndex[t.mySexVal][t.myRaceVal]++;
    t.myHairPaksVal[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal][t.myHairPaksIndex[t.mySexVal][t.myRaceVal]];
    t.parts[2] = t.myHairPaksVal[t.mySexVal][t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb7Action = function() {
    var t = this.model;
    if (t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] == 0)
        t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal].length;
    t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]--;
    t.myHeadPaksVal[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal][t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]];
    t.parts[0] = t.myHeadPaksVal[t.mySexVal][t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb8Action = function() {
    var t = this.model;
    if (t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] == t.myHeadPaksAr[t.mySexVal][t.myRaceVal].length - 1)
        t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] = -1;
    t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]++;
    t.myHeadPaksVal[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal][t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]];
    t.parts[0] = t.myHeadPaksVal[t.mySexVal][t.myRaceVal];
    this.refreshPlayer()
}
;
canvas.app.barber.Barber.prototype.bb9Action = function() {
    var t = this.model;
    if (t.mySexIndex == 0)
        t.mySexIndex = t.mySexAr.length;
    t.mySexIndex--;
    t.mySexVal = t.mySexAr[t.mySexIndex];
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.GENDER_CHANGE, null, t.mySexVal);
    this.bigChange();
    this.refreshPlayer(true)
}
;
canvas.app.barber.Barber.prototype.bb10Action = function() {
    var t = this.model;
    if (t.mySexIndex == t.mySexAr.length - 1)
        t.mySexIndex = -1;
    t.mySexIndex++;
    t.mySexVal = t.mySexAr[t.mySexIndex];
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.GENDER_CHANGE, null, t.mySexVal);
    this.bigChange();
    this.refreshPlayer(true)
}
;
canvas.app.barber.Barber.prototype.bb11Action = function() {
    var t = this.model;
    if (t.myRaceIndex != 0) {
        t.myRaceIndex = 0;
        t.myRaceVal = t.myRaceAr[0];
        canvas.EventManager.dispatchEvent(canvas.app.barber.Event.RACE_CHANGE, null, t.myRaceVal);
        this.bigChange();
        this.refreshPlayer()
    }
}
;
canvas.app.barber.Barber.prototype.bb12Action = function() {
    var t = this.model;
    if (t.myRaceIndex != 1) {
        t.myRaceIndex = 1;
        t.myRaceVal = t.myRaceAr[1];
        canvas.EventManager.dispatchEvent(canvas.app.barber.Event.RACE_CHANGE, null, t.myRaceVal);
        this.bigChange();
        this.refreshPlayer()
    }
}
;
canvas.app.barber.Barber.prototype.refreshPlayer = function(t) {
    var e = this.model;
    if (e.flag) {
        if (!e.dontSendUpdate) {
            persUpdate(e.mySexVal, e.myRaceVal, e.myHeadPaksVal[e.mySexVal][e.myRaceVal], e.myHairPaksVal[e.mySexVal][e.myRaceVal], e.myBodyPaksAr[e.mySexVal][e.myRaceVal], e.myHairColorVal[e.myRaceVal], e.myBodyColorVal[e.myRaceVal])
        }
    } else {
        e.flag = true
    }
    var a;
    if (t) {
        var a = e.mySexAr2[e.mySexIndex] == "M" ? this.playerM : this.playerF;
        if (!a.parent) {
            if (this.playersContainer.numChildren > 0)
                this.playersContainer.removeChildAt(0).stop();
            this.playersContainer.addChild(a);
            a.play()
        }
    } else {
        a = this.playersContainer.getChildAt(0)
    }
    a.skeletonData = new canvas.data.battle.SkeletonData(e.getUIParts(),e.mySexAr2[e.mySexIndex])
}
;
canvas.app.barber.Barber.prototype.bigChange = function() {
    var t = this.model;
    var e;
    t.parts[3] = t.myHairColorVal[t.myRaceVal];
    for (e = 7; e < 6 * 15; e += 6) {
        t.parts[e] = t.myBodyColorVal[t.myRaceVal]
    }
    t.parts[1] = t.myBodyColorVal[t.myRaceVal];
    t.parts[0] = t.myHeadPaksVal[t.mySexVal][t.myRaceVal];
    t.parts[2] = t.myHairPaksVal[t.mySexVal][t.myRaceVal];
    for (e = 6; e < 6 * 15; e += 6) {
        t.parts[e] = t.myBodyPaksAr[t.mySexVal][t.myRaceVal]
    }
}
;
canvas.app.barber.Event = {
    ENTER_FRAME: "Barber.ENTER_FRAME",
    RACE_CHANGE: "Barber.RACE_CHANGE",
    GENDER_CHANGE: "Barber.GENDER_CHANGE"
};
canvas.app.barber.Model = function(t) {
    var e, a;
    this.kindBonus = 0;
    this.parts = [];
    this.mySexVal = "1";
    this.mySexIndex = 0;
    this.mySexAr = ["1", "2"];
    this.mySexAr2 = ["M", "F"];
    this.myRaceAr = ["1", "2"];
    this.myRaceVal = "1";
    this.myRaceIndex = 0;
    this.myBodyColorAr = [];
    this.myBodyColorVal = [];
    this.myBodyColorIndex = [];
    this.myHairColorAr = [];
    this.myHairColorVal = [];
    this.myHairColorIndex = [];
    this.myHeadPaksAr = [];
    this.myHeadPaksVal = [];
    this.myHeadPaksIndex = [];
    this.myHairPaksAr = [];
    this.myHairPaksVal = [];
    this.myHairPaksIndex = [];
    this.myBodyPaksAr = [];
    this.flag = false;
    this.dontSendUpdate = false;
    if (this.ok(t.kind_bonus))
        this.kindBonus = parseInt(t.kind_bonus);
    if (this.ok(t.withoutGender))
        this.withoutGender = t.withoutGender == "1";
    if (this.ok(t.dontSendUpdate))
        this.dontSendUpdate = t.dontSendUpdate == "1";
    this.parts.push(5, 0, 6, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(0, 0, 0, 0, 0, 0);
    this.parts.push(0, 0, 0, 0, 0, 0);
    this.parts.push(0, 0, 0, 0, 0, 0);
    if (this.ok(t.hairCol))
        this.parts[3] = t.hairCol;
    if (this.ok(t.bodyCol)) {
        for (e = 7; e < 13 * 6; e += 6) {
            this.parts[e] = t.bodyCol
        }
        this.parts[1] = t.bodyCol
    }
    a = this.ok(t.cfg) ? t.cfg : "1,1,5,30,1,11,0";
    var i = a.split(",");
    if (i[0] == "1") {
        this.mySexVal = "1";
        this.mySexIndex = 0
    } else if (i[0] == "2") {
        this.mySexVal = "2";
        this.mySexIndex = 1
    }
    if (i[1] == "1") {
        this.myRaceVal = "1";
        this.myRaceIndex = 0
    } else if (i[1] == "2") {
        this.myRaceVal = "2";
        this.myRaceIndex = 1
    }
    var s = this.ok(t.cbodyH) ? t.cbodyH : "0:1:2:3:4:5";
    var n = this.ok(t.cbodyM) ? t.cbodyM : "0:6:7:8:9:10";
    var r = this.ok(t.chairH) ? t.chairH : "11:12:13:14:15";
    var o = this.ok(t.chairM) ? t.chairM : "16:17:18:19:20";
    this.myBodyColorAr["1"] = s.split(":");
    this.myBodyColorVal["1"] = this.myBodyColorAr["1"][0];
    this.myBodyColorIndex["1"] = 0;
    this.myBodyColorAr["2"] = n.split(":");
    this.myBodyColorVal["2"] = this.myBodyColorAr["2"][0];
    this.myBodyColorIndex["2"] = 0;
    this.myBodyColorVal[this.myRaceVal] = i[6];
    this.myBodyColorIndex[this.myRaceVal] = this.getIndex(this.myBodyColorAr[this.myRaceVal], i[6]);
    for (e = 7; e < 6 * 15; e += 6) {
        this.parts[e] = this.myBodyColorVal[this.myRaceVal]
    }
    this.parts[1] = this.myBodyColorVal[this.myRaceVal];
    this.myHairColorAr["1"] = r.split(":");
    this.myHairColorVal["1"] = this.myHairColorAr["1"][0];
    this.myHairColorIndex["1"] = 0;
    this.myHairColorAr["2"] = o.split(":");
    this.myHairColorVal["2"] = this.myHairColorAr["2"][0];
    this.myHairColorIndex["2"] = 0;
    this.myHairColorVal[this.myRaceVal] = i[5];
    this.myHairColorIndex[this.myRaceVal] = this.getIndex(this.myHairColorAr[this.myRaceVal], i[5]);
    this.parts[3] = this.myHairColorVal[this.myRaceVal];
    var l = this.ok(t.phead11) ? t.phead11 : "5:6:13:14:15";
    var c = this.ok(t.phead12) ? t.phead12 : "505:506:507:508:509";
    var p = this.ok(t.phead21) ? t.phead21 : "5:6:13:14:15";
    var h = this.ok(t.phead22) ? t.phead22 : "505:506:507:508:509";
    var d = this.ok(t.phair11) ? t.phair11 : "30:31:32:33:34:0";
    var v = this.ok(t.phair12) ? t.phair12 : "530:531:532:533:534:0";
    var u = this.ok(t.phair21) ? t.phair21 : "30:31:32:33:34";
    var m = this.ok(t.phair22) ? t.phair22 : "530:531:532:533";
    var f = this.ok(t.pbody11) ? t.pbody11 : "1";
    var _ = this.ok(t.pbody12) ? t.pbody12 : "501";
    var g = this.ok(t.pbody21) ? t.pbody21 : "1";
    var w = this.ok(t.pbody22) ? t.pbody22 : "501";
    this.myHeadPaksAr["1"] = [];
    this.myHeadPaksAr["1"]["1"] = l.split(":");
    this.myHeadPaksAr["1"]["2"] = c.split(":");
    this.myHeadPaksVal["1"] = [];
    this.myHeadPaksVal["1"]["1"] = this.myHeadPaksAr["1"]["1"][0];
    this.myHeadPaksVal["1"]["2"] = this.myHeadPaksAr["1"]["2"][0];
    this.myHeadPaksIndex["1"] = [];
    this.myHeadPaksIndex["1"]["1"] = 0;
    this.myHeadPaksIndex["1"]["2"] = 0;
    this.myHeadPaksAr["2"] = [];
    this.myHeadPaksAr["2"]["1"] = p.split(":");
    this.myHeadPaksAr["2"]["2"] = h.split(":");
    this.myHeadPaksVal["2"] = [];
    this.myHeadPaksVal["2"]["1"] = this.myHeadPaksAr["2"]["1"][0];
    this.myHeadPaksVal["2"]["2"] = this.myHeadPaksAr["2"]["2"][0];
    this.myHeadPaksIndex["2"] = [];
    this.myHeadPaksIndex["2"]["1"] = 0;
    this.myHeadPaksIndex["2"]["2"] = 0;
    this.myHeadPaksVal[this.mySexVal][this.myRaceVal] = i[2];
    this.myHeadPaksIndex[this.mySexVal][this.myRaceVal] = this.getIndex(this.myHeadPaksAr[this.mySexVal][this.myRaceVal], i[2]);
    this.myHairPaksAr["1"] = [];
    this.myHairPaksAr["1"]["1"] = d.split(":");
    this.myHairPaksAr["1"]["2"] = v.split(":");
    this.myHairPaksVal["1"] = [];
    this.myHairPaksVal["1"]["1"] = this.myHairPaksAr["1"]["1"][0];
    this.myHairPaksVal["1"]["2"] = this.myHairPaksAr["1"]["2"][0];
    this.myHairPaksIndex["1"] = [];
    this.myHairPaksIndex["1"]["1"] = 0;
    this.myHairPaksIndex["1"]["2"] = 0;
    this.myHairPaksAr["2"] = [];
    this.myHairPaksAr["2"]["1"] = u.split(":");
    this.myHairPaksAr["2"]["2"] = m.split(":");
    this.myHairPaksVal["2"] = [];
    this.myHairPaksVal["2"]["1"] = this.myHairPaksAr["2"]["1"][0];
    this.myHairPaksVal["2"]["2"] = this.myHairPaksAr["2"]["2"][0];
    this.myHairPaksIndex["2"] = [];
    this.myHairPaksIndex["2"]["1"] = 0;
    this.myHairPaksIndex["2"]["2"] = 0;
    this.myHairPaksVal[this.mySexVal][this.myRaceVal] = i[3];
    this.myHairPaksIndex[this.mySexVal][this.myRaceVal] = this.getIndex(this.myHairPaksAr[this.mySexVal][this.myRaceVal], i[3]);
    this.myBodyPaksAr["1"] = [];
    this.myBodyPaksAr["1"]["1"] = f;
    this.myBodyPaksAr["1"]["2"] = _;
    this.myBodyPaksAr["2"] = [];
    this.myBodyPaksAr["2"]["1"] = g;
    this.myBodyPaksAr["2"]["2"] = w
}
;
canvas.app.barber.Model.prototype.getIndex = function(t, e) {
    var a = t.length;
    for (var i = 0; i < a; i++) {
        if (t[i] == e) {
            return i
        }
    }
    return 0
}
;
canvas.app.barber.Model.prototype.ok = function(t) {
    return t != undefined
}
;
canvas.app.barber.Model.prototype.getUIParts = function() {
    var t = this.parts.length;
    var e = "";
    for (var a = 0; a < t; a += 2) {
        e += (e == "" ? "" : ",") + String(this.parts[a] | this.parts[a + 1] << 16) + ";;;";
        if (a == 4)
            e += ",0;;;,0;;;,0;;;"
    }
    return e
}
;
canvas.app.mem.Event = {
    ENTER_FRAME: "Mem.ENTER_FRAME",
    HINT_ADD: "Mem.HINT_ADD",
    HINT_REMOVE: "Mem.HINT_REMOVE",
    TOGGLE_BUTTON_CLICK: "Mem.TOGGLE_BUTTON_CLICK",
    INPUT: "Mem.INPUT",
    PERS_SELECT: "Mem.PERS_SELECT",
    UPDATE_VISIBLE_IDS: "Mem.UPDATE_VISIBLE_IDS",
    GET_EFFECTS: "Mem.GET_EFFECTS",
    WATCH_SELECT: "Mem.WATCH_SELECT"
};
canvas.app.mem.Main = function(t, e) {
    this.model = t;
    this.view = new canvas.app.mem.View(e);
    this.fullReqInterval = setInterval(this.fullReqFunc.bind(this), 2e3);
    this.fullReqFunc();
    canvas.EventManager.addEventListener(canvas.app.mem.Event.PERS_SELECT, null, this.persSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.UPDATE_VISIBLE_IDS, null, this.updateVisibleIdsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.GET_EFFECTS, null, this.getEffectsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.WATCH_SELECT, null, this.watchSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this.view.leftButton, this.toggleDeadHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this.view.rightButton, this.toggleHPMPHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.INPUT, this.view.input, this.inputHandler, this)
}
;
canvas.app.mem.Main.prototype.resize = function() {
    this.view.resize()
}
;
canvas.app.mem.Main.prototype.persSelectHandler = function(t) {
    this.model.selectedPers = t.params;
    if (this.model.selectedPers) {
        this.getEffects()
    }
    this.view.update()
}
;
canvas.app.mem.Main.prototype.swfData = function(t, e) {
    var a = e.split("@");
    var i;
    var s;
    if (a.length != 2) {
        return
    }
    switch (a[0]) {
    case "stopReq":
        clearInterval(this.fullReqInterval);
        break;
    case "pak1":
        this.model.persCreate(a[1]);
        break;
    case "pak1s":
        if (a[1] != "done") {
            this.model.persCreateUnparsedBuffer += a[1]
        } else {
            this.model.persCreate(this.model.persCreateUnparsedBuffer);
            this.model.persCreateUnparsedBuffer = ""
        }
        break;
    case "pak2":
        this.model.persUpdate(a[1]);
        break;
    case "pak2s":
        if (a[1] != "done") {
            this.model.persUpdateUnparsedBuffer += a[1]
        } else {
            this.model.persUpdate(this.model.persUpdateUnparsedBuffer);
            this.model.persUpdateUnparsedBuffer = ""
        }
        break;
    case "pers_bafs":
        this.model.parseEffects(a[1]);
        break;
    case "watchFightActive":
        this.model.parseWatchFight(a[1]);
        break;
    case "dead_cnt":
        this.model.parseDeadCount(a[1]);
        break;
    case "opp_id":
        this.model.setOppId(parseInt(a[1]));
        break;
    case "pers_focus":
        if (!a[1] || a[1] == "0") {
            this.persSelectHandler({
                params: 0
            })
        } else {
            this.persSelectHandler({
                params: parseInt(a[1])
            });
            this.model.autoScrollToSelected = true
        }
        return;
    default:
        canvas.app.mem.log('WARN: unhandled event "' + a[0] + '"', 16711680);
        break
    }
    this.view.update()
}
;
canvas.app.mem.Main.prototype.sendData = function(t, e) {
    if (typeof swfTransfer != "undefined")
        swfTransfer("game", t, e)
}
;
canvas.app.mem.Main.prototype.getEffects = function() {
    if (this.effectsReqInterval)
        clearInterval(this.effectsReqInterval);
    this.effectsReqInterval = setInterval(this.effectsReqFunc.bind(this), 2500);
    this.effectsReqFunc(true)
}
;
canvas.app.mem.Main.prototype.effectsReqFunc = function(t) {
    if (t || this.model.selectedPers) {
        var e = this.model.persById[this.model.selectedPers];
        if (e) {
            this.sendData("game", "persFocus@" + String(this.model.selectedPers))
        } else {
            this.model.resetEffects()
        }
    }
}
;
canvas.app.mem.Main.prototype.fullReqFunc = function() {
    this.sendData("game", "FullReq@null")
}
;
canvas.app.mem.Main.prototype.toggleDeadHandler = function(t) {
    this.model.deadHidded = !t.params;
    this.view.update()
}
;
canvas.app.mem.Main.prototype.toggleHPMPHandler = function(t) {
    this.model.showHPMP = t.params;
    var e = this.model.showHPMP ? 1 : 0;
    this.sendData("game", "showHPMP@" + e);
    this.view.persList.updateBarsVisible()
}
;
canvas.app.mem.Main.prototype.inputHandler = function(t) {
    this.model.filterText = t.params;
    this.view.update()
}
;
canvas.app.mem.Main.prototype.updateVisibleIdsHandler = function(t) {
    if (this.model.visibleIds != t.params) {
        this.model.visibleIds = t.params;
        this.sendData("game", "persVisible@" + this.model.visibleIds)
    }
}
;
canvas.app.mem.Main.prototype.getEffectsHandler = function(t) {
    this.getEffects()
}
;
canvas.app.mem.Main.prototype.watchSelectHandler = function(t) {
    this.model.watchId = t.params;
    this.view.update();
    this.sendData("game", "watchFightPID@" + this.model.watchId)
}
;
canvas.app.mem.Model = function(t) {
    this._deadHidded = false;
    Object.defineProperty(this, "deadHidded", {
        get: function() {
            return this._deadHidded
        },
        set: function(t) {
            this._deadHidded = t;
            this.localStorage.set("deadHidded", t)
        }
    });
    this._showHPMP = true;
    Object.defineProperty(this, "showHPMP", {
        get: function() {
            return this._showHPMP
        },
        set: function(t) {
            this._showHPMP = t;
            this.localStorage.set("showHPMP", t)
        }
    });
    this._selectedPers = 0;
    Object.defineProperty(this, "selectedPers", {
        get: function() {
            return this._selectedPers
        },
        set: function(t) {
            if (this._selectedPers == t)
                return;
            this._selectedPers = t;
            this.effectsWasChanged = true;
            this.resetEffects()
        }
    });
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MEM);
    if (this.localStorage.get("deadHidded") != undefined)
        this._deadHidded = this.localStorage.get("deadHidded") == "true" ? true : false;
    if (this.localStorage.get("showHPMP") != undefined)
        this._showHPMP = this.localStorage.get("showHPMP") == "true" ? true : false;
    this.invisibleInfoUrl = t.invisible_info_url ? t.invisible_info_url : "";
    this.fightFlags = t.fight_flags ? parseInt(t.fight_flags) : 0;
    this.fightServerId = t.fight_server_id ? t.fight_server_id : 0;
    this.team1serverUrl = t.team1_server_url ? t.team1_server_url : "";
    this.team2serverUrl = t.team2_server_url ? t.team2_server_url : "";
    this.persList = [[], []];
    this.persById = {};
    this.oppId = 0;
    this.myId = 0;
    this.myTeam = 1;
    this.deadCount = [0, 0];
    this.userCount = [0, 0];
    this.effects = [];
    this.effectsDeltaTime = 0;
    this.persCreateUnparsedBuffer = "";
    this.persUpdateUnparsedBuffer = "";
    this.effectsWasChanged = true;
    this.autoScrollToSelected = false;
    this.filterText = "";
    this.visibleIds = "";
    this.watchEnabled = false;
    this.watchTeam = 0;
    this.watchId = 0
}
;
canvas.app.mem.Model.prototype.setOppId = function(t) {
    var e;
    for (var a in this.persById) {
        e = this.persById[a];
        if (e.id == t || e.id == this.oppId) {
            e.wasChanged = true
        }
    }
    this.oppId = t
}
;
canvas.app.mem.Model.prototype.persCreate = function(t) {
    var e = t.split(String.fromCharCode(2));
    var a, i, s = e.length;
    this.myId = parseInt(e[s - 1]);
    for (var n = 0; n < s - 1; n++) {
        a = e[n].split(String.fromCharCode(1));
        if (this.persById[parseInt(a[0])]) {
            canvas.app.mem.log("Warning: pers id=" + a[0] + " already exists in list", 6710886);
            continue
        }
        i = new canvas.data.battle.PersData;
        i.id = parseInt(a[0]);
        i.nick = a[1];
        i.team = parseInt(a[2]);
        if (i.team < 1 || i.team > 2)
            continue;
        i.status = parseInt(a[3]);
        i.setRatios(parseInt(a[4]), parseInt(a[5]), parseInt(a[6]), parseInt(a[7]));
        i.clanImage = a[8];
        i.level = parseInt(a[9]);
        i.isBot = a[10] != "false";
        i.flags = parseInt(a[11]);
        i.fightId = parseInt(a[12]);
        i.isShadow = a[13] != "false";
        if (this.myId == i.id)
            this.myTeam = i.team;
        this.persById[i.id] = i;
        this.persList[i.team - 1].push(i);
        if (!i.isBot)
            this.userCount[i.team - 1]++
    }
}
;
canvas.app.mem.Model.prototype.persUpdate = function(t) {
    var e = t.split(String.fromCharCode(2));
    var a, i, s = e.length;
    for (var n = 0; n < s; n++) {
        a = e[n].split(String.fromCharCode(1));
        i = this.persById[parseInt(a[0])];
        if (!i)
            continue;
        i.status = parseInt(a[1]);
        i.setRatios(parseInt(a[2]), parseInt(a[3]), parseInt(a[4]), parseInt(a[5]));
        i.flags = parseInt(a[6])
    }
}
;
canvas.app.mem.Model.prototype.parseDeadCount = function(t) {
    var e = t.split(",");
    this.deadCount[0] = parseInt(e[0]);
    this.deadCount[1] = parseInt(e[1])
}
;
canvas.app.mem.Model.prototype.resetEffects = function() {
    this.effects = []
}
;
canvas.app.mem.Model.prototype.parseEffects = function(t) {
    var e = this.effects;
    this.resetEffects();
    if (!this.selectedPers)
        return;
    var a = "|";
    var i = ";";
    var s = t.split(a);
    var n = parseInt(s.shift());
    if (n != this.selectedPers)
        return;
    this.effectsDeltaTime = parseInt(s.shift());
    var r = {};
    for (var o = 0; o < s.length; o++) {
        if (!s[o])
            continue;
        var l = s[o].split(i);
        var c = new canvas.data.battle.EffectInfoData(parseInt(l[0]),l[1],parseInt(l[2]),l[3],parseInt(l[4]),parseInt(l[5]));
        if (r[c.id]) {
            r[c.id].add(c);
            continue
        }
        this.effects.push(c);
        r[c.id] = c
    }
    if (!this.effectsWasChanged) {
        if (this.effects.length != e.length) {
            this.effectsWasChanged = true
        } else {
            for (var o = 0; o < this.effects.length; o++) {
                if (!e[o] || !e[o].equals(this.effects[o])) {
                    this.effectsWasChanged = true;
                    break
                }
            }
        }
    }
}
;
canvas.app.mem.Model.prototype.parseWatchFight = function(t) {
    var e = t.split(String.fromCharCode(1));
    this.watchEnabled = e[0] == "false" ? false : true;
    this.watchTeam = parseInt(e[1]);
    this.watchId = this.watchEnabled ? e[2] ? parseInt(e[2]) : this.watchId : this.myId
}
;
canvas.app.mem.View = function(t) {
    this.root = $(t);
    this.border = $(document.createElement("div"));
    this.border.addClass("mem_border");
    var e = $(document.createElement("div"));
    e.addClass("mem_uzor");
    this.background = $(document.createElement("div"));
    this.background.addClass("mem_background");
    this.container = $(document.createElement("div"));
    this.container.addClass("mem_container");
    this.root.append(this.background);
    this.root.append(e);
    this.root.append(this.border);
    this.root.append(this.container);
    this.leftButton = new canvas.app.mem.view.ToggleButton(canvas.Translator.getText(1300),canvas.Translator.getText(1301));
    this.container.append(this.leftButton.root);
    this.leftButton.selected = !canvas.app.mem.model.deadHidded;
    this.rightButton = new canvas.app.mem.view.ToggleButton(canvas.Translator.getText(1302),canvas.Translator.getText(1303));
    this.container.append(this.rightButton.root);
    this.rightButton.selected = canvas.app.mem.model.showHPMP;
    this.headerBlock = $(document.createElement("div"));
    this.headerBlock.addClass("mem_header_block");
    this.container.append(this.headerBlock);
    this.headers = new Array;
    var a;
    for (var i = 0; i < 2; i++) {
        a = $(document.createElement("div"));
        a.addClass("mem_header_container");
        this.headerBlock.append(a);
        this.headers[i] = new canvas.app.mem.view.HeaderView(i);
        a.append(this.headers[i].root)
    }
    this.input = new canvas.app.mem.view.InputView(canvas.Translator.getText(1306));
    this.container.append(this.input.root);
    this.persList = new canvas.app.mem.view.PersList;
    this.container.append(this.persList.root);
    this.resize()
}
;
canvas.app.mem.View.prototype.resize = function() {
    this.container.css("width", this.border.width() + 92);
    this.container.css("height", this.border.height() + 92);
    this.background.css("width", this.border.width() + 70);
    this.background.css("height", this.border.height() + 70);
    this.persList.root.css("height", this.border.height() - 50)
}
;
canvas.app.mem.View.prototype.update = function() {
    var t = canvas.app.mem.model;
    for (var e = 0; e < 2; e++) {
        this.headers[e].update()
    }
    this.updateList()
}
;
canvas.app.mem.View.prototype.updateList = function() {
    this.persList.update();
    if (canvas.app.mem.model.effectsWasChanged)
        canvas.app.mem.model.effectsWasChanged = false
}
;
canvas.app.mem.view.EffectView = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_effect_item");
    this.countSpan = $(document.createElement("span"));
    this.root.append(this.countSpan);
    this.img = $(document.createElement("img"));
    this.root.append(this.img);
    this.img.addClass("mem_pers_view_button");
    this.root.on("remove", this.removedHandler.bind(this));
    this.img.on("mouseenter", this.overHandler.bind(this)).on("mousemove", this.moveHandler.bind(this)).on("mouseleave", this.outHandler.bind(this)).on("click", this.clickHandler.bind(this))
}
;
canvas.app.mem.view.EffectView.prototype.update = function() {
    if (this.data) {
        this.countSpan.text(this.data.count);
        this.img.attr("src", this.data.image)
    }
}
;
canvas.app.mem.view.EffectView.prototype.clickHandler = function(t) {
    showArtifactInfo(false, this.data.id)
}
;
canvas.app.mem.view.EffectView.prototype.overHandler = function(t) {
    this.root.append('<span class="mem_hint"></span>');
    this.startHintUpdate();
    $(".mem_hint").css({
        left: t.pageX + 10,
        top: t.pageY + 10
    })
}
;
canvas.app.mem.view.EffectView.prototype.moveHandler = function(t) {
    $(".mem_hint").css({
        left: t.pageX + 10,
        top: t.pageY + 10
    })
}
;
canvas.app.mem.view.EffectView.prototype.outHandler = function(t) {
    this.root.children(".mem_hint").remove();
    this.stopHintUpdate()
}
;
canvas.app.mem.view.EffectView.prototype.startHintUpdate = function() {
    this.stopHintUpdate();
    this.updateHint();
    this.hintUpdateInterval = setInterval(this.updateHint.bind(this), 1e3)
}
;
canvas.app.mem.view.EffectView.prototype.stopHintUpdate = function() {
    if (this.hintUpdateInterval)
        clearInterval(this.hintUpdateInterval)
}
;
canvas.app.mem.view.EffectView.prototype.updateHint = function() {
    $(".mem_hint").html(this.getHintText())
}
;
canvas.app.mem.view.EffectView.prototype.getHintText = function() {
    var t = canvas.app.mem.model;
    var e = this.data.title;
    var a = false;
    var i = Math.floor(this.data.finishTime - Date.now() / 1e3 - t.effectsDeltaTime);
    if (i < 0) {}
    var s = "";
    var n = "";
    var r = String(Math.max(0, 1 + i));
    if (i < 3600) {
        switch (canvas.Translator.getLang()) {
        case "turk":
        case "de":
        case "cn":
        case "ru":
            if (this.data.turnsLeft == 1)
                e += "<br/>" + canvas.Translator.getText(44) + " ";
            else
                e += "<br/>" + canvas.Translator.getText(43) + " ";
            s += r + " " + canvas.Translator.getText(2003);
            a = true;
            break;
        case "en":
            e += "<br/>" + " ";
            n += canvas.Translator.getText(43);
            s += r + " " + canvas.Translator.getText(2003);
            a = true;
            break;
        default:
            e += "<br/>" + r;
            a = true;
            break
        }
    }
    if (!a) {
        if (this.data.turnsLeft == 1)
            e += "<br/>" + canvas.Translator.getText(44) + " ";
        else
            e += "<br/>" + canvas.Translator.getText(43) + " "
    }
    if (this.data.turnsLeft > 0 && this.data.turnsLeft < 3600) {
        var o = this.data.turnsLeft;
        if (o >= 10) {
            o = o % 10
        }
        if (o == 1) {
            if (a)
                e += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft) + n + canvas.Translator.getText(53) + " ";
            else
                e += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft)
        }
        if (o > 1 || o == 0) {
            if (a)
                e += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft) + n + canvas.Translator.getText(53) + " ";
            else
                e += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft)
        }
    }
    if (!a && (this.data.turnsLeft <= 0 || this.data.turnsLeft >= 3600)) {
        e = this.data.title
    } else
        e += s;
    return e
}
;
canvas.app.mem.view.EffectView.prototype.getRightPhraseForTurns = function(t) {
    var e = canvas.app.mem.model;
    if (this.isPhraseManyTurns(t))
        return " " + canvas.Translator.getText(52);
    if (this.isPhraseTurn(t))
        return " " + canvas.Translator.getText(50);
    if (this.isPhraseOneTurn(t))
        return " " + canvas.Translator.getText(51);
    return "--:--"
}
;
canvas.app.mem.view.EffectView.prototype.isPhraseManyTurns = function(t) {
    var e = t % 100;
    if (e >= 11 && e <= 20)
        return true;
    e = t % 10;
    if (e >= 5 && e <= 9)
        return true;
    if (e == 0)
        return true;
    return false
}
;
canvas.app.mem.view.EffectView.prototype.isPhraseTurn = function(t) {
    var e = t % 10;
    if (e >= 2 && e <= 4)
        return true;
    return false
}
;
canvas.app.mem.view.EffectView.prototype.isPhraseOneTurn = function(t) {
    var e = t % 10;
    if (e == 1)
        return true;
    return false
}
;
canvas.app.mem.view.EffectView.prototype.removedHandler = function(t) {
    this.outHandler()
}
;
canvas.app.mem.view.HeaderView = function(t) {
    this._my = undefined;
    Object.defineProperty(this, "my", {
        get: function() {
            return this._my
        },
        set: function(t) {
            if (this._my === t)
                return;
            this._my = t;
            if (t) {
                this.root.removeClass("mem_header_grey");
                this.root.addClass("mem_header_green")
            } else {
                this.root.removeClass("mem_header_green");
                this.root.addClass("mem_header_grey")
            }
        }
    });
    this.index = t;
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_header");
    this.labelTop = $(document.createElement("div"));
    this.labelTop.attr("id", "label_top");
    this.root.append(this.labelTop);
    this.labelBottom = $(document.createElement("div"));
    this.labelBottom.attr("id", "label_bottom");
    this.root.append(this.labelBottom);
    this.labelTitle = $(document.createElement("div"));
    this.labelTitle.attr("id", "label_title");
    this.root.append(this.labelTitle);
    this.setTitleLabel(canvas.Translator.getText(t ? 1305 : 1304));
    var e = canvas.Translator.getText(71);
    this.root.on("mouseenter", function(t) {
        if (e) {
            $(this).append('<span class="mem_hint">' + e + "</span>");
            $(".mem_hint").css({
                left: t.pageX + 10,
                top: t.pageY + 10
            })
        }
    }).on("mousemove", function(t) {
        $(".mem_hint").css({
            left: t.pageX + 10,
            top: t.pageY + 10
        })
    }).on("mouseleave", function() {
        $(this).children(".mem_hint").remove()
    });
    this.update()
}
;
canvas.app.mem.view.HeaderView.prototype.update = function() {
    var t = canvas.app.mem.model;
    this.my = t.myTeam == this.index + 1;
    this.setTopLabel(t.persList[this.index].length + " (" + t.userCount[this.index] + ")");
    this.setBottomLabel(t.deadCount[this.index])
}
;
canvas.app.mem.view.HeaderView.prototype.setTopLabel = function(t) {
    this.labelTop.text(t)
}
;
canvas.app.mem.view.HeaderView.prototype.setBottomLabel = function(t) {
    this.labelBottom.text(t)
}
;
canvas.app.mem.view.HeaderView.prototype.setTitleLabel = function(t) {
    this.labelTitle.text(t)
}
;
canvas.app.mem.view.InputView = function(t) {
    this.defaultText = t;
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_input");
    var e = $(document.createElement("div"));
    this.root.append(e);
    this.input = $(document.createElement("input"));
    this.input.attr("type", "text");
    this.input.attr("maxlength", 20);
    e.append(this.input);
    this.input.on("input", this.changeHandler.bind(this));
    this.input.focusin(this.focusInHandler.bind(this));
    this.input.focusout(this.focusOutHandler.bind(this));
    this.focusOutHandler()
}
;
canvas.app.mem.view.InputView.prototype.changeHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.INPUT, this, this.input.val())
}
;
canvas.app.mem.view.InputView.prototype.focusInHandler = function() {
    if (this.input.val() == this.defaultText)
        this.input.val("")
}
;
canvas.app.mem.view.InputView.prototype.focusOutHandler = function() {
    if (this.input.val() == "")
        this.input.val(this.defaultText)
}
;
canvas.app.mem.view.PersList = function() {
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_pers_list");
    this.containers = new Array;
    this.persList = new Array;
    for (var t = 0; t < 2; t++) {
        this.persList[t] = new Array;
        this.containers[t] = $(document.createElement("div"));
        this.containers[t].addClass("mem_pers_list_container");
        this.root.append(this.containers[t])
    }
    this.update()
}
;
canvas.app.mem.view.PersList.prototype.update = function() {
    var t = canvas.app.mem.model;
    var e, a, i, s;
    for (a = 0; a < 2; a++) {
        if (this.persList[a].length < t.persList[a].length) {
            for (i = this.persList[a].length; i < t.persList[a].length; i++) {
                e = new canvas.app.mem.view.PersView;
                e.data = t.persList[a][i];
                this.persList[a][i] = e;
                this.containers[a].append(e.root)
            }
        }
    }
    for (a = 0; a < 2; a++) {
        s = this.persList[a].length;
        for (i = 0; i < s; i++) {
            this.persList[a][i].update()
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.UPDATE_VISIBLE_IDS, null, this.getVisibleIds())
}
;
canvas.app.mem.view.PersList.prototype.updateBarsVisible = function() {
    for (var t = 0; t < 2; t++) {
        var e = this.persList[t].length;
        for (var a = 0; a < e; a++) {
            this.persList[t][a].updateBarsVisible()
        }
    }
}
;
canvas.app.mem.view.PersList.prototype.getVisibleIds = function() {
    var t = [];
    for (var e = 0; e < 2; e++) {
        var a = this.persList[e].length;
        for (var i = 0; i < a; i++) {
            if (this.isElementInView(this.persList[e][i].root.context, true)) {
                t.push(this.persList[e][i].data.id)
            }
        }
    }
    return t.sort(function(t, e) {
        return t - e
    }).join(",")
}
;
canvas.app.mem.view.PersList.prototype.isElementInView = function(t, e) {
    return true
}
;
canvas.app.mem.view.PersView = function() {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t;
            this.update()
        }
    });
    this._hpmpVisible = true;
    Object.defineProperty(this, "hpmpVisible", {
        get: function() {
            return this._hpmpVisible
        },
        set: function(t) {
            if (this._hpmpVisible != t) {
                this._hpmpVisible = t;
                if (t) {
                    this.hpmpContainer.show();
                    this.hpmpBr.show()
                } else {
                    this.hpmpContainer.hide();
                    this.hpmpBr.hide()
                }
            }
        }
    });
    this._visible = true;
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            if (this._visible != t) {
                this._visible = t;
                if (t) {
                    this.root.show()
                } else {
                    this.root.hide()
                }
            }
        }
    });
    this._nickEnabled = true;
    Object.defineProperty(this, "nickEnabled", {
        get: function() {
            return this._nickEnabled
        },
        set: function(t) {
            if (this._nickEnabled != t) {
                this._nickEnabled = t;
                if (t) {
                    this.nickDiv.addClass("mem_pers_view_button")
                } else {
                    this.nickDiv.removeClass("mem_pers_view_button")
                }
            }
        }
    });
    this._watchSelected = false;
    Object.defineProperty(this, "watchSelected", {
        get: function() {
            return this._watchSelected
        },
        set: function(t) {
            if (this._watchSelected != t) {
                this._watchSelected = t;
                this.watchImg.attr("src", t ? "../images/mem_watch_fight_dis.png" : "../images/mem_watch_fight.png");
                if (t) {
                    this.watchImg.removeClass("mem_pers_view_button")
                } else {
                    this.watchImg.addClass("mem_pers_view_button")
                }
            }
        }
    });
    this.inited = false;
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_pers_view");
    var t = this;
    this.watchImg = $(document.createElement("img"));
    this.watchImg.attr("src", "../images/mem_watch_fight.png");
    this.watchImg.addClass("mem_pers_view_button");
    this.watchImg.mouseover(function() {
        if (!t.watchSelected)
            $(this).attr("src", "../images/mem_watch_fight_over.png")
    });
    this.watchImg.mouseout(function() {
        if (!t.watchSelected)
            $(this).attr("src", "../images/mem_watch_fight.png")
    });
    this.watchImg.click(this.watchClickHandler.bind(this));
    this.root.append(this.watchImg);
    this.watchImg.hide();
    this.prvImg = $(document.createElement("img"));
    this.prvImg.attr("src", "../images/users-arrow.gif");
    this.prvImg.addClass("mem_pers_view_button");
    this.prvImg.mouseover(function() {
        $(this).attr("src", "../images/users-arrow-org.gif")
    });
    this.prvImg.mouseout(function() {
        $(this).attr("src", "../images/users-arrow.gif")
    });
    this.prvImg.click(this.prvClickHandler.bind(this));
    this.root.append(this.prvImg);
    this.clanImg = $(document.createElement("img"));
    this.root.append(this.clanImg);
    this.nickDiv = $(document.createElement("div"));
    this.nickDiv.addClass("mem_pers_view_button");
    this.nickDiv.click(this.nickClickHandler.bind(this));
    this.nickDiv.dblclick(this.nickDoubleClickHandler.bind(this));
    this.root.append(this.nickDiv);
    this.infoImg = $(document.createElement("img"));
    this.infoImg.attr("src", "../images/player_info.gif");
    this.infoImg.addClass("mem_pers_view_button");
    this.infoImg.mouseover(function() {
        $(this).attr("src", "../images/player_info_over.gif")
    });
    this.infoImg.mouseout(function() {
        $(this).attr("src", "../images/player_info.gif")
    });
    this.infoImg.click(this.infoClickHandler.bind(this));
    this.root.append(this.infoImg);
    this.hpmpBr = $(document.createElement("br"));
    this.root.append(this.hpmpBr);
    this.hpmpContainer = $(document.createElement("div"));
    this.root.append(this.hpmpContainer);
    var e = $(document.createElement("div"));
    e.addClass("mem_bar_back");
    this.hpmpContainer.append(e);
    this.hpDiv = $(document.createElement("div"));
    this.hpDiv.addClass("mem_bar_hp");
    e.append(this.hpDiv);
    e = $(document.createElement("br"));
    this.hpmpContainer.append(e);
    e = $(document.createElement("div"));
    e.addClass("mem_bar_back");
    this.hpmpContainer.append(e);
    this.mpDiv = $(document.createElement("div"));
    this.mpDiv.addClass("mem_bar_mp");
    e.append(this.mpDiv);
    e = $(document.createElement("br"));
    this.root.append(e);
    this.effectsContainer = $(document.createElement("div"));
    this.effectsContainer.addClass("mem_effects_container");
    this.effects = [];
    this.root.append(this.effectsContainer)
}
;
canvas.app.mem.view.PersView.prototype.update = function() {
    var t = canvas.app.mem.model;
    if (this.data) {
        var e = this.isFlee();
        if (this.data.wasChanged) {
            var t = canvas.app.mem.model;
            this.data.wasChanged = false;
            if (!this.inited) {
                this.inited = true;
                this.init()
            }
            this.nickDiv.css("color", this.getNickColor());
            this.nickEnabled = !e;
            this.hpDiv.css("width", Math.round(this.data.hpRatio * 100) + "%");
            this.mpDiv.css("width", Math.round(this.data.mpRatio * 100) + "%")
        }
        if (t.effectsWasChanged || e)
            this.clearEffects();
        if (t.selectedPers == this.data.id && !e) {
            this.root.addClass("mem_pers_view_selected");
            if (t.effectsWasChanged)
                this.renderEffects();
            if (t.autoScrollToSelected) {
                this.root.context.scrollIntoView(false);
                t.autoScrollToSelected = false
            }
        } else {
            this.root.removeClass("mem_pers_view_selected")
        }
        this.updateVisible();
        this.updateWatch()
    }
}
;
canvas.app.mem.view.PersView.prototype.updateVisible = function() {
    var t = canvas.app.mem.model;
    this.visible = (!t.deadHidded || this.data.status != canvas.app.battle.Const.STATUS_DEAD) && (!t.filterText || this.data.nick.toLowerCase().indexOf(t.filterText.toLowerCase()) >= 0)
}
;
canvas.app.mem.view.PersView.prototype.updateWatch = function() {
    var t = canvas.app.mem.model;
    if (!this.data.isBot && t.watchEnabled && t.watchTeam == this.data.team && (this.data.status != canvas.app.battle.Const.STATUS_DEAD || this.data.id == t.myId)) {
        this.watchImg.show();
        this.watchSelected = this.data.id == t.watchId
    } else {
        this.watchImg.hide()
    }
}
;
canvas.app.mem.view.PersView.prototype.updateBarsVisible = function() {
    this.hpmpVisible = canvas.app.mem.model.showHPMP
}
;
canvas.app.mem.view.PersView.prototype.init = function() {
    if (this.data.nick.length > 10) {
        this.nickDiv.text(this.data.nick.substr(0, 10) + "..." + "[" + this.data.level + "]")
    } else {
        this.nickDiv.text(this.data.nick + "[" + this.data.level + "]")
    }
    if (this.data.clanImage) {
        this.clanImg.attr("src", "../images/data/clans/" + this.data.clanImage);
        this.clanImg.show()
    } else {
        this.clanImg.hide()
    }
    this.updateBarsVisible()
}
;
canvas.app.mem.view.PersView.prototype.clearEffects = function() {
    this.effectsContainer.empty();
    for (var t = 0; t < this.effects.length; t++) {
        this.effects[t].removedHandler()
    }
    this.effects = []
}
;
canvas.app.mem.view.PersView.prototype.renderEffects = function() {
    var t = canvas.app.mem.model;
    for (var e = 0; e < t.effects.length; e++) {
        var a = new canvas.app.mem.view.EffectView;
        a.data = t.effects[e];
        this.effectsContainer.append(a.root);
        this.effects.push(a)
    }
}
;
canvas.app.mem.view.PersView.prototype.getNickColor = function() {
    var t = canvas.app.mem.model;
    if (t.oppId == this.data.id)
        return "#074cb4";
    if (this.isFlee())
        return "#FA9B4E";
    switch (this.data.status) {
    case canvas.app.battle.Const.STATUS_CREATED:
        return "#B89880";
    case canvas.app.battle.Const.STATUS_WAIT:
    case canvas.app.battle.Const.STATUS_ACTIVE:
    case canvas.app.battle.Const.STATUS_PASSIVE:
        return t.myId != this.data.id ? "#674F3D" : "#006600";
    case canvas.app.battle.Const.STATUS_DEAD:
        return "#FF0000";
    default:
        return "#674F3D"
    }
}
;
canvas.app.mem.view.PersView.prototype.isFlee = function() {
    return canvas.Functions.testFlag(this.data.flags, canvas.app.battle.Const.FS_PF_FLEE)
}
;
canvas.app.mem.view.PersView.prototype.nickClickHandler = function() {
    if (this.data && canvas.app.mem.model.selectedPers != this.data.id && !this.isFlee()) {
        canvas.EventManager.dispatchEvent(canvas.app.mem.Event.PERS_SELECT, null, this.data.id)
    }
}
;
canvas.app.mem.view.PersView.prototype.nickDoubleClickHandler = function() {
    if (!this.isFlee())
        this.watchClickHandler()
}
;
canvas.app.mem.view.PersView.prototype.prvClickHandler = function() {
    userPrvTag(this.data.nick)
}
;
canvas.app.mem.view.PersView.prototype.infoClickHandler = function() {
    var t = canvas.app.mem.model;
    if (canvas.Functions.testFlag(t.fightFlags, canvas.app.battle.Const.FIGHT_FLAG_BLIND) || canvas.Functions.testFlag(this.data.flags, canvas.app.battle.Const.FS_PF_INVISIBLE) && t.invisibleInfoUrl)
        canvas.Functions.navigateToURL(t.invisibleInfoUrl, "_blank");
    else if (this.data.isShadow)
        showShadowInfo(false, String(this.data.id), false, this.data.fightId, t.fightServerId ? t.fightServerId : false);
    else if (this.data.isBot)
        showBotInfo(String(this.data.id), "0", this.data.fightId, t.fightServerId ? t.fightServerId : false);
    else
        showUserInfo(this.data.nick, t["team" + this.data.team + "serverUrl"] ? t["team" + this.data.team + "serverUrl"] : false)
}
;
canvas.app.mem.view.PersView.prototype.watchClickHandler = function() {
    if (!this.watchSelected && this.watchImg.is(":visible")) {
        canvas.EventManager.dispatchEvent(canvas.app.mem.Event.WATCH_SELECT, null, this.data.id)
    }
}
;
canvas.app.mem.view.ToggleButton = function(t, e) {
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            if (t) {
                this.label.text(this.label1);
                this.root.removeClass("mem_button_white");
                this.root.addClass("mem_button_red")
            } else {
                this.label.text(this.label2);
                this.root.removeClass("mem_button_red");
                this.root.addClass("mem_button_white")
            }
        }
    });
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_button");
    this.label = $(document.createElement("div"));
    this.root.append(this.label);
    this.label1 = t;
    this.label2 = e;
    this.selected = true;
    this.root.click(this.clickHandler.bind(this))
}
;
canvas.app.mem.view.ToggleButton.prototype.clickHandler = function() {
    this.selected = !this.selected;
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this, this.selected)
}
;
canvas.app.firstBattle.Const = {
    WIDTH: 464,
    HEIGHT: 359,
    STATE_SELECT_GENDER: 1,
    STATE_BATTLE: 2,
    STATE_BATTLE_FINISH: 3
};
canvas.app.firstBattle.Event = {
    ENTER_FRAME: "FirstBattle.ENTER_FRAME",
    HINT_ADD: "FirstBattle.HINT_ADD",
    HINT_REMOVE: "FirstBattle.HINT_REMOVE",
    GENDER_CHANGE: "FirstBattle.GENDER_CHANGE",
    GENDER_SELECT: "FirstBattle.GENDER_SELECT",
    BLOCK_CHANGE: "FirstBattle.BLOCK_CHANGE",
    PERS_ATTACK: "FirstBattle.PERS_ATTACK",
    PERS_DAMAGE: "FirstBattle.PERS_DAMAGE",
    PERS_EFFECT_DAMAGE: "FirstBattle.PERS_EFFECT_DAMAGE",
    PERS_ATTACK_SPELL: "FirstBattle.PERS_ATTACK_SPELL",
    ENEMY_ATTACK: "FirstBattle.ENEMY_ATTACK",
    ENEMY_DAMAGE: "FirstBattle.ENEMY_DAMAGE",
    ENEMY_DEAD: "FirstBattle.ENEMY_DEAD",
    FINISH: "FirstBattle.FINISH"
};
canvas.app.firstBattle.Main = function(t, e) {
    canvas.px.Container.call(this);
    this.model = t;
    this.hintManager = e;
    this.hintContainer = new canvas.px.Container;
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.GENDER_CHANGE, null, this.genderChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.GENDER_SELECT, null, this.genderSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.BLOCK_CHANGE, null, this.blockChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_ATTACK, null, this.persAttackHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_ATTACK_SPELL, null, this.persAttackSpellHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_DAMAGE, null, this.persDamageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_ATTACK, null, this.enemyAttackHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_DAMAGE, null, this.enemyDamageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_EFFECT_DAMAGE, null, this.persEffectDamageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_DEAD, null, this.enemyDeadHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.FINISH, null, this.finishHandler, this);
    this.view = new canvas.app.firstBattle.View;
    this.addChild(this.view);
    this.addChild(this.hintContainer)
}
;
canvas.app.firstBattle.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
;
canvas.app.firstBattle.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
;
canvas.app.firstBattle.Main.prototype.genderChangeHandler = function(t) {
    this.model.gender = this.model.gender == canvas.Const.GENDER.MALE ? canvas.Const.GENDER.FEMALE : canvas.Const.GENDER.MALE;
    this.view.update()
}
;
canvas.app.firstBattle.Main.prototype.genderSelectHandler = function(t) {
    this.model.state = canvas.app.firstBattle.Const.STATE_BATTLE;
    this.view.update()
}
;
canvas.app.firstBattle.Main.prototype.blockChangeHandler = function(t) {
    this.model.blockOn = !this.model.blockOn;
    this.view.update();
    this.view.battleView.persIdle()
}
;
canvas.app.firstBattle.Main.prototype.persAttackHandler = function(t) {
    this.model.myTurn = false;
    this.view.battleView.persAttack(t.params)
}
;
canvas.app.firstBattle.Main.prototype.persAttackSpellHandler = function(t) {
    this.model.myTurn = false;
    this.model.persCastSpell();
    this.view.battleView.persAttackSpell(t.params);
    this.view.update()
}
;
canvas.app.firstBattle.Main.prototype.persDamageHandler = function(t) {
    this.model.myTurn = true;
    var e = this.model.persDamage();
    this.view.update();
    this.view.battleView.persDamage(e)
}
;
canvas.app.firstBattle.Main.prototype.persEffectDamageHandler = function(t) {
    var e = this.model.persEffectDamage();
    this.view.update();
    this.view.battleView.persEffectDamage(e)
}
;
canvas.app.firstBattle.Main.prototype.enemyAttackHandler = function(t) {}
;
canvas.app.firstBattle.Main.prototype.enemyDamageHandler = function(t) {
    var e = this.model.enemyDamage(t.params);
    this.view.update();
    this.view.battleView.enemyDamage(e)
}
;
canvas.app.firstBattle.Main.prototype.enemyDeadHandler = function(t) {
    this.model.state = canvas.app.firstBattle.Const.STATE_BATTLE_FINISH;
    this.view.update()
}
;
canvas.app.firstBattle.Main.prototype.finishHandler = function(t) {
    canvas.Functions.navigateToURL(this.model.link, "_blank")
}
;
canvas.app.firstBattle.Model = function(t) {
    this.gender = canvas.Const.GENDER.MALE;
    this.state = canvas.app.firstBattle.Const.STATE_SELECT_GENDER;
    this.blockOn = false;
    this.spells = {};
    this.spells[1] = {
        effId: 1,
        title: 1706,
        picture: "spell_fire"
    };
    this.spells[2] = {
        effId: 2,
        title: 1707,
        picture: "spell_air"
    };
    this.spells[3] = {
        effId: 3,
        title: 1708,
        picture: "spell_light"
    };
    this.spells[4] = {
        effId: 4,
        title: 1709,
        picture: "spell_earth"
    };
    this.spells[5] = {
        effId: 5,
        title: 1710,
        picture: "spell_dark"
    };
    this.mode = canvas.app.battle.Const.MODE_ATTACK;
    this.totalDamage = 0;
    this.myTurn = true;
    this.persNumAttacks = 0;
    this.enemyNumAttacks = 0;
    this.effectUsed = false;
    this.spellsUsed = false;
    this.parse(t)
}
;
canvas.app.firstBattle.Model.prototype.parse = function(t) {
    this.persParams = {};
    this.persParams[canvas.Const.GENDER.MALE] = {
        nick: this.ok(t.fight_user_male_nick) ? t.fight_user_male_nick : "Warrior",
        sk: this.ok(t.fight_user_male_skeleton) ? t.fight_user_male_skeleton : 1,
        parts: this.ok(t.fight_user_male_parts) ? t.fight_user_male_parts : "590330;;;,0,0;;;,0;;;,0;;;,404;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,0;;;,0;;;,1186;;;,0;;;,0;;;,1368;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;",
        level: 5,
        curHp: 200,
        maxHp: 200,
        curMp: 100,
        maxMp: 100
    };
    this.persParams[canvas.Const.GENDER.FEMALE] = {
        nick: this.ok(t.fight_user_female_nick) ? t.fight_user_female_nick : "Warrior",
        sk: this.ok(t.fight_user_female_skeleton) ? t.fight_user_female_skeleton : 1,
        parts: this.ok(t.fight_user_female_parts) ? t.fight_user_female_parts : "262159;;;,0,0;;;,0;;;,0;;;,407;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,0;;;,0;;;,1187;;;,0;;;,0;;;,1369;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;",
        level: 5,
        curHp: 200,
        maxHp: 200,
        curMp: 100,
        maxMp: 100
    };
    this.enemyParams = {
        nick: this.ok(t.fight_enemy_nick) ? t.fight_enemy_nick : "Enemy",
        sk: this.ok(t.fight_enemy_skeleton) ? t.fight_enemy_skeleton : 1160,
        parts: this.ok(t.fight_enemy_parts) ? t.fight_enemy_parts : "",
        level: 6,
        curHp: 250,
        maxHp: 250,
        curMp: 150,
        maxMp: 150
    };
    this.link = this.ok(t.link) ? t.link : "https://w1.dwar.ru/"
}
;
canvas.app.firstBattle.Model.prototype.getPersParams = function() {
    return this.persParams[this.gender]
}
;
canvas.app.firstBattle.Model.prototype.enemyIsDead = function() {
    return this.enemyParams.curHp < 1
}
;
canvas.app.firstBattle.Model.prototype.ok = function(t) {
    return t != undefined
}
;
canvas.app.firstBattle.Model.prototype.getAnimationNameByZone = function(t) {
    switch (parseInt(t)) {
    case 1:
        return "a_up_1";
    case 2:
        return "a_mid_1";
    case 3:
        return "a_bot_1"
    }
    return "a_mid_1"
}
;
canvas.app.firstBattle.Model.prototype.getSpellBySlot = function(t) {
    switch (parseInt(t)) {
    case 1:
        return "_SP2";
    case 2:
        return "_SP1";
    case 3:
        return "_SP5";
    case 4:
        return "_SP4";
    case 5:
        return "_SP6"
    }
    return "_SP1"
}
;
canvas.app.firstBattle.Model.prototype.persCastSpell = function() {
    this.getPersParams().curMp -= 12
}
;
canvas.app.firstBattle.Model.prototype.persDamage = function() {
    this.enemyNumAttacks++;
    var t = 20 + Math.floor(Math.random() * 10);
    if (this.getPersParams().curHp < 70 || Math.random() >= this.getPersParams().curHp / this.getPersParams().maxHp)
        t = 0;
    if (this.blockOn)
        t = Math.ceil(t * .5);
    this.getPersParams().curHp -= t;
    if (this.getPersParams().curHp <= 0) {
        this.getPersParams().curHp = this.getPersParams().curMp = 0
    }
    return t
}
;
canvas.app.firstBattle.Model.prototype.persEffectDamage = function() {
    var t = 5 + Math.floor(Math.random() * 4);
    this.getPersParams().curHp -= t;
    if (this.getPersParams().curHp <= 0) {
        this.getPersParams().curHp = this.getPersParams().curMp = 0
    }
    return t
}
;
canvas.app.firstBattle.Model.prototype.enemyDamage = function(t) {
    this.persNumAttacks++;
    var e = (t ? 40 : 30) + Math.floor(Math.random() * 10);
    if (this.persNumAttacks == 2)
        e = 0;
    if (this.persNumAttacks == 3)
        e *= 2;
    if (this.blockOn)
        e = Math.ceil(e * .5);
    this.enemyParams.curHp -= e;
    if (this.enemyParams.curHp <= 0) {
        this.enemyParams.curHp = this.enemyParams.curMp = 0
    }
    this.totalDamage += e;
    return e
}
;
canvas.app.firstBattle.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.firstBattle.model;
    var e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    e.position.set(14, 10);
    e = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_contour"),49,49,49,49));
    e.width = canvas.app.firstBattle.Const.WIDTH;
    e.height = canvas.app.firstBattle.Const.HEIGHT;
    e = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0));
    e.width = 150;
    e.y = 345;
    e.x = Math.round((canvas.app.firstBattle.Const.WIDTH - e.width) * .5);
    e = e.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,e.width - 20,20,"center"));
    e.position.set(10, 2);
    e.text = canvas.Translator.getText(1700);
    this.infoField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7158057,canvas.app.firstBattle.Const.WIDTH - 20,50,"center"));
    this.infoField.position.set(10, 370);
    this.infoField.text = canvas.Translator.getText(1701);
    t.gender = canvas.Const.GENDER.MALE;
    this.persPreviewMale = new canvas.animation.Skeleton(canvas.Config.skPath + "M/sk0" + t.getPersParams().sk);
    this.addChild(this.persPreviewMale);
    this.persPreviewMale.position.set(120, 15);
    this.persPreviewMale.skeletonData = new canvas.data.battle.SkeletonData(t.getPersParams().parts,"M");
    this.persPreviewMale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.persPreviewMale.scale.x = this.persPreviewMale.scale.y = .85;
    this.persPreviewMale.visible = false;
    t.gender = canvas.Const.GENDER.FEMALE;
    this.persPreviewFemale = new canvas.animation.Skeleton(canvas.Config.skPath + "F/sk0" + t.getPersParams().sk);
    this.addChild(this.persPreviewFemale);
    this.persPreviewFemale.position.set(120, 15);
    this.persPreviewFemale.skeletonData = new canvas.data.battle.SkeletonData(t.getPersParams().parts,"F");
    this.persPreviewFemale.scale.x = this.persPreviewFemale.scale.y = .85;
    this.persPreviewFemale.visible = false;
    t.gender = canvas.Const.GENDER.MALE;
    this.selectGenderWindow = this.addChild(new canvas.app.firstBattle.view.SelectGenderWindow);
    this.selectGenderWindow.position.set(Math.round((canvas.app.firstBattle.Const.WIDTH - this.selectGenderWindow.width) * .5), 20);
    if (!this.persPreviewMale.ready) {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.persPreviewMale, this.completeHandler, this)
    } else {
        this.update()
    }
}
;
canvas.app.firstBattle.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.View.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.persPreviewMale, this.completeHandler, this);
    this.update()
}
;
canvas.app.firstBattle.View.prototype.update = function() {
    var t = canvas.app.firstBattle.model;
    switch (t.state) {
    case canvas.app.firstBattle.Const.STATE_SELECT_GENDER:
        if (this.selectGenderWindow)
            this.selectGenderWindow.update();
        if (canvas.app.firstBattle.model.gender == canvas.Const.GENDER.MALE) {
            this.persPreviewMale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
            this.persPreviewMale.gotoAndPlay("idle");
            this.persPreviewMale.visible = true;
            this.persPreviewFemale.frameEvent = "";
            this.persPreviewFemale.visible = false
        } else {
            this.persPreviewFemale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
            this.persPreviewFemale.gotoAndPlay("idle");
            this.persPreviewFemale.visible = true;
            this.persPreviewMale.frameEvent = "";
            this.persPreviewMale.visible = false
        }
        break;
    case canvas.app.firstBattle.Const.STATE_BATTLE:
        if (this.selectGenderWindow)
            this.selectGenderWindow.destroy({
                children: true
            });
        if (this.persPreviewMale)
            this.persPreviewMale.destroy();
        if (this.persPreviewFemale)
            this.persPreviewFemale.destroy();
        if (!this.battleView) {
            this.battleView = this.addChild(new canvas.app.firstBattle.view.BattleView);
            this.battleView.x = 10
        }
        if (this.battleView)
            this.battleView.update();
        this.infoField.text = canvas.Translator.getText(t.persNumAttacks >= 3 ? 1718 : 1717);
        break;
    case canvas.app.firstBattle.Const.STATE_BATTLE_FINISH:
        if (!this.finishView) {
            var e = this.addChild(new canvas.px.Mask(canvas.app.firstBattle.Const.WIDTH - 20,canvas.app.firstBattle.Const.HEIGHT - 20,0,.7));
            e.position.set(10, 10);
            this.finishView = this.addChild(new canvas.app.firstBattle.view.FinishView);
            this.finishView.position.set(5, 0);
            this.infoField.text = canvas.Translator.getText(1715)
        }
        break
    }
}
;
canvas.app.firstBattle.view.BattleView = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.firstBattle.model;
    this.container = this.addChild(new canvas.px.Container);
    this.wall = this.addChild(new canvas.px.Mask(436,331,1,1));
    this.wall.position.set(4, 13);
    this.container.mask = this.wall;
    this.topImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_top"));
    this.damageText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,100,16,"center");
    this.damageText.text = canvas.Translator.getText(30);
    this.hpmp = new canvas.app.firstBattle.view.HpMpView;
    this.persNick = new canvas.app.firstBattle.view.NickView;
    this.persNick.update(t.getPersParams().nick);
    this.oppNick = new canvas.app.firstBattle.view.NickView;
    this.oppNick.update(t.enemyParams.nick);
    this.persLevel = new canvas.app.firstBattle.view.LevelView;
    this.persLevel.setLevel(t.getPersParams().level);
    this.oppLevel = new canvas.app.firstBattle.view.LevelView;
    this.oppLevel.setLevel(t.enemyParams.level);
    this.totalDamage = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,70,17,"center");
    this.addChild(this.topImage);
    this.topImage.position.set(20, -4);
    this.addChild(this.damageText);
    this.damageText.position.set(172, 38);
    this.addChild(this.hpmp);
    this.addChild(this.persNick);
    this.persNick.position.set(133, 14);
    this.addChild(this.oppNick);
    this.oppNick.position.set(312, 14);
    this.addChild(this.persLevel);
    this.persLevel.position.set(36, 4);
    this.addChild(this.oppLevel);
    this.oppLevel.position.set(374, 4);
    this.addChild(this.totalDamage);
    this.totalDamage.position.set(188, 52);
    this.pers = new canvas.animation.Skeleton(canvas.Config.skPath + t.gender + "/sk0" + t.getPersParams().sk);
    this.pers.TURN = this.persTurn.bind(this);
    this.container.addChild(this.pers);
    this.persBasePos = new canvas.px.Point(-10,10);
    this.pers.position.set(this.persBasePos.x, this.persBasePos.y);
    this.pers.skeletonData = new canvas.data.battle.SkeletonData(t.getPersParams().parts,t.gender);
    this.pers.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.pers.scale.x = this.pers.scale.y = .85;
    this.pers.gotoAndPlay("idle");
    this.enemy = new canvas.animation.Bot(canvas.Config.botsPath + "img" + t.enemyParams.sk + "/img" + t.enemyParams.sk);
    this.container.addChild(this.enemy);
    this.enemy.position.set(465, 20);
    this.enemy.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.enemy.scale.x = -1;
    this.enemy.TURN = this.enemyTurn.bind(this);
    this.centerView = new canvas.app.firstBattle.view.CenterView(this);
    this.addChild(this.centerView);
    this.centerView.buildSpells();
    this.centerView.position.set(222, 226);
    this.setCenterVisible(true);
    this.centerView.cDot.switchDot(true)
}
;
canvas.app.firstBattle.view.BattleView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.BattleView.prototype.update = function(t) {
    var e = canvas.app.firstBattle.model;
    this.centerView.activeBlock(e.blockOn);
    this.totalDamage.text = e.totalDamage;
    this.hpmp.setHpPers(e.getPersParams().curHp, e.getPersParams().maxHp);
    this.hpmp.setMpPers(e.getPersParams().curMp, e.getPersParams().maxMp);
    this.hpmp.setHpOpp(e.enemyParams.curHp, e.enemyParams.maxHp);
    this.hpmp.setMpOpp(e.enemyParams.curMp, e.enemyParams.maxMp)
}
;
canvas.app.firstBattle.view.BattleView.prototype.persIdle = function() {
    var t = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(t.blockOn ? "protected" : "idle")
}
;
canvas.app.firstBattle.view.BattleView.prototype.setCenterVisible = function(t) {
    this.centerView.setVisible(t)
}
;
canvas.app.firstBattle.view.BattleView.prototype.playComboHit = function() {
    var t = new canvas.app.firstBattle.view.ComboHint;
    this.addChild(t);
    t.position.set(222, 110)
}
;
canvas.app.firstBattle.view.BattleView.prototype.showDmg = function(t) {
    this.addChild(new canvas.app.firstBattle.view.DmgFly(t,0))
}
;
canvas.app.firstBattle.view.BattleView.prototype.persAttack = function(t) {
    var e = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(e.persNumAttacks == 2 ? "combo_1" : e.getAnimationNameByZone(t));
    this.moveInterval = setInterval(this.persMoveIntervalHandler.bind(this), 60);
    this.moveIndex = 0;
    this.setCenterVisible(false)
}
;
canvas.app.firstBattle.view.BattleView.prototype.persAttackSpell = function(t) {
    var e = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay("spell_1");
    this.setCenterVisible(false);
    var a = e.getSpellBySlot(t);
    var i = new canvas.px.MovieClip(canvas.Config.spellsPath + a);
    this.sndPlay(a);
    i.autoDestroy = true;
    i.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.container.addChild(i);
    i.position.set(220, 200);
    setTimeout(this.persAttackSpellDamage.bind(this), 1e3);
    setTimeout(this.enemyAttack.bind(this), 3e3)
}
;
canvas.app.firstBattle.view.BattleView.prototype.persAttackSpellDamage = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DAMAGE, null, {
        spell: true
    })
}
;
canvas.app.firstBattle.view.BattleView.prototype.persMoveIntervalHandler = function() {
    this.pers.x = this.persBasePos.x + Math.abs(this.moveIndex) * 10;
    this.moveIndex += this.moveIndex > 0 ? 1 : 2;
    if (this.moveIndex == 12) {
        this.moveIndex = -12;
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DAMAGE)
    }
    if (this.moveIndex == 0) {
        clearInterval(this.moveInterval);
        this.pers.x = this.persBasePos.x;
        setTimeout(this.enemyAttack.bind(this), 2e3)
    }
}
;
canvas.app.firstBattle.view.BattleView.prototype.enemyDamage = function(t) {
    var e = canvas.app.firstBattle.model;
    if (e.persNumAttacks == 3)
        this.playComboHit();
    this.enemy.gotoAndPlay(t > 0 ? e.enemyIsDead() ? "die" : "wound" : "block");
    this.sndPlay(t < 1 ? "block_weapon_1" : "wound_punch_" + (canvas.Functions.random(3) + 1));
    if (e.enemyIsDead())
        this.sndPlay("body_fall");
    this.showDmg({
        tar: "opp",
        kick: t > 0 ? e.persNumAttacks == 3 ? canvas.app.battle.Const.DMG_KICK_CRIT : canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_BLOCK,
        val: -t
    })
}
;
canvas.app.firstBattle.view.BattleView.prototype.persDamage = function(t) {
    var e = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(t > 0 ? "wound_1" : "dodge_1");
    this.sndPlay(t < 1 ? "dodge" : "wound_punch_" + (canvas.Functions.random(3) + 1));
    this.showDmg({
        tar: "pers",
        kick: t > 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_DODGE,
        val: -t
    });
    if (!e.effectUsed && e.enemyNumAttacks >= 2 && t > 0) {
        this.effectView = this.addChild(new canvas.app.firstBattle.view.EffectView);
        this.effectView.position.set(45, 76);
        e.effectUsed = true
    }
}
;
canvas.app.firstBattle.view.BattleView.prototype.persEffectDamage = function(t) {
    this.showDmg({
        tar: "pers",
        kick: canvas.app.battle.Const.DMG_KICK_WOUND,
        val: -t
    })
}
;
canvas.app.firstBattle.view.BattleView.prototype.enemyAttack = function() {
    var t = canvas.app.firstBattle.model;
    if (t.enemyIsDead())
        return;
    this.enemy.gotoAndPlay(t.getAnimationNameByZone(canvas.Functions.random(3) + 1));
    setTimeout(this.enemyAttackDamage.bind(this), 700)
}
;
canvas.app.firstBattle.view.BattleView.prototype.enemyAttackDamage = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_DAMAGE)
}
;
canvas.app.firstBattle.view.BattleView.prototype.persTurn = function() {
    var t = canvas.app.firstBattle.model;
    this.persIdle();
    if (t.myTurn && !t.enemyIsDead()) {
        if (!t.spellsUsed && t.persNumAttacks == 3) {
            this.tipView = this.addChild(new canvas.app.firstBattle.view.TipView);
            this.tipView.position.set(-10, 76);
            this.centerView.cDot.startBlicking()
        }
        this.setCenterVisible(true)
    }
}
;
canvas.app.firstBattle.view.BattleView.prototype.enemyTurn = function() {
    var t = canvas.app.firstBattle.model;
    if (t.enemyIsDead()) {
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DEAD);
        this.sndPlay("fightover_victory")
    } else {
        this.enemy.gotoAndPlay("idle")
    }
}
;
canvas.app.firstBattle.view.BattleView.prototype.sndPlay = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "default/" + t + ".mp3")
}
;
canvas.app.firstBattle.view.CenterView = function() {
    this._mode;
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, t)
        }
    });
    canvas.px.Container.call(this);
    this.controls = new canvas.px.Container;
    this.addChild(this.controls);
    this.cDot = new canvas.app.firstBattle.view.CenterDotView(this);
    this.addChild(this.cDot);
    this.cDot.setIcon(canvas.app.battle.Const.MODE_ATTACK);
    this.cAttack = new canvas.app.firstBattle.view.CenterAttackView(this);
    this.cAttack.activate();
    this.hotkeyShowersCont = new canvas.px.Container;
    this.addChild(this.hotkeyShowersCont);
    this.hotkeyShowersCont.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.hotkeyShowersCont.visible = false;
    this.cSpells = new canvas.app.firstBattle.view.CenterSpellsView(this,this.hotkeyShowersCont);
    this.mode = canvas.app.battle.Const.MODE_ATTACK
}
;
canvas.app.firstBattle.view.CenterView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterView.prototype.activeBlock = function(t) {
    canvas.app.battle.log("cCenter:active_block " + t);
    this.cAttack.activeBlock(t)
}
;
canvas.app.firstBattle.view.CenterView.prototype.applyMask = function(t) {
    this.cAttack.applyMask(t)
}
;
canvas.app.firstBattle.view.CenterView.prototype.changeControlMode = function(t) {
    if (typeof t == "undefined")
        t = false;
    switch (this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.mode = canvas.app.battle.Const.MODE_SPELLS;
        if (!t) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 1, canvas.app.battle.Const.TO_FS_PF_MAGIC])
        }
        this.cAttack.deactivate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.mode = canvas.app.battle.Const.MODE_ATTACK;
        if (!t) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_MAGIC]);
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED])
        }
        this.cSpells.deactivate();
        this.hotkeyShowersCont.visible = false;
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
        break
    }
    this.cDot.setIcon(this.mode, t);
    canvas.app.firstBattle.model.mode = this.mode
}
;
canvas.app.firstBattle.view.CenterView.prototype.controlDeactivated = function() {
    switch (this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.cAttack.activate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.cSpells.activate();
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
        break
    }
}
;
canvas.app.firstBattle.view.CenterView.prototype.addControl = function(t) {
    if (t.parent != this.controls) {
        this.controls.addChild(t)
    } else {
        canvas.app.battle.log('WARN: "' + t + '" already contains in controls', 10027008)
    }
}
;
canvas.app.firstBattle.view.CenterView.prototype.removeControl = function(t) {
    if (t.parent == this.controls) {
        this.controls.removeChild(t)
    } else {
        canvas.app.battle.log('WARN: "' + t + '" not contains in controls', 10027008)
    }
}
;
canvas.app.firstBattle.view.CenterView.prototype.buildSpells = function(t) {
    canvas.app.battle.log("cCenter:build_spells ** ");
    this.cDot.check();
    this.cSpells.buildSpells()
}
;
canvas.app.firstBattle.view.CenterView.prototype.turnOnKeyCallbacks = function() {
    this.cDot.turnOnKeyCallbacks()
}
;
canvas.app.firstBattle.view.CenterView.prototype.turnOffKeyCallbacks = function() {
    this.cDot.turnOffKeyCallbacks()
}
;
canvas.app.firstBattle.view.CenterView.prototype.useEffect = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, t]);
    var e = canvas.app.battle.model;
    if (e.memDat[e.oppId] != null) {
        var a = e.memDat[e.oppId];
        var i = a.persFlags;
        this.coolDownStart(i)
    }
}
;
canvas.app.firstBattle.view.CenterView.prototype.useSlotConfirmed = function(t) {
    this.cSpells.useSlotConfirmed(t)
}
;
canvas.app.firstBattle.view.CenterView.prototype.setDefCooldown = function() {
    this.cSpells.setDefCooldown()
}
;
canvas.app.firstBattle.view.CenterView.prototype.spellsUnlockOnError = function(t) {
    this.cSpells.spellsUnlockOnError(t)
}
;
canvas.app.firstBattle.view.CenterView.prototype.coolDownStart = function(t) {
    if (canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED)) {
        this.cAttack.coolDownStart()
    }
}
;
canvas.app.firstBattle.view.CenterView.prototype.checkSpells = function(t) {
    this.cSpells.checkSpells(t)
}
;
canvas.app.firstBattle.view.CenterView.prototype.addSpellCoolDown = function(t, e) {
    if (typeof e == "undefined")
        e = false;
    this.cSpells.addSpellCoolDown(t, e)
}
;
canvas.app.firstBattle.view.CenterView.prototype.turnBowPanel = function(t) {}
;
canvas.app.firstBattle.view.CenterView.prototype.setVisible = function(t) {
    this.visible = t;
    if (!this.visible) {
        this.cDot.externalMouseOut()
    }
}
;
canvas.app.firstBattle.view.CenterView.prototype.attackFunc = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_ATTACK, null, t)
}
;
canvas.app.firstBattle.view.CenterView.prototype.blockSwitch = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.BLOCK_SWITCH)
}
;
canvas.app.firstBattle.view.CenterDotView = function(t) {
    canvas.px.Container.call(this);
    this.rt = t;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.position.set(-Math.round(this.bg.width / 2), -Math.round(this.bg.height / 2));
    this.bgTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_top"));
    this.bgTop.position.set(-Math.round(this.bgTop.width / 2), -Math.round(this.bgTop.height / 2));
    this.bgLight = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_light"));
    this.bgLight.position.set(this.bg.x, this.bg.y);
    this.bgLight.alpha = 0;
    this.icon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bt = new canvas.px.Graphics;
    this.bt.beginFill(0, 0);
    this.bt.drawCircle(0, 0, 34);
    this.bt.endFill();
    this.bt.interactive = true;
    this.bt.buttonMode = true;
    this.interactive = true;
    this.hint = new canvas.app.view.PxHint(canvas.Translator.getText(1711));
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.dotClickTime = 0;
    this.light = new canvas.px.Graphics;
    this.light.beginFill(16777215, .3);
    this.light.drawCircle(0, 0, 25);
    this.light.endFill();
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.addChild(this.bg);
    this.addChild(this.bgLight);
    this.addChild(this.icon);
    this.addChild(this.bt);
    this.rad = Math.round(this.bg.width / 2 - 6);
    this.msk = new canvas.px.Graphics;
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, this.rad - 1);
    this.msk.endFill();
    this.har = [[this.rad, -this.rad], [this.rad, this.rad], [-this.rad, this.rad], [-this.rad, -this.rad], [0, -this.rad]];
    this.shp = new canvas.px.Graphics;
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk);
    this.addChild(this.bgTop)
}
;
canvas.app.firstBattle.view.CenterDotView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterDotView.prototype.startBlicking = function() {
    this.blickValue = 0;
    this.interval = setInterval(this.intervalHandler.bind(this), 20)
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.intervalHandler = function() {
    var t = Math.floor(this.blickValue);
    var e = this.blickValue - t;
    this.bgLight.alpha = t % 2 == 0 ? e : 1 - e;
    this.blickValue += .05;
    if (this.blickValue > 6) {
        clearInterval(this.interval);
        this.bgLight.alpha = 0;
        this.bgLight.visible = false
    }
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.check = function() {
    if (!this.btActivated) {
        this.btActivated = true;
        this.bt.interactive = true;
        this.btIsOn = true;
        this.bt.mouseover = this.handlerBtnOver.bind(this);
        this.bt.mouseout = this.handlerBtnOut.bind(this);
        this.bt.mouseup = this.handlerBtnClick.bind(this)
    }
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.checkDot = function() {
    var t = Date.now();
    return t >= this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD && canvas.app.battle.model.oppId != 0
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.switchDot = function(t) {
    canvas.app.battle.log("CenterDot: switch, fl=" + t);
    if (t) {
        if (!this.btIsOn) {
            this.btIsOn = true;
            this.bt.interactive = true;
            this.bt.mouseover = this.handlerBtnOver.bind(this);
            this.bt.mouseout = this.handlerBtnOut.bind(this);
            this.bt.mouseup = this.handlerBtnClick.bind(this)
        }
    } else {
        if (this.btIsOn && !this.checkDot()) {
            this.btIsOn = false;
            this.bt.interactive = false;
            this.bt.mouseover = null;
            this.bt.mouseout = null;
            this.bt.mouseup = null
        }
    }
    canvas.utils.HintManager.instance.hide()
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnOver = function() {
    if (this.light.parent != this) {
        this.addChild(this.light)
    }
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnOut = function() {
    if (this.light.parent == this) {
        this.removeChild(this.light)
    }
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnClick = function() {
    this.handlerBtnOut();
    var t = Date.now();
    this.dotClickTime = t;
    this.rt.changeControlMode();
    this.switchDot(true);
    this.shp.clear();
    this.hint.text = canvas.Translator.getText(canvas.app.firstBattle.model.mode == canvas.app.battle.Const.MODE_ATTACK ? 1711 : 1712);
    canvas.app.firstBattle.model.spellsUsed = true
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.externalMouseOut = function() {
    this.handlerBtnOut()
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.setIcon = function(t, e) {
    switch (t) {
    case canvas.app.battle.Const.MODE_ATTACK:
    case canvas.app.battle.Const.MODE_SPELLS:
        this.icon.texture = canvas.ResourceLoader.getImage("ui", "battle_center_icon_" + (t == canvas.app.battle.Const.MODE_ATTACK ? "1" : !e ? "2" : "3"));
        this.icon.x = -Math.round(this.icon.width / 2);
        this.icon.y = -Math.round(this.icon.height / 2);
        break;
    default:
        canvas.app.battle.log('WARN: unknown mode "' + t + '"', 10027008);
        break
    }
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.turnOnKeyCallbacks = function() {
    this.initKeyCallbacks(true)
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.turnOffKeyCallbacks = function() {
    this.initKeyCallbacks(false)
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.initKeyCallbacks = function(t) {
    if (t && canvas.app.battle.model.hasSpells) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
    } else {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
    }
}
;
canvas.app.firstBattle.view.CenterDotView.prototype.handlerKey = function(t) {
    if (t.params.globalKeyCode == canvas.Const.TAB && canvas.app.battle.model.centerVisible && canvas.app.battle.model.hasSpells) {
        this.handlerBtnClick()
    }
}
;
canvas.app.firstBattle.view.CenterClsView = function() {
    canvas.px.Container.call(this);
    this.showVals = [.47, .67, 1];
    this.hideVals = [.67, .47, .4]
}
;
canvas.app.firstBattle.view.CenterClsView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterClsView.prototype.activate = function() {
    this.rt.addControl(this);
    this.scale.set(.4, .4);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerShow, this)
}
;
canvas.app.firstBattle.view.CenterClsView.prototype.deactivate = function() {
    this.scale.set(1, 1);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerHide, this)
}
;
canvas.app.firstBattle.view.CenterClsView.prototype.handlerShow = function() {
    this.scale.set(this.showVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++
    } else {
        canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerShow, this)
    }
}
;
canvas.app.firstBattle.view.CenterClsView.prototype.handlerHide = function() {
    this.scale.set(this.hideVals[this.frameIndex], this.hideVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++
    } else {
        canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerHide, this);
        this.rt.removeControl(this);
        this.rt.controlDeactivated()
    }
}
;
canvas.app.firstBattle.view.CenterAttackView = function(t) {
    canvas.app.firstBattle.view.CenterClsView.call(this);
    this.isCooldown = false;
    this.rt = t;
    this.rad1 = 42;
    this.rad2 = 70;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center"));
    this.bgGrey = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_grey"));
    this.bg.x = this.bgGrey.x = -Math.round(this.bg.width / 2);
    this.bg.y = this.bgGrey.y = -Math.round(this.bg.height / 2);
    this.bgMask = new canvas.px.Graphics;
    this.setBgMask(this.rad2);
    this.bg.mask = this.bgMask;
    this.bladeUp = new canvas.app.firstBattle.view.CenterBladeView(this.rt,9,-41,-55);
    this.bladeMid = new canvas.app.firstBattle.view.CenterBladeView(this.rt,39,-11,0);
    this.bladeBot = new canvas.app.firstBattle.view.CenterBladeView(this.rt,31,28,55);
    this.sectorUp = new canvas.app.firstBattle.view.CenterSectorView(0,0,-60,canvas.app.battle.Const.TOP_ATTACK_ID,this.bladeUp,this.rt.attackFunc,canvas.Translator.getText(33),canvas.Translator.getText(60));
    this.sectorMid = new canvas.app.firstBattle.view.CenterSectorView(0,0,0,canvas.app.battle.Const.MIDDLE_ATTACK_ID,this.bladeMid,this.rt.attackFunc,canvas.Translator.getText(34),canvas.Translator.getText(61));
    this.sectorBot = new canvas.app.firstBattle.view.CenterSectorView(0,0,60,canvas.app.battle.Const.BOTTOM_ATTACK_ID,this.bladeBot,this.rt.attackFunc,canvas.Translator.getText(35),canvas.Translator.getText(62));
    this.blockOn = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block1"));
    this.blockOn.position.set(-62, -22);
    this.blockOn.visible = false;
    this.blockOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block2"));
    this.blockOff.position.set(-62, -22);
    this.blockBtn = new canvas.px.Graphics;
    this.blockBtn.position.set(-62, -22);
    this.blockBtn.beginFill(0, 0);
    this.blockBtn.drawRect(0, 0, 18, 44);
    this.blockBtn.endFill();
    this.blockBtn.interactive = true;
    this.blockBtn.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this.blockBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.Translator.getText(36),canvas.Translator.getText(63)))
    });
    this.blockBtn.click = this.handlerBlockClick.bind(this);
    this.addChild(this.bgGrey);
    this.addChild(this.bg);
    this.addChild(this.bgMask);
    this.addChild(this.bladeUp);
    this.addChild(this.bladeMid);
    this.addChild(this.bladeBot);
    this.addChild(this.sectorUp);
    this.addChild(this.sectorMid);
    this.addChild(this.sectorBot);
    this.addChild(this.blockOn);
    this.addChild(this.blockOff);
    this.addChild(this.blockBtn)
}
;
canvas.app.firstBattle.view.CenterAttackView.prototype = Object.create(canvas.app.firstBattle.view.CenterClsView.prototype);
canvas.app.firstBattle.view.CenterAttackView.prototype.handlerBlockClick = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.BLOCK_CHANGE)
}
;
canvas.app.firstBattle.view.CenterAttackView.prototype.activeBlock = function(t) {
    this.blockOn.visible = t;
    this.blockOff.visible = !t
}
;
canvas.app.firstBattle.view.CenterAttackView.prototype.applyMask = function(t) {
    var e = (t & 1) == 1;
    var a = (t & 2) >> 1 == 1;
    var i = (t & 4) >> 2 == 1;
    this.sectorUp.visible = e;
    this.bladeUp.visible = e;
    this.sectorMid.visible = a;
    this.bladeMid.visible = a;
    this.sectorBot.visible = i;
    this.bladeBot.visible = i
}
;
canvas.app.firstBattle.view.CenterAttackView.prototype.setBgMask = function(t) {
    this.bgMask.clear();
    this.bgMask.beginFill(255, 1);
    this.bgMask.drawCircle(0, 0, t);
    this.bgMask.endFill()
}
;
canvas.app.firstBattle.view.CenterAttackView.prototype.coolDownStart = function() {}
;
canvas.app.firstBattle.view.CenterAttackView.prototype.setCooldown = function(t) {}
;
canvas.app.firstBattle.view.CenterAttackView.prototype.refreshBgMask = function() {
    if (Date.now() - canvas.app.battle.model.attackTime > 2050) {
        this.setBgMask(this.rad2);
        this.sectorUp.visible = this.bladeUp.visible = true;
        this.sectorMid.visible = this.bladeMid.visible = true;
        this.sectorBot.visible = this.bladeBot.visible = true;
        this.applyMask(canvas.app.battle.model.oppMask);
        if (this.rt.mode == canvas.app.battle.Const.MODE_ATTACK) {
            this.rt.cDot.switchDot(true)
        }
        if (this.mInterval) {
            clearInterval(this.mInterval);
            this.setCooldown(false)
        }
        this.rt.turnBowPanel(true)
    } else {
        var t = this.rad1 + (this.rad2 - this.rad1) * (Date.now() - this.vTime) / this.sTime;
        this.setBgMask(t)
    }
}
;
canvas.app.firstBattle.view.CenterBladeView = function(t, e, a, i) {
    canvas.px.Container.call(this);
    this.mv = [0, 2.7, 4.8, 6.3, 7.2, 7.5, 7.2, 6.3, 4.8, 2.7];
    this.mvLen = 10;
    this.rt = t;
    this.position.set(e, a);
    this.rotation = canvas.Functions.degToRad(i);
    this.bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_blade"));
    this.addChild(this.bmp)
}
;
canvas.app.firstBattle.view.CenterBladeView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterBladeView.prototype.handlerFrame = function() {
    this.mvIndex++;
    if (this.mvIndex == this.mvLen) {
        this.mvIndex = 0
    }
    this.bmp.x = this.mv[this.mvIndex]
}
;
canvas.app.firstBattle.view.CenterBladeView.prototype.over = function() {
    this.mvIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
;
canvas.app.firstBattle.view.CenterBladeView.prototype.out = function() {
    this.bmp.x = 0;
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
;
canvas.app.firstBattle.view.CenterSectorView = function(t, e, a, i, s, n, r, o) {
    canvas.px.Graphics.call(this);
    this.position.set(t, e);
    this.rotation = canvas.Functions.degToRad(a);
    this.r1 = 28;
    this.r2 = 76;
    this.ang = Math.PI / 3;
    this.shape = new canvas.px.Graphics;
    this.shape.interactive = true;
    this.addChild(this.shape);
    this.drawSector();
    this.bladeId = i;
    this.bladeLnk = s;
    this.attackFunc = n;
    this.interactive = true;
    this.buttonMode = true;
    this.mouseover = this.handlerOver.bind(this);
    this.mouseup = this.handlerClick.bind(this);
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this.shape,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(r))
    })
}
;
canvas.app.firstBattle.view.CenterSectorView.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.firstBattle.view.CenterSectorView.prototype.drawSector = function() {
    this.shape.moveTo(this.r1 * Math.sin(this.ang), this.r1 * Math.cos(this.ang));
    this.shape.beginFill(0, 0);
    this.shape.lineTo(this.r2 * Math.sin(this.ang), this.r2 * Math.cos(this.ang));
    this.shape.lineTo(this.r2 * Math.sin(this.ang * 3 / 2), this.r2 * Math.cos(this.ang * 3 / 2));
    this.shape.lineTo(this.r2 * Math.sin(this.ang * 2), this.r2 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin(this.ang * 2), this.r1 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin(this.ang * 3 / 2), this.r1 * Math.cos(this.ang * 3 / 2));
    this.endFill()
}
;
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerOver = function() {
    this.bladeLnk.over();
    this.mouseout = this.handlerOut.bind(this)
}
;
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerOut = function() {
    this.bladeLnk.out();
    this.mouseout = null
}
;
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerClick = function() {
    if (this.attackFunc) {
        this.attackFunc(this.bladeId)
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView = function(t, e) {
    canvas.app.firstBattle.view.CenterClsView.call(this);
    this.rt = t;
    this.hotkeyShowersCont = e;
    this.hotkeysPoints = [new canvas.px.Point(69,38), new canvas.px.Point(91,45), new canvas.px.Point(104,62), new canvas.px.Point(104,84), new canvas.px.Point(90,101), new canvas.px.Point(69,109), new canvas.px.Point(48,102), new canvas.px.Point(35,85), new canvas.px.Point(34,62), new canvas.px.Point(47,45)];
    this.slotsPos = [[-18, -78], [17, -67], [38, -36], [39, 0], [17, 29], [-18, 41], [-53, 29], [-75, 0], [-75, -36], [-53, -66]];
    this.spellsCont = new canvas.px.Container;
    this.tgBmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spells"));
    this.tgBmp.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.addChild(this.spellsCont);
    this.addChild(this.tgBmp);
    this.slots = {}
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype = Object.create(canvas.app.firstBattle.view.CenterClsView.prototype);
canvas.app.firstBattle.view.CenterSpellsView.prototype.buildSpells = function() {
    canvas.Functions.destroyChildren(this.spellsCont);
    this.removeAllSpellHotkeyShowers();
    canvas.Functions.destroyChildren(this.tgBmp);
    var t;
    var e;
    var a;
    for (t in canvas.app.firstBattle.model.spells) {
        e = canvas.app.firstBattle.model.spells[t];
        a = this.slotsPos[parseInt(t) - 1];
        if (a) {
            if (this.slots[t]) {
                this.slots[t].remove();
                delete this.slots[t]
            }
            this.slots[t] = new canvas.app.firstBattle.view.CenterSpellItemRenderer(this,t,a,e)
        } else {
            canvas.app.battle.log("ERR: positions for slotId=" + t + " is null", 16711680)
        }
    }
    for (var i = 0; i < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; i++) {
        if (!this.slots[i + 1]) {
            a = this.slotsPos[i];
            var s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spell_empty"));
            this.tgBmp.addChild(s);
            s.position.set(a[0] + Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2) - 1, a[1] + Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2) - 1)
        }
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.useSpellItem = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_ATTACK_SPELL, null, t)
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.useSlotConfirmed = function(t) {
    var e = canvas.app.battle.model.spells[t];
    var a = Date.now();
    var i = canvas.app.battle.model.spells[t]["cdTime"] * 1e3 + a;
    for (var s in this.slots) {
        if (canvas.app.battle.model.spells[s]["cdGripId"] == e["cdGripId"]) {
            this.slots[s].cooldownStart(a, i)
        } else {
            this.slots[s].cooldownStart(a, a + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN)
        }
    }
    this.unlock()
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.setDefCooldown = function() {
    var t = Date.now();
    var e = t + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN;
    for (var a in this.slots) {
        this.slots[a].cooldownStart(t, e)
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.spellsUnlockOnError = function(t) {
    canvas.app.battle.log("CenterSpellsView: spellsUnlockOnError " + t);
    for (var e in canvas.app.battle.model.spells) {
        if (canvas.app.battle.model.spells[e]["effId"] == t) {
            canvas.app.battle.log("spells unlocked on error");
            this.unlock();
            break
        }
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.restoreCooldowns = function() {
    for (var t in this.slots)
        this.slots[t].restoreCooldown()
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.switchDot = function(t) {
    this.rt.cDot.switchDot(t)
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.checkSpells = function(t) {
    for (var e in this.slots) {
        this.slots[e].checkSpells(t)
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.addSpellCoolDown = function(t, e) {
    if (typeof e == "undefined")
        e = false;
    for (var a in this.slots) {
        this.slots[a].addSpellCoolDown(t, true, e)
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.unlock = function() {
    this.locked = false
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.createSpellHotkeyShowers = function() {
    var t;
    var e;
    var a;
    var i;
    for (var s = 0; s < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; s++) {
        a = "";
        i = this.slots[s + 1];
        if (i) {
            a = i.getHotkeyText()
        }
        e = this.hotkeysPoints[s];
        t = new canvas.app.firstBattle.view.CenterSpellHotkeyRenderer(a);
        this.hotkeyShowersCont.addChild(t);
        t.x = e.x;
        t.y = e.y
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.removeSpellHotkeyShower = function(t) {
    var e = this.hotkeyShowersCont.children.length;
    for (var a = 0; a < e; a++) {
        if (this.hotkeyShowersCont.getChildAt(a) == t) {
            this.hotkeyShowersCont.removeChildAt(a);
            break
        }
    }
}
;
canvas.app.firstBattle.view.CenterSpellsView.prototype.removeAllSpellHotkeyShowers = function() {
    canvas.Functions.destroyChildren(this.hotkeyShowersCont)
}
;
canvas.app.firstBattle.view.CenterSpellHotkeyRenderer = function(t) {
    canvas.px.Container.call(this);
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.width = 16;
    this.bg.height = 16;
    this.addChild(this.bg);
    this.textTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16509576,this.bg.width,this.bg.height,"center");
    this.addChild(this.textTF);
    this.textTF.position.set(0, 2);
    this.textTF.text = t
}
;
canvas.app.firstBattle.view.CenterSpellHotkeyRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterSpellItemRenderer = function(t, e, a, i) {
    canvas.px.Container.call(this);
    this.spellsHotkeys = ["Q", "W", "E", "R", "T", "A", "S", "D", "F", "G"];
    this.spellsHotkeyCodes = [canvas.Const.KEYS.Q, canvas.Const.KEYS.W, canvas.Const.KEYS.E, canvas.Const.KEYS.R, canvas.Const.KEYS.T, canvas.Const.KEYS.A, canvas.Const.KEYS.S, canvas.Const.KEYS.D, canvas.Const.KEYS.F, canvas.Const.KEYS.G];
    this.rt = t;
    this.slotId = e;
    this.obj = i;
    this.position.set(a[0] - 1, a[1] - 1);
    var s = 19;
    this.bmpMsk = new canvas.px.Graphics;
    this.bmpMsk.beginFill(0, 0);
    this.bmpMsk.drawCircle(s, s, s);
    this.bmpMsk.endFill();
    this.bmp = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bmp.mask = this.bmpMsk;
    this.bmp.scale.set(38 / 60, 38 / 60);
    this.light = new canvas.px.Graphics;
    this.light.beginFill(16777215, .3);
    this.light.drawCircle(s, s, s);
    this.light.endFill();
    this.light.visible = false;
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.btn = new canvas.px.Graphics;
    this.btn.beginFill(0, 0);
    this.btn.drawCircle(s, s, s);
    this.btn.endFill();
    this.btn.buttonMode = true;
    this.btn.interactive = true;
    this.btn.mouseover = this.handlerOver.bind(this);
    this.btn.click = this.handlerClick.bind(this);
    this.cooldown = new canvas.app.firstBattle.view.CenterSpellItemCdRenderer(this);
    this.addChild(this.bmp);
    this.addChild(this.bmpMsk);
    this.addChild(this.light);
    this.addChild(this.btn);
    this.rt.spellsCont.addChild(this);
    this.addChild(this.cooldown);
    if (i["cdTime"] > 0) {
        if (i["cdLeft"] > 0) {
            var n = Date.now();
            this.cooldown.activate(n - (i["cdTime"] - i["cdLeft"]), 1e3 * i["cdLeft"] + n)
        }
    }
    this.initKeyCallbacks();
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.Translator.getText(this.obj["title"])))
    });
    this.bmp.texture = canvas.ResourceLoader.getImage("ui", this.obj.picture);
    this.interactive = true
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerClick = function() {
    if (this.cooldown.active()) {
        return
    }
    this.rt.useSpellItem(this.slotId);
    this.cooldown.showTxt()
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerOver = function() {
    this.btn.mouseout = this.handlerOut.bind(this);
    this.light.visible = true;
    if (this.cooldown.active()) {
        this.cooldown.showTxt()
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerOut = function() {
    this.light.visible = false;
    this.btn.mouseout = null;
    if (this.cooldown.active()) {
        this.cooldown.hideTxt()
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.cooldownStart = function(t, e) {
    if (this.cooldown.parent != this) {
        this.addChild(this.cooldown)
    }
    this.cooldown.activate(t, e)
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.restoreCooldown = function() {
    this.cooldown.restore()
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.cooldownCancel = function() {
    if (this.cooldown.parent == this) {
        this.removeChild(this.cooldown)
    }
    if (canvas.app.battle.model.oppId != 0) {
        this.rt.switchDot(true)
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.remove = function() {
    if (this.parent == this.rt.spellsCont) {
        this.rt.spellsCont.removeChild(this)
    } else {
        canvas.app.battle.log("ERR: this slot is not contains", 16711680)
    }
    this.rt = null
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.checkSpells = function(t) {
    if (this.cooldown.forStep()) {
        this.cooldown.cooldownDone();
        if (canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED)) {
            this.addSpellCoolDown(3050)
        }
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.addSpellCoolDown = function(t, e, a) {
    if (typeof e == "undefined")
        e = false;
    if (typeof a == "undefined")
        a = false;
    var i = Date.now();
    if (!e) {
        if (i - canvas.app.battle.model.attackTime < t) {
            this.cooldownStart(i, canvas.app.battle.model.attackTime + t)
        }
    } else {
        var s = canvas.app.battle.model.abilsFlags[canvas.app.battle.model.spells[this.slotId].effId];
        if (a && canvas.app.battle.model.testFlag(s, canvas.app.battle.Const.FS_PEF_PASSTURN))
            t = 12e5;
        this.cooldownStart(i, i + t)
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.initKeyCallbacks = function() {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerKey = function(t) {
    if (canvas.app.battle.model.centerMode == canvas.app.battle.Const.MODE_ATTACK)
        return;
    if (t.params.globalKeyCode == this.getHotkeyCode()) {
        this.handlerClick()
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.getHotkeyCode = function() {
    return this.spellsHotkeyCodes[this.slotId - 1]
}
;
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.getHotkeyText = function() {
    return this.spellsHotkeys[this.slotId - 1]
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer = function(t) {
    canvas.px.Container.call(this);
    this.rt = t;
    this.realFT = -1;
    this.realST = -1;
    this.forStepFl = false;
    this.rad = 19;
    var e = this.rad;
    this.har = [[e, -e], [e, e], [-e, e], [-e, -e], [0, -e]];
    this.shp = new canvas.px.Graphics;
    this.shp.position.set(e, e);
    this.msk = new canvas.px.Graphics;
    this.msk.position.set(e, e);
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, e - 1);
    this.msk.endFill();
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,24,16,"center");
    this.tf.position.set(e - 12, e - 8);
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk)
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.restore = function() {
    if (this.realFT > 0) {
        this.activate(0, 0)
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.activate = function(t, e) {
    if (e - t >= 12e5) {
        this.realFT = this.ftime;
        this.realST = this.stime
    } else if (this.realFT > 0) {
        t = this.realST;
        e = this.realFT;
        this.realFT = -1;
        this.activated = false
    }
    if (this.activated) {
        var a = this.ftime - t;
        var i = e - t;
        if (a < i) {
            this.stime = t;
            this.ftime = e
        }
    } else {
        this.forStepFl = e - t == canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN || e - t > 1e6;
        this.activated = true;
        this.stime = t;
        this.ftime = e;
        canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this)
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.handlerFrame = function() {
    try {
        var t = Date.now();
        if (this.har && t < this.ftime) {
            var e;
            if (this.ftime - this.stime > 1e6) {
                e = 100;
                this.ftime = t + 12e5;
                this.tf.text = ""
            } else {
                this.tf.text = Math.round((this.ftime - t) / 1e3);
                e = (t - this.stime) / (this.ftime - this.stime) * 100
            }
            this.shp.clear();
            this.shp.beginFill(0, .6);
            this.shp.moveTo(0, 0);
            var a = e * (360 / 100 / 57.2958) - 1.57;
            var i = this.rad * Math.cos(a);
            var s = this.rad * Math.sin(a);
            this.shp.lineTo(i, s);
            var n = Math.round(e % 100 / 25);
            while (n < this.har.length) {
                this.shp.lineTo(this.har[n][0], this.har[n][1]);
                n++
            }
            this.shp.endFill()
        } else {
            this.cooldownDone()
        }
    } catch (t) {}
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.cooldownDone = function() {
    this.activated = this.forStepFl = false;
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this);
    this.hideTxt();
    this.rt.cooldownCancel()
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.showTxt = function() {
    if (this.tf.parent != this) {
        this.addChild(this.tf)
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.hideTxt = function() {
    if (this.tf.parent == this) {
        this.removeChild(this.tf)
    }
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.active = function() {
    return this.activated
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.setActive = function(t) {
    this.activated = t
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.forStep = function() {
    return this.forStepFl
}
;
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.setForStep = function(t) {
    this.forStepFl = t
}
;
canvas.app.firstBattle.view.ComboHint = function() {
    canvas.px.Container.call(this);
    this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_combo_hint"));
    this.image.scale.set(0, 0);
    this.image.anchor.set(.5, .5);
    this.addChild(this.image);
    this.state = false;
    this.delayIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.firstBattle.view.ComboHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.ComboHint.prototype.frameHandler = function() {
    if (this.state) {
        if (this.delayIndex > 15) {
            if (this.image.alpha <= 0) {
                this.finish()
            } else {
                this.image.y += 4;
                this.image.alpha -= .15
            }
        } else {
            this.delayIndex++
        }
    } else {
        if (this.image.scale.x >= 1) {
            this.state = true;
            this.image.scale.set(1, 1)
        } else {
            var t = this.image.scale.x + .1;
            t = t > 1 ? 1 : t;
            this.image.scale.set(t, t)
        }
    }
}
;
canvas.app.firstBattle.view.ComboHint.prototype.finish = function() {
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.parent.removeChild(this);
    this.destroy({
        children: true
    })
}
;
canvas.app.firstBattle.view.DmgFly = function(t, e) {
    canvas.px.Container.call(this);
    this.ARR_Y = [70, 61.3, 54.55, 49.7, 46.8, 45.85, 45.85, 45.7, 45.6, 45.35, 44.95, 44.65, 44.15, 43.6, 43, 42.3, 41.6, 40.8, 39.85, 38.95, 37.9, 36.8, 35.65, 34.45, 33.1, 31.75, 30.3, 28.75, 27.2, 25.45, 23.75, 21.95, 20.1, 18.1, 16.15, 14.05, 11.85, 9.6, 7.3, 4.95, 2.5, 0];
    this.ARR_A = [0, .36, .64, .84, .96, 1, 1, 1, .99, .99, .98, .97, .96, .95, .94, .92, .91, .89, .87, .85, .83, .8, .78, .75, .72, .69, .66, .63, .59, .55, .52, .48, .44, .39, .35, .3, .26, .21, .16, .11, .05, 0];
    if (canvas.app.battle.Const.PERS_POS_X[t.tar]) {
        this.x = canvas.app.battle.Const.PERS_POS_X[t.tar];
        this.dX = this.x + Math.floor(Math.random() * 90 - 25) * (t.tar == "pers" ? 1 : -1);
        this.dX_mir = this.x + Math.floor(Math.random() * 40 + 25) * (t.tar == "pers" ? -1 : 1);
        this.whose_dmg = t.tar
    } else {
        canvas.app.battle.log("DmgFly WARN: dmg_fly, unknown target = " + t.tar, 16711680);
        this.dX = this.x
    }
    this.y = 20 * e + 60;
    this.yy = this.y;
    this.dV = Math.random() * .7 + .65;
    this.dVx = .065;
    var a;
    var i;
    if (t.crit == 1) {
        t.kick = canvas.app.battle.Const.DMG_KICK_CRIT
    }
    switch (t.kick) {
    case canvas.app.battle.Const.DMG_KICK_DODGE:
        a = 39168;
        i = canvas.Translator.getText(16);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_WOUND:
        a = 16777215;
        i = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_CRIT:
        a = 16711680;
        i = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_BLOCK:
        a = 170;
        i = canvas.Translator.getText(31);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_CURE:
        a = 39168;
        i = this.val2str(t.val);
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_MANA:
        a = 4605695;
        i = this.val2str(t.val);
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_ABSORB:
        a = 16776960;
        i = canvas.Translator.getText(17) + " " + String(t.val);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_RESIST:
        a = 16711935;
        i = canvas.Translator.getText(18) + " " + String(t.val) + "%";
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_IMMUNITY:
        a = 65535;
        i = canvas.Translator.getText(46);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_NOCHANCE:
        a = 65535;
        i = canvas.Translator.getText(47);
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_FULLRES:
        a = 65535;
        i = canvas.Translator.getText(18);
        this.dX = this.x;
        break;
    default:
        canvas.app.battle.log("DmgFly WARN: showDMG unknown kick = " + t.kick, 16711680)
    }
    var s = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_20_BOLD_STROKE,a,30,20,"center");
    s.text = i;
    this.addChild(s);
    this.dmg_fly_index = 0;
    this.updatePos();
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
;
canvas.app.firstBattle.view.DmgFly.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.DmgFly.prototype.val2str = function(t) {
    if (t > 0) {
        return "+" + String(t)
    }
    return String(t)
}
;
canvas.app.firstBattle.view.DmgFly.prototype.frameHandler = function() {
    this.dmg_fly_index++;
    if (this.dmg_fly_index < this.ARR_A.length) {
        this.updatePos()
    } else {
        canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.parent.removeChild(this);
        this.destroy({
            children: true
        })
    }
}
;
canvas.app.firstBattle.view.DmgFly.prototype.updatePos = function() {
    this.y = this.yy + this.ARR_Y[this.dmg_fly_index] * this.dV;
    this.alpha = this.ARR_A[this.dmg_fly_index] * this.dV;
    if (Math.abs(this.x - this.dX) > 1) {
        this.x -= (this.x - this.dX) * this.dVx
    }
}
;
canvas.app.firstBattle.view.EffectView = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "inferno_effect")));
    this.interactive = true;
    this.hint = new canvas.app.view.PxHint;
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    });
    this.seconds = 12;
    this.update();
    this.interval = setInterval(this.intervalHandler.bind(this), 1e3)
}
;
canvas.app.firstBattle.view.EffectView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.EffectView.prototype.update = function() {
    this.hint.text = canvas.Translator.getText(1713, [this.seconds])
}
;
canvas.app.firstBattle.view.EffectView.prototype.intervalHandler = function() {
    this.seconds--;
    this.update();
    if (this.seconds < 1) {
        clearInterval(this.interval);
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_REMOVE, null, {
            target: this
        });
        this.destroy({
            children: true
        });
        return
    }
    if (this.seconds % 3 == 0)
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_EFFECT_DAMAGE)
}
;
canvas.app.firstBattle.view.FinishView = function() {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "victory_win")));
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "victory_win_title")));
    t.position.set(102, 138);
    t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7158057,256,100,"center"));
    t.position.set(10, 2);
    t.text = canvas.Translator.getText(1716);
    t.position.set(102, 176);
    var e = this.addChild(new canvas.px.Mask(150,28,0,0));
    e.position.set(150, 270);
    e.interactive = true;
    e.buttonMode = true;
    e.click = this.clickHandler.bind(this)
}
;
canvas.app.firstBattle.view.FinishView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.FinishView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.FINISH)
}
;
canvas.app.firstBattle.view.HpMpView = function() {
    canvas.px.Container.call(this);
    this.hpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpPers = new canvas.px.Graphics;
    this.hpPers.beginFill(0, 1);
    this.hpPers.lineStyle(0, 0, 0);
    this.hpPers.drawRect(0, 0, this.hpPersFill.width, this.hpPersFill.height);
    this.hpPers.endFill();
    this.addChild(this.hpPersFill);
    this.addChild(this.hpPers);
    this.hpPersFill.mask = this.hpPers;
    this.hpPersFill.position.set(42, 38);
    this.hpPers.position.set(42, 38);
    this.hpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpOpp = new canvas.px.Graphics;
    this.hpOpp.beginFill(0, 1);
    this.hpOpp.lineStyle(0, 0, 0);
    this.hpOpp.drawRect(0, 0, this.hpOppFill.width, this.hpOppFill.height);
    this.hpOpp.endFill();
    this.addChild(this.hpOppFill);
    this.addChild(this.hpOpp);
    this.hpOppFill.mask = this.hpOpp;
    this.hpOppFill.scale.x = -1;
    this.hpOppFill.position.set(403, 38);
    this.hpOpp.position.set(403, 38);
    this.mpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpPers = new canvas.px.Graphics;
    this.mpPers.beginFill(0, 1);
    this.mpPers.lineStyle(0, 0, 0);
    this.mpPers.drawRect(0, 0, this.mpPersFill.width, this.mpPersFill.height);
    this.mpPers.endFill();
    this.addChild(this.mpPersFill);
    this.addChild(this.mpPers);
    this.mpPersFill.mask = this.mpPers;
    this.mpPersFill.position.set(42, 52);
    this.mpPers.position.set(42, 52);
    this.mpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpOpp = new canvas.px.Graphics;
    this.mpOpp.beginFill(0, 1);
    this.mpOpp.lineStyle(0, 0, 0);
    this.mpOpp.drawRect(0, 0, this.mpOppFill.width, this.mpOppFill.height);
    this.mpOpp.endFill();
    this.addChild(this.mpOppFill);
    this.addChild(this.mpOpp);
    this.mpOppFill.mask = this.mpOpp;
    this.mpOppFill.position.set(275, 52);
    this.mpOpp.position.set(403, 52);
    this.hpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.hpPersText.position.set(42, 38);
    this.addChild(this.hpPersText);
    this.mpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.mpPersText.position.set(42, 52);
    this.addChild(this.mpPersText);
    this.hpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.hpOppText.position.set(275, 38);
    this.addChild(this.hpOppText);
    this.mpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center");
    this.mpOppText.position.set(275, 52);
    this.addChild(this.mpOppText);
    this.setHpPers(0, 0);
    this.setMpPers(0, 0);
    this.setHpOpp(0, 0);
    this.setMpOpp(0, 0)
}
;
canvas.app.firstBattle.view.HpMpView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.HpMpView.prototype.setHpPers = function(t, e) {
    this.setValue(this.hpPersText, this.hpPers, t, e, 1)
}
;
canvas.app.firstBattle.view.HpMpView.prototype.setMpPers = function(t, e) {
    this.setValue(this.mpPersText, this.mpPers, t, e, 1)
}
;
canvas.app.firstBattle.view.HpMpView.prototype.setHpOpp = function(t, e) {
    this.setValue(this.hpOppText, this.hpOpp, t, e, -1)
}
;
canvas.app.firstBattle.view.HpMpView.prototype.setMpOpp = function(t, e) {
    this.setValue(this.mpOppText, this.mpOpp, t, e, -1)
}
;
canvas.app.firstBattle.view.HpMpView.prototype.setValue = function(t, e, a, i, s) {
    i = i < 0 ? 0 : i;
    a = a > i ? i : a < 0 ? 0 : a;
    if (i != 0) {
        t.text = a + "/" + i;
        e.scale.x = a / i * s
    } else {
        t.text = "0/0";
        e.scale.x = 0
    }
}
;
canvas.app.firstBattle.view.LevelView = function() {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,3616041,25,18,"center");
    this.addChild(this.field);
    this.field.position.set(5, 13)
}
;
canvas.app.firstBattle.view.LevelView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.LevelView.prototype.setLevel = function(t) {
    this.field.text = t
}
;
canvas.app.firstBattle.view.NickView = function() {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,16697738,120,10,"left");
    this.addChild(this.field);
    this.field.y = 2;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.clickHandler, this)
}
;
canvas.app.firstBattle.view.NickView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.NickView.prototype.update = function(t, e) {
    this.nick = t;
    this.id = e;
    if (this.nick.length <= 18) {
        this.field.text = this.nick
    } else {
        this.field.text = this.nick.substr(0, 16) + "..."
    }
    this.field.x = -Math.round(this.field.width / 2) - 5;
    this.visible = true
}
;
canvas.app.firstBattle.view.NickView.prototype.unshow = function() {
    this.nick = "";
    this.id = 0;
    this.field.text = "";
    this.visible = false
}
;
canvas.app.firstBattle.view.SelectGenderWindow = function() {
    canvas.px.Container.call(this);
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "select_win_back")));
    t = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,t.width - 20,20,"center"));
    t.position.set(10, 2);
    t.text = canvas.Translator.getText(1702);
    this.selectField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,9788490,80,20,"center"));
    this.selectField.position.set(63, 30);
    this.leftButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    this.leftButton.scale.x = -1;
    this.leftButton.position.set(70, 33);
    this.rightButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    this.rightButton.position.set(156, 33);
    this.selectButton = this.addChild(new canvas.app.view.OldButton(9722697));
    this.selectButton.setTitle(canvas.Translator.getText(1705));
    this.selectButton.position.set(29, 52);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftButton, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightButton, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.selectButton, this.selectHandler, this);
    this.update()
}
;
canvas.app.firstBattle.view.SelectGenderWindow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.SelectGenderWindow.prototype.update = function() {
    this.selectField.text = canvas.Translator.getText(canvas.app.firstBattle.model.gender == canvas.Const.GENDER.MALE ? 1703 : 1704)
}
;
canvas.app.firstBattle.view.SelectGenderWindow.prototype.changeHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.GENDER_CHANGE)
}
;
canvas.app.firstBattle.view.SelectGenderWindow.prototype.selectHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.GENDER_SELECT)
}
;
canvas.app.firstBattle.view.TipView = function() {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE,-1,canvas.app.firstBattle.Const.WIDTH,18,"center");
    this.addChild(this.field);
    this.field.text = canvas.Translator.getText(1714);
    setTimeout(this.hide.bind(this), 3e3);
    this.interactive = false
}
;
canvas.app.firstBattle.view.TipView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.TipView.prototype.update = function() {}
;
canvas.app.firstBattle.view.TipView.prototype.hide = function() {
    this.interval = setInterval(this.intervalHandler.bind(this), 50)
}
;
canvas.app.firstBattle.view.TipView.prototype.intervalHandler = function() {
    this.alpha -= .05;
    if (this.alpha <= 0) {
        clearInterval(this.interval);
        this.destroy({
            children: true
        })
    }
}
;
canvas.app.puzzle.Event = {
    ENTER_FRAME: "Puzzle.ENTER_FRAME",
    GAME_OVER: "Puzzle.GAME_OVER",
    FINISH_GAME: "Puzzle.FINISH_GAME",
    CLOSE_GAME: "Puzzle.CLOSE_GAME",
    CONTINUE_GAME: "Puzzle.CONTINUE_GAME"
};
canvas.app.puzzle.Main = function(t) {
    canvas.px.Container.call(this);
    this.model = t;
    this.windowsManager = new canvas.utils.WindowsManager;
    this.view = new canvas.app.puzzle.View;
    this.addChild(this.view);
    this.windowsContainer = new canvas.px.Container;
    this.addChild(this.windowsContainer);
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.GAME_OVER, null, this.gameOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.FINISH_GAME, null, this.finishGameHandler, this);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.CLOSE_GAME, null, this.closeGameHandler, this);
    this.puzzle = new canvas.app.puzzle.view.PuzzleWindow;
    canvas.utils.WindowsManager.instance.openWindow(this.puzzle);
    this.initPuzzle()
}
;
canvas.app.puzzle.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.Main.prototype.initPuzzle = function() {
    this.model.gameFinished = false;
    this.puzzle.initGame()
}
;
canvas.app.puzzle.Main.prototype.gameOverHandler = function() {
    this.model.gameFinished = true;
    this.puzzle.finishGame()
}
;
canvas.app.puzzle.Main.prototype.finishGameHandler = function() {
    var t = new canvas.utils.URLRequest(canvas.Config.entryPoint + "?object=user&action=puzzle_finish&json_mode_on=1");
    t.load()
}
;
canvas.app.puzzle.Main.prototype.closeGameHandler = function() {
    closePuzzle()
}
;
canvas.app.puzzle.Main.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.GAME_OVER, null, this.gameOverHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.FINISH_GAME, null, this.finishGameHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.CLOSE_GAME, null, this.closeGameHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: true
    }]);
    this.puzzle.destroy()
}
;
canvas.app.puzzle.Model = function(t) {
    this.pictureUrl = this.ok(t.pictureURI) ? t.pictureURI : "testImage.png";
    this.segmentsOnSide = this.ok(t.segmentsOnSide) ? parseInt(t.segmentsOnSide) : 3;
    this.quickStart = this.ok(t.quickStart) ? parseInt(t.quickStart) == 1 : false
}
;
canvas.app.puzzle.Model.prototype.ok = function(t) {
    return t != undefined
}
;
canvas.app.puzzle.View = function() {
    canvas.px.Container.call(this)
}
;
canvas.app.puzzle.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.view.PuzzleList = function() {
    canvas.px.Container.call(this);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.CONTINUE_GAME, null, this.finishAnimHandler, this);
    this.click = this.clickHandler.bind(this);
    this.interactive = true;
    this.interactiveChildren = true
}
;
canvas.app.puzzle.view.PuzzleList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.view.PuzzleList.prototype.create = function(t, e) {
    if (e == undefined)
        e = 4;
    this.clear();
    this.items = new Array;
    var a;
    var i;
    var s;
    var n;
    this.sizeW = t.width;
    this.sizeH = t.height;
    var r = Math.floor(t.width / e);
    var o = Math.floor(t.height / e);
    var l;
    for (s = 0; s < e; s++)
        for (n = 0; n < e; n++) {
            a = new canvas.px.Texture(t,new canvas.px.Rectangle(s * r,n * o,r,o));
            l = new canvas.app.puzzle.view.PuzzleRenderer(a,new canvas.px.Point(s,n));
            this.addChild(l)
        }
}
;
canvas.app.puzzle.view.PuzzleList.prototype.clear = function() {
    var t = this.numChildren;
    var e;
    while (t--) {
        e = this.getChildAt(t);
        e.dispose();
        this.removeChild(e)
    }
}
;
canvas.app.puzzle.view.PuzzleList.prototype.randomize = function(t) {
    if (t == undefined)
        t = false;
    var e = this.numChildren;
    var a;
    var i;
    var s;
    var n;
    while (e--) {
        a = this.getChildAt(e);
        if (a.point.equals(a.newPoint)) {
            i = this.getChildAt(canvas.Functions.random(e));
            s = a.newPoint;
            a.newPoint = i.newPoint;
            i.newPoint = s;
            if (t) {
                a.goNewPoint(true);
                i.goNewPoint(true)
            }
        }
    }
    if (t) {
        this.alpha = 0;
        n = new canvas.px.Tween.Tween(this).to({
            alpha: 1
        }, 1e3).start()
    } else {
        this.animateParts()
    }
}
;
canvas.app.puzzle.view.PuzzleList.prototype.animateParts = function() {
    var t = this.numChildren;
    var e = new canvas.px.Point(Math.round(this.sizeW * .5),Math.round(this.sizeH * .5));
    while (t--)
        this.getChildAt(t).animate(e)
}
;
canvas.app.puzzle.view.PuzzleList.prototype.clickHandler = function(t) {
    var e = t.target;
    var a;
    if (e) {
        if (this.selectedRenderer) {
            if (this.selectedRenderer != e) {
                a = this.selectedRenderer.newPoint;
                this.selectedRenderer.newPoint = e.newPoint;
                e.newPoint = a;
                e.goNewPoint();
                this.selectedRenderer.goNewPoint();
                this.setChildIndex(e, this.numChildren - 1)
            }
            this.selectedRenderer.selected = false;
            this.selectedRenderer = null
        } else {
            this.selectedRenderer = e;
            this.selectedRenderer.selected = true;
            this.setChildIndex(e, this.numChildren - 1)
        }
    }
}
;
canvas.app.puzzle.view.PuzzleList.prototype.finishAnimHandler = function() {
    this.testGameOver()
}
;
canvas.app.puzzle.view.PuzzleList.prototype.testGameOver = function() {
    if (canvas.app.puzzle.model.gameFinished)
        return;
    var t = this.numChildren;
    while (t--) {
        if (!this.getChildAt(t).isDone())
            return
    }
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.GAME_OVER)
}
;
canvas.app.puzzle.view.PuzzleList.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.CONTINUE_GAME, null, this.finishAnimHandler, this)
}
;
canvas.app.puzzle.view.PuzzleRenderer = function(t, e) {
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            var e = 6;
            this.line0.height = this.line1.height = this.line2.height = this.line3.height = t ? e : 1
        }
    });
    canvas.px.Container.call(this);
    this.point = e;
    this.newPoint = e.clone();
    this.x = this.point.x * t.width;
    this.y = this.point.y * t.height;
    this.sprite = this.addChild(new canvas.px.Sprite);
    this.texture = t;
    this.sprite.texture = t;
    this.interactive = this.interactiveChildren = false;
    var a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    a.interactive = false;
    a.width = this.texture.width;
    this.line0 = a;
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    a.interactive = false;
    a.scale.y = -1;
    a.width = this.texture.width;
    a.y = this.texture.height - 0;
    this.line1 = a;
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    a.interactive = false;
    a.scale.y = -1;
    a.width = this.texture.height;
    a.rotation = canvas.Functions.degToRad(90);
    this.line2 = a;
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    a.interactive = false;
    a.width = this.texture.height;
    a.rotation = canvas.Functions.degToRad(90);
    a.x = this.texture.width;
    this.line3 = a
}
;
canvas.app.puzzle.view.PuzzleRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.view.PuzzleRenderer.prototype.isDone = function() {
    return this.point.equals(this.newPoint)
}
;
canvas.app.puzzle.view.PuzzleRenderer.prototype.animate = function(t) {
    new canvas.px.Tween.Tween(this).to({
        x: t.x - Math.round(this.width * .5),
        y: t.y - Math.round(this.height * .5)
    }, 700).onComplete(this.animationComplete.bind(this)).start()
}
;
canvas.app.puzzle.view.PuzzleRenderer.prototype.animationComplete = function() {
    this.goNewPoint()
}
;
canvas.app.puzzle.view.PuzzleRenderer.prototype.goNewPoint = function(t) {
    if (t == undefined)
        t = false;
    var e = new canvas.px.Point(this.newPoint.x * this.width,this.newPoint.y * this.height);
    if (t) {
        this.x = e.x;
        this.y = e.y;
        this.interactive = this.interactiveChildren = true
    } else {
        this.interactive = this.interactiveChildren = false;
        new canvas.px.Tween.Tween(this).to({
            x: e.x,
            y: e.y
        }, 700).onComplete(this.continueGame.bind(this)).start()
    }
}
;
canvas.app.puzzle.view.PuzzleRenderer.prototype.continueGame = function() {
    this.interactive = this.interactiveChildren = true;
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.CONTINUE_GAME)
}
;
canvas.app.puzzle.view.PuzzleRenderer.prototype.dispose = function() {
    if (this.texture)
        this.texture.destroy()
}
;
canvas.app.puzzle.view.PuzzleWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, canvas.app.puzzle.model.width, canvas.app.puzzle.model.height);
    this.dragAvailable = false;
    this.container = this.addChild(new canvas.px.Container);
    this.container.position.set(20, 30);
    this.beginButton = this.addChild(new canvas.app.view.MainButton);
    this.beginButton.visible = false;
    this.list = new canvas.app.puzzle.view.PuzzleList;
    this.visible = false;
    this.interactive = true;
    this.interactiveChildren = true
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.puzzle.view.PuzzleWindow.prototype.initGame = function() {
    canvas.Functions.destroyChildren(this.container);
    this.container.addChild(this.list);
    this.beginButton.setTitle(canvas.Translator.getText(1523));
    this.texture = canvas.ResourceLoader.getTexture("puzzleImage");
    this.resize(this.texture.width + 42, this.texture.height + 100);
    this.content = this.container.addChild(new canvas.px.Sprite);
    this.content.texture = this.texture;
    this.content.alpha = 0;
    if (canvas.app.puzzle.model.quickStart) {
        this.beginGameQuick()
    } else {
        new canvas.px.Tween.Tween(this.content).to({
            alpha: 1
        }, 500).onComplete(this.initAnimationComplete.bind(this)).start()
    }
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.initAnimationComplete = function() {
    this.beginButton.visible = true
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.beginAnimationComplete = function() {
    this.list.randomize()
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.beginGame = function() {
    this.list.create(this.texture, canvas.app.puzzle.model.segmentsOnSide);
    new canvas.px.Tween.Tween(this.content).to({
        alpha: 0
    }, 1e3).onComplete(this.beginAnimationComplete.bind(this)).start();
    this.beginButton.visible = false
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.beginGameQuick = function() {
    this.list.create(this.texture, canvas.app.puzzle.model.segmentsOnSide);
    this.list.randomize(true)
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.clickHandler = function(t) {
    if (canvas.Functions.findParent(this.beginButton, t.target)) {
        if (canvas.app.puzzle.model.gameFinished) {
            canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.FINISH_GAME)
        } else {
            this.beginGame()
        }
        return
    }
    canvas.px.Window.prototype.clickHandler.call(this, t)
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.resize = function(t, e) {
    this.visible = true;
    this.setSize(t, e);
    this.beginButton.y = e - 60;
    this.beginButton.x = Math.round((t - this.beginButton.width) * .5)
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.finishGame = function() {
    new canvas.px.Tween.Tween(this.content).to({
        alpha: 1
    }, 1e3).onComplete(this.finishAnimationComplete.bind(this)).start()
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.finishAnimationComplete = function() {
    this.list.clear();
    this.beginButton.setTitle(canvas.Translator.getText(1524));
    this.beginButton.visible = true
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.CLOSE_GAME)
}
;
canvas.app.puzzle.view.PuzzleWindow.prototype.destroy = function() {
    this.list.destroy()
}
;
canvas.modules.ChatClock = function(t, e, a) {
    t.style.backgroundImage = "url('images/tbl-main_chat-clock-bg.gif')";
    var i = document.createElement("img");
    t.appendChild(i);
    i.src = "images/tbl-main_chat-clock-btn.gif";
    i.style.cursor = "pointer";
    i.style.position = "relative";
    i.style.top = 12;
    i.onclick = this.clickHandler.bind(this);
    var s = document.createElement("span");
    t.appendChild(s);
    s.style.position = "relative";
    s.style.color = "#f9dfa1";
    s.style.fontSize = 13;
    s.style.fontWeight = "bold";
    s.style.top = 3;
    s.style.left = 2;
    this.span = s;
    var n = new Date;
    if (a == undefined) {
        a = n.getHours() + ":" + n.getMinutes() + ":" + n.getSeconds()
    }
    var r = a.split(":");
    var o = new Date;
    o.setHours(parseInt(r[0]));
    o.setMinutes(parseInt(r[1]));
    o.setSeconds(parseInt(r[2]));
    this.delta = o.getTime() - n.getTime();
    setInterval(this.timerHandler.bind(this), 1e4);
    this.timerHandler()
}
;
canvas.modules.ChatClock.prototype.clickHandler = function() {
    chat_change_time_zone()
}
;
canvas.modules.ChatClock.prototype.timerHandler = function() {
    var t = new Date(Date.now() + this.delta);
    this.span.innerText = canvas.Functions.setNumberLen(t.getHours()) + ":" + canvas.Functions.setNumberLen(t.getMinutes())
}
;
canvas.modules.ChatClock.prototype.getTime = function() {
    return Date.now() + this.delta
}
;
canvas.modules.ChatClock.prototype.time_shift = function(t) {
    this.delta += parseInt(t) * 6e4
}
;
canvas.modules.EservProxy = function() {
    this.callBacks = {};
    this.proxyRequest = null;
    this.ON_CONNECT = "onConnect";
    this.ON_DISCONNECT = "onDisconnect";
    this.ON_ERROR = "onError";
    this.ON_DATA = "onData";
    this.CONNECT_TIMEOUT = 1e4;
    this.stack = []
}
;
canvas.modules.EservProxy.prototype.connect = function(t, e, a, i) {
    this.proxy = a;
    this.createProxy();
    this.firstRequest = this.proxyRequest;
    this.proxyLoad();
    this.connectRequest = this.proxyRequest;
    if (this.timer)
        clearInterval(this.timer);
    this.timer = setInterval(this.frameHandler.bind(this), 100);
    this.connectTime = Date.now();
    window[this.callBacks[this.ON_CONNECT]]()
}
;
canvas.modules.EservProxy.prototype.createProxy = function() {
    if (this.proxyRequest) {
        canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyRequest, this.proxyCompleteHandler, this);
        canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyRequest, this.proxyErrorHandler, this)
    }
    this.proxyRequest = new canvas.utils.URLRequest(this.proxy,"POST",null,"arraybuffer");
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyRequest, this.proxyCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyRequest, this.proxyErrorHandler, this)
}
;
canvas.modules.EservProxy.prototype.frameHandler = function() {
    if (this.firstRequest) {
        if (this.firstRequest.request.readyState == 4 && this.firstRequest.request.status == 200) {
            this.parseResponse(this.firstRequest.request.response);
            clearInterval(this.timer);
            this.firstRequest = null
        } else if (Date.now() - this.connectTime > this.CONNECT_TIMEOUT) {
            clearInterval(this.timer);
            this.firstRequest = null
        }
    }
}
;
canvas.modules.EservProxy.prototype.proxyCompleteHandler = function() {
    if (this.proxyRequest.request.response) {
        var t = this.proxyRequest.request.response.byteLength;
        if (t > 0) {
            this.parseResponse(this.proxyRequest.request.response)
        } else {}
    }
    this.proxyLoad()
}
;
canvas.modules.EservProxy.prototype.proxyErrorHandler = function() {
    this.proxyLoad()
}
;
canvas.modules.EservProxy.prototype.proxyLoad = function() {
    var t = this.stack.length > 0 ? this.stack.pop() : undefined;
    if (t == undefined) {
        var e = new ArrayBuffer(1);
        var a = new Uint8Array(e);
        a[0] = 0;
        this.proxyRequest.load(undefined, e, false)
    } else {
        this.proxyRequest.load(undefined, t, false)
    }
    if (this.timeout)
        clearTimeout(this.timeout);
    this.timeout = setTimeout(this.timerHandler.bind(this), 3e4)
}
;
canvas.modules.EservProxy.prototype.timerHandler = function() {
    this.proxyRequest.abort();
    this.proxyLoadData()
}
;
canvas.modules.EservProxy.prototype.proxyLoadData = function(t) {
    if (t != undefined)
        this.stack.push(t);
    this.createProxy();
    this.proxyLoad()
}
;
canvas.modules.EservProxy.prototype.sendRequest = function(t) {
    var e = canvas.px.AMF.stringify(this.objectToArray(t));
    this.proxyLoadData(e)
}
;
canvas.modules.EservProxy.prototype.addCallback = function(t, e) {
    this.callBacks[t] = e
}
;
canvas.modules.EservProxy.prototype.httpRequest = function() {}
;
canvas.modules.EservProxy.prototype.getLog = function() {}
;
canvas.modules.EservProxy.prototype.objectToArray = function(t) {
    var e = [];
    for (var a in t) {
        if (typeof t[a] == "string" || typeof t[a] == "number") {
            e[a] = t[a]
        } else {
            e[a] = this.objectToArray(t[a])
        }
    }
    return e
}
;
canvas.modules.EservProxy.prototype.parseResponse = function(t) {
    var e, a, i = new Uint8Array(t);
    var s, n = 0, r = i.length;
    while (true) {
        if (n + 4 > r)
            break;
        a = new DataView(t,n,4).getUint32(0);
        n += 4;
        if (n + a > r)
            break;
        e = "";
        n += a;
        for (s = n - a; s < n; s++) {
            e += String.fromCharCode(i[s])
        }
        e = canvas.px.AMF.parse(e);
        window[this.callBacks[this.ON_DATA]](this.arrayToObjectDoubleBackslash(e))
    }
}
;
canvas.modules.EservProxy.prototype.arrayToObjectDoubleBackslash = function(t) {
    var e = new Object;
    var a;
    var i = [];
    var s;
    for (a in t) {
        s = t[a];
        a = a.replace(/"/g, "");
        if (Array.isArray(s)) {
            e[a] = this.arrayToObjectDoubleBackslash(s)
        } else if (typeof s == "string") {
            e[a] = s.replace(/\\/g, "\\\\")
        } else {
            e[a] = s
        }
    }
    return e
}
;
